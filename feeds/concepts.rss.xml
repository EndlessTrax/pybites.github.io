<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyBites - Concepts</title><link>https://pybit.es/</link><description>A Community that Masters Python through Code Challenges</description><lastBuildDate>Fri, 20 Oct 2017 12:00:00 +0200</lastBuildDate><item><title>Learning Python Decorators by Example</title><link>https://pybit.es/decorators-by-example.html</link><description>&lt;p&gt;Decorators are a sometimes overlooked feature and they might be hard to grasp for beginning Pythonistas. I agree with Aaron Maxwell that mastering them "can massively magnify the positive impact of the code you write", so make sure you add them to your toolkit if not done so already. In this article I explain what they do, why you want to use them and give some practical examples.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Fri, 20 Oct 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-10-20:/decorators-by-example.html</guid><category>decorators</category><category>design patterns</category><category>logging</category><category>caching</category><category>memoization</category><category>Flask</category><category>Django</category><category>properties</category><category>classmethod</category><category>staticmethod</category><category>lru_cache</category><category>mock.patch</category><category>contextmanager</category></item><item><title>The Importance of Refactoring Code</title><link>https://pybit.es/refactoring.html</link><description>&lt;p&gt;In this quick post I discuss why refactoring code is one of the most important parts of the learning process.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Thu, 13 Jul 2017 19:02:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-07-13:/refactoring.html</guid><category>python</category><category>beginner</category><category>learning</category><category>examples</category><category>code</category><category>refactoring</category></item><item><title>Next Time I Will Use Pandas to Parse Html Tables</title><link>https://pybit.es/pandas-parse-html-table.html</link><description>&lt;p&gt;Last week I did some html table parsing with BeautifulSoup and regex. It turns out there is an easier way to do this: Pandas.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Thu, 08 Jun 2017 12:46:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-06-08:/pandas-parse-html-table.html</guid><category>BeautifulSoup</category><category>regex</category><category>Pandas</category><category>parsing</category><category>data</category><category>data cleaning</category><category>energy</category><category>json</category><category>csv</category><category>html</category></item><item><title>OOP Beyond the Basics: Using Properties for Encapsulation, Computation and Refactoring</title><link>https://pybit.es/property-decorator.html</link><description>&lt;p&gt;In this article I share my learning of the property decorator coding a simple Account class. I think it's an unmissable tool in your (Python) OOP toolkit.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Wed, 31 May 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:pybit.es,2017-05-31:/property-decorator.html</guid><category>oop</category><category>property</category><category>decorators</category><category>encapsulation</category><category>computation</category><category>dunder</category><category>refactoring</category><category>pytest</category><category>2vs3</category><category>getter</category><category>setter</category></item><item><title>Generators are Awesome, Learning by Example</title><link>https://pybit.es/generators.html</link><description>&lt;p&gt;Learn what a Generator is and check out some different examples.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Fri, 17 Mar 2017 09:00:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-03-17:/generators.html</guid><category>python</category><category>tips</category><category>code</category><category>pybites</category><category>generators</category><category>iteration</category><category>yield</category></item><item><title>Don't let mutability of compound objects fool you!</title><link>https://pybit.es/mutability.html</link><description>&lt;p&gt;In this article I explain the difference between shallow versus deep copy with a working example. It's an important concept when working with compound objects.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Tue, 07 Mar 2017 11:00:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-03-07:/mutability.html</guid><category>list</category><category>mutable</category><category>copy</category><category>deepcopy</category></item><item><title>Python Iteration</title><link>https://pybit.es/python_iteration.html</link><description>&lt;p&gt;Iteration in Python is incredibly simple compared to C and other languages. It's easy... maybe a little TOO easy...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Thu, 19 Jan 2017 19:00:00 +0100</pubDate><guid isPermaLink="false">tag:pybit.es,2017-01-19:/python_iteration.html</guid><category>python</category><category>tips</category><category>tricks</category><category>iteration</category><category>resources</category></item></channel></rss>