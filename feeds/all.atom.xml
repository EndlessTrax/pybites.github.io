<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/all.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2018-10-21T11:12:00+02:00</updated><entry><title>PyBites Twitter Digest - Issue 33, 2018</title><link href="https://pybit.es/twitter_digest_201833.html" rel="alternate"></link><published>2018-10-21T11:12:00+02:00</published><updated>2018-10-21T11:12:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-21:/twitter_digest_201833.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Python Bytes celebrate their 100th Podcast Episode! Congrats to Mike and Brian!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just two short years in the making, &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt; and &lt;a href="https://twitter.com/@mkennedy" target="_blank"&gt;@mkennedy&lt;/a&gt; are thrilled to present &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; episode 100!‚Ä¶ &lt;a href="https://t.co/B2g2R291t7" title="https://t.co/B2g2R291t7" target="_blank"&gt;https://t.co/B2g2R291t7&lt;/a&gt;&lt;/p&gt;‚Äî Python Bytes Podcast (@pythonbytes) &lt;a href="https://twitter.com/pythonbytes/status/1053309680078991360" data-datetime="2018-10-19T15:39:31+00:00"&gt;October 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Automation Panda (Andy Knight!) at it again with an article on Python Colloquialisms&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Automation Panda - Speaking 'Pythonese' (colloquialisms for quick reference) ü§îüëçüèº &lt;a href="https://t.co/AvOhDT5BeV" title="https://t.co/AvOhDT5BeV" target="_blank"&gt;https://t.co/AvOhDT5BeV&lt;/a&gt;&lt;/p&gt;‚Äî Environment &amp;amp; TechüéÉüéÉ (@enviro_dev) &lt;a href="https://twitter.com/enviro_dev/status/1051884748186906624" data-datetime="2018-10-15T17:17:21+00:00"&gt;October 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A quick guide to squashing git commits&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePracticalDev:" target="_blank"&gt;@ThePracticalDev:&lt;/a&gt; Method &lt;a href="https://twitter.com/search/#1:" target="_blank"&gt;#1:&lt;/a&gt; one commit to rule the master branch Method &lt;a href="https://twitter.com/search/#2:" target="_blank"&gt;#2:&lt;/a&gt; not that much! Method &lt;a href="https://twitter.com/search/#3:" target="_blank"&gt;#3:&lt;/a&gt; getting picky { author: &lt;a href="https://twitter.com/@hivickyl‚Ä¶" target="_blank"&gt;@hivickyl‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Martin Uribe (@clamytoe) &lt;a href="https://twitter.com/clamytoe/status/1053606769115742208" data-datetime="2018-10-20T11:20:03+00:00"&gt;October 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;sudo pip install is bad! (Just use Virtual Environments!)&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Stop using sudo pip install &lt;a href="https://t.co/q3UJrZWzYb" title="https://t.co/q3UJrZWzYb" target="_blank"&gt;https://t.co/q3UJrZWzYb&lt;/a&gt; by &lt;a href="https://twitter.com/@eLabFTW" target="_blank"&gt;@eLabFTW&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1052742980350562305" data-datetime="2018-10-18T02:07:40+00:00"&gt;October 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;PyBites Data Analysis by Martin! Loved reading through this!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Pretty amazing that Pybites Blog Challenges had over 300 distinct github interactions in such a short time!" Chec‚Ä¶ &lt;a href="https://t.co/hjgkmFVMrx" title="https://t.co/hjgkmFVMrx" target="_blank"&gt;https://t.co/hjgkmFVMrx&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1053412232489562112" data-datetime="2018-10-19T22:27:02+00:00"&gt;October 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Pretty cool data viz of where the Python Developers Survey respondents are&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ewa_jodlowska:" target="_blank"&gt;@ewa_jodlowska:&lt;/a&gt; This is where we are with the Python Developers Survey: 7,455 responses from 139 countries! Let's keep the responses com‚Ä¶&lt;/p&gt;‚Äî Jason Wattier (@jmwatt3) &lt;a href="https://twitter.com/jmwatt3/status/1052970712435167233" data-datetime="2018-10-18T17:12:35+00:00"&gt;October 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Congratulations to the latest PSF Fellow Members (Q3 2018)!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePSF:" target="_blank"&gt;@ThePSF:&lt;/a&gt; Python Software Foundation Fellow Members for Q3 2018 &lt;a href="https://t.co/7VlXNM5ezG" title="https://t.co/7VlXNM5ezG" target="_blank"&gt;https://t.co/7VlXNM5ezG&lt;/a&gt;&lt;/p&gt;‚Äî Naomi Ceder (@NaomiCeder) &lt;a href="https://twitter.com/NaomiCeder/status/1050230777609416706" data-datetime="2018-10-11T03:45:04+00:00"&gt;October 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;I'm pretty sure we've all seen this in action...&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"There is nothing more unproductive than to build something efficiently that should not have been built at all." - Milt Bryce&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1053263748880887808" data-datetime="2018-10-19T12:37:01+00:00"&gt;October 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Dan Bader is taking over PyCodersWeekly!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I've got some news to share‚ÄîI'm the new owner and curator-in-chief at &lt;a href="https://twitter.com/@pycoders," target="_blank"&gt;@pycoders,&lt;/a&gt; and I'm super excited about it üòä C‚Ä¶ &lt;a href="https://t.co/EaFeya4Ynx" title="https://t.co/EaFeya4Ynx" target="_blank"&gt;https://t.co/EaFeya4Ynx&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/1052289195614429184" data-datetime="2018-10-16T20:04:29+00:00"&gt;October 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Properties such as \p{Alphabetic} can be easier to read than [A-Za-z]. Works better with internationalization as well.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1052575399916523521" data-datetime="2018-10-17T15:01:45+00:00"&gt;October 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A site to share your .(dot)config files! How awesome is this!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/9hy1c4tNFx" title="https://t.co/9hy1c4tNFx" target="_blank"&gt;https://t.co/9hy1c4tNFx&lt;/a&gt; # This site allows people to share their dot config files. For instance, they have a collec‚Ä¶ &lt;a href="https://t.co/pob7uo9lZl" title="https://t.co/pob7uo9lZl" target="_blank"&gt;https://t.co/pob7uo9lZl&lt;/a&gt;&lt;/p&gt;‚Äî Command Line Magic (@climagic) &lt;a href="https://twitter.com/climagic/status/1053276105552076801" data-datetime="2018-10-19T13:26:07+00:00"&gt;October 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Flashback!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Do you remember this ? How does that make you feel ? &lt;a href="https://t.co/7AfjVBMxxs" title="https://t.co/7AfjVBMxxs" target="_blank"&gt;https://t.co/7AfjVBMxxs&lt;/a&gt;&lt;/p&gt;‚Äî Project Jupyter (@ProjectJupyter) &lt;a href="https://twitter.com/ProjectJupyter/status/1053489951428423680" data-datetime="2018-10-20T03:35:51+00:00"&gt;October 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Ten Simple Rules for Reproducible Research in Jupyter Notebook preprint&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@peterwrose:" target="_blank"&gt;@peterwrose:&lt;/a&gt; Ten Simple Rules for Reproducible Research in Jupyter Notebook preprint now available: &lt;a href="https://t.co/4KZmtvPQkm" title="https://t.co/4KZmtvPQkm" target="_blank"&gt;https://t.co/4KZmtvPQkm&lt;/a&gt; and example‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/1053334832481214465" data-datetime="2018-10-19T17:19:28+00:00"&gt;October 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;User Authentication in Flask with Okta&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@siddhantgoel:" target="_blank"&gt;@siddhantgoel:&lt;/a&gt; How to Add User Authentication to Flask Apps with Okta /via &lt;a href="https://twitter.com/@fullstackpython" target="_blank"&gt;@fullstackpython&lt;/a&gt; &lt;a href="https://t.co/m2cAoBIECi" title="https://t.co/m2cAoBIECi" target="_blank"&gt;https://t.co/m2cAoBIECi&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#flask" target="_blank"&gt;#flask&lt;/a&gt; &lt;a href="https://twitter.com/search/#aut‚Ä¶" target="_blank"&gt;#aut‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/1053304044758810624" data-datetime="2018-10-19T15:17:08+00:00"&gt;October 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Build Graph Nets in Tensorflow&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;graph_nets - Build Graph Nets in Tensorflow &lt;a href="https://t.co/dN0AD91EPc" title="https://t.co/dN0AD91EPc" target="_blank"&gt;https://t.co/dN0AD91EPc&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/1052988331825516545" data-datetime="2018-10-18T18:22:36+00:00"&gt;October 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="podcast"></category><category term="testing"></category><category term="git"></category><category term="data visualisation"></category><category term="PSF"></category><category term="regex"></category><category term="CLI"></category><category term="Jupyter"></category><category term="Okta"></category><category term="Flask"></category><category term="Tensorflow"></category><category term="graph nets"></category></entry><entry><title>Code Challenge 55 - #100DaysOfCode Curriculum Generator</title><link href="https://pybit.es/codechallenge55.html" rel="alternate"></link><published>2018-10-16T12:47:00+02:00</published><updated>2018-10-16T12:47:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-16:/codechallenge55.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, Welcome to Pybites Code Challenge 55! In this challenge we're asking that you create your own #100DaysOfCode Curriculum Generator.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is an immense amount to be learned simply by tinkering with things. - Henry Ford&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hey Pythonistas,&lt;/p&gt;
&lt;p&gt;It's time for another code challenge! This week we're asking you to create your own #100DaysOfCode Curriculum Generator.&lt;/p&gt;
&lt;p&gt;Sounds exciting? It gets even better: with this challenge you can even be featured on &lt;a href="https://codechalleng.es/"&gt;our platform&lt;/a&gt;! Read on ...&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Did you notice that every serious progress starts with a plan? This is why we are big advocates of the &lt;a href="https://www.100daysofcode.com"&gt;#100DaysOfCode&lt;/a&gt;. Heck we even build &lt;a href="https://talkpython.fm/100days?utm_source=pybites"&gt;a whole Python course around it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So here is the deal: PyBites is expanding its &lt;em&gt;&lt;a href="https://codechalleng.es/100days"&gt;100 Days tracker ("grid") feature&lt;/a&gt;&lt;/em&gt;: we want folks to add their own curriculums or &lt;em&gt;learning paths&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Only one requirement: return a valid JSON response&lt;/h3&gt;
&lt;p&gt;You can make this as simple or sophisticated as you want, the only thing we request is a standard response JSON template so we can easily parse it on the platform:&lt;/p&gt;
&lt;p&gt;Built with &lt;a href="http://www.objgen.com"&gt;ObjGen&lt;/a&gt; -&amp;gt; &lt;a href="http://www.objgen.com/json/models/q2S4Q"&gt;http://www.objgen.com/json/models/q2S4Q&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    {
    &amp;quot;title&amp;quot;: &amp;quot;title of your 100 days&amp;quot;,
    &amp;quot;version&amp;quot;: 0.1,
    &amp;quot;github_repo&amp;quot;: &amp;quot;https://github.com/pybites/100DaysOfCode&amp;quot;,
    &amp;quot;tasks&amp;quot;: [
        {
        &amp;quot;day&amp;quot;: 1,
        &amp;quot;activity&amp;quot;: &amp;quot;what you need to do this day?&amp;quot;,
        &amp;quot;done&amp;quot;: false
        },
        {
        &amp;quot;day&amp;quot;: 2,
        &amp;quot;activity&amp;quot;: &amp;quot;what you need to do this day?&amp;quot;,
        &amp;quot;done&amp;quot;: false
        },
        {
        &amp;quot;day&amp;quot;: 3,
        &amp;quot;activity&amp;quot;: &amp;quot;what you need to do this day?&amp;quot;,
        &amp;quot;done&amp;quot;: false
        },
    ...
    ...
        {
        &amp;quot;day&amp;quot;: 100,
        &amp;quot;activity&amp;quot;: &amp;quot;milestone ... 100 days done&amp;quot;,
        &amp;quot;done&amp;quot;: false
        }
    ]
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Update 17/10/2018:&lt;/strong&gt; we took &lt;code&gt;startDate&lt;/code&gt; and &lt;code&gt;goals&lt;/code&gt; out because these are not relevant for the learning path, more for the cosumers of it. &lt;code&gt;github_repo&lt;/code&gt; is optional.&lt;/p&gt;
&lt;h3&gt;An example&lt;/h3&gt;
&lt;p&gt;Here is what we plan to do, maybe it serves as an idea how you could code this challenge up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as I (Bob) want to learn Data Science I am selecting 4 or 5 books I want to go through&lt;/li&gt;
&lt;li&gt;as #100DaysOfCode works best by spending an hour a day I am dividing the books in &lt;em&gt;n&lt;/em&gt; pages to read every day&lt;/li&gt;
&lt;li&gt;I am going to add the books to &lt;a href="http://pbreadinglist.herokuapp.com"&gt;our reading list app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;keeping it generic, my script will accept a bunch of book IDs (URLs) from that app and scrape the title and number of pages for each book&lt;/li&gt;
&lt;li&gt;I calculate the daily number of pages to read every day and define page ranges for each of the 100 days&lt;/li&gt;
&lt;li&gt;I convert this to the required JSON output above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you like this idea, we opened an API endpoint to more easily pull in book info based on (Google) book ID, for example: &lt;a href="http://pbreadinglist.herokuapp.com/api/books/bRpYDgAAQBAJ"&gt;http://pbreadinglist.herokuapp.com/api/books/bRpYDgAAQBAJ&lt;/a&gt;. Just replace the bookid in this endpoint.&lt;/p&gt;
&lt;h3&gt;More ideas&lt;/h3&gt;
&lt;p&gt;Of course it does not have to be centered around books, it can be any other way you like to plan your #100DaysOfCode. As long as you return the required JSON. &lt;/p&gt;
&lt;p&gt;Other ideas that come to mind: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set out your plan in a Google sheet and parse that,&lt;/li&gt;
&lt;li&gt;Make a curriculum pointing to various Lynda/Safaribooks/Pluralsight courses and try to make a daily task list scraping those sites,&lt;/li&gt;
&lt;li&gt;Make a curriculum parsing one or more (Pycon) YouTube feeds,&lt;/li&gt;
&lt;li&gt;Make a curriculum parsing our blog challenges and Bites of Py exercises,&lt;/li&gt;
&lt;li&gt;It all comes down to planning your resources and break them down into 100 digestible units. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual, this is a challenge that came about wanting to &lt;em&gt;scratch our own itch&lt;/em&gt;. Lack ideas? Remember there is always something you can enhance or automate for yourself or somebody else, and by doing so sharpening your coding skills!  &lt;/p&gt;
&lt;h3&gt;Be featured&lt;/h3&gt;
&lt;p&gt;If you want to share your learning path with our community let us know in your PR linking to your JSON file and a short description. We will then add it to &lt;a href="https://codechalleng.es/100days/"&gt;our 100 days grid app&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you need help getting ready with Github, see our new &lt;a href="https://youtu.be/vJsyLSZxqVw"&gt;instruction video&lt;/a&gt;.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;PyBites Community&lt;/h2&gt;
&lt;p&gt;A few more things before we take off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do you want to discuss this challenge and share your Pythonic journey with other passionate Pythonistas? Confirm your email on our platform then request access to our Slack via &lt;a href="https://codechalleng.es/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites is here to challenge you because becoming a better Pythonista requires practice, a lot of it. For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or ping us on our Slack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="code challenge"></category><category term="challenges"></category><category term="100DaysOfCode"></category><category term="json"></category><category term="books"></category><category term="learning"></category><category term="data science"></category></entry><entry><title>Code Challenge 54 - Python Clipboard History - Review</title><link href="https://pybit.es/codechallenge54_review.html" rel="alternate"></link><published>2018-10-16T12:40:00+02:00</published><updated>2018-10-16T12:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-16:/codechallenge54_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge54.html"&gt;Python Clipboard History&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge54.html"&gt;Python Clipboard History&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h2&gt;Reminder: new structure review post / Hacktoberfest is back!&lt;/h2&gt;
&lt;p&gt;From now on we will merge our solution into our Community branch and include anything noteworthy here, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we are learning just like you, we are all equals :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we &lt;em&gt;need&lt;/em&gt; the PRs too ;) ... as part of &lt;a href="https://hacktoberfest.digitalocean.com"&gt;Hacktoberfest No. 5&lt;/a&gt; that just kicked of (5 PRs and you get a cool t-shirt)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Don't be shy, share your work!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Community Pull Requests&lt;/h2&gt;
&lt;p&gt;A good 10+ PRs this week, amazing!&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://github.com/pybites/challenges/tree/community/54"&gt;awesome PRs by our community for PCC54&lt;/a&gt; (or from fork: &lt;code&gt;git checkout community &amp;amp;&amp;amp; git merge upstream/community&lt;/code&gt;):&lt;/p&gt;
&lt;h3&gt;Featured&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/tree/community/54/vipinreyo"&gt;vipinreyo's Clipboard Viewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="vipinreyo's Clipboard Viewer" src="https://github.com/pybites/challenges/blob/community/54/vipinreyo/Clipboard_viewer_screenshot.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/tree/community/54/Lanseuo"&gt;Lanseuo's Clipboard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lanseuo's Clipboard" src="https://github.com/pybites/challenges/blob/community/54/Lanseuo/screenshot.png?raw=true"&gt;&lt;/p&gt;
&lt;h3&gt;PCC54 Lessons&lt;/h3&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Refreshed pypeclip and sqlite modules. PyQT5 documentation is evolving. Hence there are not much code available in the public domain to play around with, which is a constraint in designing GUIs for Python apps using QT.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;I had to really think about how to monitor the clipboard and copy the text from it just ONCE, ie, no immediate duplicates. It was more the thought process around it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;I learned some new things about tkinter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Gave me the chance to finally play with python 3.7's dataclasses, although not by much though.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Really nice one to practice various skills. I made a &lt;a href="http://projects.bobbelderbos.com/clipper/clipper.mp4"&gt;clipboard cache queue&lt;/a&gt;, a bit like vim buffers (used: deque, clear terminal, class, property, pyperclip, termcolor)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Read Code for Fun and Profit&lt;/h2&gt;
&lt;p&gt;You can look at all submitted code &lt;a href="https://github.com/pybites/challenges/pulls?q=is%3Apr+is%3Aclosed"&gt;here&lt;/a&gt; and/or &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;on our Community branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other learnings we spotted in Pull Requests for other challenges this week: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(PCC01) how &lt;code&gt;with&lt;/code&gt; works in python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC13) I tweaked your tests in order to make it pass with my data structure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC39) Played around with 'fixture' and the scope of the fixture.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC47) This one was time consuming because I had to look up how to graph all of these, but it was an excellent learning exercise!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC51) Expanded my skills of working with the databases within python and brushed up on some rusty SQL skills&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks to everyone for your participation in our blog code challenges! &lt;a href="https://codechalleng.es/challenges/"&gt;Keep the PRs coming&lt;/a&gt; and include a README.md with one or more screenshots if you want to be featured in this weekly review post.&lt;/p&gt;
&lt;p&gt;Keep the PRs coming, again this month it counts for &lt;strong&gt;&lt;a href="https://hacktoberfest.digitalocean.com"&gt;Hacktoberfest&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;h2&gt;Need more Python Practice?&lt;/h2&gt;
&lt;p&gt;Subscribe to our blog (sidebar) to get a new PyBites Code Challenge (PCC) in your inbox every start of the week.&lt;/p&gt;
&lt;p&gt;And/or take any of our 50+ challenges &lt;a href="https://codechalleng.es/challenges/"&gt;on our platform&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Prefer coding self contained Python exercises in the comfort of your browser? Try our growing collection of &lt;em&gt;&lt;a href="https://codechalleng.es/bites/"&gt;Bites of Py&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Want to do the &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;lang=en"&gt;#100DaysOfCode&lt;/a&gt; but not sure what to work on? Take &lt;a href="https://talkpython.fm/100days?utm_source=pybites"&gt;our course&lt;/a&gt; and/or start logging your progress &lt;a href="https://codechalleng.es/100days/"&gt;on our platform&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="code challenge"></category><category term="challenges"></category><category term="pyperclip"></category></entry><entry><title>PyBites Twitter Digest - Issue 32, 2018</title><link href="https://pybit.es/twitter_digest_201832.html" rel="alternate"></link><published>2018-10-14T13:50:00+02:00</published><updated>2018-10-14T13:50:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-14:/twitter_digest_201832.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Kenneth Reitz's latest project, a new Python Web Framework - "Responder"!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I'm very happy to announce the release of my heavy first iteration of my new web framework, "Responder":‚Ä¶ &lt;a href="https://t.co/BU9auBTdd7" title="https://t.co/BU9auBTdd7" target="_blank"&gt;https://t.co/BU9auBTdd7&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth ‚ò§ Reitz (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/1050723571004309505" data-datetime="2018-10-12T12:23:15+00:00"&gt;October 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;30 Amazing Python Projects of 2018 covered on the latest Talk Python Episode&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just published &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; episode 181 -- Thirty amazing Python projects of 2018 with &lt;a href="https://twitter.com/@brianokken." target="_blank"&gt;@brianokken.&lt;/a&gt; Have a listen at &lt;a href="https://t.co/Ot2CO3q5FY" title="https://t.co/Ot2CO3q5FY" target="_blank"&gt;https://t.co/Ot2CO3q5FY&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/1050895566350237696" data-datetime="2018-10-12T23:46:42+00:00"&gt;October 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Visually trace the execution of your Python programs with LivePython&lt;/h3&gt;
&lt;p&gt;Submitted by @code-monk08&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cool! Visually trace the execution of your &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; programs with &lt;a href="https://twitter.com/search/#LivePython" target="_blank"&gt;#LivePython&lt;/a&gt; - &lt;a href="https://t.co/2jWj5Gp5qS" title="https://t.co/2jWj5Gp5qS" target="_blank"&gt;https://t.co/2jWj5Gp5qS&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1051315247477211136" data-datetime="2018-10-14T03:34:22+00:00"&gt;October 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Our very own Rob details his project for moving from Evernote to ZimWiki&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New project: From Evernote to ZimWiki by way of Python: &lt;a href="https://t.co/1HW3X5EiAe" title="https://t.co/1HW3X5EiAe" target="_blank"&gt;https://t.co/1HW3X5EiAe&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/@jmwatt3" target="_blank"&gt;@jmwatt3&lt;/a&gt;&lt;/p&gt;‚Äî Rob Fowler (@BlueGator4) &lt;a href="https://twitter.com/BlueGator4/status/1050567590802804737" data-datetime="2018-10-12T02:03:26+00:00"&gt;October 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Great reminder on &lt;code&gt;.format()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Submitted by @dgjustice&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Reminder: don‚Äôt use &lt;a href="https://twitter.com/search/#python‚Äôs" target="_blank"&gt;#python‚Äôs&lt;/a&gt; .format() on untrusted format strings: &lt;a href="https://t.co/nDtzwHdmbf" title="https://t.co/nDtzwHdmbf" target="_blank"&gt;https://t.co/nDtzwHdmbf&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/1050476614671355905" data-datetime="2018-10-11T20:01:56+00:00"&gt;October 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python everywhere! Very cool&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This year‚Äôs Nobel Prize in economics was awarded to a Python convert. May be a good story to tell about python in n‚Ä¶ &lt;a href="https://t.co/JpXpWMDRth" title="https://t.co/JpXpWMDRth" target="_blank"&gt;https://t.co/JpXpWMDRth&lt;/a&gt;&lt;/p&gt;‚Äî skpl (@snlkapil) &lt;a href="https://twitter.com/snlkapil/status/1049543756343439360" data-datetime="2018-10-09T06:15:05+00:00"&gt;October 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Reminder: our challenges count toward Hacktoberfest!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ùå Halloween üéÉ ‚úÖ &lt;a href="https://twitter.com/search/#Hacktoberfest2018" target="_blank"&gt;#Hacktoberfest2018&lt;/a&gt; üë®üèΩ‚Äçüíª With &lt;a href="https://twitter.com/search/#Thanksgiving2018" target="_blank"&gt;#Thanksgiving2018&lt;/a&gt; here in Canada, I'm thankful for open source and ho‚Ä¶ &lt;a href="https://t.co/KUrfnlwZ8F" title="https://t.co/KUrfnlwZ8F" target="_blank"&gt;https://t.co/KUrfnlwZ8F&lt;/a&gt;&lt;/p&gt;‚Äî Sean (@SeanPrashad) &lt;a href="https://twitter.com/SeanPrashad/status/1049361223752372224" data-datetime="2018-10-08T18:09:46+00:00"&gt;October 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Install Tensorflow using Conda&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here are two pretty big reasons why you should install &lt;a href="https://twitter.com/search/#Tensorflow" target="_blank"&gt;#Tensorflow&lt;/a&gt; using &lt;a href="https://twitter.com/search/#conda" target="_blank"&gt;#conda&lt;/a&gt; instead of pip &amp;gt;&amp;gt;‚Ä¶ &lt;a href="https://t.co/Utzo88nLzV" title="https://t.co/Utzo88nLzV" target="_blank"&gt;https://t.co/Utzo88nLzV&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow Beat (@TensorBeat) &lt;a href="https://twitter.com/TensorBeat/status/1050054862921187329" data-datetime="2018-10-10T16:06:03+00:00"&gt;October 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;2018 DevOps RoadMap. Bookmark this one!&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The 2018 DevOps RoadMap by &lt;a href="https://twitter.com/@javinpaul" target="_blank"&gt;@javinpaul&lt;/a&gt; at &lt;a href="https://twitter.com/@hackernoon." target="_blank"&gt;@hackernoon.&lt;/a&gt; An illustrated guide to becoming a DevOps Engineer with links‚Ä¶ &lt;a href="https://t.co/7u35PKgFoC" title="https://t.co/7u35PKgFoC" target="_blank"&gt;https://t.co/7u35PKgFoC&lt;/a&gt;&lt;/p&gt;‚Äî ITNEXT (@ITNEXT_io) &lt;a href="https://twitter.com/ITNEXT_io/status/1050017095629631488" data-datetime="2018-10-10T13:35:58+00:00"&gt;October 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;The Python Mock Cookbook&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;[Python Tip] "You always need to mock the thing where it‚Äôs imported TO, not where it‚Äôs imported FROM." from "Python‚Ä¶ &lt;a href="https://t.co/OGzkgOarwn" title="https://t.co/OGzkgOarwn" target="_blank"&gt;https://t.co/OGzkgOarwn&lt;/a&gt;&lt;/p&gt;‚Äî Paolo Melchiorre (@pauloxnet) &lt;a href="https://twitter.com/pauloxnet/status/1049973313467011072" data-datetime="2018-10-10T10:42:00+00:00"&gt;October 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Link tests with the function it's testing with coverage.py!&lt;/h3&gt;
&lt;p&gt;Submitted by @dgjustice&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Link tests with the function it tests... "Who tests what is here: &lt;a href="https://t.co/rZeq8PJG5X" title="https://t.co/rZeq8PJG5X" target="_blank"&gt;https://t.co/rZeq8PJG5X&lt;/a&gt; 5.0a3" Who Tests What ann‚Ä¶ &lt;a href="https://t.co/v2DPNG4Wpt" title="https://t.co/v2DPNG4Wpt" target="_blank"&gt;https://t.co/v2DPNG4Wpt&lt;/a&gt;&lt;/p&gt;‚Äî Python People (@pythonpeople) &lt;a href="https://twitter.com/pythonpeople/status/1049432869783900160" data-datetime="2018-10-08T22:54:28+00:00"&gt;October 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Exercises for Pandas!&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Pandas by Solutions and Examples &lt;a href="https://t.co/TZp7bkzKgx" title="https://t.co/TZp7bkzKgx" target="_blank"&gt;https://t.co/TZp7bkzKgx&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/1049434271302205440" data-datetime="2018-10-08T23:00:02+00:00"&gt;October 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Write Better Functions with Jeff Knupp&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Write Better &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Functions: &lt;a href="https://t.co/YaQIwbxNqa." title="https://t.co/YaQIwbxNqa." target="_blank"&gt;https://t.co/YaQIwbxNqa.&lt;/a&gt; New blog post that outlines the characteristics of "good" functions in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Jeff Knupp (@jeffknupp) &lt;a href="https://twitter.com/jeffknupp/status/1050525731019771904" data-datetime="2018-10-11T23:17:06+00:00"&gt;October 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;functools reduce in action&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#pythontip" target="_blank"&gt;#pythontip&lt;/a&gt; from &lt;a href="https://twitter.com/@singhjayp:" target="_blank"&gt;@singhjayp:&lt;/a&gt; reduce(f, seq, initializer) returns a single value constructed by calling 'f' on the f‚Ä¶ &lt;a href="https://t.co/ALcHvKBGYF" title="https://t.co/ALcHvKBGYF" target="_blank"&gt;https://t.co/ALcHvKBGYF&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1050280088510423042" data-datetime="2018-10-11T07:01:01+00:00"&gt;October 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python Data Science Cheatsheet!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python For Data Science Cheat Sheet - Importing Data &lt;a href="https://t.co/SSNAJrdMzw" title="https://t.co/SSNAJrdMzw" target="_blank"&gt;https://t.co/SSNAJrdMzw&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1050810208564346880" data-datetime="2018-10-12T18:07:31+00:00"&gt;October 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Responder"></category><category term="podcast"></category><category term="strings"></category><category term="Hacktoberfest"></category><category term="conda"></category><category term="TensorFlow"></category><category term="DevOps"></category><category term="learning"></category><category term="Pandas"></category><category term="Mocking"></category><category term="functions"></category><category term="functools"></category><category term="ZimWiki"></category><category term="data science"></category></entry><entry><title>Code Challenge 54 - Python Clipboard History</title><link href="https://pybit.es/codechallenge54.html" rel="alternate"></link><published>2018-10-09T22:23:00+02:00</published><updated>2018-10-09T22:23:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-09:/codechallenge54.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, Welcome to Pybites Code Challenge 54! In this challenge we're asking that you create your own Clipboard History tool!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hey Pythonistas,&lt;/p&gt;
&lt;p&gt;It's time for another code challenge! This week we're asking you to create your own Clipboard History Tool in Python.&lt;/p&gt;
&lt;p&gt;This is something that we've been wanting to do for a while so we're looking forward to seeing what you come up with!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The idea here is to capture whatever the user copies to the clipboard (think CTRL C) and "store" it in some way such that the user can see the history of everything they've copied for later reference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A great starting point would be to look at the &lt;a href="https://pypi.org/project/pyperclip/"&gt;&lt;code&gt;pyperclip&lt;/code&gt;&lt;/a&gt; module for Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This can be as simple or as complex as you like. If all you manage to do is get the basics down, that's fine!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consider creating a GUI!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How will you store text copied to the clipboard? Persistent storage or will the history be wiped every time the script is stopped and started?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How far back will your historical data go?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting ready with Github, see our new &lt;a href="https://youtu.be/vJsyLSZxqVw"&gt;instruction video&lt;/a&gt;.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;PyBites Community&lt;/h2&gt;
&lt;p&gt;A few more things before we take off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do you want to discuss this challenge and share your Pythonic journey with other passionate Pythonistas? Confirm your email on our platform then request access to our Slack via &lt;a href="https://codechalleng.es/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites is here to challenge you because becoming a better Pythonista requires practice, a lot of it. For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or ping us on our Slack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="code challenge"></category><category term="challenges"></category><category term="pyperclip"></category></entry><entry><title>Code Challenge 53 - Query the Spotify API - Review</title><link href="https://pybit.es/codechallenge53_review.html" rel="alternate"></link><published>2018-10-09T12:40:00+02:00</published><updated>2018-10-09T12:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-09:/codechallenge53_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge53.html"&gt;Query the Spotify API&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge53.html"&gt;Query the Spotify API&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h2&gt;Reminder: new structure review post / Hacktoberfest is back!&lt;/h2&gt;
&lt;p&gt;From now on we will merge our solution into our Community branch and include anything noteworthy here, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we are learning just like you, we are all equals :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we &lt;em&gt;need&lt;/em&gt; the PRs too ;) ... as part of &lt;a href="https://hacktoberfest.digitalocean.com"&gt;Hacktoberfest No. 5&lt;/a&gt; that just kicked of (5 PRs and you get a cool t-shirt)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Don't be shy, share your work!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Community Pull Requests&lt;/h2&gt;
&lt;p&gt;20+ PRs this week, wow!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git pull origin community
...
&lt;span class="m"&gt;104&lt;/span&gt; files changed, &lt;span class="m"&gt;242507&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out the &lt;a href="https://github.com/pybites/challenges/tree/community/53"&gt;awesome PRs by our community for PCC53&lt;/a&gt; (or from fork: &lt;code&gt;git checkout community &amp;amp;&amp;amp; git merge upstream/community&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;Some learnings for PCC53:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spotify Web apis are not so straight forward. It takes a bit of time to understand the type of Authorization approach to call the APIs. I've started with Spotipy module and did a test run. Once all good, I've walked through the Spotipy code in github and coded my own Wrapper classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;The Spotify API was more complex than I realised. Had to wrap my head around their authentication which was tough.  Parsing the returned super nested dict was also a bit of a challenge. Once I figured that out though it was a matter of presenting it. I wrapped it all in Flask so that was fun!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;Always nice to keep practicing Flask and Web APIs. Funny to see that out of Git's 200 additions, 152 lines are html/css and the Python took no more than 30 lines, awesome when you can just plug these robust libraries in!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Read Code for Fun and Profit&lt;/h2&gt;
&lt;p&gt;You can look at all submitted code &lt;a href="https://github.com/pybites/challenges/pulls?q=is%3Apr+is%3Aclosed"&gt;here&lt;/a&gt; and/or &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;on our Community branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other learnings we spotted in Pull Requests for other challenges this week: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(PCC01) I learned a shortcut using .read().splitlines() instead of .readlines() and requiring me to .split() afterwords.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC02) Learned about itertools.permutations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC03) I got introduced to difflib.SequenceMatcher and itertools.product. Which are both very nice and I learned about a method of the Counter object called most_common which I didn't know about yet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC19) Interacted with any Google API for the first time. Learned about doing an HTTP POST. Learning about clean code. Explored .gitignore&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC22) Learned a lot on web scraping, selenium and email notifications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC28) New package 'bokeh'!. So easy to plot the data!. Python ecosystem for visualization is awesome. It's a good challenge to get hands own on Flask and Bokeh.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC42) Find consecutive equal words, how to handle greedy regex&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;

&lt;blockquote&gt;
&lt;p&gt;(PCC44) This was a good challenge to go back to the basics of Data analysis (cleaning, parsing and manipulate).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are happy to include more detailed learning, just send us a &lt;em&gt;quotable blurb&lt;/em&gt; for this post when preparing your PR &lt;a href="https://codechalleng.es/challenges/"&gt;on our platform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to everyone for your participation in our blog code challenges! &lt;/p&gt;
&lt;p&gt;Keep the PRs coming, again this month it counts for &lt;strong&gt;&lt;a href="https://hacktoberfest.digitalocean.com"&gt;Hacktoberfest&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;h2&gt;Need more Python Practice?&lt;/h2&gt;
&lt;p&gt;Subscribe to our blog (sidebar) to get a new PyBites Code Challenge (PCC) in your inbox every start of the week.&lt;/p&gt;
&lt;p&gt;And/or take any of our 50+ challenges &lt;a href="https://codechalleng.es/challenges/"&gt;on our platform&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Prefer coding self contained exercises in the comfort of your browser? Try our growing collection of &lt;a href="https://codechalleng.es/bites/"&gt;Bites of Py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want to do the &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;lang=en"&gt;#100DaysOfCode&lt;/a&gt; but not sure what to work on? Take &lt;a href="https://talkpython.fm/100days?utm_source=pybites"&gt;our course&lt;/a&gt; and/or start logging your progress &lt;a href="https://codechalleng.es/100days/"&gt;on our platform&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="Spotify"></category><category term="music"></category><category term="API"></category><category term="Bokeh"></category><category term="Flask"></category><category term="readlines"></category><category term="itertools"></category><category term="Google"></category><category term="difflib"></category><category term="visualization"></category><category term="data analysis"></category><category term="regex"></category><category term="Counter"></category><category term="web scraping"></category><category term="Selenium"></category><category term="email"></category></entry><entry><title>A Short Primer on Assemblers, Compilers and Interpreters</title><link href="https://pybit.es/python-interpreters.html" rel="alternate"></link><published>2018-10-09T09:45:00+02:00</published><updated>2018-10-09T09:45:00+02:00</updated><author><name>Erik O'Shaughnessy</name></author><id>tag:pybit.es,2018-10-09:/python-interpreters.html</id><summary type="html">&lt;p&gt;A gentle introduction to the historical evolution of programming practices.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A gentle introduction to the historical evolution of programming practices.&lt;/p&gt;
&lt;h2&gt;Beginnings&lt;/h2&gt;
&lt;p&gt;In the early days of computing, hardware was expensive and programmers
were cheap. In fact, programmers were so cheap they weren't even
called "programmers" and were in fact usually mathematicans or
electrical engineers. Early computers were used to solve complex
mathematical problems quickly, so mathematicans were a natural fit for
the job of "programming".&lt;/p&gt;
&lt;p&gt;First a little background on what a program is.&lt;/p&gt;
&lt;p&gt;Computers can't do anything by themselves, they require programs to
drive their behavior. Programs can be thought of as very detailed
recipes that take an input and produce an output. The steps in the
recipe are composed of instructions that operate on data. While that
sounds complicated, you probably know how this statement works:&lt;/p&gt;
&lt;p&gt;1 + 2 = 3&lt;/p&gt;
&lt;p&gt;The plus sign is the "instruction" while the numbers 1 and 2 are the
data. Mathematically, the equal sign indicates that both sides of an
equation are "equivalent", however most computer languages use some
variant of equals to mean "assignment". If a computer were executing
that statment, it would store the results of the addition, the "3",
somewhere in memory.&lt;/p&gt;
&lt;p&gt;Computers know how to do math with numbers and move data around the
machine's memory heirarchy. I won't say too much about memory except
to say it generally comes in two different flavors: fast/small, and
slow/big. CPU registers are very fast, very small and act as
scratch pads. Main memory is typically very big and not nearly as
fast as register memory. CPUs shuffle the data they are working with
from main memory to registers and back again while a program executes.&lt;/p&gt;
&lt;h2&gt;Assembler&lt;/h2&gt;
&lt;p&gt;Computers were very expensive and people were cheap. Programmers spent
endless hours translating hand written math into computer instructions
that the computer could execute. The very first computers had terrible
user interfaces, some only consisting of toggle switches on the front
panel. The switches represented 1s and 0s in a single "word" of
memory. The programmer would configure a word, indicate where to store
it and then commit the word to memory. It was time consuming and error
prone.&lt;/p&gt;
&lt;p&gt;Eventually, an &lt;a href="https://en.wikipedia.org/wiki/Nathaniel_Rochester_%28computer_scientist%29"&gt;electrical engineer&lt;/a&gt; decided his time wasn't cheap
and wrote a program whose input was a recipe expressed in terms people
could read and output a computer readable version. This was the first
"assembler" and it was very controversial. The people that owned the
expensive machines didn't want to "waste" compute time on a task that
people were already doing; albeit slowly and with errors. Over time,
people came to appreciate the speed and accuracy of the assembler
versus a hand-assembled program and the amount of "real work" done with
the computer increased.&lt;/p&gt;
&lt;p&gt;While assembler programs were a big step up from toggling bit patterns
into the front panel of a machine, they were still pretty specialized.
The addition example from above might have looked something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="err"&gt;01&lt;/span&gt;  &lt;span class="nf"&gt;MOV&lt;/span&gt; &lt;span class="no"&gt;R0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="err"&gt;02&lt;/span&gt;  &lt;span class="nf"&gt;MOV&lt;/span&gt; &lt;span class="no"&gt;R1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="err"&gt;03&lt;/span&gt;  &lt;span class="nf"&gt;ADD&lt;/span&gt; &lt;span class="no"&gt;R0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R2&lt;/span&gt;
   &lt;span class="err"&gt;04&lt;/span&gt;  &lt;span class="nf"&gt;MOV&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R0&lt;/span&gt;
   &lt;span class="err"&gt;05&lt;/span&gt;  &lt;span class="nf"&gt;STO&lt;/span&gt; &lt;span class="no"&gt;R2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each line is a computer instruction, beginning with a shorthand name
of the instruction followed by the data the instruction works on. This
little program will first "move" the value 1 into a register called
R0, then 2 into register R1. Line 03 adds the contents of registers R0
and R1 and stores the resulting value into register R2. Finally, lines
04 and 05 identify where the result should be stored in main memory
(address 64).  Mananaging where data is stored in memory is one of the
most time consuming and error-prone parts of writing computer
programs.&lt;/p&gt;
&lt;h2&gt;Compiler&lt;/h2&gt;
&lt;p&gt;Assembly was much better than writing computer instructions by hand,
however early programmers yearned to write programs like they were
accustomed to writing mathematical formulae. This drove the
development of higher level compiled languages, some of which are
historical footnotes and others are still in use today. &lt;a href="https://en.wikipedia.org/wiki/ALGO"&gt;Algo&lt;/a&gt; is
one such footnote, while real problems continue to be solved today
with languages like &lt;a href="https://en.wikipedia.org/wiki/Fortran"&gt;FORTRAN&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)"&gt;C&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These new "high level" langagues allowed programmers to write their
programs in simpler terms. In the C language, our addition assembly
program would be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first statement describes a piece of memory that the program
will use. In this case, the memory should be the size of an integer
and it's name is 'x'. The second statement is the addition, although
written "backwards". A C programmer would read that as "X is assigned
the result of one plus two". Notice the programmer doesn't need to
say where to put 'x' in memory, the compiler takes care of that.&lt;/p&gt;
&lt;p&gt;A new type of program, called a "compiler", would turn the program
written in a high level language into an assembly language version and
then finally run it thru the assembler to produce a machine-readable
version of the program. This composition of programs is often called a
"tool chain", in that one program's output is sent directly to another
program's input.&lt;/p&gt;
&lt;p&gt;The huge advantage of compiled languages over assembly language
programs was porting from one computer model or brand to another. In
the early days of computing there was an explosion of different types
of computing hardware from companies like IBM, Digital Equipment
Corporation, Texas Instruments, UNIVAC, Hewlet Packard and others.
None of these computers shared much in common besides needing to be
plugged in to an electrical power supply. Memory and CPU architectures
differed wildly and it often took man-years to translate programs from
one computer to another.&lt;/p&gt;
&lt;p&gt;With high level languages, it was only necessary to port the compiler
tool chain to the new platfrom. Once the compiler was available, high
level language programs could be re-compiled for the new computer with
little or no modification. Compliation of high level languages was
truly revolutionary.&lt;/p&gt;
&lt;p&gt;Life was very good now for programmers. It was much easier to express
the problems they wanted to solve using high level languages. The cost
of computer hardware was falling dramatically due to advances in
semiconductors and the invention of integrated chips. Computers were
getting faster and more capable in addition to become much less
expensive. At some point, in the late 80s possibly, there was an
inversion and programmers became more expensive than the hardware they
used.&lt;/p&gt;
&lt;h2&gt;Interpreter&lt;/h2&gt;
&lt;p&gt;Over time a new programming model arose where a special program
called an "interpreter" would read a program and turn it into computer
instructions to be executed immediately. The interpreter takes the
program as input and interprets it into an intermediate form, much
like a compiler. Unlike a compiler, the interpreter then executes the
intermediate form of the program. This happens every time an interpreted
program runs, whereas a compiled program is only compiled one time and
the computer only has to execute the machine instructions "as written".&lt;/p&gt;
&lt;p&gt;As a sidenote, when people say that "interpreted programs are slow",
that is the main source of the perceived lack of performance. Modern
computers are so amazingly capable that most people aren't usually
able to tell the difference between compiled and interpreted programs.&lt;/p&gt;
&lt;p&gt;Interpreted programs, sometimes called "scripts", are even easier to
port to different hardware platforms. Because the script doesn't
contain any machine specific instructions, a single version of a
program can run on many different computers without change. The
catch of course is the interpreter must be ported to the new machine
to make that possible.&lt;/p&gt;
&lt;p&gt;One example of a very popular interpreted language is &lt;a href="https://python.org"&gt;Python&lt;/a&gt;. A
complete python expression of our addition problem would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While it looks and acts much like the C version, it lacks the variable
initialization statement. There are other differences which are beyond
the scope of this article, but you can see that we are able to write a
computer program that is very close to how a mathematician would write
it by hand with pencil and paper.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#erikoshaughnessy"&gt;Erik&lt;/a&gt;&lt;/p&gt;</content><category term="computer"></category><category term="programming"></category><category term="history"></category><category term="interpreters"></category><category term="assembly"></category><category term="C"></category><category term="high level languages"></category><category term="math"></category></entry><entry><title>PyBites Twitter Digest - Issue 31, 2018</title><link href="https://pybit.es/twitter_digest_201831.html" rel="alternate"></link><published>2018-10-07T13:10:00+02:00</published><updated>2018-10-07T13:10:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-07:/twitter_digest_201831.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Read about how Dropbox migrated to Python 3!&lt;/h3&gt;
&lt;p&gt;Submitted by @dgjustice&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Read about the Dropbox Client Python 3 migration! &lt;a href="https://t.co/dXIJvxn9lL" title="https://t.co/dXIJvxn9lL" target="_blank"&gt;https://t.co/dXIJvxn9lL&lt;/a&gt;&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/1045164125976842241" data-datetime="2018-09-27T04:12:00+00:00"&gt;September 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Tutorial on creating GUI apps in Python with PyQt5&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyQt5 tutorial: Create a Python GUI in 2018 by &lt;a href="https://twitter.com/@m_herrmann" target="_blank"&gt;@m_herrmann&lt;/a&gt; &lt;a href="https://t.co/wheQj80Isa" title="https://t.co/wheQj80Isa" target="_blank"&gt;https://t.co/wheQj80Isa&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#gui" target="_blank"&gt;#gui&lt;/a&gt; &lt;a href="https://twitter.com/search/#pyqt" target="_blank"&gt;#pyqt&lt;/a&gt; &lt;a href="https://t.co/Wehq5cKxCU" title="https://t.co/Wehq5cKxCU" target="_blank"&gt;https://t.co/Wehq5cKxCU&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/1046777020779253760" data-datetime="2018-10-01T15:01:04+00:00"&gt;October 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Great write up from Trey on Lambda Expressions&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Stop writing lambda expressions in Python - Trey Hunner &lt;a href="https://t.co/caLKVuiG7F" title="https://t.co/caLKVuiG7F" target="_blank"&gt;https://t.co/caLKVuiG7F&lt;/a&gt; &lt;a href="https://twitter.com/search/#lambda" target="_blank"&gt;#lambda&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/1047934488766869506" data-datetime="2018-10-04T19:40:26+00:00"&gt;October 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A wonderful Test and Code interview on testing and Selenium with our mate &lt;a href="https://twitter.com/AutomationPanda"&gt;Andy&lt;/a&gt;!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brianokken:" target="_blank"&gt;@brianokken:&lt;/a&gt; Web Testing, Selenium, and BDD with ‚Å¶&lt;a href="https://twitter.com/@AutomationPanda‚Å©" target="_blank"&gt;@AutomationPanda‚Å©&lt;/a&gt; on Test &amp;amp; Code, episode 47 &lt;a href="https://t.co/TjTHJ4v5D2" title="https://t.co/TjTHJ4v5D2" target="_blank"&gt;https://t.co/TjTHJ4v5D2&lt;/a&gt;&lt;/p&gt;‚Äî Brian Okken (@brianokken) &lt;a href="https://twitter.com/brianokken/status/1046830304642646016" data-datetime="2018-10-01T18:32:48+00:00"&gt;October 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A Flask newsletter by Import Python!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Launched a flask newsletter. Once a month ... &lt;a href="https://t.co/iLI4XSRHsL" title="https://t.co/iLI4XSRHsL" target="_blank"&gt;https://t.co/iLI4XSRHsL&lt;/a&gt; &lt;a href="https://twitter.com/search/#flask" target="_blank"&gt;#flask&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/1045779839154884608" data-datetime="2018-09-28T20:58:37+00:00"&gt;September 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;String Operations covered in typical Real Python fashion - have a read!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üêçüì∞ Splitting, Concatenating, and Joining Strings in Python Learn some of the most fundamental string operations: s‚Ä¶ &lt;a href="https://t.co/MVSUzIefki" title="https://t.co/MVSUzIefki" target="_blank"&gt;https://t.co/MVSUzIefki&lt;/a&gt;&lt;/p&gt;‚Äî Real Python (@realpython) &lt;a href="https://twitter.com/realpython/status/1047573011925229569" data-datetime="2018-10-03T19:44:03+00:00"&gt;October 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;NumPy bug in Python 3.7 causing data science issues&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;NumPy Bug on Python 3.7 &lt;a href="https://t.co/NtYyuLngOU" title="https://t.co/NtYyuLngOU" target="_blank"&gt;https://t.co/NtYyuLngOU&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/1047125820723081216" data-datetime="2018-10-02T14:07:04+00:00"&gt;October 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;An introduction to using Black for code compliance&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I've embraced the darkness when it comes to my Python code. This post looks at how you can use Black for yourself o‚Ä¶ &lt;a href="https://t.co/NSiWlWV7KH" title="https://t.co/NSiWlWV7KH" target="_blank"&gt;https://t.co/NSiWlWV7KH&lt;/a&gt;&lt;/p&gt;‚Äî Matt Layman (@mblayman) &lt;a href="https://twitter.com/mblayman/status/1047673411026268160" data-datetime="2018-10-04T02:23:00+00:00"&gt;October 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;How to write C like our very own Erik!&lt;/h3&gt;
&lt;p&gt;Submitted &lt;strong&gt;and written by&lt;/strong&gt; @Erik.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;One of our PyBites community members has written a great post on &lt;a href="https://twitter.com/search/#C" target="_blank"&gt;#C&lt;/a&gt; walking you through how to structure and write‚Ä¶ &lt;a href="https://t.co/qVW22X9ORS" title="https://t.co/qVW22X9ORS" target="_blank"&gt;https://t.co/qVW22X9ORS&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1048772638582005760" data-datetime="2018-10-07T03:10:56+00:00"&gt;October 07, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Cool! List of Python YouTube channels&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Looking for some great Youtube Python channels? Here's a good list thanks to &lt;a href="https://twitter.com/@realpython" target="_blank"&gt;@realpython&lt;/a&gt; and &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; &lt;a href="https://t.co/p8H9sACoa6" title="https://t.co/p8H9sACoa6" target="_blank"&gt;https://t.co/p8H9sACoa6&lt;/a&gt;&lt;/p&gt;‚Äî PythonTek (@pythontek1) &lt;a href="https://twitter.com/pythontek1/status/1048322297961111552" data-datetime="2018-10-05T21:21:27+00:00"&gt;October 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python Developer Survey 2018! Fill it out now!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The official 2018 Python Developers Survey is in full swing. Completing the full survey qualifies you for a Python‚Ä¶ &lt;a href="https://t.co/CcFeBcAw8s" title="https://t.co/CcFeBcAw8s" target="_blank"&gt;https://t.co/CcFeBcAw8s&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/1048229080364146689" data-datetime="2018-10-05T15:11:02+00:00"&gt;October 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Data Analysis with NumPy and Pandas&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My Tutorial Book on Anaconda, NumPy and Pandas Is Out: Hands-On Data Analysis with NumPy and Pandas &lt;a href="https://t.co/etEioq62Co" title="https://t.co/etEioq62Co" target="_blank"&gt;https://t.co/etEioq62Co&lt;/a&gt; by &lt;a href="https://twitter.com/@NTGuardian" target="_blank"&gt;@NTGuardian&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1046944685720133632" data-datetime="2018-10-02T02:07:19+00:00"&gt;October 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Two of my favourite things! Flask and AWS!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Deploying a Flask app using AWS &lt;a href="https://t.co/6FusNUZiN3" title="https://t.co/6FusNUZiN3" target="_blank"&gt;https://t.co/6FusNUZiN3&lt;/a&gt; &lt;a href="https://t.co/MUmgwBUq7n" title="https://t.co/MUmgwBUq7n" target="_blank"&gt;https://t.co/MUmgwBUq7n&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/1048338550780047362" data-datetime="2018-10-05T22:26:02+00:00"&gt;October 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Google Colaboratory! This is cool. Also, congrats Jake!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Next week I'll be joining &lt;a href="https://twitter.com/@GoogleAI" target="_blank"&gt;@GoogleAI&lt;/a&gt; in Seattle full time, working on the &lt;a href="https://twitter.com/@GoogleColab" target="_blank"&gt;@GoogleColab&lt;/a&gt; project. I think it's a tool‚Ä¶ &lt;a href="https://t.co/9uOSaiW2zF" title="https://t.co/9uOSaiW2zF" target="_blank"&gt;https://t.co/9uOSaiW2zF&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/1045719323468169217" data-datetime="2018-09-28T16:58:09+00:00"&gt;September 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Pretty printing dictionaries with  json.dumps() - good tip!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Pretty-print dictionaries with json.dumps &amp;gt;&amp;gt;&amp;gt; import json &amp;gt;&amp;gt;&amp;gt; d = {'a':'hello', 'd':1, 'b':5} &amp;gt;&amp;gt;&amp;gt; print(json.dumps‚Ä¶ &lt;a href="https://t.co/OrLVtHuQqr" title="https://t.co/OrLVtHuQqr" target="_blank"&gt;https://t.co/OrLVtHuQqr&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1047839410321084416" data-datetime="2018-10-04T13:22:37+00:00"&gt;October 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Dropbox"></category><category term="Python 3"></category><category term="migration"></category><category term="PyQt"></category><category term="GUI"></category><category term="tutorial"></category><category term="podcast"></category><category term="testing"></category><category term="Selenium"></category><category term="Flask"></category><category term="data science"></category><category term="NumPy"></category><category term="Black"></category><category term="PEP"></category><category term="strings"></category><category term="C"></category><category term="YouTube"></category><category term="videos"></category><category term="PSF"></category><category term="survey"></category><category term="Pandas"></category><category term="AWS"></category><category term="Jupyter"></category><category term="Google Colaboratory"></category><category term="JSON"></category></entry><entry><title>Persistent Virtualenv Environment Variables with python-dotenv</title><link href="https://pybit.es/persistent-environment-variables.html" rel="alternate"></link><published>2018-10-06T18:18:00+02:00</published><updated>2018-10-06T18:18:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2018-10-06:/persistent-environment-variables.html</id><summary type="html">&lt;p&gt;In this article I'm going to show you how to declare persistent environment variables in Python Virtual Environments with python-dotenv.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I can't count the amount of times I've followed a tutorial or guide that's said something along the lines of "Store your API Keys in environment variables".&lt;/p&gt;
&lt;p&gt;It's easy enough to do with &lt;code&gt;os.getenv&lt;/code&gt; but the thing that drives me crazy is having to, 1) hardcode the environment variables as global variables in my OS or 2) redeclare them every time I initiate the terminal session.&lt;/p&gt;
&lt;p&gt;In this article I'm going to show you (and to document for myself!) how to declare persistent environment variables in Python Virtual Environments with python-dotenv.&lt;/p&gt;
&lt;h2&gt;Environment Variables in a Virtual Environment&lt;/h2&gt;
&lt;p&gt;With a UNIX based OS you'd traditionally declare your environment variables by explicitly defining them at the OS level. Take variables &lt;code&gt;CLIENT_ID&lt;/code&gt; and &lt;code&gt;CLIENT_SECRET&lt;/code&gt; as an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#CLIENT_ID=&amp;quot;01234509876&amp;quot;
#CLIENT_SECRET=&amp;quot;julianandsilentbobstrikeback&amp;quot;
#
#echo $CLIENT_ID
0123450987
#
#echo $CLIENT_SECRET
julianandsilentbobstrikeback
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To do this within your Python Virtual Environment (venv) you'd do the same declarations as above after you've activated your venv. Doing this means your environment variables are within the virtual environment, not the global OS environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read more on &lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;Python Virtual Environments here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is all well and good except that when you deactivate and reactivate the venv, the environment variables are lost and you'll need to redeclare them.&lt;/p&gt;
&lt;h2&gt;Enter python-dotenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;python-dotenv&lt;/code&gt; is a Python module that allows you to specify environment variables in traditional UNIX-like ".env" (dot-env) file within your Python project directory. This includes in venvs!&lt;/p&gt;
&lt;p&gt;Here's the flow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Populate the &lt;code&gt;.env&lt;/code&gt; file with your environment variables.&lt;/li&gt;
&lt;li&gt;Import &lt;code&gt;python-dotenv&lt;/code&gt; and call it at the start of your script.&lt;/li&gt;
&lt;li&gt;Use whatever "getenv" method you use to import the environment variables, eg: &lt;code&gt;os.getenv()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;python-dotenv Example&lt;/h2&gt;
&lt;h3&gt;1. Create your &lt;code&gt;.env&lt;/code&gt; file&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)#vim .env
(venv)#cat .env
CLIENT_ID=&amp;quot;1234509876&amp;quot;
CLIENT_SECRET=&amp;quot;julianandsilentbobstrikeback&amp;quot;
(venv)#
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Import and Call python-dotenv&lt;/h3&gt;
&lt;p&gt;I'm using a file called &lt;code&gt;routes.py&lt;/code&gt; as my primary Python script here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#cat routes.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I begin by importing &lt;code&gt;load_dotenv&lt;/code&gt; from the &lt;code&gt;dotenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It's then just as simple as running &lt;code&gt;load_dotenv()&lt;/code&gt; to make the &lt;code&gt;.env&lt;/code&gt; file accessible to your script as your source of environment variables.&lt;/p&gt;
&lt;h3&gt;3. Access the Environment Variables&lt;/h3&gt;
&lt;p&gt;I've continued with &lt;code&gt;routes.py&lt;/code&gt; by writing a function that uses &lt;code&gt;os.getenv&lt;/code&gt; to pull and print the environment variables I specified in my &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CLIENT_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CLIENT_SECRET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printenvironment&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The client id is: {client}.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The secret id is: {secret}.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;printenvironment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
Running this script returns the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#python routes.py 
The client id is: 1234509876.
The secret id is: julianandsilentbobstrikeback.
#
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PERSISTENCE AT LAST!&lt;/h2&gt;
&lt;p&gt;The original problem was that when you'd deactivate and reactivate the venv you'd lose the environment variables.&lt;/p&gt;
&lt;p&gt;Watch the persistence in action!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)#deactivate
#
#
#source venv/bin/activate
(venv)#
(venv)#python routes.py 
The client id is: 1234509876.
The secret id is: julianandsilentbobstrikeback.
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay... I know. Anticlimactic. No! What am I saying?! Super handy and so time saver-y!&lt;/p&gt;
&lt;h2&gt;.env Example File&lt;/h2&gt;
&lt;p&gt;Pro-tip: if you're committing to a public repo, make sure .env files are listed in the .gitignore file. &lt;strong&gt;You don't want your environment variables being pushed to a public repo!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That said, you'll want to let people know what environment variables to configure for themselves if they're going to clone your repo or use your script.&lt;/p&gt;
&lt;p&gt;The nice way to do this is to create an "empty" .env.example file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#vim .env.example
CLIENT_ID=&amp;quot;&amp;quot;
CLIENT_SECRET=&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is one of those Python things I'll be taking with me to the grave. With the numerous apps and scripts I've created, managing these env variables has always been a pain.&lt;/p&gt;
&lt;p&gt;But no more I say! I'll be using &lt;code&gt;python-dotenv&lt;/code&gt; to manage everything.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Python"></category><category term="tips"></category><category term="virtualenv"></category><category term="virtual-environment"></category><category term="packages"></category><category term="env"></category><category term="learning"></category><category term="howto"></category></entry><entry><title>You don't need to be a Pro @ Python to crack the code of Pycon</title><link href="https://pybit.es/howto-crack-pycon.html" rel="alternate"></link><published>2018-10-04T10:00:00+02:00</published><updated>2018-10-04T10:00:00+02:00</updated><author><name>Jason Wattier</name></author><id>tag:pybit.es,2018-10-04:/howto-crack-pycon.html</id><summary type="html">&lt;p&gt;I wanted to write this article to distill any preconceived notion that you have to be an "expert" or "non-newbie" in order to get a lot of value from going to PyCon, the largest of the annual Python conferences. Along the way I want to use my personal experience to highlight some tips for success.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wanted to write this article to distill any preconceived notion that you have to be an "expert" or "non-newbie" in order to get a lot of value from going to PyCon, the largest of the annual Python conferences. Along the way I want to use my personal experience to highlight some tips for success.&lt;/p&gt;
&lt;h2&gt;My Story&lt;/h2&gt;
&lt;p&gt;When I attended PyCon this past May, I had only been through about 20 pages of Matt Harrison's book &lt;a href="https://www.amazon.com/dp/B0773PZ6HQ/?tag=pyb0f-20"&gt;Illustrated Guide to Python 3&lt;/a&gt;, three sections of Talk Python's &lt;a href="https://training.talkpython.fm/courses/explore_python_jumpstart/python-language-jumpstart-building-10-apps"&gt;JumpStart course&lt;/a&gt;, probably some &lt;a href="https://www.pluralsight.com/"&gt;PluralSight videos&lt;/a&gt;, and been scared off by the Collections' section of the &lt;a href="https://talkpython.fm/100days?utm_source=pybites"&gt;#100DaysOfCode course on Talk Python&lt;/a&gt;. The phrase "bits and pieces" has never been a more appropriate descriptor.&lt;/p&gt;
&lt;p&gt;I knew what a function was and about f-strings, but for all intents and purposes had a very basic level of knowledge with Python. I had yet to pip install anything or write my own class. Things like Github and virtual environments were like secret handshakes to a secret society that I knew nothing about.&lt;/p&gt;
&lt;p&gt;And ‚Äì you know what? I had an unbelievable, transformative experience. Part of it was luck ‚Äì but not all of it.&lt;/p&gt;
&lt;h3&gt;My first Pycon&lt;/h3&gt;
&lt;p&gt;I arrived the night before the start of PyCon, which is buffered by two days of classes known as "tutorials". It was around 10:30, I had some work to do. Instead of toiling away in my hotel room, I went down to the lobby bar. When I arrived, there was someone with a Talk Python t-shirt. Turns out there is a high degree of correlation between people wearing Python-related garb in a hotel in downtown Cleveland at the beginning of May and conference PyCon attendees üòä.&lt;/p&gt;
&lt;p&gt;We struck up a conversation over some drinks. He was a network engineer from Arkansas. I was a SQL developer from Texas. We both liked Python and a good drink. It was comradery at first sip. The next day, during a class break during the first day of Tutorials, I saw the same chap in a circle of people. Sam, the person who I met at the hotel bar the night before, could easily be spotted from a distance. He was about 6-foot-tall and with a clean-shaven noggin of a head, which served as my homing beacon in an otherwise crowded sea of people.&lt;/p&gt;
&lt;h3&gt;A fateful meeting&lt;/h3&gt;
&lt;p&gt;After I bumbled myself into the group of people, I recognized two of the individuals whom Sam was talking with. They were none other than the PyBites co-founders Julian and Bob themselves!!!! Even though I had barely used the PyBites website, I recognized their faces from their twitter profiles and knew of them from &lt;a href="https://talkpython.fm/episodes/show/140/level-up-your-python-with-100daysofcode-challenge"&gt;their podcast appearance on Talk Python earlier that year&lt;/a&gt;. To say I had a mini "Internet" celebrity freak-out was an understatement. Here I was meeting people whom I had heard on one of my favorite podcasts and who co-authored &lt;a href="https://talkpython.fm/100days?utm_source=pybites"&gt;the #100DaysOfCode course&lt;/a&gt; on the Talk Python website. Certainly, that is not enough notoriety to get them on the cover of People magazine, but their story was very meaningful to me.&lt;/p&gt;
&lt;p&gt;Later that same evening, a coworker who came with me to PyCon and myself joined Sam, Bob, Julian and Sam's boss for drinks later. That was just the start, I kept running into this same group of people over and over again. I even ended up helping Bob and Julian with &lt;a href="https://us.pycon.org/2018/schedule/presentation/187/"&gt;their poster session&lt;/a&gt; for PyBites on Sunday. Poster sessions are a more informal, "show-and-tell" version of a talk at PyCon where you get to interact one-on-one with the "speaker".&lt;/p&gt;
&lt;p&gt;Along the way, I volunteered at the conference registration desks, helped out both as a session chair and a session runner, for some of the PyCon talks, participated in the "hallway track" (more on that later), attended a live taping of the &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes podcast&lt;/a&gt;, and, occasionally, sat in on some actual talks. None of these required that I knew what pip install, package management or magic methods meant. Most important of all, I had a freaking blast.&lt;/p&gt;
&lt;h2&gt;What's the Secret Sauce?&lt;/h2&gt;
&lt;p&gt;In looking back, what are the actions or habits that I took that are repeatable and less dumb luck? The main takeaway from my experience is that the best part of the conference and the part that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;requires the least amount of technical knowledge, and&lt;/li&gt;
&lt;li&gt;is most unique to the live experience of PyCon are the interactions that take place and the connections that are made with other conference attendees.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Engage with other people&lt;/h3&gt;
&lt;p&gt;With about 3500 conference attendees, if you don't form a passable connection with the first 50 people that you meet, there are 3450 other cracks at the bat. The important thing is to give yourself chances to meet and engage with other people. This involves the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engaging in the "Hallway Track"&lt;/li&gt;
&lt;li&gt;Volunteering&lt;/li&gt;
&lt;li&gt;Attending "Open Spaces"&lt;/li&gt;
&lt;li&gt;Spending time in the event space outside of where the talks are being held&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Hallway Track&lt;/h3&gt;
&lt;p&gt;The Hallway Track is the name given to everything outside of what's on the papered schedule. It is the conversations and chatter that occur "in the hallways". It is everything but the talks, open spaces, job fair, poster sessions, tutorials and keynotes. And it is critical to avail yourself to the Hallway Track as much as possible. Sit at a table with an open seat, walk up to a circle of people where there's an opening, say hi and strike up a conversation with as many strangers as possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; ‚Äì Leaving a gap in a circle of people is called the "Pac-Man". The Pac-Man circle is highly encouraged by the Python community. Be sure to do the same thing if you find yourself in a circle of people. Closed circles give off the vibe of "members-only club" whereas a Pac-Man circle gives off the message of "come and join us if you like".&lt;/p&gt;
&lt;h3&gt;Conversation starters&lt;/h3&gt;
&lt;p&gt;Most of those people will not turn into your best friends, but there's a better than not chance that you will find some common ground with a lot of them. Everyone at PyCon has at least some ground in that they have a personal or commercial interest in Python. You know what that means? There are some boilerplate, token questions than you can ask anyone:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where are you traveling from?&lt;/li&gt;
&lt;li&gt;How do you use Python in your studies or work?&lt;/li&gt;
&lt;li&gt;What sparked interested in learning Python?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Python speak, think of it as an infinite loop where if you run into a conversation that feels flat or is not up your alley, just hit continue to start the loop again. The volume of people can be intimidating in certain respects but it also brings with it plenty of "freedom to fail". If a conversation falls flat or you say something embarrassing, chances are that person won't remember it anyway and you have plenty of other tokens to play at this game.&lt;/p&gt;
&lt;h3&gt;Volunteering&lt;/h3&gt;
&lt;p&gt;There is a plethora of opportunities to volunteer at PyCon, which is another natural way to rub shoulders and get an overall sense of being involved as part this big heaping event. Volunteer opportunities include helping out with registration, swag-bag stuffing, being a runner or session chair (introducing the speaker for a talk). There are also plenty of opportunities to volunteer. Almost every second of the conference schedule is littered with multiple time slots.&lt;/p&gt;
&lt;h3&gt;Attending Open Spaces&lt;/h3&gt;
&lt;p&gt;Open Spaces are small group breakout sessions that touch upon whatever the speaker or group of speakers want to discuss. These ranged from an open session on mental health to one on job interview prep to Microsoft demoing VS Code. It really has a feeling of being more book clubbish than something more structured. These are not recorded and provide another low-key way to rub shoulders and interact with others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; ‚Äì Often open invitations for late night social gatherings (e.g., bar hopping, card games) are listed on the same whiteboard that "purely" Python Open Spaces are. So don't think they are just for technical topics. Spending time in the event hall outside of where the talks are being held&lt;/p&gt;
&lt;h3&gt;The Event Hall&lt;/h3&gt;
&lt;p&gt;At PyCon there is an event hall where companies (e.g., Microsoft, Google, IBM) or content creators (e.g., Michael Kennedy from Talk Python, O'Reilly Media) will have booths set up. People at these booths are there for one of three main reasons: 1) to sell you a product, 2) convince you to use their software, or 3) to hire you.&lt;/p&gt;
&lt;p&gt;Think of the event hall as retail shopping. You are not obligated to buy or commit to anything. But if something catches your attention, stop by, look around, and chat up the people staffing the booth. They are there to sell or advocate something to you, so most of the time the booth people are doing most of the talking.&lt;/p&gt;
&lt;p&gt;My recommendation is to not overindulge on one specific outlet. Mixing and matching work best in my opinion. You may also prefer one option heavily over the other ‚Äì but give the others a chance too. There is plenty of opportunity over the two days of tutorial session, and over the three days and four nights of the main conference to explore all of these above actions in a non-trivial manner.&lt;/p&gt;
&lt;h2&gt;In Summary&lt;/h2&gt;
&lt;p&gt;You do not need to do 100% of what I have laid out in this post. But if you pony up the registration fee, hotel and travel costs only to avail yourself to a one-day early preview of content that will be on YouTube in the blink of an eye, you are wasting your time and money.&lt;/p&gt;
&lt;p&gt;Go to PyCon for the people and the enjoy the moments that cannot be put on a flash drive and uploaded to the cloud. You do not need to be expert at Python to be a pro at attending PyCon. You just need a smidgen of courage and the belief that more times than not ‚Äì people aren't half bad. Challenge yourself to talk to at least 5 new people each day. I think you will find that the Python community is a special brew of people. There is no better advocate of this notion than Brett Cannon in his opening remarks of PyCon 2014. In reflecting back on his early days with the Python language and community:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The community was smaller but it honestly felt the same it was an extremely welcoming, friendly, constructive group of people who were always willing to let people come in, help them out, and let them enjoy programming‚Ä¶Now, I don't know about the rest of you, but I like to think of it as I came for the language but I stayed for the community. So I want to personally thank all of you for making this such a wonderful place to be and such a wonderful group of people to be around.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I couldn't agree more, Brett.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="https://pybit.es/pages/guests.html#jasonwattier"&gt;Jason&lt;/a&gt;&lt;/p&gt;</content><category term="pycon"></category><category term="story"></category><category term="learning"></category></entry><entry><title>Code Challenge 53 - Query the Spotify API</title><link href="https://pybit.es/codechallenge53.html" rel="alternate"></link><published>2018-10-01T22:38:00+02:00</published><updated>2018-10-01T22:38:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-01:/codechallenge53.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, Welcome to Pybites Code Challenge 53! In this challenge we get you query the Spotify API and perform a set of tasks.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hey Pythonistas,&lt;/p&gt;
&lt;p&gt;We bet this one's going to be music to your ears (another quality pun!).&lt;/p&gt;
&lt;p&gt;This week, query the &lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Spotify API&lt;/a&gt; and write some code that performs the set of tasks we've listed below.&lt;/p&gt;
&lt;p&gt;If you have another music service you'd rather use, feel free!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Now for the challenge tasks: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Query Spotify&lt;/a&gt; and grab a list of album names for any given artist. Bonus points if the script allows the user to specify the artist!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a playlist on your account if you don't already have one. Write a script that queries Spotify for the playlist and returns all tracks/songs in the playlist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This one's tricky: write a script that obtains a list of the top tracks for an artist and see if any of those songs exist in your playlist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feel free to dig into the API and go wild!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don't have an existing playlist, just create one with random artists and use it as your data set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: Check out the &lt;a href="https://spotipy.readthedocs.io/en/latest/"&gt;Spotipy Python Library&lt;/a&gt; to make this a little easier on yourself.&lt;/p&gt;
&lt;p&gt;If you need help getting ready with Github, see our new &lt;a href="https://youtu.be/vJsyLSZxqVw"&gt;instruction video&lt;/a&gt;.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;PyBites Community&lt;/h2&gt;
&lt;p&gt;A few more things before we take off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do you want to discuss this challenge and share your Pythonic journey with other passionate Pythonistas? Confirm your email on our platform then request access to our Slack via &lt;a href="https://codechalleng.es/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites is here to challenge you because becoming a better Pythonista requires practice, a lot of it. For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or ping us on our Slack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="code challenge"></category><category term="challenges"></category><category term="Spotify"></category><category term="music"></category><category term="API"></category></entry><entry><title>Code Challenge 52 - Create your own Pomodoro Timer - Review</title><link href="https://pybit.es/codechallenge52_review.html" rel="alternate"></link><published>2018-10-01T14:40:00+02:00</published><updated>2018-10-01T14:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-10-01:/codechallenge52_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge52.html"&gt;Create your own Pomodoro Timer&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge52.html"&gt;Create your own Pomodoro Timer&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h2&gt;Our review post / Hacktoberfest is back!&lt;/h2&gt;
&lt;p&gt;From now on we will merge our solution into our Community branch and include anything noteworthy here, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we are learning just like you, we are all equals :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we &lt;em&gt;need&lt;/em&gt; the PRs too ;) ... as part of &lt;a href="https://hacktoberfest.digitalocean.com"&gt;Hacktoberfest No. 5&lt;/a&gt; that just kicked of (5 PRs and you get a cool t-shirt)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Secondly we encourage you to send us a &lt;em&gt;quotable blurb&lt;/em&gt; for our weekly review post (what you are reading now), see this new message on our platform's PR submit page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="be featured in our review post" src="https://pybit.es/images/platform-submit-review-blurb.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Don't be shy, share your work!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Community Pull Requests&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href="https://github.com/pybites/challenges/tree/community/52"&gt;awesome PRs by our community for PCC52&lt;/a&gt; (or from fork: &lt;code&gt;git checkout community &amp;amp;&amp;amp; git merge upstream/community&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;Some cool stuff that got PR'd for this challenge: &lt;em&gt;tkinter, argparse, pytest, wxPython, Django&lt;/em&gt;, awesome, no?!&lt;/p&gt;
&lt;h2&gt;Read Code for Fun and Profit&lt;/h2&gt;
&lt;p&gt;You can look at all submitted code &lt;a href="https://github.com/pybites/challenges/pulls?q=is%3Apr+is%3Aclosed"&gt;here&lt;/a&gt; and/or pulling &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our Community branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other learnings we spotted in Pull Requests for other challenges this week: &lt;em&gt;collections, itertools, xml files, list comprehensions&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to everyone for your participation in our blog code challenges! &lt;/p&gt;
&lt;p&gt;Keep the PRs coming, again specially &lt;strong&gt;&lt;a href="https://hacktoberfest.digitalocean.com"&gt;this Hacktoberfest month&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;h2&gt;Need more Python Practice?&lt;/h2&gt;
&lt;p&gt;Subscribe to our blog (sidebar) to get a new PyBites Code Challenge (PCC) in your inbox each Monday. &lt;/p&gt;
&lt;p&gt;And/or take any of our 50+ challenges &lt;a href="https://codechalleng.es/challenges/"&gt;on our platform&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Prefer coding self contained exercises in the comfort of your browser? Try our growing collection of &lt;a href="https://codechalleng.es/bites/"&gt;Bites of Py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want to do the &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;lang=en"&gt;#100DaysOfCode&lt;/a&gt; but not sure what to work on? Take &lt;a href="https://talkpython.fm/100days?utm_source=pybites"&gt;our course&lt;/a&gt; and/or start logging your progress &lt;a href="https://codechalleng.es/100days/"&gt;on our platform&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="Pomodoro"></category><category term="time"></category><category term="datetime"></category><category term="code challenge"></category><category term="challenges"></category><category term="wxPython"></category><category term="Django"></category><category term="tkinter"></category><category term="argparse"></category></entry><entry><title>Code Challenge 52 - Create your own Pomodoro Timer</title><link href="https://pybit.es/codechallenge52.html" rel="alternate"></link><published>2018-09-24T20:13:00+02:00</published><updated>2018-09-24T20:13:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-09-24:/codechallenge52.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, Welcome to Pybites Code Challenge 52! In this challenge we get you create your very own Pomodoro Timer!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hey Pythonistas,&lt;/p&gt;
&lt;p&gt;It's TIME for another Code Challenge! (Pun &lt;em&gt;totally&lt;/em&gt; intended!)&lt;/p&gt;
&lt;p&gt;We're keeping it simple this week. Create your own Pomodoro Timer!&lt;/p&gt;
&lt;h2&gt;Pomodoro?&lt;/h2&gt;
&lt;p&gt;What's a Pomodoro Timer? We're glad you asked! (If you didn't ask, you can read anyway!)&lt;/p&gt;
&lt;p&gt;A Pomodoro Timer is a countdown timer that enables you to focus on a given task. You set the timer for a specific duration, 20 minutes for example, and for that duration you are completely offline and focused. No email, no phone, no texts, no kids (a man can dream!)... no interruptions. Just pure, focus. This is the Pomodoro Technique.&lt;/p&gt;
&lt;p&gt;At the end of the timer, you're back online.&lt;/p&gt;
&lt;p&gt;The idea is that the minutes of focus time allow you to achieve more than you otherwise would given the usual swathe of interruptions we all suffer.&lt;/p&gt;
&lt;p&gt;The real fanatics will do a set period of the Pomodoro Technique followed by a short break, then another Pomodoro set and repeat.&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Now for the challenge: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At its simplest, create a timer for a set duration (eg 20 minutes) that "alarms" or notifies you at completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go a step further and allow the user to specify the amount of time the Pomodoro Timer goes for.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again, further develop the app by allowing it to loop. That is, Pomodoro Time &amp;gt; break time &amp;gt; Pomodoro Time &amp;gt; break time. Just like the pros!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a user interface if you have the &lt;em&gt;time&lt;/em&gt;! &lt;code&gt;PyGame&lt;/code&gt; or &lt;code&gt;argparse&lt;/code&gt; perhaps? Maybe even make it web based with Flask or your other favourite web framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's an example: &lt;a href="https://tomato-timer.com/"&gt;Tomato Timer&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;It doesn't matter how complex or simple you make your app - just that you &lt;strong&gt;get coding&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you need help getting ready with Github, see our new &lt;a href="https://youtu.be/vJsyLSZxqVw"&gt;instruction video&lt;/a&gt;.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;PyBites Community&lt;/h2&gt;
&lt;p&gt;A few more things before we take off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do you want to discuss this challenge and share your Pythonic journey with other passionate Pythonistas? Confirm your email on our platform then request access to our Slack via &lt;a href="https://codechalleng.es/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites is here to challenge you because becoming a better Pythonista requires practice, a lot of it. For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or ping us on our Slack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Pomodoro"></category><category term="time"></category><category term="datetime"></category><category term="code challenge"></category><category term="challenges"></category></entry><entry><title>Code Challenge 51 - Analyse NBA Data with SQL/sqlite3 - Review</title><link href="https://pybit.es/codechallenge51_review.html" rel="alternate"></link><published>2018-09-24T11:18:00+02:00</published><updated>2018-09-24T11:18:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-09-24:/codechallenge51_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge51.html"&gt;Analyse NBA Data with SQL/sqlite3&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge51.html"&gt;Analyse NBA Data with SQL/sqlite3&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h2&gt;Our solution&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/pybites/challenges/blob/solutions/51/nba.py"&gt;our solution for this challenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;cursor.executemany&lt;/code&gt; to bulk insert records.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We were using &lt;code&gt;cursor.fetchall&lt;/code&gt; but to get one record/row you can use &lt;code&gt;fetchone&lt;/code&gt; (thanks @clamytoe)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Practice &lt;code&gt;GROUP BY&lt;/code&gt; (&lt;code&gt;year_with_most_drafts&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple SQLite arithmetic (&lt;code&gt;games/active AS games_per_year&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probably don't need &lt;code&gt;CAST&lt;/code&gt; if you add types to DB columns (looking at other PRs!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Community solutions&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/pybites/challenges/tree/community/51"&gt;solutions PR'd by our community&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some learnings taken from these Pull Requests: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Refreshed SQL. Learned about sqlite command line. Learned PyCharm DataSource integration and querying. Refreshed git commands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;I used this challenge as a chance to experiment with Jupyter notebook to help visualize the data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Read Code for Fun and Profit&lt;/h2&gt;
&lt;p&gt;You can look at all submitted code &lt;a href="https://github.com/pybites/challenges/pulls?q=is%3Apr+is%3Aclosed"&gt;here&lt;/a&gt; and/or pulling &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our Community branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other learnings we spotted in Pull Requests week: &lt;em&gt;itertools, difflib / similarity measures, collections, pytest and patch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thanks to everyone for your participation in our blog code challenges! &lt;/p&gt;
&lt;h2&gt;Need more Python Practice?&lt;/h2&gt;
&lt;p&gt;Subscribe to our blog (sidebar) to get a new PyBites Code Challenge (PCC) in your inbox each Monday. &lt;/p&gt;
&lt;p&gt;And/or take any of our 50+ challenges &lt;a href="https://codechalleng.es/challenges/"&gt;on our platform&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Prefer coding self contained exercises in the comfort of your browser? Try our growing collection of &lt;a href="https://codechalleng.es/bites/"&gt;Bites of Py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want to do the &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;lang=en"&gt;#100DaysOfCode&lt;/a&gt; but not sure what to work on? Take &lt;a href="https://talkpython.fm/100days?utm_source=pybites"&gt;our course&lt;/a&gt; and/or start logging your progress &lt;a href="https://codechalleng.es/100days/"&gt;on our platform&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="sqlite3"></category><category term="SQL"></category><category term="data analysis"></category><category term="data"></category><category term="NBA"></category></entry><entry><title>PyBites Twitter Digest - Issue 30, 2018</title><link href="https://pybit.es/twitter_digest_201830.html" rel="alternate"></link><published>2018-09-23T22:39:00+02:00</published><updated>2018-09-23T22:39:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-09-23:/twitter_digest_201830.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Python 3 is the way!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Out of the top 360 packages, 357 support Python 3 (99%) &lt;a href="https://t.co/x3w68GH5Jm" title="https://t.co/x3w68GH5Jm" target="_blank"&gt;https://t.co/x3w68GH5Jm&lt;/a&gt;&lt;/p&gt;‚Äî Brett Cannon (@brettsky) &lt;a href="https://twitter.com/brettsky/status/1040841072304218113" data-datetime="2018-09-15T05:53:44+00:00"&gt;September 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Must Watch PyCon Videos&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üêçüì∫ Top 10 Must-Watch PyCon Talks Get the inside scoop on the top 10 must-watch PyCon talks for both beginners and‚Ä¶ &lt;a href="https://t.co/hzYMhoELcU" title="https://t.co/hzYMhoELcU" target="_blank"&gt;https://t.co/hzYMhoELcU&lt;/a&gt;&lt;/p&gt;‚Äî Real Python (@realpython) &lt;a href="https://twitter.com/realpython/status/1043216906638057474" data-datetime="2018-09-21T19:14:27+00:00"&gt;September 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Learn about the OSI Model! Something every tech head should know!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@freeCodeCamp:" target="_blank"&gt;@freeCodeCamp:&lt;/a&gt; Learn more about HTTP in this great introductory article &lt;a href="https://t.co/YiEq0XJTXm" title="https://t.co/YiEq0XJTXm" target="_blank"&gt;https://t.co/YiEq0XJTXm&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1043542452240441344" data-datetime="2018-09-22T16:48:03+00:00"&gt;September 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Another quality TalkPy episode. Ned Batchelder this time round!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's all about &lt;a href="https://t.co/1ba1f96kAa" title="https://t.co/1ba1f96kAa" target="_blank"&gt;https://t.co/1ba1f96kAa&lt;/a&gt; with &lt;a href="https://twitter.com/@nedbat" target="_blank"&gt;@nedbat&lt;/a&gt; on episode 178 of &lt;a href="https://twitter.com/@talkpython." target="_blank"&gt;@talkpython.&lt;/a&gt; Check it out now at &lt;a href="https://t.co/UBvtnQwMQX" title="https://t.co/UBvtnQwMQX" target="_blank"&gt;https://t.co/UBvtnQwMQX&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/1043226884765573122" data-datetime="2018-09-21T19:54:06+00:00"&gt;September 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;AI that writes music, very interesting. Ha!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This new project promises to out-Tay-Tay Tay Tay and out-Bon Bon Iver. üé∂ ü§ñ &lt;a href="https://t.co/0XUISn46e1" title="https://t.co/0XUISn46e1" target="_blank"&gt;https://t.co/0XUISn46e1&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/1042849880190976000" data-datetime="2018-09-20T18:56:01+00:00"&gt;September 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Speaking of music, this looks promising!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;(work in progress) PyTheory: Music Theory for Humans by Kenneth Reitz &lt;a href="https://t.co/1xuuzm8eyB" title="https://t.co/1xuuzm8eyB" target="_blank"&gt;https://t.co/1xuuzm8eyB&lt;/a&gt; by &lt;a href="https://twitter.com/@kennethreitz" target="_blank"&gt;@kennethreitz&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1042112871646126080" data-datetime="2018-09-18T18:07:24+00:00"&gt;September 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Why we love the Python Community&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pumpichank:" target="_blank"&gt;@pumpichank:&lt;/a&gt; I am so proud of the community that &lt;a href="https://twitter.com/@gvanrossum" target="_blank"&gt;@gvanrossum&lt;/a&gt; has built for Python. Lots of work to still do, but in general, we take cu‚Ä¶&lt;/p&gt;‚Äî Kenneth ‚ò§ Reitz (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/1042891056298307585" data-datetime="2018-09-20T21:39:38+00:00"&gt;September 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A Python program that plays Super Mario Bros!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python program plays Super Mario Bros: Explained! &lt;a href="https://t.co/J5MKlOQJ3I" title="https://t.co/J5MKlOQJ3I" target="_blank"&gt;https://t.co/J5MKlOQJ3I&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1042928177423646720" data-datetime="2018-09-21T00:07:08+00:00"&gt;September 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A walkthrough of unit testing in Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Unit Testing with Python unittest ... &lt;a href="https://t.co/8F0H6NuEDi" title="https://t.co/8F0H6NuEDi" target="_blank"&gt;https://t.co/8F0H6NuEDi&lt;/a&gt; &lt;a href="https://twitter.com/search/#testing" target="_blank"&gt;#testing&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/1042786359465828352" data-datetime="2018-09-20T14:43:36+00:00"&gt;September 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;It's all about the deliberate practice! Time for another Code Challenge right?&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@degreed:" target="_blank"&gt;@degreed:&lt;/a&gt; No matter how busy successful people are, they always ‚Äúset aside at least an hour a day (or 5 hours a week) over their entire‚Ä¶&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/1041433897706250240" data-datetime="2018-09-16T21:09:24+00:00"&gt;September 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;I always forget about this!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Run simple &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; code directly from the command line with the -c switch: python -c "import datetime; print(&lt;a href="https://t.co/FXWDCB9dX6())" "="" title="https://t.co/FXWDCB9dX6())" target="_blank"&gt;https://t.co/FXWDCB9dX6())"&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1042088083091595265" data-datetime="2018-09-18T16:28:54+00:00"&gt;September 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python 3 only Matplotlib. It's all happening!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@matplotlib:" target="_blank"&gt;@matplotlib:&lt;/a&gt; Happy to announce that Matplotlib 3.0 is up on pypi and ready for use! Matplotlib is Python 3 only The v2.2.x LTS branch‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/1042274872972328960" data-datetime="2018-09-19T04:51:08+00:00"&gt;September 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Cryptocurrency Predicting Neural Network in Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Creating a Cryptocurrency-predicting finance recurrent neural network &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; - &lt;a href="https://t.co/LXNH3kQx4F‚Ä¶" title="https://t.co/LXNH3kQx4F‚Ä¶" target="_blank"&gt;https://t.co/LXNH3kQx4F‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/4gS5j13Wu8" title="https://t.co/4gS5j13Wu8" target="_blank"&gt;https://t.co/4gS5j13Wu8&lt;/a&gt;&lt;/p&gt;‚Äî Harrison Kinsleyüêç (@Sentdex) &lt;a href="https://twitter.com/Sentdex/status/1041309097692418048" data-datetime="2018-09-16T12:53:30+00:00"&gt;September 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;OpenCV, OCR and Text Recognition&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New tutorial!üöÄ Learn how to use OpenCV OCR and Text Recognition by combining the EAST text detector with Tesseract'‚Ä¶ &lt;a href="https://t.co/YqJ3AnNVm4" title="https://t.co/YqJ3AnNVm4" target="_blank"&gt;https://t.co/YqJ3AnNVm4&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1041689297060024325" data-datetime="2018-09-17T14:04:16+00:00"&gt;September 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;We have the power!!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúThe trouble with programmers is that you can never tell what a programmer is doing until it‚Äôs too late.‚Äù - Seymour Cray&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1043116889382297601" data-datetime="2018-09-21T12:37:01+00:00"&gt;September 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="pycon"></category><category term="videos"></category><category term="HTTP"></category><category term="OSI Model"></category><category term="coverage"></category><category term="podcast"></category><category term="testing"></category><category term="AI"></category><category term="music"></category><category term="PyTheory"></category><category term="Super Mario Bros"></category><category term="games"></category><category term="unittest"></category><category term="tricks"></category><category term="tips"></category><category term="matplotlib"></category><category term="cryptocurrency"></category><category term="deep learning"></category><category term="Keras"></category><category term="TensorFlow"></category><category term="OpenCV"></category><category term="OCR"></category><category term="machine learning"></category></entry><entry><title>Career Development for Programmers</title><link href="https://pybit.es/career-development-programmers.html" rel="alternate"></link><published>2018-09-23T11:19:00+02:00</published><updated>2018-09-23T11:19:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2018-09-23:/career-development-programmers.html</id><summary type="html">&lt;p&gt;What makes you excel in your career? Become an expert in x, y, z. Sure, you need to learn technical skills, quite a lot of them. However there is a lot more to it. If you want to succeed in your job, business and life, you want to build a portfolio, share your learning, become a reader and a good writer, and last but not least stick to daily exercising. I published this article &lt;a href="https://bobbelderbos.com"&gt;on my blog&lt;/a&gt; 2 years ago and find a lot is still relevant today and will serve our community. I also added an updated towards the end.&lt;/p&gt;</summary><content type="html">&lt;p&gt;What makes you excel in your career? Become an expert in x, y, z. Sure, you need to learn technical skills, quite a lot of them. However there is a lot more to it. If you want to succeed in your job, business and life, you want to build a portfolio, share your learning, become a reader and a good writer, and last but not least stick to daily exercising. I published this article &lt;a href="https://bobbelderbos.com"&gt;on my blog&lt;/a&gt; 2 years ago and find a lot is still relevant today and will serve our community. I also added an updated towards the end.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Success is a matter of choice, not chance ~ Deepak Mehra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How to improve your programming career:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first thing obviously is to code. A lot. I was reminded of this again reading this &lt;a href="https://medium.com/swlh/what-happened-after-i-left-the-best-job-in-the-world-to-become-an-engineer-ee06caca7db2#.l0jw2no7d"&gt;great post&lt;/a&gt; this morning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wakeUp();

workOut();

var currentHour = new Date().getHours();

var bedtimeHour = 22;

while(currentHour &amp;lt; bedtimeHour) {
  code();
  currentHour = new Date().getHours();
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Source: &lt;a href="https://gist.githubusercontent.com/iam-peekay/cd695c6278536dd7180342bb97c937f3/raw/93629889af603b40a1125b488227dd356864a89e/myLife.js"&gt;myLife.js&lt;/a&gt;. I bought an &lt;a href="http://bobbelderbos.com/public/bob_whoami.png"&gt;ABC t-shirt&lt;/a&gt; to remind myself of this as well (OK also because I like &lt;a href="https://www.youtube.com/watch?v=v9XW6P0tiVc"&gt;Baldwin's sales speech&lt;/a&gt; in Glengarry Glen Ross lol ... Always Be Closing = Always Be Coding!). Whether the &lt;a href="https://en.wikipedia.org/wiki/Outliers_(book)"&gt;10,000-Hour Rule&lt;/a&gt; is true or not, with practice comes skill, and generally the more (challenged) practice the more skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related: build side projects. For example I was learning &lt;a href="http://bobbelderbos.com/2016/06/python-tips/"&gt;some new Python tricks and idioms&lt;/a&gt; the other day, but it was not until using it that this stuff really sunk in. I needed nested defaultdicts, * unpacking to a named tuple, and I went to StackOverflow a few times more. Books are a good foundation, but skills come from getting your hands dirty. It's then that exceptions happen and need creativity to solve emerging problems. Yesterday &lt;a href="http://bobbelderbos.com/2016/06/twitter-bot/"&gt;I wrote a Twitter bot&lt;/a&gt;. I had done this before, yet I still learned new things: using the requests and logging modules, writing my own exceptions, hiding credentials in a github repo, to name a few. Deploying a solution to a remote server (different environment) causes challenges too. So practice, practice, practice! Aim everyday to improve yourself's yesterday version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the passionate programmer. I made some notes &lt;a href="http://bobbelderbos.com/2011/04/advance-career-read-passionate-programmer/"&gt;here&lt;/a&gt;. &lt;a href="https://www.amazon.com/Developers-Code-Ka-Wai-Cheung/dp/1934356794/"&gt;The Developer's code&lt;/a&gt; is also a great read. Books to reread from time to time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Share you learning. Start a blog. It has a myriad of advantages. &lt;a href="http://bobbelderbos.com/2012/06/great-book-on-technical-blogging/"&gt;Technical blogging&lt;/a&gt; is a great resource. I can also recommend &lt;a href="https://www.amazon.com/Show-Your-Work-Creativity-Discovered/dp/076117897X/"&gt;Show your work&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a time management freak. One thing &lt;a href="http://simpleprogrammer.com"&gt;John Sonmez&lt;/a&gt; recommends in &lt;a href="https://www.manning.com/books/soft-skills"&gt;Soft Skills&lt;/a&gt; is keeping a log of time spent. We loose a lot of time on trivia especially in this highly interruptive social media society. I probably will give this one a try ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Muscles need stimulation to grow, equally a software developer needs constant challenge to stretch to new levels. The mentioned 10,000-Hour Rule is only as good as you finding yourself new challenges!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your comfort zone is a place where you keep yourself in a self-illusion and nothing can grow there but your potentiality can grow only when you can think and grow out of that zone." - Rashedur Ryan Rahman.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use idle time for rest, but it never hurts to listen to podcasts or do some video courses. Any success starts with a thought, and feeding your mind with good ideas can have surprising effects. I devour podcasts on my walks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborate with other developers (and do code reviews). It is not until you have to explain your code, or &lt;a href="http://bobbelderbos.com/2016/03/building-maintainable-software/"&gt;make it maintainable/ extensible&lt;/a&gt;, that you really start thinking about the underlying design. When you manage to explain your skill to another person you generally master it. Blogging is a great tool for this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a better writer. Apart from an essential skill in many areas of life, clear writing has a lot in common with good coding. And read! Good reading is a precursor to good writing. Similarly, reading lot of source code makes you a better coder (I picked up this advice in the fascinating book &lt;a href="http://www.codersatwork.com"&gt;Coders at work&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try new things. I have been using Python a lot which I love, but there are a lot of other good languages out there. I certified in Java which has very good parts. I'd like to learn more Ruby. In terms of concepts Machine Learning is a hot topic, worth checking out (as well as NLP). Or do you code solely in PHP? Try Django, or full stack JS. You get the point. Even within a language you already use you can always learn more, for example to learn more Python: collections, iterators, generators, data science modules like NumPy and Pandas, functional programming constructs, Unicode, advanced OOP features, etc. The important thing is to never become complacent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jump on things others don't like. You can gain specialization, persistence skills and relatively high reward. Take data analysis for instance: everybody loves the analytics part, however data is usually not delivered in a ready-to-use format. Data cleaning is not the sexiest job but it is what makes the fun stuff possible. You see this in Big Data as well: everybody talks about nice tools like Spark/ Hive/ Pig, but what about getting the a good copy of the data loaded in? ETL (Extract, Transform and Load) is a non-trivial part of the total effort. Same &lt;a href="http://www.hanselminutes.com/532/data-literacy-and-the-usefulness-of-excel-with-oz-du-soleil"&gt;story with Excel&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't ignore the marketing side. We all love the tech side, but sometimes we have to step out of this mindset and wonder who the customer is and what is the need, the problem we're trying to solve. Sometimes we build stuff before checking the audience. Understanding the market is a fundamental skill. And more generally becoming effective (solve the right problem) before focusing on more efficiency per se (become proficient at a skill).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have a &lt;em&gt;liability partner&lt;/em&gt;. I note that when you are held accountable by a friend or colleague you perform much better. And the joined learning is fun and fruitful. &lt;strong&gt;Update&lt;/strong&gt;: read Darren Hardy's &lt;a href="https://www.amazon.com/dp/159315724X/?tag=pyb0f-20"&gt;The Compound Effect&lt;/a&gt; where he states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To up your chances of success, get a success buddy, someone who‚Äôll keep you accountable as you cement your new habit while you return the favor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last but not least: exercise! Daily exercise instantly pays for itself: you feel better, you have a good health (your most important asset), and sharpen your mind (= better code). It's like garbage collection: you can only hold that many things at once, and stress increases with time, so you need to clear your mind periodically. Besides, oftentimes it's when we leave our desk that we actually solve a problem we're stuck on. Getting in shape can be overwhelming, &lt;a href="https://www.amazon.com/Healthy-Programmer-Better-Pragmatic-Programmers/dp/1937785319/"&gt;this book&lt;/a&gt; is a good start.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Remember you are in charge of your career, it's not up to your boss or even family and close friends to tell you what to do. You have to seek opportunities, and when they present themselves, grab them with both hands.&lt;/p&gt;
&lt;p&gt;Secondly, technical skills alone only get you so far. Often a decently skilled and personable guy outperforms a super expert who lacks people skills. In that regard I highly recommend &lt;a href="https://www.manning.com/books/soft-skills"&gt;Soft Skills&lt;/a&gt; which deals with a lot of this. I am also reading John Sonmez' second book - &lt;a href="https://simpleprogrammer.com/2016/07/04/complete-software-developers-career-guide-introduction/"&gt;The Complete Software Developer‚Äôs Career Guide&lt;/a&gt; - which he is publishing on his blog. &lt;strong&gt;Update&lt;/strong&gt;: this book &lt;a href="http://www.amazon.com/dp/B073X6GNJ1/?tag=pyb0f-20"&gt;went to press since&lt;/a&gt; and is on to-read list.&lt;/p&gt;
&lt;p&gt;What are you consistently doing to get ahead in your career? Share your thoughts in the comments below ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Update 23rd of Sept 2018:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Difficult roads often lead to beautiful destinations. The best is yet to come ~ Zig Ziglar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I missed the words &lt;em&gt;habit&lt;/em&gt; and &lt;em&gt;goals&lt;/em&gt; above. Both are paramount to achieve any form of success. Goals keep you focussed and you should regularly measure you performance and the necessary adjustments to your plan to stay on track. Secondly I think any success strongly depends on your habits. I highly recommend reading Charles Duhigg's &lt;a href="http://www.amazon.com/dp/081298160X/?tag=pyb0f-20"&gt;The Power of Habit&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since this article appeared I made an internal job transfer and can confirm that getting familiar with a new large and complex code base can be daunting. It was uncomfortable at times but after biting through (I did not think &lt;em&gt;Bites of Py&lt;/em&gt; would help me verbally one day lol), I realized: 1. I have read more code than ever before, 2. by looking at more experienced developers, I significantly improved how I write code and think about design, and 3. getting into uncharted waters grows your confidence. So again: seek new opportunities, even if they seem scary at first. I like what Tim Ferriss says in this context: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A person's success in life can usually be measured by the number of uncomfortable conversations he or she is willing to have.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This article was written exactly 6 months before we founded PyBites (scary)! I feel that a lot of these points were central to getting where we are today. I am also proud and happy that we have been able to provide the tools to help developers write more code, share their progress and guest post to our blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Leaders are readers&lt;/em&gt;, and to become succesful you need a constant stream of inspiration, ideas and knowledge. We made a Django app to keep track of your reading: &lt;a href="http://pbreadinglist.herokuapp.com"&gt;PyBites My Reading List&lt;/a&gt;. Looking for titles? Check out &lt;a href="https://bobbelderbos.com/books/"&gt;my reading list&lt;/a&gt; which has some other pointers as well. Never stop learning!&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot PyBites Reading App" src="https://pybit.es/images/myreadinglist.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="career"></category><category term="books"></category><category term="blogging"></category><category term="big data"></category><category term="practice"></category><category term="exercise"></category><category term="inspiration"></category><category term="coding"></category><category term="writing"></category><category term="productivity"></category></entry><entry><title>Code Challenge 51 - Analyse NBA Data with SQL/sqlite3</title><link href="https://pybit.es/codechallenge51.html" rel="alternate"></link><published>2018-09-17T23:13:00+02:00</published><updated>2018-09-17T23:13:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-09-17:/codechallenge51.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, Welcome to Pybites Code Challenge 51! In this challenge we get you analysing NBA player data from a CSV file.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hey Pythonistas,&lt;/p&gt;
&lt;p&gt;Blog Code Challenges is back! And with a vengeance ;)&lt;/p&gt;
&lt;p&gt;Starting today we will publish a new code challenge every week on Monday. On Friday (or latest the weekend) we will post a review.&lt;/p&gt;
&lt;p&gt;Welcome to Pybites Code Challenge 51! In this challenge we get you analysing NBA player data from a CSV file.&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;If you are reading this on our blog head over to &lt;a href="https://codechalleng.es/challenges/51"&gt;https://codechalleng.es/challenges/51&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you need help getting ready with Github, see our new &lt;a href="https://youtu.be/vJsyLSZxqVw"&gt;instruction video&lt;/a&gt;.
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now for the challenge: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual env and install &lt;code&gt;requests&lt;/code&gt;. No need to install &lt;code&gt;sqlite3&lt;/code&gt; as it's part of the stdlib.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the &lt;code&gt;nba.py&lt;/code&gt; file over to your subdirectory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As you can see in the template &lt;code&gt;nba.py&lt;/code&gt; file, we've given you a headstart by importing the data and parsing the CSV into a list of named tuples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Start coding under the "#CODE HERE" comment and complete the 7 functions we've laid out for you.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that there are some assert statements under &lt;code&gt;main&lt;/code&gt; to help you validate your code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This challenge is mainly focused on sqlite3, but if you want to use an ORM like sqlalchemy or Pandas that's fine too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="container"&gt;
    &lt;iframe src="https://www.youtube.com/embed/2jeuMMU1a_o" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;PyBites Community&lt;/h2&gt;
&lt;p&gt;A few more things before we take off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do you want to discuss this challenge and share your Pythonic journey with other passionate Pythonistas? Confirm your email on our platform then request access to our Slack via &lt;a href="https://codechalleng.es/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites is here to challenge you because becoming a better Pythonista requires practice, a lot of it. For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or ping us on our Slack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="sqlite3"></category><category term="SQL"></category><category term="data analysis"></category><category term="data"></category><category term="NBA"></category></entry><entry><title>PyBites Twitter Digest - Issue 29, 2018</title><link href="https://pybit.es/twitter_digest_201829.html" rel="alternate"></link><published>2018-09-16T15:50:00+02:00</published><updated>2018-09-16T15:50:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-09-16:/twitter_digest_201829.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;A handy template to generate basic Python project structures.&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice one! A great &lt;a href="https://twitter.com/search/#template" target="_blank"&gt;#template&lt;/a&gt; for generating a basic &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; project structure! &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/zaxboOMGwN" title="https://t.co/zaxboOMGwN" target="_blank"&gt;https://t.co/zaxboOMGwN&lt;/a&gt;&lt;/p&gt;‚Äî Julian Sequeira (@_juliansequeira) &lt;a href="https://twitter.com/_juliansequeira/status/1041209285382877184" data-datetime="2018-09-16T06:16:53+00:00"&gt;September 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Ooo Language focused Docker images&lt;/h3&gt;
&lt;p&gt;Submitted by @dgjustice.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You have few options when it comes to making your Docker images smaller: 1. Use multi-stage builds 2. Use distroles‚Ä¶ &lt;a href="https://t.co/GEbFkoixav" title="https://t.co/GEbFkoixav" target="_blank"&gt;https://t.co/GEbFkoixav&lt;/a&gt;&lt;/p&gt;‚Äî learnk8s (@learnk8s) &lt;a href="https://twitter.com/learnk8s/status/1038804738119225345" data-datetime="2018-09-09T15:02:04+00:00"&gt;September 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Hacktoberfest is almost here!!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's year 5 for &lt;a href="https://twitter.com/search/#hacktoberfest!" target="_blank"&gt;#hacktoberfest!&lt;/a&gt; Celebrate Open Source with &lt;a href="https://twitter.com/@DigitalOcean" target="_blank"&gt;@DigitalOcean&lt;/a&gt; &lt;a href="https://twitter.com/@Github" target="_blank"&gt;@Github&lt;/a&gt; and &lt;a href="https://twitter.com/@Twilio." target="_blank"&gt;@Twilio.&lt;/a&gt; More info coming soon‚Ä¶ &lt;a href="https://t.co/4z3P8RZX9V" title="https://t.co/4z3P8RZX9V" target="_blank"&gt;https://t.co/4z3P8RZX9V&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1038113865958080512" data-datetime="2018-09-07T17:16:47+00:00"&gt;September 07, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A great instructional on Decorators!&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Make Your &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Prettier With Decorators &lt;a href="https://t.co/rF37XNU33r" title="https://t.co/rF37XNU33r" target="_blank"&gt;https://t.co/rF37XNU33r&lt;/a&gt;&lt;/p&gt;‚Äî Amged Rustom (@codehill) &lt;a href="https://twitter.com/codehill/status/1038407986652295168" data-datetime="2018-09-08T12:45:31+00:00"&gt;September 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Given Hacktoberfest is on the way: 50 Popular Python open-source projects&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Want to get involved in python &lt;a href="https://twitter.com/search/#OSS" target="_blank"&gt;#OSS&lt;/a&gt; projects? Here's a list of projects to get you started üêç &lt;a href="https://t.co/oFybFsJMmn" title="https://t.co/oFybFsJMmn" target="_blank"&gt;https://t.co/oFybFsJMmn&lt;/a&gt;&lt;/p&gt;‚Äî Women Who Code BOS (@wwcboston) &lt;a href="https://twitter.com/wwcboston/status/1038536227127996417" data-datetime="2018-09-08T21:15:06+00:00"&gt;September 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Snowy: A Small Python 3 module for manipulating and generating images&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik (thanks again mate!).&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Snowy, a pure Python image library accelerated with Numba &lt;a href="https://t.co/22noU94DMf" title="https://t.co/22noU94DMf" target="_blank"&gt;https://t.co/22noU94DMf&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1037552749712265217" data-datetime="2018-09-06T04:07:06+00:00"&gt;September 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Simple Celery&lt;/h3&gt;
&lt;p&gt;Submitted by @dgjustice.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Codementor: Use The File System To Queue Celery Tasks" &lt;a href="https://t.co/iamUCxE03Q" title="https://t.co/iamUCxE03Q" target="_blank"&gt;https://t.co/iamUCxE03Q&lt;/a&gt;&lt;/p&gt;‚Äî Rui Quintino (@rquintino) &lt;a href="https://twitter.com/rquintino/status/1039852497563787264" data-datetime="2018-09-12T12:25:29+00:00"&gt;September 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;The UNIX Philosophy&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The secret sauce behind *nix success: Doing One Thing, Well: The UNIX Philosophy | Hackaday &lt;a href="https://t.co/iCOJ21lnfn" title="https://t.co/iCOJ21lnfn" target="_blank"&gt;https://t.co/iCOJ21lnfn&lt;/a&gt;&lt;/p&gt;‚Äî Christine Hall (@BrideOfLinux) &lt;a href="https://twitter.com/BrideOfLinux/status/1040226138147184640" data-datetime="2018-09-13T13:10:12+00:00"&gt;September 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;The man behind the core 100Daysofcode Challenge! A great listen&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This week's episode of the &lt;a href="https://t.co/IA856cd6oj" title="https://t.co/IA856cd6oj" target="_blank"&gt;https://t.co/IA856cd6oj&lt;/a&gt; podcast is all about &lt;a href="https://twitter.com/search/#100DaysOfCode." target="_blank"&gt;#100DaysOfCode.&lt;/a&gt; You'll hear from &lt;a href="https://twitter.com/@ka11away‚Ä¶" target="_blank"&gt;@ka11away‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/AQrAsDDSxy" title="https://t.co/AQrAsDDSxy" target="_blank"&gt;https://t.co/AQrAsDDSxy&lt;/a&gt;&lt;/p&gt;‚Äî freeCodeCamp.org (@freeCodeCamp) &lt;a href="https://twitter.com/freeCodeCamp/status/1040345373838069760" data-datetime="2018-09-13T21:04:00+00:00"&gt;September 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python hits the Top 3 in popularity!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python. Top 3. It's official. &lt;a href="https://t.co/viRgawZPlJ" title="https://t.co/viRgawZPlJ" target="_blank"&gt;https://t.co/viRgawZPlJ&lt;/a&gt; &lt;a href="https://twitter.com/search/#positivepython" target="_blank"&gt;#positivepython&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth ‚ò§ Reitz (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/1039144520246542337" data-datetime="2018-09-10T13:32:14+00:00"&gt;September 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Learn to code Python with Project Python&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Project Python is a free interactive book that will teach you to code in Python, using graphics, animations, and ga‚Ä¶ &lt;a href="https://t.co/pJehaZ7mdk" title="https://t.co/pJehaZ7mdk" target="_blank"&gt;https://t.co/pJehaZ7mdk&lt;/a&gt;&lt;/p&gt;‚Äî Phil Shapiro (@philshapiro) &lt;a href="https://twitter.com/philshapiro/status/1040097867921321985" data-datetime="2018-09-13T04:40:30+00:00"&gt;September 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Awesome Talk Python episode on the Python Community&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; How well do you know the Python ecosystem? What's the ratio of web devs to data scientists? That question and many more ans‚Ä¶&lt;/p&gt;‚Äî Betsy Waliszewski (@betswaliszewski) &lt;a href="https://twitter.com/betswaliszewski/status/1039229209774776320" data-datetime="2018-09-10T19:08:46+00:00"&gt;September 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Sentdex is back with his self-driving cars in GTA V!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The return of self-driving cars in GTA V, Charles 2.0 begins: &lt;a href="https://t.co/G190tBawO4" title="https://t.co/G190tBawO4" target="_blank"&gt;https://t.co/G190tBawO4&lt;/a&gt; &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#deeplearning" target="_blank"&gt;#deeplearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Harrison Kinsleyüêç (@Sentdex) &lt;a href="https://twitter.com/Sentdex/status/1039157646526492674" data-datetime="2018-09-10T14:24:24+00:00"&gt;September 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;More Hettinger wisdom&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Writing production &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; code: * Simplest thing that works * Consider type signatures * Add repr, copy, and pickl‚Ä¶ &lt;a href="https://t.co/va3yW49m2y" title="https://t.co/va3yW49m2y" target="_blank"&gt;https://t.co/va3yW49m2y&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/1039940537124413440" data-datetime="2018-09-12T18:15:19+00:00"&gt;September 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Cool, plot graphs on the console!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Ever wanted to plot graphs in the console? Try &lt;a href="https://twitter.com/search/#bashplotlib" target="_blank"&gt;#bashplotlib&lt;/a&gt; package. &lt;a href="https://t.co/XxAalm2oOk" title="https://t.co/XxAalm2oOk" target="_blank"&gt;https://t.co/XxAalm2oOk&lt;/a&gt; &lt;a href="https://t.co/xl3XQtsokf" title="https://t.co/xl3XQtsokf" target="_blank"&gt;https://t.co/xl3XQtsokf&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1040480261782175749" data-datetime="2018-09-14T06:00:00+00:00"&gt;September 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Docker"></category><category term="Hacktoberfest"></category><category term="Digital Ocean"></category><category term="Github"></category><category term="Twilio"></category><category term="decorators"></category><category term="open source"></category><category term="Snowy"></category><category term="Numba"></category><category term="images"></category><category term="Celery"></category><category term="UNIX"></category><category term="podcast"></category><category term="100daysofcode"></category><category term="PSF"></category><category term="GTA V"></category><category term="deep learning"></category><category term="machine learning"></category><category term="bashplotlib"></category><category term="terminal"></category></entry><entry><title>PyBites Twitter Digest - Issue 28, 2018</title><link href="https://pybit.es/twitter_digest_201828.html" rel="alternate"></link><published>2018-09-02T19:04:00+02:00</published><updated>2018-09-02T19:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-09-02:/twitter_digest_201828.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;How to find stuff in Git&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúHow to find stuff in Git‚Äù by &lt;a href="https://twitter.com/@tygertec" target="_blank"&gt;@tygertec&lt;/a&gt; &lt;a href="https://t.co/koyvqy10j1" title="https://t.co/koyvqy10j1" target="_blank"&gt;https://t.co/koyvqy10j1&lt;/a&gt;&lt;/p&gt;‚Äî Christopher Ross (@crossphd) &lt;a href="https://twitter.com/crossphd/status/1035654575884328961" data-datetime="2018-08-31T22:24:27+00:00"&gt;August 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Exposed user TLS Certificate Private Keys... not good!&lt;/h3&gt;
&lt;p&gt;Submitted by @dgjustice.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;All those who use &lt;a href="https://twitter.com/search/#Traefik" target="_blank"&gt;#Traefik&lt;/a&gt; &lt;a href="https://t.co/yKDNf5iI0v" title="https://t.co/yKDNf5iI0v" target="_blank"&gt;https://t.co/yKDNf5iI0v&lt;/a&gt;&lt;/p&gt;‚Äî Avishay (@AvishaySaban) &lt;a href="https://twitter.com/AvishaySaban/status/1035159331879231488" data-datetime="2018-08-30T13:36:31+00:00"&gt;August 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Documentation is so important. This is a great idea!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúA Simple Tutorial on How to document your &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Project using &lt;a href="https://twitter.com/search/#Sphinx" target="_blank"&gt;#Sphinx&lt;/a&gt; and &lt;a href="https://twitter.com/search/#Rinohtype‚Äù" target="_blank"&gt;#Rinohtype‚Äù&lt;/a&gt; by Rich Yap &lt;a href="https://t.co/Pn56gqrA4c" title="https://t.co/Pn56gqrA4c" target="_blank"&gt;https://t.co/Pn56gqrA4c&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1032540212851818502" data-datetime="2018-08-23T08:09:05+00:00"&gt;August 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Had no idea the PSF had a job board! Check it out!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePSF:" target="_blank"&gt;@ThePSF:&lt;/a&gt; Looking for a job doing what you love with Python? Check out &lt;a href="https://t.co/HfrDboAVbd" title="https://t.co/HfrDboAVbd" target="_blank"&gt;https://t.co/HfrDboAVbd&lt;/a&gt; - there are currently over 170 jobs on the‚Ä¶&lt;/p&gt;‚Äî Brett Cannon (@brettsky) &lt;a href="https://twitter.com/brettsky/status/1034820092654116864" data-datetime="2018-08-29T15:08:30+00:00"&gt;August 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Another quality RealPy article: Advanced Git Tips for Python Devs&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∞ Advanced Git Tips for üêçPython Developers &lt;a href="https://t.co/ovWfaPcd2W" title="https://t.co/ovWfaPcd2W" target="_blank"&gt;https://t.co/ovWfaPcd2W&lt;/a&gt;&lt;/p&gt;‚Äî Real Python (@realpython) &lt;a href="https://twitter.com/realpython/status/1033823032186494978" data-datetime="2018-08-26T21:06:33+00:00"&gt;August 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Nice! An A-Z of useful Python tricks&lt;/h3&gt;
&lt;p&gt;Submitted by @Erik.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An A-Z of useful Python tricks &lt;a href="https://t.co/5ouBpmSGff" title="https://t.co/5ouBpmSGff" target="_blank"&gt;https://t.co/5ouBpmSGff&lt;/a&gt;&lt;/p&gt;‚Äî freeCodeCamp.org (@freeCodeCamp) &lt;a href="https://twitter.com/freeCodeCamp/status/1034848710197428224" data-datetime="2018-08-29T17:02:13+00:00"&gt;August 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;No reason why you shouldn't be a member of the PSF! Get on it!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePSF:" target="_blank"&gt;@ThePSF:&lt;/a&gt; Basic membership in the Python Software Foundation is free. Join here: &lt;a href="https://t.co/W2H2ShVTDr" title="https://t.co/W2H2ShVTDr" target="_blank"&gt;https://t.co/W2H2ShVTDr&lt;/a&gt;&lt;/p&gt;‚Äî Betsy Waliszewski (@betswaliszewski) &lt;a href="https://twitter.com/betswaliszewski/status/1036019610389102593" data-datetime="2018-09-01T22:34:58+00:00"&gt;September 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Such a wonderful initiative to support young women with coding!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Last week marked the end of our biggest summer ever! THANK YOU to everyone who supported the 50 Kode With Klossy ca‚Ä¶ &lt;a href="https://t.co/Sdubz2cFvl" title="https://t.co/Sdubz2cFvl" target="_blank"&gt;https://t.co/Sdubz2cFvl&lt;/a&gt;&lt;/p&gt;‚Äî Kode With Klossy (@kodewithklossy) &lt;a href="https://twitter.com/kodewithklossy/status/1033683437729841152" data-datetime="2018-08-26T11:51:51+00:00"&gt;August 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Asycnio socket tutorial&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Short overview of what it's like to write a &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#asyncio" target="_blank"&gt;#asyncio&lt;/a&gt; socket server from &lt;a href="https://twitter.com/@pgjones" target="_blank"&gt;@pgjones&lt;/a&gt; - An Asyncio socket tutori‚Ä¶ &lt;a href="https://t.co/dIC9Hf59Xl" title="https://t.co/dIC9Hf59Xl" target="_blank"&gt;https://t.co/dIC9Hf59Xl&lt;/a&gt;&lt;/p&gt;‚Äî Cristian Medina (@tryexceptpass) &lt;a href="https://twitter.com/tryexceptpass/status/1034089420696285184" data-datetime="2018-08-27T14:45:05+00:00"&gt;August 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Learning Python: From Zero to Hero. A great intro!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@Cindybarriento5:" target="_blank"&gt;@Cindybarriento5:&lt;/a&gt; Scanning for additional resources on understanding classes a bit better and found this awesome article detailing &lt;a href="https://twitter.com/search/#pyth‚Ä¶" target="_blank"&gt;#pyth‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Jason Wattier (@jmwatt3) &lt;a href="https://twitter.com/jmwatt3/status/1035327361946972160" data-datetime="2018-08-31T00:44:13+00:00"&gt;August 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Super interesting episode of the Talk Python Podcast! A definite trend in network engineering these days&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here's &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; &lt;a href="https://twitter.com/search/#175:" target="_blank"&gt;#175:&lt;/a&gt; Teaching Python to network engineers with &lt;a href="https://twitter.com/@hfpreston" target="_blank"&gt;@hfpreston&lt;/a&gt; from &lt;a href="https://twitter.com/@CiscoDevNet" target="_blank"&gt;@CiscoDevNet&lt;/a&gt; &lt;a href="https://t.co/WMSDw08k9z" title="https://t.co/WMSDw08k9z" target="_blank"&gt;https://t.co/WMSDw08k9z&lt;/a&gt; &lt;a href="https://twitter.com/search/#DevNet" target="_blank"&gt;#DevNet&lt;/a&gt; &lt;a href="https://twitter.com/search/#NetDevOps" target="_blank"&gt;#NetDevOps&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/1035898321657901056" data-datetime="2018-09-01T14:33:00+00:00"&gt;September 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;An awesome deep learning demo!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@iamtrask:" target="_blank"&gt;@iamtrask:&lt;/a&gt; This is still one of the most impressive Deep Learning demos of 2018 - huge opportunity for new open-source Web Development t‚Ä¶&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1035523639200759808" data-datetime="2018-08-31T13:44:09+00:00"&gt;August 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Agreed! Have to put yourself out there no matter what. That's how PyBites started!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@sam2code:" target="_blank"&gt;@sam2code:&lt;/a&gt; -- What's the best advice you've ever received? -- "When given a choice, choose the thing that scares you a little. If it's‚Ä¶&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1035869127930507265" data-datetime="2018-09-01T12:37:00+00:00"&gt;September 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;What a project! Run Python in your browser!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@randal_olson:" target="_blank"&gt;@randal_olson:&lt;/a&gt; This looks big: pyodide, the scientific &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; stack compiled to WebAssembly. Run Python *locally* in your browser, inte‚Ä¶&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/1033174893586657280" data-datetime="2018-08-25T02:11:04+00:00"&gt;August 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Ha!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@arongriffis:" target="_blank"&gt;@arongriffis:&lt;/a&gt; Working on a new Bash book. So far: Intro: You chose the wrong tool. Ch 1: Have you considered Python? Ch 2: Try calling P‚Ä¶&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/1032992702982438912" data-datetime="2018-08-24T14:07:07+00:00"&gt;August 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Git"></category><category term="Traffic"></category><category term="security"></category><category term="cloud"></category><category term="Sphinx"></category><category term="Rinohtype"></category><category term="tips"></category><category term="PSF"></category><category term="Asyncio"></category><category term="learning"></category><category term="tutorial"></category><category term="network"></category><category term="Cisco"></category><category term="deep learning"></category><category term="machine learning"></category><category term="keras"></category><category term="scientific python"></category><category term="WebAssembly"></category><category term="JavaScript"></category><category term="pyodide"></category></entry><entry><title>PyBites Twitter Digest - Issue 27, 2018</title><link href="https://pybit.es/twitter_digest_201827.html" rel="alternate"></link><published>2018-08-19T17:22:00+02:00</published><updated>2018-08-19T17:22:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-08-19:/twitter_digest_201827.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;One more day for PSF Fellowship Nominations! Get them in ASAP!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Do you know someone who has served the Python community thru extraordinary efforts? Nominate them to be a PSF Fello‚Ä¶ &lt;a href="https://t.co/cNzFpaaxhN" title="https://t.co/cNzFpaaxhN" target="_blank"&gt;https://t.co/cNzFpaaxhN&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/1030768772402032640" data-datetime="2018-08-18T10:50:00+00:00"&gt;August 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Decorator library to configure function arguments&lt;/h3&gt;
&lt;p&gt;Submitted by @clamytoe.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/sIYLnFT8h1" title="https://t.co/sIYLnFT8h1" target="_blank"&gt;https://t.co/sIYLnFT8h1&lt;/a&gt;&lt;/p&gt;‚Äî Patrick Porto (@PatrickPorto) &lt;a href="https://twitter.com/PatrickPorto/status/1027607113944707072" data-datetime="2018-08-09T17:26:42+00:00"&gt;August 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Mockaroo! Who knew? Create your own data to use in Sketch!&lt;/h3&gt;
&lt;p&gt;Submitted by @bohemianjack.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúCreate your own &lt;a href="https://twitter.com/search/#data" target="_blank"&gt;#data&lt;/a&gt; to use in Sketch (no code required)‚Äù by &lt;a href="https://twitter.com/@rgesulfo" target="_blank"&gt;@rgesulfo&lt;/a&gt; &lt;a href="https://t.co/UQIjnBv3u7" title="https://t.co/UQIjnBv3u7" target="_blank"&gt;https://t.co/UQIjnBv3u7&lt;/a&gt; - generating some‚Ä¶ &lt;a href="https://t.co/dqrySH0DkR" title="https://t.co/dqrySH0DkR" target="_blank"&gt;https://t.co/dqrySH0DkR&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1028201740435447808" data-datetime="2018-08-11T08:49:32+00:00"&gt;August 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Very cool use case of OpenCV&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New tutorial published!üöÄ Today we're building "People Counter". Learn how to count the # of people entering &amp;amp; leavi‚Ä¶ &lt;a href="https://t.co/JQYXfNxrnu" title="https://t.co/JQYXfNxrnu" target="_blank"&gt;https://t.co/JQYXfNxrnu&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1029005141243035648" data-datetime="2018-08-13T14:01:58+00:00"&gt;August 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Nice to see Netflix doing stuff like this&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@MichelleUfford:" target="_blank"&gt;@MichelleUfford:&lt;/a&gt; At Netflix we're reimagining what a Jupyter notebook can be, who can use it, &amp;amp; what you can do with it. Check out my Ne‚Ä¶&lt;/p&gt;‚Äî Enthought Inc. (@enthought) &lt;a href="https://twitter.com/enthought/status/1030801153288798209" data-datetime="2018-08-18T12:58:40+00:00"&gt;August 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Deep Learning basics by Sentdex!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just posted an updated Deep Learning basics with Python, TensorFlow and Keras tutorial: &lt;a href="https://t.co/Vr3nvT7CRo‚Ä¶" title="https://t.co/Vr3nvT7CRo‚Ä¶" target="_blank"&gt;https://t.co/Vr3nvT7CRo‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/AqLE0jMaRG" title="https://t.co/AqLE0jMaRG" target="_blank"&gt;https://t.co/AqLE0jMaRG&lt;/a&gt;&lt;/p&gt;‚Äî Harrison Kinsleyüêç (@Sentdex) &lt;a href="https://twitter.com/Sentdex/status/1028295925947613185" data-datetime="2018-08-11T15:03:48+00:00"&gt;August 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;This is a great security step. Nice going PyPI!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pypi:" target="_blank"&gt;@pypi:&lt;/a&gt; PyPI will no longer accept passwords that have been published in data breaches. For background you can take a look at &lt;a href="https://t.‚Ä¶" title="https://t.‚Ä¶" target="_blank"&gt;https://t.‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Ewa Jodlowska (@ewa_jodlowska) &lt;a href="https://twitter.com/ewa_jodlowska/status/1029346200573698049" data-datetime="2018-08-14T12:37:13+00:00"&gt;August 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;This is why the UX is so important.&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"The average user doesn't give a damn what happens, as long as (1) it works and (2) it's fast." - Daniel J. Bernstein&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1030447657280581632" data-datetime="2018-08-17T13:34:00+00:00"&gt;August 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Altair version 2.2 released&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Altair version 2.2 just released! This adds support to Vega-Lite 2.6, as well as offering a number of API improveme‚Ä¶ &lt;a href="https://t.co/5oSmcCA5Pq" title="https://t.co/5oSmcCA5Pq" target="_blank"&gt;https://t.co/5oSmcCA5Pq&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/1029455894264786944" data-datetime="2018-08-14T19:53:06+00:00"&gt;August 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;ripgrep is faster than {grep, ag, git grep, ucg, pt, sift} &lt;a href="https://t.co/gTUnxyTMw2" title="https://t.co/gTUnxyTMw2" target="_blank"&gt;https://t.co/gTUnxyTMw2&lt;/a&gt;&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1030107263971848192" data-datetime="2018-08-16T15:01:24+00:00"&gt;August 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Django v Wordpress&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django vs WordPress: Learn how to decide between these 2 very different &lt;a href="https://twitter.com/search/#ContentManagement" target="_blank"&gt;#ContentManagement&lt;/a&gt; systems:‚Ä¶ &lt;a href="https://t.co/DP1QdmFxrP" title="https://t.co/DP1QdmFxrP" target="_blank"&gt;https://t.co/DP1QdmFxrP&lt;/a&gt;&lt;/p&gt;‚Äî Caktus Group (@CaktusGroup) &lt;a href="https://twitter.com/CaktusGroup/status/1030243061966807040" data-datetime="2018-08-17T00:01:01+00:00"&gt;August 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;How to use Bootstrap 4 forms in Django&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pybites:" target="_blank"&gt;@pybites:&lt;/a&gt; How to Use Bootstrap 4 Forms With &lt;a href="https://twitter.com/search/#Django" target="_blank"&gt;#Django&lt;/a&gt; &lt;a href="https://t.co/iL9gMxy8D3" title="https://t.co/iL9gMxy8D3" target="_blank"&gt;https://t.co/iL9gMxy8D3&lt;/a&gt; via &lt;a href="https://twitter.com/@vitorfs" target="_blank"&gt;@vitorfs&lt;/a&gt;&lt;/p&gt;‚Äî Martin Uribe (@clamytoe) &lt;a href="https://twitter.com/clamytoe/status/1029561493384323073" data-datetime="2018-08-15T02:52:43+00:00"&gt;August 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;PyConAU is all sold out! Who's going next week?&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;That's it! We're sold out! There are still some spaces left at our development sprints for main conference attende‚Ä¶ &lt;a href="https://t.co/WqyipT9dq6" title="https://t.co/WqyipT9dq6" target="_blank"&gt;https://t.co/WqyipT9dq6&lt;/a&gt;&lt;/p&gt;‚Äî PyCon Australia (@pyconau) &lt;a href="https://twitter.com/pyconau/status/1030396437299773440" data-datetime="2018-08-17T10:10:29+00:00"&gt;August 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python text-to-speech!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Text to speech conversion using python using gtts &lt;a href="https://t.co/zyeDeIyiwJ" title="https://t.co/zyeDeIyiwJ" target="_blank"&gt;https://t.co/zyeDeIyiwJ&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1030939321459560448" data-datetime="2018-08-18T22:07:42+00:00"&gt;August 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Nice! A web UI for pdb!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Looks useful.. python-web-pdb: Web-based remote UI for Python's PDB debugger &lt;a href="https://t.co/J4WgKJ3EuI" title="https://t.co/J4WgKJ3EuI" target="_blank"&gt;https://t.co/J4WgKJ3EuI&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/1026866907817934854" data-datetime="2018-08-07T16:25:23+00:00"&gt;August 07, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="PSF"></category><category term="configfy"></category><category term="decorators"></category><category term="Mockaroo"></category><category term="Sketch"></category><category term="data"></category><category term="Machine Learning"></category><category term="OpenCV"></category><category term="Netflix"></category><category term="Jupyter"></category><category term="deep learning"></category><category term="TensorFlow"></category><category term="Keras"></category><category term="PyPI"></category><category term="security"></category><category term="UX"></category><category term="data visualisation"></category><category term="ripgrep"></category><category term="Django"></category><category term="Wordpress"></category><category term="Bootstrap"></category><category term="gtts"></category><category term="pdb"></category></entry><entry><title>A Python Orientation - How to Get Started</title><link href="https://pybit.es/guest-python-orientation.html" rel="alternate"></link><published>2018-08-17T09:41:00+02:00</published><updated>2018-08-17T09:41:00+02:00</updated><author><name>Andrew Knight</name></author><id>tag:pybit.es,2018-08-17:/guest-python-orientation.html</id><summary type="html">&lt;p&gt;Python is a wonderful language for both beginners and expert programmers, but getting started can be daunting. Which version should I use? Which editors are best? What do you mean there are different implementations and environments? Here's a guide to help navigate these big FAQs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is a wonderful language for both beginners and expert programmers, but getting started can be daunting. Which version should I use? Which editors are best? What do you mean there are different implementations and environments? Here's a guide to help navigate these big FAQs.&lt;/p&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;For most people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the latest version of &lt;strong&gt;Python 3&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use the¬†&lt;strong&gt;CPython&lt;/strong&gt; implementation.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;pipenv¬†&lt;/strong&gt;to manage packages and installations.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;Visual Studio Code&lt;/strong&gt; or¬†&lt;strong&gt;PyCharm&lt;/strong&gt;¬†for editing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Which Version?&lt;/h2&gt;
&lt;p&gt;Python 2 and Python 3 are actually different languages. The differences go deeper than just print statements. The &lt;a href="https://docs.python.org/3/whatsnew/"&gt;What's New in Python&lt;/a&gt; page on the official doc site lists all the gory details, and decent articles showcasing differences can be found &lt;a href="http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html"&gt;here&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/python-2-vs-python-3-practical-considerations-2"&gt;here&lt;/a&gt;, and &lt;a href="https://blog.appdynamics.com/engineering/the-key-differences-between-python-2-and-python-3/"&gt;here&lt;/a&gt;. Although Python 3 is newer, Python 2 remains prevalent. Most popular packages use¬†&lt;a href="https://packaging.python.org/distributing/#packaging-your-project"&gt;Python packaging tools&lt;/a&gt;¬†to support both versions. The &lt;a href="https://wiki.python.org/moin/Python2orPython3"&gt;Python Wiki&lt;/a&gt; makes it clear that &lt;strong&gt;Python 3 is the better choice&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Python 2.x is legacy, Python 3.x is the present and future of the language&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Furthermore, &lt;strong&gt;Python 2 will reach end-of-life in 2020&lt;/strong&gt;. The Python team will continue to provide bug fixes for 2.7 until 2020 (&lt;a href="https://www.python.org/dev/peps/pep-0373/"&gt;PEP 373&lt;/a&gt;), but there will be no new language features and no 2.8 (&lt;a href="https://www.python.org/dev/peps/pep-0404/"&gt;PEP 404&lt;/a&gt;). (Originally, end-of-life was planned for 2015, but it was pushed back by 5 years.) There is even a &lt;a href="https://pythonclock.org/"&gt;Python 2.7 Countdown&lt;/a&gt; clock online.&lt;/p&gt;
&lt;h2&gt;Which Implementation?&lt;/h2&gt;
&lt;p&gt;In purest terms, "Python" is¬†a language specification.¬†An implementation provides the language processing tools (compiler, interpreter, etc.) to run Python programs. &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's Guide to Python&lt;/a&gt; has a great article entitled &lt;a href="http://docs.python-guide.org/en/latest/starting/which-python/"&gt;Picking an Interpreter&lt;/a&gt; that provides a good summary¬†of available interpreters. Others are listed on &lt;a href="https://www.python.org/download/alternatives/"&gt;python.org&lt;/a&gt;¬†and the &lt;a href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Wiki&lt;/a&gt;. The table below provides a quick overview of the big ones.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/CPython"&gt;CPython&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;most widely used implementation&lt;/li&gt;
&lt;li&gt;the &lt;a href="https://en.wikipedia.org/wiki/Reference_implementation"&gt;reference implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;has the most libraries and support&lt;/li&gt;
&lt;li&gt;implemented in C&lt;/li&gt;
&lt;li&gt;supports Python 2 and 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;much faster than CPython&lt;/li&gt;
&lt;li&gt;much more memory efficient&lt;/li&gt;
&lt;li&gt;implemented in RPython&lt;/li&gt;
&lt;li&gt;supports Python 2 and 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.jython.org/"&gt;Jython&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implemented in Java&lt;/li&gt;
&lt;li&gt;runs on the JVM&lt;/li&gt;
&lt;li&gt;supports Python 2&lt;/li&gt;
&lt;li&gt;only a &lt;a href="https://github.com/jython/jython3"&gt;sandbox&lt;/a&gt; for Python 3&lt;/li&gt;
&lt;li&gt;no project updates since May 2015&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://ironpython.net/"&gt;IronPython&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implemented for .NET&lt;/li&gt;
&lt;li&gt;lets Python libs call .NET and vice versa&lt;/li&gt;
&lt;li&gt;supports Python 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://pythonnet.github.io/"&gt;Python for .NET&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;integrates CPython with .NET/Mono runtime&lt;/li&gt;
&lt;li&gt;supports Python 2 and 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://bitbucket.org/stackless-dev/stackless/wiki/Home"&gt;Stackless Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;branch of CPython with real threading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://micropython.org/"&gt;MicroPython&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;optimized for microcontrollers&lt;/li&gt;
&lt;li&gt;uses a subset of the standard library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unless you have a very specific reason, &lt;strong&gt;just use CPython&lt;/strong&gt;. In fact, most people are referring to CPython when they say "Python." CPython has the most compatibility, the widest package library, and the richest support. If you really need speed, consider PyPy.&lt;/p&gt;
&lt;h2&gt;Managing Installations&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; is the standard tool for installing Python packages. The simplest way to install Python is to install it "globally" for the system. In fact, some operating systems like macOS and Ubuntu have Python pre-installed. However, global installation has limitations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You may want to develop packages for both versions 2 and 3.&lt;/li&gt;
&lt;li&gt;You may not have permissions to add new packages globally.&lt;/li&gt;
&lt;li&gt;Different projects may require different versions of packages.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These problems can be solved by using "virtual" environments. A &lt;a href="https://www.python.org/dev/peps/pep-0405/"&gt;virtual environment&lt;/a&gt;¬†is like a local Python installation with a specific package set. For example, I have created virtual environments for Python as part of¬†&lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt; build jobs, since I did not have permission to install special automation packages globally on the Jenkins slaves.&lt;/p&gt;
&lt;p&gt;The standard virtual environment tool for Python is &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt;, which has been packaged with (C)Python since 3.3. (&lt;em&gt;venv&lt;/em&gt; had a command line wrapper named &lt;em&gt;pyvenv&lt;/em&gt;, but this was¬†deprecated in 3.6.) Another older but still popular third-party tool is &lt;a href="https://virtualenv.pypa.io"&gt;virtualenv&lt;/a&gt;. As explained in &lt;a href="https://www.reddit.com/r/learnpython/comments/4hsudz/pyvenv_vs_virtualenv/"&gt;this Reddit post&lt;/a&gt;, &lt;em&gt;venv¬†_is the Python-sanctioned replacement for _virtualenv&lt;/em&gt;. However, &lt;em&gt;virtualenv&lt;/em&gt; supports Python 2, whereas &lt;em&gt;venv&lt;/em&gt; does not. &lt;a href="https://conda.io/docs/"&gt;Conda&lt;/a&gt; is an environment manager popular with the science and data communities, and it can support other languages in addition to Python.&lt;/p&gt;
&lt;p&gt;That being said, there is a relatively new package manager taking the Python world by storm: &lt;a href="https://docs.pipenv.org/"&gt;pipenv&lt;/a&gt;. Pipenv combines &lt;em&gt;pip&lt;/em&gt;, &lt;em&gt;Pipfile&lt;/em&gt;, and &lt;em&gt;virtualenv&lt;/em&gt; into an easy workflow with simple commands. Personally, I find it to be very helpful. However, it has caused some controversy (see &lt;a href="https://np.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/"&gt;Reddit&lt;/a&gt;), and it may not be applicable for all scenarios (see &lt;a href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Chris Warrick's article&lt;/a&gt;). My recommendation is to &lt;strong&gt;use &lt;em&gt;pipenv&lt;/em&gt; for new projects&lt;/strong&gt; if it meets your needs.&lt;/p&gt;
&lt;h2&gt;Editors and IDEs&lt;/h2&gt;
&lt;p&gt;After setting up your Python environment, you are ready to start programming! There are two routes to take for text editing: &lt;em&gt;source code editors&lt;/em&gt; and &lt;em&gt;integrated development environments&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Source code editors are lightweight but often include basics like syntax highlighting and basic auto-completion. They're great for quick edits and light scripting. Many have plugins. Popular choices are &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;, &lt;a href="https://www.sublimetext.com/"&gt;Sublime&lt;/a&gt;, &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;, and¬†&lt;a href="https://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt;. &lt;strong&gt;My current favorite is Visual Studio Code&lt;/strong&gt; because the Python extensions are stellar and settings are simple - just remember to install the extensions you need! I use it personally for &lt;a href="http://automationpanda.com/2018/02/08/django-projects-in-visual-studio-code/"&gt;Django development&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more intense development, I highly recommend an IDE like &lt;a href="https://www.jetbrains.com/pycharm/"&gt;JetBrains PyCharm&lt;/a&gt;,¬†&lt;a href="http://www.pydev.org/"&gt;PyDev&lt;/a&gt;¬†for &lt;a href="https://eclipse.org/"&gt;Eclipse&lt;/a&gt;, &lt;a href="https://wingware.com/"&gt;Wing Python IDE&lt;/a&gt;, or &lt;a href="http://eric-ide.python-projects.org/"&gt;Eric&lt;/a&gt;. IDEs provide rich development support, especially for larger apps that use frameworks like &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, &lt;a href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt;, and &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;. They also make testing easier with plugins for test frameworks like &lt;a href="http://doc.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;, &lt;a href="http://pythonhosted.org/behave/"&gt;behave&lt;/a&gt;, and others. PyCharm and PyDev are particularly nice because they can integrate into their larger IDEs (IntelliJ IDEA and Eclipse, respectively) to handle more languages. Personally, &lt;strong&gt;I prefer PyCharm&lt;/strong&gt;, but advanced features require a paid license.&lt;/p&gt;
&lt;h2&gt;Pythonese&lt;/h2&gt;
&lt;p&gt;The Python community throws around a few terms you should know:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python-guide.org/writing/style/"&gt;Pythonic&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;describes idiomatic code for Python&lt;/li&gt;
&lt;li&gt;closely related to conciseness, readability, and elegance&lt;/li&gt;
&lt;li&gt;highly recommended to use&lt;/li&gt;
&lt;li&gt;follow style guidelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://binhminhcs.blogspot.com/2011/12/python-pythonic-pythoneer-pythonist.html"&gt;Pythonista&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;someone who loves the Python language&lt;/li&gt;
&lt;li&gt;often an advanced Python programmer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://binhminhcs.blogspot.com/2011/12/python-pythonic-pythoneer-pythonist.html"&gt;Pythoneer&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a programmer who uses Python to solve problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;The Zen of Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the list of guiding principles for Python's design&lt;/li&gt;
&lt;li&gt;run "import this" to see them&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.python.org/psf/"&gt;The Python Software Foundation&lt;/a&gt;¬†(PSF)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;non-profit org&lt;/li&gt;
&lt;li&gt;keeps Python going strong&lt;/li&gt;
&lt;li&gt;support them!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://us.pycon.org/"&gt;PyCon&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the annual Python conference held in North America&lt;/li&gt;
&lt;li&gt;&lt;em&gt;GO&lt;/em&gt; - it will &lt;a href="http://automationpanda.com/2018/05/20/pycon-2018-reflections/"&gt;change your life&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;several other conferences are held &lt;a href="https://www.python.org/community/workshops/"&gt;worldwide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Guido_van_Rossum"&gt;Benevolent Dictator for Life&lt;/a&gt;(BDFL)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Guido van Rossum&lt;/li&gt;
&lt;li&gt;the inventor of Python&lt;/li&gt;
&lt;li&gt;resigned in July 2018 but remains BDFL Emeritus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This article was originally posted at &lt;a href="https://automationpanda.com/2017/02/07/which-version-of-python-should-i-use/"&gt;AutomationPanda.com&lt;/a&gt; and has been reposted here with permission.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;&lt;a href="pages/guests.html#andrewknight"&gt;Andy&lt;/a&gt;&lt;/p&gt;</content><category term="guest"></category><category term="2vs3"></category><category term="CPython"></category><category term="PyPy"></category><category term="MicroPython"></category><category term="pip"></category><category term="pipenv"></category><category term="venv"></category><category term="virtualenv"></category><category term="Conda"></category><category term="editors"></category><category term="Pythonic"></category><category term="Pythonista"></category><category term="Zen of Python"></category><category term="pycon"></category><category term="PSF"></category><category term="BDFL"></category><category term="overview"></category><category term="reference"></category></entry><entry><title>How Promotions work in Large Corporations</title><link href="https://pybit.es/guest-promotions-large-corporations.html" rel="alternate"></link><published>2018-08-15T08:12:00+02:00</published><updated>2018-08-15T08:12:00+02:00</updated><author><name>Cristian Medina</name></author><id>tag:pybit.es,2018-08-15:/guest-promotions-large-corporations.html</id><summary type="html">&lt;p&gt;We are stoked to have Cristian Medina (&lt;a href="https://tryexceptpass.org"&gt;tryexceptpass.org&lt;/a&gt;) deliver our first soft skills article. He will go into depth on the topic of promotions and how to better position yourself as a developer. He will discuss performance reviews, the role your manager can play, networking and much more. Enjoy and keep challening yourself!&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are stoked to have Cristian Medina (&lt;a href="https://tryexceptpass.org"&gt;tryexceptpass.org&lt;/a&gt;) deliver our first soft skills article. He will go into depth on the topic of promotions and how to better position yourself as a developer. He will discuss performance reviews, the role your manager can play, networking and much more. Enjoy and keep challening yourself! Enter Cris ...&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I'm going on year 16 of my professional engineering career. Most of it spent in large and mid-size corporations. In this time, I was exposed to a number of interesting situations and processes related to performance reviews and promotions. And while I was at Pycon 2018, the topic came up in some hallway conversations. Specifically, what does one needs to do to get promoted?&lt;/p&gt;
&lt;p&gt;Anthony Shaw actually covered the basics in his &lt;a href="https://hackernoon.com/can-we-talk-about-tech-salaries-555e82b2f68c"&gt;Can we talk about tech salaries&lt;/a&gt; article about negotiating better pay. But the hallway discussion left me thinking that there's a few more things I can add to the list. Perhaps some that might help explain the process better for folks that have never been through it. Especially how it works in larger corporations.&lt;/p&gt;
&lt;p&gt;When the guys from Pybites suggested collaborating on a new post on soft-skills, I thought this would be a good topic to cover. So here we are.&lt;/p&gt;
&lt;h2&gt;The Not-So-Obvious Obvious&lt;/h2&gt;
&lt;p&gt;First thing is first: Be good at what you do (i.e. your primary job), otherwise the conversation is over before it even started. Were it gets tricky though, is how you measure "good". Each company has multiple ways of doing that, usually different between business units.&lt;/p&gt;
&lt;p&gt;Second thing: Don't just stop at your job responsibilities, make it your mission to learn about how to improve your environment. I know this is broad, but that's the point. If it means learning a new programming language, a new tool, or new methodologies, it's on you to stay up to date with your chosen profession and how you can apply recent developments to your environment. Not only is it good for you, but keeping your department and organization up-to-date can even make it resilient to future complications.&lt;/p&gt;
&lt;p&gt;Some businesses have a core set of values against which they'll evaluate what you're delivering. These tend to be "esoteric" things like "innovation that matters", usually very abstract and hard to measure (this is likely on purpose). To use this phrase as an example, who is the innovation supposed to matter to? your clients? your coworkers? the "business"?&lt;/p&gt;
&lt;p&gt;Other organizations will rate you on specific measurable criteria. This brings the problem of understanding which criteria matters to your job role. For example, while it might mean a lot to you personally that you've made 5000 commits (more than anyone else) to the most important codebase the company owns, maybe the company wants to optimize dollars spent building code. In this case you just cost the company more money than everyone else, and therefore had the worst job performance.&lt;/p&gt;
&lt;p&gt;Other companies will instead have a list of specific criteria for each of the "steps" in your career ladder. Keep in mind though that this ladder is for the career that your job category falls into, not necessarily the one that YOU want to climb. The criteria could also be abstract concepts, like step 1 would be "implements the vision", while step 2 is "interprets the vision", and step 3 is "has vision". And yes, there are all kinds of jokes you can make about what you need to do to have visions, but this is a real thing I've seen in several places.&lt;/p&gt;
&lt;p&gt;It's very important that you first understand how to provide value inside your company. Which is not to say that it works the same inside your organization, or even your department. Usually there's other "flavoring" added to each of those items depending on where you work, who you work for, who they report to, and even who they report to.&lt;/p&gt;
&lt;p&gt;Make sure you find mentors or other folks in the organization that have gone through several steps in the ladder WHILE WORKING AT YOUR COMPANY. They can help you understand what matters. Your manager can help point you to these folks, and if not, a peer manager should have some input as well.&lt;/p&gt;
&lt;h2&gt;Performance Reviews&lt;/h2&gt;
&lt;p&gt;Ok, now that you you've determined how value is measured, it's important to make your performance reviews, especially the written ones, all about how you deliver on that value. Sometimes you won't be able to put things in the same terms, but that's where you talk to your manager and ask for advice. Don't forget to mention any research or studies you completed, even if their conclusions were not what you expected.&lt;/p&gt;
&lt;p&gt;Performance reviews are not a place to hold back, this is where you get to be a rockstar. Being humble will not help you here. You don't need to write an essay, bullet lists are usually better. You could categorize the bullets by your organization's criteria, if it helps.&lt;/p&gt;
&lt;h2&gt;Your Manager&lt;/h2&gt;
&lt;p&gt;Managing people is NOT easy. In general, management chains tend to get a bad rep for bad decisions, but they hardly ever talk about the good ones, though I suppose this is how it should be. I haven't been a manager myself, but I have been in team-lead or "coaching" roles in different organizations, and even outside of business environments. You learn real quick that people aren't easy. Keeping track of who has what problem, when, why, who can fix it, where they can fix it and with what kind of help is NOT a simple thing.&lt;/p&gt;
&lt;p&gt;YOUR job is not only to be good at what you do, but to make your managers job easy. If your manager gets a ping from someone external to your department about something dumb you did, that's yet one more thing that they have to deal with in their day. If they show up at some higher-up meeting and are asked something that you did not prep them for, they might look stupid without a good answer. That's one more thing they have to worry about next time they present your project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YOUR job is not only to be good at what you do, but to make your managers job easy. If you can't point to things you do to make your manager's job easier, then moving up the chain gets a little harder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Money&lt;/h2&gt;
&lt;p&gt;Promotions DO NOT imply more money. Sometimes they do, sometimes they don't. When you're looking for a promotion, make sure to understand what you're getting yourself into. Sometimes there's a promise of money, but it winds up being a 1% raise for 50% more responsibility. If you don't ask, you'll find out the hard way. Don't make your life more complicated than it needs to be.&lt;/p&gt;
&lt;p&gt;Back to an earlier point about the steps in the career ladder, it's important to have an understanding of salary ranges for each of those steps. Usually there's a very strict range for each step, and where you are on that range is very important. If you're on the lower end, then your higher priority is to keep doing what your doing and look for a raise. If you're on the higher end, there's no point in having a conversation about a raise, because you need to be promoted first before you can get one. Your manager can usually tell you where you stand, some companies even require them to do so.&lt;/p&gt;
&lt;h2&gt;Networking&lt;/h2&gt;
&lt;p&gt;On top of all this, there's "tribal knowledge". The grape vine is a real thing and it always has information about what certain management chains may or may not want, who might be leaving their position soon, who might be wanting to come in, who might be on the outs with their manager. This is NOT about gossip or hearsay, instead it's about taking the pulse for your organization. You need to understanding it such that you can gain insight into the opportunities that may or may not interest you.&lt;/p&gt;
&lt;p&gt;Sometimes it's not until you have these conversations with your coworkers that you realize that things aren't heading in the direction you need them to go. This can help you determine whether it's better to spend time vying for a promotion, or to start looking for another job.&lt;/p&gt;
&lt;p&gt;Networking also helps you find other jobs within the same company that may have the career ladders you'd prefer to climb. Or different environments where you think you can better excel. They might even be in departments with peer managers, which makes life easier because you already understand the organization.&lt;/p&gt;
&lt;h2&gt;The Meeting&lt;/h2&gt;
&lt;p&gt;Large corporations don't tend to go around thinking: "Oh! This guy did a great job! Promote him!" It doesn't matter how much they want you to think they do, that's not how it works. It's all a numbers game.&lt;/p&gt;
&lt;p&gt;For example, the business may have a percentage of the budget set aside for promotions, which they usually equate to a count of how many people they can promote for the year. Then that number gets distributed amongst all the business units, which then divide it by the different steps in the ladders (i.e. we can do 50 step 0-to-1 promotions, 25 1-to-2, 10 2-to-3, etc.) They then trickle it down to the organizations and departments, normally stopping at the 2nd-line manager level. The distribution method varies greatly between companies, some base it on how the business units did against their goals for the year, some base it on % revenue generated by the units, etc.&lt;/p&gt;
&lt;p&gt;At this point, there's usually a meeting where your 2nd-line gathers his troops (your manager and his peers), to decide who gets what promotion to which step. Now comes the tricky part. Each manager brings a list of his candidates, and they all discuss each candidate and their accomplishments.&lt;/p&gt;
&lt;p&gt;Some folks don't really understand the significance of this point: Every peer-manager in your organization will likely have a say on whether you get a promotion or not. On top of that, as we discussed earlier, a promotion to each step of the ladder has its own set of rules, which also involves approvals. The higher the step in the ladder the higher up the management chain you go for approvals. That's why it's sometimes easy to get the very first promotion which only takes your direct manager and his manager approve.&lt;/p&gt;
&lt;p&gt;What does this mean to you? It's not enough to do a good job for YOUR manager, you should also do things to help your coworkers in other departments. If the peer-managers haven't even heard of you, how can they be ok with giving up their guy's promotion to you! Back to making your manager's job easy, this is a key aspect of it.&lt;/p&gt;
&lt;h2&gt;What can you do to improve your chances?&lt;/h2&gt;
&lt;p&gt;If you help other people, make note of it in your performance reviews. Remember, it's not about bragging, it's about making your manager's job easy. When that peer manager doesn't know who you are, he could say: that's the guy that helped you with the XYZ task you were stuck with last month.&lt;/p&gt;
&lt;p&gt;Let's say you were super helpful and your colleagues want to take you out for lunch. They want to thank you for this cool thing you made for them that greatly simplifies their lives. Tell them you'd love to go out for lunch with them, but they should save their money and instead of buying lunch, email your manager AND their manager thanking you for the work. On the flip side, you should do the same for them! When you think someone did a great job at something, email them and copy your managers. It helps everyone.&lt;/p&gt;
&lt;h2&gt;Finding opportunities to help&lt;/h2&gt;
&lt;p&gt;Helping other organizations or departments doesn't have to be complicated. As a programmer, this might be simpler than you think. Here's a few quick ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Develop tests for fellow programmers. Having another set of eyes that don't know the codebase usually leads to interesting questions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Help review someone else's code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If other departments maintain APIs, try writing wrappers for those APIs. This usually provides good insight and will help them with testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run some short training sessions on topics you find interesting or anything new that you've learned. Passing new knowledge onto other coworkers is a great way for you to easily retain the info.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many times you'll engage with individuals or departments that have to run a lot of metrics. Sometimes, these folks are burdened by company "tools" and their limitations. Try lending a hand in configuring those tools so they make more sense, or help formulate "advanced queries" with actual SQL instead of the limited options given by GUIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since you now know what your company finds important to measure, why not put some internal website together to help visualize it. You can graph defect data, support cases, performance data, test execution, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring tools are also useful. If you run any kind of infrastructure that's expected to be up-and-running most of the time, it's not hard to make a few simple systems that can alert when they go down, or call REST APIs to check on statuses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep an eye out for scriptable work. Generating reports is a great example, as well as tasks like onboarding recruits or cleaning up resources after other people.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There's always some kind of resource management or inventory system that could help a department track things better, or automate something.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Did you recently fail at trying to implement something with a given approach or technology? Pass on the knowledge in a tech talk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;When I was naive and early in my career, I definitely wish someone sat me down and went over these points. It would've saved me lots of frustration and heartache. I hope you find them useful.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;&lt;a href="pages/guests.html#crismedina"&gt;Cris&lt;/a&gt;&lt;/p&gt;</content><category term="promotions"></category><category term="software developer"></category><category term="job"></category><category term="negotiation"></category><category term="soft skills"></category><category term="performance review"></category><category term="salaries"></category><category term="manager"></category><category term="networking"></category><category term="opportunities"></category></entry><entry><title>PyBites Twitter Digest - Issue 26, 2018</title><link href="https://pybit.es/twitter_digest_201826.html" rel="alternate"></link><published>2018-08-05T22:19:00+02:00</published><updated>2018-08-05T22:19:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-08-05:/twitter_digest_201826.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;PyPI has a Twitter Account! Follow them!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Welcome to the home of &lt;a href="https://t.co/Dp6LQFTOTZ" title="https://t.co/Dp6LQFTOTZ" target="_blank"&gt;https://t.co/Dp6LQFTOTZ&lt;/a&gt; on twitter! You can follow here for announcements about the package‚Ä¶ &lt;a href="https://t.co/RJmWNKHQey" title="https://t.co/RJmWNKHQey" target="_blank"&gt;https://t.co/RJmWNKHQey&lt;/a&gt;&lt;/p&gt;‚Äî Python Package Index (@pypi) &lt;a href="https://twitter.com/pypi/status/1025205344660856838" data-datetime="2018-08-03T02:22:56+00:00"&gt;August 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Congrats to our mate Cristian Medina! Very proud!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Yay! I'm now officially a Contributing Member of the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Software Foundation!&lt;/p&gt;‚Äî Cristian Medina (@tryexceptpass) &lt;a href="https://twitter.com/tryexceptpass/status/1024830648849248258" data-datetime="2018-08-02T01:34:01+00:00"&gt;August 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;While we're at it, check out Cristian's awesome write up on asyncio in Python 3.7&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;As promised in my &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; guest episode, this is my summary of the &lt;a href="https://twitter.com/search/#asyncio" target="_blank"&gt;#asyncio&lt;/a&gt; changes in the recent &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; 3.7‚Ä¶ &lt;a href="https://t.co/WfNoqwEDUZ" title="https://t.co/WfNoqwEDUZ" target="_blank"&gt;https://t.co/WfNoqwEDUZ&lt;/a&gt;&lt;/p&gt;‚Äî Cristian Medina (@tryexceptpass) &lt;a href="https://twitter.com/tryexceptpass/status/1024696052480466944" data-datetime="2018-08-01T16:39:11+00:00"&gt;August 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Very cool use case of OpenCV&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ASpannbauer:" target="_blank"&gt;@ASpannbauer:&lt;/a&gt; Wrote some &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/search/#OpenCV" target="_blank"&gt;#OpenCV&lt;/a&gt; code to convert an image to an interactive animation while on the ‚úàÔ∏è to SFO. Had &lt;a href="https://twitter.com/search/#pyimagecon‚Ä¶" target="_blank"&gt;#pyimagecon‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1026061396537163776" data-datetime="2018-08-05T11:04:34+00:00"&gt;August 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;New Talk Python course on Pyramid and SQLAlchemy!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Using SQLAlchemy and Pyramid to build web applications with Python may be the very best way to work with a relational datab‚Ä¶&lt;/p&gt;‚Äî Jason Wattier (@jmwatt3) &lt;a href="https://twitter.com/jmwatt3/status/1025032829128847360" data-datetime="2018-08-02T14:57:25+00:00"&gt;August 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Security vulnerability alerts for Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; Security vulnerability alerts for Python &lt;a href="https://t.co/36srAmzpzQ" title="https://t.co/36srAmzpzQ" target="_blank"&gt;https://t.co/36srAmzpzQ&lt;/a&gt;&lt;/p&gt;‚Äî Rene Sanchez (@cod3ghoul) &lt;a href="https://twitter.com/cod3ghoul/status/1025708006074400773" data-datetime="2018-08-04T11:40:20+00:00"&gt;August 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Now this one looks like fun! A serverless blog!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Creating a Serverless Blog with Chalice &amp;gt;&amp;gt; &lt;a href="https://t.co/Qpz7phLMMo" title="https://t.co/Qpz7phLMMo" target="_blank"&gt;https://t.co/Qpz7phLMMo&lt;/a&gt; by &lt;a href="https://twitter.com/@timbaney1989" target="_blank"&gt;@timbaney1989&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#awslambda" target="_blank"&gt;#awslambda&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1025365579090210816" data-datetime="2018-08-03T12:59:39+00:00"&gt;August 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;TensorFlow supports the Raspberry Pi!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's been our goal since we launched to run on as many platforms as possible. We're happy to announce that it's now‚Ä¶ &lt;a href="https://t.co/NoIcOUj7jg" title="https://t.co/NoIcOUj7jg" target="_blank"&gt;https://t.co/NoIcOUj7jg&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/1025094601244385280" data-datetime="2018-08-02T19:02:52+00:00"&gt;August 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Chris Weaver, a PyImageSearch Gurus graduate, just released a really neat tool called "vidpipe", allowing you to vi‚Ä¶ &lt;a href="https://t.co/NUfpDg9Wuw" title="https://t.co/NUfpDg9Wuw" target="_blank"&gt;https://t.co/NUfpDg9Wuw&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1024281479424237570" data-datetime="2018-07-31T13:11:49+00:00"&gt;July 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python text mining at its best ha!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Terrific blog from &lt;a href="https://twitter.com/@johnwmillr" target="_blank"&gt;@johnwmillr&lt;/a&gt; doing Python text mining on country music lyrics. What artists talk about trucks, wh‚Ä¶ &lt;a href="https://t.co/EV5I9OtaOk" title="https://t.co/EV5I9OtaOk" target="_blank"&gt;https://t.co/EV5I9OtaOk&lt;/a&gt;&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/1024662265436549120" data-datetime="2018-08-01T14:24:56+00:00"&gt;August 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;More OpenCV. I know some people who'd get a kick out of this!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Finger Detection and Tracking using OpenCV and Python &lt;a href="https://t.co/Vm1eZLy6Vn" title="https://t.co/Vm1eZLy6Vn" target="_blank"&gt;https://t.co/Vm1eZLy6Vn&lt;/a&gt; by &lt;a href="https://twitter.com/@iamarpandey" target="_blank"&gt;@iamarpandey&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1025322147290337281" data-datetime="2018-08-03T10:07:04+00:00"&gt;August 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Get it right from the start&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Good specifications will always improve programmer productivity far better than any programming tool or technique." - Milt Bryce&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1025359880062951425" data-datetime="2018-08-03T12:37:00+00:00"&gt;August 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Twilio studio is Generally Available! Nice!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;We're so excited that Twilio Studio, our revolutionary visual development environment is Generally Available starti‚Ä¶ &lt;a href="https://t.co/4BwrUspA8g" title="https://t.co/4BwrUspA8g" target="_blank"&gt;https://t.co/4BwrUspA8g&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/1025373558523011074" data-datetime="2018-08-03T13:31:21+00:00"&gt;August 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Create a Windows Service in Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to create a Windows Service in Python &lt;a href="https://t.co/iVVFWwWAkR" title="https://t.co/iVVFWwWAkR" target="_blank"&gt;https://t.co/iVVFWwWAkR&lt;/a&gt; by &lt;a href="https://twitter.com/@thepythoncorner" target="_blank"&gt;@thepythoncorner&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1025050440776314880" data-datetime="2018-08-02T16:07:24+00:00"&gt;August 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;I laughed out loud!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@fogus:" target="_blank"&gt;@fogus:&lt;/a&gt; There are three hard problems in computer science: 1) Converting from PDF, 2) Converting to PDF, and 3) O“ò“â“â“â π‚Ä¶&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/1025071211255156738" data-datetime="2018-08-02T17:29:56+00:00"&gt;August 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Python 3.7"></category><category term="asyncio"></category><category term="PyPI"></category><category term="Pyramid"></category><category term="SQLAlchemy"></category><category term="security"></category><category term="Chalice"></category><category term="AWS"></category><category term="Lambda"></category><category term="TensorFlow"></category><category term="Raspberry Pi"></category><category term="OpenCV"></category><category term="data science"></category><category term="Twilio"></category><category term="Windows"></category></entry><entry><title>PyBites Twitter Digest - Issue 25, 2018</title><link href="https://pybit.es/twitter_digest_201825.html" rel="alternate"></link><published>2018-07-31T21:15:00+02:00</published><updated>2018-07-31T21:15:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-07-31:/twitter_digest_201825.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Congrats to our mate Andy Knight for his awesome talk at PyOhio!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;EGAD! How do we start writing (better) tests? Thanks to everyone who attended! &lt;a href="https://twitter.com/search/#PyOhio" target="_blank"&gt;#PyOhio&lt;/a&gt; &lt;a href="https://t.co/mV2KTtt1dH" title="https://t.co/mV2KTtt1dH" target="_blank"&gt;https://t.co/mV2KTtt1dH&lt;/a&gt;&lt;/p&gt;‚Äî Automation Panda (@AutomationPanda) &lt;a href="https://twitter.com/AutomationPanda/status/1023306307896524800" data-datetime="2018-07-28T20:36:50+00:00"&gt;July 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Always awesome to see organisations encouraging kids to focus on STEM related learning!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;.&lt;a href="https://twitter.com/@Girlscouts" target="_blank"&gt;@Girlscouts&lt;/a&gt; announced that it's to introduce new badges centering STEM and other technology-related issues; ‚Äú‚Ä¶badg‚Ä¶ &lt;a href="https://t.co/9ucUcS4aTg" title="https://t.co/9ucUcS4aTg" target="_blank"&gt;https://t.co/9ucUcS4aTg&lt;/a&gt;&lt;/p&gt;‚Äî Kode With Klossy (@kodewithklossy) &lt;a href="https://twitter.com/kodewithklossy/status/1022504248091856896" data-datetime="2018-07-26T15:29:44+00:00"&gt;July 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A complete guide to documenting Python code by Real Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; üêçüì∞ Documenting Python Code: A Complete Guide &lt;a href="https://t.co/C1ZwOUUsqZ" title="https://t.co/C1ZwOUUsqZ" target="_blank"&gt;https://t.co/C1ZwOUUsqZ&lt;/a&gt;&lt;/p&gt;‚Äî Rene Sanchez (@cod3ghoul) &lt;a href="https://twitter.com/cod3ghoul/status/1022608610285764611" data-datetime="2018-07-26T22:24:26+00:00"&gt;July 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;More Python Testing love!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@miguelgfierro:" target="_blank"&gt;@miguelgfierro:&lt;/a&gt; New post: A Beginner's Guide to Python Testing &lt;a href="https://t.co/cdPeAOrdDn" title="https://t.co/cdPeAOrdDn" target="_blank"&gt;https://t.co/cdPeAOrdDn&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1023426414010281985" data-datetime="2018-07-29T04:34:06+00:00"&gt;July 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Ha!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Incorrect code comments. Useless code comments. Uncommented code. &lt;a href="https://t.co/wa8UPNScLE" title="https://t.co/wa8UPNScLE" target="_blank"&gt;https://t.co/wa8UPNScLE&lt;/a&gt;&lt;/p&gt;‚Äî Al Sweigart (@AlSweigart) &lt;a href="https://twitter.com/AlSweigart/status/1022699791158063104" data-datetime="2018-07-27T04:26:45+00:00"&gt;July 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Object tracking in video! More gold from Adrian Rosebrock&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Today we're kicking off a brand new series on Object Tracking! üöÄ In this post you'll learn how to apply the simple‚Ä¶ &lt;a href="https://t.co/4AMfIA8OOE" title="https://t.co/4AMfIA8OOE" target="_blank"&gt;https://t.co/4AMfIA8OOE&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1021395748569706501" data-datetime="2018-07-23T14:04:57+00:00"&gt;July 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;This is such a thought provoking and deep thread I had to include it. Just read it!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ferrisjabr:" target="_blank"&gt;@ferrisjabr:&lt;/a&gt; If you put chalk under a powerful microscope‚Äîwhite cliffs of Dover type chalk, not the modern blackboard variety‚Äîyou will s‚Ä¶&lt;/p&gt;‚Äî Enthought Inc. (@enthought) &lt;a href="https://twitter.com/enthought/status/1022618463809007616" data-datetime="2018-07-26T23:03:35+00:00"&gt;July 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A great reminder that the shape matters!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@DataRemixed:" target="_blank"&gt;@DataRemixed:&lt;/a&gt; Stats Quiz: The average NFL player is about 25 years old, just over 6'2" in height, weighs a little more than 244lbs and m‚Ä¶&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/1022787486429470720" data-datetime="2018-07-27T10:15:13+00:00"&gt;July 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Definitely something I need to keep in mind more often&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Always implement things when you actually need them, never when you just foresee that you need them." - Ron Jeffries&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1023606330588913665" data-datetime="2018-07-29T16:29:01+00:00"&gt;July 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Now THIS is a useful regex!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;(?i) makes a regular expression case-insensitive. Example: (?i)abc is the same as [aA][bB][cC].&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1022859552646221824" data-datetime="2018-07-27T15:01:35+00:00"&gt;July 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Git Blame!!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nnja:" target="_blank"&gt;@nnja:&lt;/a&gt; ‚ö°Ô∏è TIL about git-blame-someone-else ‚ö°Ô∏è It does exactly what you'd expect it to. Source at &lt;a href="https://t.co/woaDagPHIf" title="https://t.co/woaDagPHIf" target="_blank"&gt;https://t.co/woaDagPHIf&lt;/a&gt; &lt;a href="https://t.co/D‚Ä¶" title="https://t.co/D‚Ä¶" target="_blank"&gt;https://t.co/D‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Martin Uribe (@clamytoe) &lt;a href="https://twitter.com/clamytoe/status/1022330118969221120" data-datetime="2018-07-26T03:57:48+00:00"&gt;July 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Data Science and Linear Algebra Fundamentals with Python, SciPy, &amp;amp; NumPy &lt;a href="https://t.co/xiTF5PiUeQ" title="https://t.co/xiTF5PiUeQ" target="_blank"&gt;https://t.co/xiTF5PiUeQ&lt;/a&gt; &lt;a href="https://t.co/PyVKXld4Ih" title="https://t.co/PyVKXld4Ih" target="_blank"&gt;https://t.co/PyVKXld4Ih&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/1023221706901663744" data-datetime="2018-07-28T15:00:40+00:00"&gt;July 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Hands on with Python 3.7&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A summary of what's new in Python 3.7 &lt;a href="https://t.co/HsaLBmsZMY" title="https://t.co/HsaLBmsZMY" target="_blank"&gt;https://t.co/HsaLBmsZMY&lt;/a&gt; by &lt;a href="https://twitter.com/@hackaday" target="_blank"&gt;@hackaday&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1021788944503984128" data-datetime="2018-07-24T16:07:22+00:00"&gt;July 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Hunt down slow pytest tests&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@cameronmaske:" target="_blank"&gt;@cameronmaske:&lt;/a&gt; Slow tests making you sad? Here is how you easily hunt them down with pytest. Simply include `--duration=10` in your `‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/1021852176489111552" data-datetime="2018-07-24T20:18:38+00:00"&gt;July 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;pathlib.Path has methods for reading and writing files: from pathlib import Path fname = Path('sometxt.txt') fname‚Ä¶ &lt;a href="https://t.co/sU3fbAYI8k" title="https://t.co/sU3fbAYI8k" target="_blank"&gt;https://t.co/sU3fbAYI8k&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1022823248424259584" data-datetime="2018-07-27T12:37:20+00:00"&gt;July 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="STEM"></category><category term="kids"></category><category term="learning"></category><category term="girl scouts"></category><category term="PyOhio"></category><category term="community"></category><category term="documentation"></category><category term="testing"></category><category term="OpenCV"></category><category term="deep learning"></category><category term="data visualisation"></category><category term="Git"></category><category term="data science"></category><category term="Twilio"></category><category term="Python 3.7"></category><category term="pytest"></category><category term="pathlib"></category></entry><entry><title>Why Python is Great for Test Automation</title><link href="https://pybit.es/guest-python-test-automation.html" rel="alternate"></link><published>2018-07-25T21:52:00+02:00</published><updated>2018-07-25T21:52:00+02:00</updated><author><name>Andrew Knight</name></author><id>tag:pybit.es,2018-07-25:/guest-python-test-automation.html</id><summary type="html">&lt;p&gt;Testing in Python is consistently growing in popularity. In this article our friend Andrew Knight from Automation Panda walks through 10 reasons why Python is great for Test Automation.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Testing in Python is consistently growing in popularity. In this article our friend Andrew Knight from Automation Panda walks through 10 reasons why Python is great for Test Automation.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="http://automationpanda.com/python/"&gt;Python&lt;/a&gt; is an incredible programming language. As Dan Callahan said in¬†&lt;a href="https://youtu.be/ITksU31c1WY?t=409"&gt;his PyCon 2018 keynote&lt;/a&gt;, "Python is the second best language for anything, and that's an amazing aspiration." For test automation, however, I believe it is one of¬†&lt;em&gt;the&lt;/em&gt; best choices. Here are ten reasons why:&lt;/p&gt;
&lt;h2&gt;1: The Zen of Python&lt;/h2&gt;
&lt;p&gt;The Zen of Python, as codified in &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;PEP 20&lt;/a&gt;, is an¬†&lt;em&gt;ideal&lt;/em&gt;¬†guideline for test automation. Test code should be a natural bridge between plain-language test steps and the programming calls to automate them. Tests should be readable and descriptive because they describe the features under test. They should be explicit in what they cover. Simple steps are better than complicated ones. Test code should add minimal extra verbiage to the tests themselves. Python, in its concise elegance, is a powerful bridge from test case to test code. (Want a shortcut to the Zen of Python? Run &lt;code&gt;import this&lt;/code&gt; at the Python interpreter.)
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;2: pytest&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://automationpanda.com/2017/03/14/python-testing-101-pytest/"&gt;pytest&lt;/a&gt; is one of the best test frameworks currently available in¬†&lt;em&gt;any&lt;/em&gt; language, not just for Python. It can handle any functional tests: unit, integration, and end-to-end. Test cases are written simply as functions (meaning no side effects as long as globals are avoided) and can take parametrized inputs. Fixtures are a generic, reusable way to handle setup and cleanup operations. Basic "assert" statements have automatic introspection so failure messages print meaningful values. Tests can be filtered when executed. Plugins extent pytest to do code coverage, run tests in parallel, use Gherkin scenarios, and integrate with other frameworks like Django and Flask. Other Python test frameworks are great, but pytest is by far the best-in-show. (Pythonic frameworks always win in Python.)
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;3: Packages&lt;/h2&gt;
&lt;p&gt;For all the woes about the &lt;a href="https://wiki.python.org/moin/CheeseShop"&gt;CheeseShop&lt;/a&gt;, Python has a rich library of useful packages for testing: &lt;a href="https://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt;, &lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/logging.html"&gt;logging&lt;/a&gt;, &lt;a href="http://www.paramiko.org/"&gt;paramiko&lt;/a&gt;, &lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt;, &lt;a href="https://www.seleniumhq.org/projects/webdriver/"&gt;Selenium WebDriver&lt;/a&gt;, &lt;a href="https://splinter.readthedocs.io/en/latest/"&gt;Splinter&lt;/a&gt;, &lt;a href="https://hypothesis.readthedocs.io/en/latest/index.html"&gt;Hypothesis&lt;/a&gt;, and others are available as off-the-shelf ingredients for custom automation recipes. They're just a "pip install" away. No reinventing wheels here!
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;4: Multi-Paradigm&lt;/h2&gt;
&lt;p&gt;Python is object-oriented &lt;em&gt;and&lt;/em&gt; functional. It lets programmers decide if functions or classes are better for the needs at hand. This is a major boon for test automation because (a) stateless functions avoid side effects and (b) simple syntax for those functions make them readable. pytest itself uses functions for test cases instead of shoehorning them into classes (√† la JUnit).
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;5: Typing Your Way&lt;/h2&gt;
&lt;p&gt;Python's out-of-the-box dynamic duck typing is great for test automation because most feature tests ("above unit") don't need to be picky about types. However, when static types are needed, projects like &lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt;, &lt;a href="https://pyre-check.org/"&gt;Pyre&lt;/a&gt;, and &lt;a href="https://github.com/Instagram/MonkeyType"&gt;MonkeyType&lt;/a&gt;¬†come to the rescue. Python provides typing both ways!
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;6: IDEs&lt;/h2&gt;
&lt;p&gt;Good IDE support goes a long way to make a language and its frameworks easy to use. For Python testing, &lt;a href="https://www.jetbrains.com/pycharm/"&gt;JetBrains PyCharm&lt;/a&gt; supports &lt;a href="https://www.youtube.com/watch?v=FjojZxDZscQ"&gt;visual testing&lt;/a&gt; with pytest, unittest, and doctest out of the box, and its Professional Edition includes support for BDD frameworks (like pytest-bdd, behave, and lettuce) and Web development. For a lighter offering, &lt;a href="https://code.visualstudio.com/docs/languages/python"&gt;Visual Studio Code&lt;/a&gt;¬†is taking the world by storm. Its Python extensions support all the good stuff: snippets, linting, environments, debugging, testing, and a command line terminal right in the window. &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;, &lt;a href="https://www.sublimetext.com/"&gt;Sublime&lt;/a&gt;, &lt;a href="http://www.pydev.org/"&gt;PyDev&lt;/a&gt;, and &lt;a href="https://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt; also get the job done.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;7: Command Line Workflow&lt;/h2&gt;
&lt;p&gt;Python and the command line are like peanut butter and jelly - a match made in heaven. The entire test automation workflow can be driven from the command line. &lt;a href="http://automationpanda.com/2018/04/16/pipenv-python-packagement-for-champions/"&gt;Pipenv&lt;/a&gt; can manage packages and environments. Every test framework has a console runner to discover and launch tests. There's no need to "build" test code first because Python is an interpreted language, further simplifying execution. Rich command line support makes testing easy to manage manually, with tools, or as part of build scripts / CI pipelines. As a bonus, automation modules can be called from the Python REPL interpreter. What does this mean? Automation-assisted exploratory testing! Imagine using Python calls to automatically steer a Web app to a point that requires a manual check. Python makes it possible.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;8: Ease of Entry&lt;/h2&gt;
&lt;p&gt;Python has always been friendly to beginners thanks to its Zen, whether those beginners are programming newbies or expert engineers. This gives Python a big advantage as an automation language choice because tests need to be done quickly and easily. Nobody wants to waste time when the features are in hand and just need to be verified. Plus, many manual software testers (often without programming experience) are now starting to do automation work (by choice or by force) and benefit from Python's low learning curve.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;9: Strength for Scalability&lt;/h2&gt;
&lt;p&gt;Even though Python is great for beginners, it's also no toy language. Python has industrial-grade strength because its design always favors one right way to get a job done. Development can scale thanks to meaningful syntax, good structure, modularity, and a rich ecosystem of tools and packages. Command line versatility enables it to fit into any tool or workflow. The fact that Python may be &lt;a href="https://medium.com/@anthonypjshaw/why-is-python-so-slow-e5074b6fe55b"&gt;slower than other languages&lt;/a&gt;¬†is¬†not an issue for feature tests because system delays (such as response times for Web pages and REST calls) are orders of magnitude slower than language-level performance hits.
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;10: Popularity&lt;/h2&gt;
&lt;p&gt;Python is one of¬†&lt;em&gt;the&lt;/em&gt; most popular programming languages in the world today. It is consistently ranked near the top on &lt;a href="https://www.tiobe.com/tiobe-index/"&gt;TIOBE&lt;/a&gt;, &lt;a href="https://insights.stackoverflow.com/survey/2018/"&gt;Stack Overflow&lt;/a&gt;, and &lt;a href="https://octoverse.github.com/"&gt;GitHub&lt;/a&gt; (as well as &lt;a href="http://githut.info/"&gt;GitHut&lt;/a&gt;). It is a beloved choice for Web developers, infrastructure engineers, data scientists, and test automationeers alike. The Python community also powers it forward. There is no shortage of Python developers, nor is there any dearth of support online. Python is not going away anytime soon. (Python 3, that is.)
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Other Languages?&lt;/h2&gt;
&lt;p&gt;The purpose of this article is to highlight what makes Python great for test automation based on its own merits. Although I strongly believe that Python is one of the best automation languages, other choices like Java, C#, and Ruby are also viable. Check out my article¬†&lt;a href="http://automationpanda.com/2017/01/21/the-best-programming-language-for-test-automation/"&gt;The Best Programming Language for Test Automation&lt;/a&gt;¬†for a comparison.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article was posted with the author's permission on both &lt;a href="https://automationpanda.com/"&gt;Automation Panda&lt;/a&gt; and &lt;a href="https://pybit.es/"&gt;PyBites&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;&lt;a href="pages/guests.html#andrewknight"&gt;Andy&lt;/a&gt;&lt;/p&gt;</content><category term="guest"></category><category term="test"></category><category term="testing"></category><category term="automation"></category><category term="tdd"></category><category term="selenium"></category><category term="pytest"></category><category term="IDE"></category></entry><entry><title>My Anaconda Workflow: Python environment and package management made easy</title><link href="https://pybit.es/guest-anaconda-workflow.html" rel="alternate"></link><published>2018-07-24T20:00:00+02:00</published><updated>2018-07-24T20:00:00+02:00</updated><author><name>Martin Uribe</name></author><id>tag:pybit.es,2018-07-24:/guest-anaconda-workflow.html</id><summary type="html">&lt;p&gt;in this article martin provides an easy-to-follow reference guide of his anaconda workflow. he uses this to make his life easier managing the his python environment and package dependencies. and to great avail as you will soon discover. not only will you learn the basics of the powerful conda tool, he also goes into more depth on the more niche/advanced features like using alternate channels, distributing and cloning environments, updating anaconda, and setting environment variables. warning: this might get you on anaconda, and if you are already you probably want to keep this one nearby for reference.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article Martin provides an easy-to-follow reference guide of his Anaconda workflow. He uses this to make his life easier managing the his Python environment and package dependencies. And to great avail as you will soon discover. Not only will you learn the basics of the powerful conda tool, he also goes into more depth on the more niche/advanced features like using alternate channels, distributing and cloning environments, updating Anaconda, and setting environment variables. Warning: this might get you on Anaconda, and if you are already you probably want to keep this one nearby for reference. Enter Martin: &lt;/p&gt;
&lt;h1&gt;My Anaconda Workflow&lt;/h1&gt;
&lt;p&gt;I've been working with &lt;a href="https://anaconda.org/"&gt;Anaconda&lt;/a&gt; for a while now and I've been relatively pleased with it. I'll admit, there was a bit of a learning curve at first, but hopefully I can get you past that initial hump with this write-up. There are lots of commands and covering them all is better done in the official &lt;a href="https://docs.anaconda.com/anaconda-cloud/user-guide/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I've covered here is just what I use most often and should get you comfortable with using Anaconda.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Index&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-virtual-environment"&gt;Create Virtual Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list_virtual_environments"&gt;List Virtual Environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remove_virtual_environment"&gt;Remove Virtual Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#search_for_packages"&gt;Search for Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install_packages"&gt;Install Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#current_environment"&gt;Current Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other_environment"&gt;Other Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install_packages_not_found"&gt;Install Packages Not Found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#search_alternate_channels"&gt;Search Alternate Channels&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install_package_from_a_channel"&gt;Install Package From A Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#add_additional_channels"&gt;Add Additional Channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install_packages_with_pip"&gt;Install Packages With Pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remove_packages"&gt;Remove Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install_packages_while_creating_environment"&gt;Install Packages While Creating Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#export_environment_configuration"&gt;Export Environment Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create_environment_from_yaml_file"&gt;Create Environment From File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prepare_environment_yaml_for_distribution"&gt;Prepare Environment YAML For Distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#list_packages"&gt;List Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clone_an_environment"&gt;Clone An Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#updates"&gt;Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment_variables"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tl;dr"&gt;TL;DR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="create-virtual-environment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create Virtual Environment&lt;/h2&gt;
&lt;p&gt;Creating a virtual environment with Anaconda is pretty simple. If you do not specify a Python version, whatever your current default one is will be used. Don't know your default version? Simple run &lt;code&gt;python --version&lt;/code&gt; to find out.&lt;/p&gt;
&lt;p&gt;Let's create one that uses Python 3.7 and is called pybites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create --name pybites python=3.7
Solving environment: done

## Package Plan ##

  environment location: /home/mohh/anaconda3/envs/pybites

  added / updated specs:
    - python=3.7


The following NEW packages will be INSTALLED:

    ca-certificates: 2018.03.07-0           
    certifi:         2018.4.16-py37_0       
    libedit:         3.1.20170329-h6b74fdf_2
    libffi:          3.2.1-hd88cf55_4       
    libgcc-ng:       7.2.0-hdf63c60_3       
    libstdcxx-ng:    7.2.0-hdf63c60_3       
    ncurses:         6.1-hf484d3e_0         
    openssl:         1.0.2o-h20670df_0      
    pip:             10.0.1-py37_0          
    python:          3.7.0-hc3d631a_0       
    readline:        7.0-ha6073c6_4         
    setuptools:      39.2.0-py37_0          
    sqlite:          3.24.0-h84994c4_0      
    tk:              8.6.7-hc745277_3       
    wheel:           0.31.1-py37_0          
    xz:              5.2.4-h14c3975_4       
    zlib:            1.2.11-ha838bed_2      

Proceed ([y]/n)?

Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use:
# &amp;gt; source activate pybites
#
# To deactivate an active environment, use:
# &amp;gt; source deactivate
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The comments at the end show you how to activate/deactivate your new environment. I have an alias set in my shell's rc file that maps &lt;code&gt;activate&lt;/code&gt; to &lt;code&gt;source activate&lt;/code&gt; so that I don't have to type &lt;code&gt;source&lt;/code&gt; all of the time.&lt;/p&gt;
&lt;p&gt;&lt;a name="list_virtual_environments"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;List Virtual Environments&lt;/h2&gt;
&lt;p&gt;Don't remember what you named your environment? Just what to see which ones you have created? You can view them all with &lt;code&gt;conda env list&lt;/code&gt;. The name of the environment will be shown as well as its location:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda env list
# conda environments:
#
base                  *  /home/mohh/anaconda3
animpy                   /home/mohh/anaconda3/envs/animpy
comic_snagger            /home/mohh/anaconda3/envs/comic_snagger
cv                       /home/mohh/anaconda3/envs/cv
ml                       /home/mohh/anaconda3/envs/ml
pybites                  /home/mohh/anaconda3/envs/pybites
toepack                  /home/mohh/anaconda3/envs/toepack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="remove_virtual_environment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Remove Virtual Environment&lt;/h2&gt;
&lt;p&gt;If you ever have the need to remove an environment, &lt;code&gt;conda env remove --name ENVNAME&lt;/code&gt; will remove it and every package installed in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda env remove --name pybites

Remove all packages in environment /home/mohh/anaconda3/envs/pybites:


## Package Plan ##

  environment location: /home/mohh/anaconda3/envs/pybites


The following packages will be REMOVED:

    ca-certificates: 2018.03.07-0           
    certifi:         2018.4.16-py37_0       
    libedit:         3.1.20170329-h6b74fdf_2
    libffi:          3.2.1-hd88cf55_4       
    libgcc-ng:       7.2.0-hdf63c60_3       
    libstdcxx-ng:    7.2.0-hdf63c60_3       
    ncurses:         6.1-hf484d3e_0         
    openssl:         1.0.2o-h20670df_0      
    pip:             10.0.1-py37_0          
    python:          3.7.0-hc3d631a_0       
    readline:        7.0-ha6073c6_4         
    setuptools:      39.2.0-py37_0          
    sqlite:          3.24.0-h84994c4_0      
    tk:              8.6.7-hc745277_3       
    wheel:           0.31.1-py37_0          
    xz:              5.2.4-h14c3975_4       
    zlib:            1.2.11-ha838bed_2      

Proceed ([y]/n)?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="search_for_packages"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Search for Packages&lt;/h2&gt;
&lt;p&gt;Normally, before attempting to install a new package, I search for it to see if Anaconda supports it. I already know that &lt;em&gt;beautifulsoup4&lt;/em&gt; is supported, but I'll go ahead and show you what that would look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda search beautifulsoup4
Loading channels: done
# Name                  Version           Build  Channel             
beautifulsoup4            4.4.0          py27_0  pkgs/free           
beautifulsoup4            4.4.0          py34_0  pkgs/free           
beautifulsoup4            4.4.0          py35_0  pkgs/free           
beautifulsoup4            4.4.1          py27_0  pkgs/free           
beautifulsoup4            4.4.1          py34_0  pkgs/free           
beautifulsoup4            4.4.1          py35_0  pkgs/free           
beautifulsoup4            4.5.1          py27_0  pkgs/free           
beautifulsoup4            4.5.1          py34_0  pkgs/free           
beautifulsoup4            4.5.1          py35_0  pkgs/free           
beautifulsoup4            4.5.1          py36_0  pkgs/free           
beautifulsoup4            4.5.3          py27_0  pkgs/free           
beautifulsoup4            4.5.3          py34_0  pkgs/free           
beautifulsoup4            4.5.3          py35_0  pkgs/free           
beautifulsoup4            4.5.3          py36_0  pkgs/free           
beautifulsoup4            4.6.0          py27_0  pkgs/free           
beautifulsoup4            4.6.0          py27_1  pkgs/main           
beautifulsoup4            4.6.0  py27h3f86ba9_1  pkgs/main           
beautifulsoup4            4.6.0          py34_0  pkgs/free           
beautifulsoup4            4.6.0          py35_0  pkgs/free           
beautifulsoup4            4.6.0  py35h442a8c9_1  pkgs/main           
beautifulsoup4            4.6.0          py36_0  pkgs/free           
beautifulsoup4            4.6.0          py36_1  pkgs/main           
beautifulsoup4            4.6.0  py36h49b8c8c_1  pkgs/main           
beautifulsoup4            4.6.0          py37_1  pkgs/main
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="install_packages"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install Packages&lt;/h2&gt;
&lt;p&gt;Installing packages is simple. You can either install them into your current environment or you can specify the environment to install them into. If you are not currently in an "active"  environment, Anaconda will assume that you want to install to the &lt;em&gt;root&lt;/em&gt;/&lt;strong&gt;base&lt;/strong&gt; environment.&lt;/p&gt;
&lt;p&gt;&lt;a name="current_environment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Current Environment&lt;/h3&gt;
&lt;p&gt;Installing to the current environment is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="other_environment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Other Environment&lt;/h3&gt;
&lt;p&gt;If you are not currently in the active environment that you want to install to, you can still install into that environment by specifying its name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install --name pybites beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="install_packages_not_found"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installing Packages Not Found&lt;/h2&gt;
&lt;p&gt;A list of all available packages can be found at  &lt;a href="https://docs.anaconda.com/anaconda/packages/pkg-docs"&gt;Anaconda&lt;/a&gt;. Now, what do you do if the package that you want isn't available?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda search black
Loading channels: done

PackagesNotFoundError: The following packages are not available from current channels:

  - black

Current channels:

  - https://repo.anaconda.com/pkgs/main/linux-64
  - https://repo.anaconda.com/pkgs/main/noarch
  - https://repo.anaconda.com/pkgs/free/linux-64
  - https://repo.anaconda.com/pkgs/free/noarch
  - https://repo.anaconda.com/pkgs/r/linux-64
  - https://repo.anaconda.com/pkgs/r/noarch
  - https://repo.anaconda.com/pkgs/pro/linux-64
  - https://repo.anaconda.com/pkgs/pro/noarch

To search for alternate channels that may provide the conda package you&amp;#39;re
looking for, navigate to

    https://anaconda.org

and use the search bar at the top of the page.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="search_alternate_channels"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Search Alternate Channels&lt;/h3&gt;
&lt;p&gt;As you can see &lt;code&gt;black&lt;/code&gt; is not in Anaconda's default "channels". A channel is like a repository of packages. Anaconda allows you to specify different channels as well, with the use of the &lt;strong&gt;-c&lt;/strong&gt; flag. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda search -c conda-forge black
Loading channels: done
# Name                  Version           Build  Channel             
black                    18.4a4            py_0  conda-forge         
black                    18.5b0            py_0  conda-forge         
black                    18.5b1            py_0  conda-forge         
black                    18.6b2            py_0  conda-forge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="install_package_from_a_channel"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Install Package From A Channel&lt;/h4&gt;
&lt;p&gt;You already know what the &lt;strong&gt;Channel&lt;/strong&gt; column is showing you, so I won't cover that again. The &lt;strong&gt;Version&lt;/strong&gt; column shows the version of the package and the &lt;strong&gt;Build&lt;/strong&gt; column shows you what version of Python it's for. The cool thing about Anaconda is that if you need a certain version of a package, you just specify it and it will select the one that will work with the version of Python that you are currently using.&lt;/p&gt;
&lt;p&gt;Installing packages from a channel is relatively similar to searching for packages. I'll demonstrate by installing &lt;code&gt;black&lt;/code&gt; from the &lt;em&gt;conda-forge&lt;/em&gt; channel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install -c conda-forge black
Solving environment: done

## Package Plan ##

  environment location: /home/mohh/anaconda3/envs/pybites

  added / updated specs:
    - black


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    appdirs-1.4.3              |             py_1          11 KB  conda-forge
    black-18.6b2               |             py_0          67 KB  conda-forge
    attrs-18.1.0               |             py_1          25 KB  conda-forge
    click-6.7                  |             py_1          54 KB  conda-forge
    toml-0.9.4                 |             py_0          14 KB  conda-forge
    ca-certificates-2018.4.16  |                0         139 KB  conda-forge
    openssl-1.0.2o             |                0         3.5 MB  conda-forge
    ------------------------------------------------------------
                                           Total:         3.8 MB

The following NEW packages will be INSTALLED:

    appdirs:         1.4.3-py_1        conda-forge
    attrs:           18.1.0-py_1       conda-forge
    black:           18.6b2-py_0       conda-forge
    click:           6.7-py_1          conda-forge
    toml:            0.9.4-py_0        conda-forge

The following packages will be UPDATED:

    ca-certificates: 2018.03.07-0                  --&amp;gt; 2018.4.16-0 conda-forge
    openssl:         1.0.2o-h20670df_0             --&amp;gt; 1.0.2o-0    conda-forge

Proceed ([y]/n)?


Downloading and Extracting Packages
appdirs-1.4.3        |   11 KB | ####################################### | 100%
black-18.6b2         |   67 KB | ####################################### | 100%
attrs-18.1.0         |   25 KB | ####################################### | 100%
click-6.7            |   54 KB | ####################################### | 100%
toml-0.9.4           |   14 KB | ####################################### | 100%
ca-certificates-2018 |  139 KB | ####################################### | 100%
openssl-1.0.2o       |  3.5 MB | ####################################### | 100%
Preparing transaction: done
Verifying transaction: done
Executing transaction: done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="add_additional_channels"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Add Additional Channels&lt;/h3&gt;
&lt;p&gt;If you would like to add a certain channel to the ones that are search by default, the following command will do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda config --add channels conda-forge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="install_packages_with_pip"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Install Packages With Pip&lt;/h3&gt;
&lt;p&gt;I haven't added any channels to my setup. I'm only covering it here because it was mentioned on Slack. It's been my experience that the Anaconda packages usually lag behind a bit from what's bleeding edge. So If you still are not able to find a channel that has your package, or you just want to use a more up to date package, you can just install it with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I searched for &lt;strong&gt;black&lt;/strong&gt; with &lt;code&gt;pip search black&lt;/code&gt; and discovered that the latest version of black available was &lt;em&gt;18.6b4&lt;/em&gt;. The latest one in &lt;em&gt;conda-forge&lt;/em&gt; at the time of this writing was &lt;em&gt;18.6b2&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install black
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="remove_packages"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Remove Packages&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I forgot to mention it earlier when installing a package, but multiple packages can be installed at the same time, just like one or more can be removed at the same time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Didn't use a package that you added and now want to remove it? Simple enough:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda remove beautifulsoup4 black
Solving environment: done

## Package Plan ##

  environment location: /home/mohh/anaconda3/envs/pybites

  removed specs:
    - beautifulsoup4
    - black


The following packages will be REMOVED:

    black:           18.6b2-py_0 conda-forge

The following packages will be UPDATED:

    openssl:         1.0.2o-0    conda-forge --&amp;gt; 1.0.2o-h20670df_0

The following packages will be DOWNGRADED:

    ca-certificates: 2018.4.16-0 conda-forge --&amp;gt; 2018.03.07-0     

Proceed ([y]/n)?

Preparing transaction: done
Verifying transaction: done
Executing transaction: done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="install_packages_while_creating_environment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install Packages While Creating Environment&lt;/h2&gt;
&lt;p&gt;If you've been following along, I'm sure you've noticed that installing packages takes a bit of time. You could streamline your process by combining the commands and running them all at once!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create --name pybites python=3.7 beautifulsoup4 requests pytest        
Solving environment: done

## Package Plan ##

  environment location: /home/mohh/anaconda3/envs/pybites

  added / updated specs:
    - beautifulsoup4
    - pytest
    - python=3.7
    - requests


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    pytest-3.6.3               |           py37_0         300 KB

The following NEW packages will be INSTALLED:

    asn1crypto:      0.24.0-py37_0          
    atomicwrites:    1.1.5-py37_0           
    attrs:           18.1.0-py37_0          
    beautifulsoup4:  4.6.0-py37_1           
    ca-certificates: 2018.03.07-0           
    certifi:         2018.4.16-py37_0       
    cffi:            1.11.5-py37h9745a5d_0  
    chardet:         3.0.4-py37_1           
    cryptography:    2.2.2-py37h14c3975_0   
    idna:            2.7-py37_0             
    libedit:         3.1.20170329-h6b74fdf_2
    libffi:          3.2.1-hd88cf55_4       
    libgcc-ng:       7.2.0-hdf63c60_3       
    libstdcxx-ng:    7.2.0-hdf63c60_3       
    more-itertools:  4.2.0-py37_0           
    ncurses:         6.1-hf484d3e_0         
    openssl:         1.0.2o-h20670df_0      
    pip:             10.0.1-py37_0          
    pluggy:          0.6.0-py37_0           
    py:              1.5.4-py37_0           
    pycparser:       2.18-py37_1            
    pyopenssl:       18.0.0-py37_0          
    pysocks:         1.6.8-py37_0           
    pytest:          3.6.3-py37_0           
    python:          3.7.0-hc3d631a_0       
    readline:        7.0-ha6073c6_4         
    requests:        2.19.1-py37_0          
    setuptools:      39.2.0-py37_0          
    six:             1.11.0-py37_1          
    sqlite:          3.24.0-h84994c4_0      
    tk:              8.6.7-hc745277_3       
    urllib3:         1.23-py37_0            
    wheel:           0.31.1-py37_0          
    xz:              5.2.4-h14c3975_4       
    zlib:            1.2.11-ha838bed_2      

Proceed ([y]/n)?


Downloading and Extracting Packages
pytest-3.6.3         |  300 KB | ####################################### | 100%
Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use
#
#     $ conda activate pybites
#
# To deactivate an active environment, use
#
#     $ conda deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you had previously added the &lt;em&gt;conda-forge&lt;/em&gt; channel, &lt;code&gt;black&lt;/code&gt; could have been specified as well. In this case, I would have to install it separately with &lt;code&gt;pip&lt;/code&gt; so that I would be running the most recent one.&lt;/p&gt;
&lt;p&gt;&lt;a name="export_environment_configuration"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Export Environment Configuration&lt;/h2&gt;
&lt;p&gt;You've put a lot of work into creating the perfect environment. Wouldn't it be nice to be able to recreate the environment from a file, like &lt;code&gt;pip&lt;/code&gt; does with requirements.txt? Anaconda has you covered! With &lt;code&gt;pip&lt;/code&gt; you use &lt;code&gt;pip freeze&lt;/code&gt; to create the file; with Anaconda its done with &lt;code&gt;conda env export&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda env export
name: pybites
channels:
  - defaults
dependencies:
  - asn1crypto=0.24.0=py37_0
  - atomicwrites=1.1.5=py37_0
  - attrs=18.1.0=py37_0
  - beautifulsoup4=4.6.0=py37_1
  - ca-certificates=2018.03.07=0
  - certifi=2018.4.16=py37_0
  - cffi=1.11.5=py37h9745a5d_0
  - chardet=3.0.4=py37_1
  - cryptography=2.2.2=py37h14c3975_0
  - idna=2.7=py37_0
  - libedit=3.1.20170329=h6b74fdf_2
  - libffi=3.2.1=hd88cf55_4
  - libgcc-ng=7.2.0=hdf63c60_3
  - libstdcxx-ng=7.2.0=hdf63c60_3
  - more-itertools=4.2.0=py37_0
  - ncurses=6.1=hf484d3e_0
  - openssl=1.0.2o=h20670df_0
  - pip=10.0.1=py37_0
  - pluggy=0.6.0=py37_0
  - py=1.5.4=py37_0
  - pycparser=2.18=py37_1
  - pyopenssl=18.0.0=py37_0
  - pysocks=1.6.8=py37_0
  - pytest=3.6.3=py37_0
  - python=3.7.0=hc3d631a_0
  - readline=7.0=ha6073c6_4
  - requests=2.19.1=py37_0
  - setuptools=39.2.0=py37_0
  - six=1.11.0=py37_1
  - sqlite=3.24.0=h84994c4_0
  - tk=8.6.7=hc745277_3
  - urllib3=1.23=py37_0
  - wheel=0.31.1=py37_0
  - xz=5.2.4=h14c3975_4
  - zlib=1.2.11=ha838bed_2
  - pip:
    - appdirs==1.4.3
    - black==18.6b4
    - click==6.7
    - toml==0.9.4
prefix: /home/mohh/anaconda3/envs/pybites
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Notice how packages that are installed with &lt;em&gt;pip&lt;/em&gt; are shown. Those all happen to be dependencies of black.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just like the &lt;code&gt;pip&lt;/code&gt; command, this must be &lt;em&gt;piped&lt;/em&gt; into a text file. Anaconda uses the YAML format, so the command would be &lt;code&gt;conda env export &amp;gt; environment.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="create_environment_from_yaml_file"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create Environment From File&lt;/h2&gt;
&lt;p&gt;As it is, the &lt;em&gt;environemnt.yml&lt;/em&gt; file can be used to recreate your environment on your platform and on your machine only. If you are in the directory with the YAML file, simply use &lt;code&gt;conda env create&lt;/code&gt;. Anaconda will automatically detect the file and create it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda env create
Solving environment: done

Downloading and Extracting Packages
py-1.5.4             |   63 KB | ####################################### | 100%
ncurses-6.1          |  1.2 MB | ####################################### | 100%
idna-2.7             |   50 KB | ####################################### | 100%
python-3.7.0         | 22.1 MB | ####################################### | 100%
chardet-3.0.4        |   96 KB | ####################################### | 100%
more-itertools-4.2.0 |   38 KB | ####################################### | 100%
zlib-1.2.11          |   93 KB | ####################################### | 100%
tk-8.6.8             |  3.1 MB | ####################################### | 100%
libffi-3.2.1         |   47 KB | ####################################### | 100%
sqlite-3.24.0        |  1.5 MB | ####################################### | 100%
xz-5.2.3             |  854 KB | ####################################### | 100%
pycparser-2.18       |   84 KB | ####################################### | 100%
pluggy-0.6.0         |   13 KB | ####################################### | 100%
asn1crypto-0.24.0    |   72 KB | ####################################### | 100%
Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use
#
#     $ conda activate pybites
#
# To deactivate an active environment, use
#
#     $ conda deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="prepare_environment_yaml_for_distribution"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Prepare Environment YAML For Distribution&lt;/h2&gt;
&lt;p&gt;As stated above, it's only good for your current machine. What if you want to share it with others or recreate it on another machine? You'll first have to edit the file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove the &lt;em&gt;prefix&lt;/em&gt; line at the end of the file, since it's specific to your user name and file structure.&lt;/li&gt;
&lt;li&gt;Remove everything after the last &lt;code&gt;=&lt;/code&gt; sign, to include the &lt;code&gt;=&lt;/code&gt;, from the last parts of the package names.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since a lot of the packages listed are dependencies of the packages that you've added, I normally remove them all and only leave the ones that I specifically installed myself. Not sure if that's best practice, but it's worked fine for me so far.&lt;/p&gt;
&lt;p&gt;Once done, your file should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;
&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;
&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;beautifulsoup4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.19&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;18.6&lt;/span&gt;&lt;span class="n"&gt;b4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="list_packages"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;List Packages&lt;/h2&gt;
&lt;p&gt;To view what packages are installed in your environment &lt;code&gt;conda list&lt;/code&gt; will get the job done:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that you can also tell which were installed with pip.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda list
# packages in environment at /home/mohh/anaconda3/envs/pybites:
#
# Name                    Version                   Build  Channel
appdirs                   1.4.3                     &amp;lt;pip&amp;gt;
asn1crypto                0.24.0                   py37_0  
atomicwrites              1.1.5                    py37_0  
attrs                     18.1.0                   py37_0  
beautifulsoup4            4.6.0                    py37_1  
black                     18.6b4                    &amp;lt;pip&amp;gt;
ca-certificates           2018.03.07                    0  
certifi                   2018.4.16                py37_0  
cffi                      1.11.5           py37h9745a5d_0  
chardet                   3.0.4                    py37_1  
click                     6.7                       &amp;lt;pip&amp;gt;
cryptography              2.2.2            py37h14c3975_0  
idna                      2.7                      py37_0  
libedit                   3.1.20170329         h6b74fdf_2  
libffi                    3.2.1                hd88cf55_4  
libgcc-ng                 7.2.0                hdf63c60_3  
libstdcxx-ng              7.2.0                hdf63c60_3  
more-itertools            4.2.0                    py37_0  
ncurses                   6.1                  hf484d3e_0  
openssl                   1.0.2o               h20670df_0  
pip                       10.0.1                   py37_0  
pluggy                    0.6.0                    py37_0  
py                        1.5.4                    py37_0  
pycparser                 2.18                     py37_1  
pyopenssl                 18.0.0                   py37_0  
pysocks                   1.6.8                    py37_0  
pytest                    3.6.3                    py37_0  
python                    3.7.0                hc3d631a_0  
readline                  7.0                  ha6073c6_4  
requests                  2.19.1                   py37_0  
setuptools                39.2.0                   py37_0  
six                       1.11.0                   py37_1  
sqlite                    3.24.0               h84994c4_0  
tk                        8.6.7                hc745277_3  
toml                      0.9.4                     &amp;lt;pip&amp;gt;
urllib3                   1.23                     py37_0  
wheel                     0.31.1                   py37_0  
xz                        5.2.4                h14c3975_4  
zlib                      1.2.11               ha838bed_2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="clone_an_environment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Clone An Environment&lt;/h2&gt;
&lt;p&gt;There might come a time when you have a need to clone an existing environment. I like to have an environment with all packages installed to play around with, so I clone the &lt;em&gt;base&lt;/em&gt; environment. That way I can keep &lt;em&gt;base&lt;/em&gt; vanilla, yet still be able to install any package that I want into the clone without messing anything up in &lt;em&gt;base&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create --clone base --name ml
Source:      /home/mohh/anaconda3
Destination: /home/mohh/anaconda3/envs/ml
The following packages cannot be cloned out of the root environment:
 - conda-4.5.8-py36_0
 - conda-build-3.10.9-py36_0
 - conda-env-2.6.0-1
Packages: 259
Files: 68
Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use
#
#     $ conda activate ml
#
# To deactivate an active environment, use
#
#     $ conda deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you do clone the &lt;em&gt;base&lt;/em&gt; environment, you will get the above message about certain packages not being copied. It's completely normal and should not be displayed when cloning any other environment.&lt;/p&gt;
&lt;p&gt;&lt;a name="updates"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;p&gt;Updating Anaconda can be a confusing mess. You would think that using the GUI Navigator (&lt;code&gt;anaconda-navigator&lt;/code&gt;) would be easier to use, but I haven't had much luck with it. It's clunky and slow.&lt;/p&gt;
&lt;p&gt;Looking for instructions online is also a big fat mess. Everyone contradicts each other with their own opinions. I've tried several of them and this is what has worked for me.&lt;/p&gt;
&lt;p&gt;Use the following commands in the order shown instead:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;conda update conda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda update anaconda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda update --all&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Make sure to read the messages that you get while updating anaconda. The last time I did it, I skipped it because it wanted to downgrade my version of Python from 3.6.6 to 3.6.5. It must have been to satisfy the dependency of one of the updated packages, so I skipped it and only ran steps &lt;code&gt;1&lt;/code&gt; &amp;amp; &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a name="environment_variables"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Environment Variables&lt;/h2&gt;
&lt;p&gt;There will come a time when you will need to pass a password or an API key to your programs. The easiest way is to just put it into your code and remove it before committing your code, but that is a very good way to publish your secrets by accident. A much better way is to use environment variables. With Anaconda, you can add environment variables that are specific to each environment. This takes a bit of work on your part, but it works great and I've used it with great success in the past.&lt;/p&gt;
&lt;p&gt;You will need to know where your virtual environment resides. If you remember from above, you can find that out with &lt;code&gt;conda env list&lt;/code&gt;. You will need to navigate to that directory and create the following structure and files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;etc/
‚îî‚îÄ‚îÄ conda
    ‚îú‚îÄ‚îÄ activate.d
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ env_vars.sh
    ‚îî‚îÄ‚îÄ deactivate.d
        ‚îî‚îÄ‚îÄ env_vars.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;etc&lt;/em&gt; directory may or may not exist. It sometimes gets created by certain packages. For Windows users, instead of &lt;strong&gt;env_vars.sh&lt;/strong&gt; name the files &lt;strong&gt;env_vars.bat&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The file in &lt;em&gt;activate.d&lt;/em&gt; will look something like this on Linux and perhaps on Mac's as well. I don't own a Mac, so can't confirm:&lt;/p&gt;
&lt;h6&gt;activate.d/env_vars.sh:&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export API_KEY=&amp;quot;cc2a491aee9e40f32b1a184cc62902b11cae33da9f6620ffc47077da179aa800&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The one under &lt;em&gt;deactivate.d&lt;/em&gt; clears the assignment:&lt;/p&gt;
&lt;h6&gt;deactivate.d/env_vars.sh:&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export API_KEY=&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;For Windows, I think that you do not need the export command. If someone could verify for me, that would be great!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next time that you activate your environment, the script in &lt;em&gt;activate.d&lt;/em&gt; runs and sets your variables. Similarly, when you deactivate the environment the script in &lt;em&gt;deactivate.d&lt;/em&gt; clears it.&lt;/p&gt;
&lt;p&gt;&lt;a name="tl;dr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oo &lt;strong&gt;L&lt;/strong&gt;ong&lt;strong&gt;;&lt;/strong&gt; &lt;strong&gt;D&lt;/strong&gt;int't &lt;strong&gt;R&lt;/strong&gt;ead? I've got you covered!&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th align="right"&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create virtual environment&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda create --name ENVNAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List virtual environments&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda env list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove virtual environment&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda env remove --name ENVNAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Search for packages&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda search PACKAGENAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Install packages&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda install PACKAGE1 PACKAGE2...&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Install package in other env&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda install --name ENVNAME PACKAGENAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Search alternate channel&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda search -c CHANNELNAME PACKAGENAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Install from channel&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda install -c CHANNELNAME PACKAGENAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Add additional channel&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda config --add channels CHANNELNAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove packages&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda remove PACKAGE1 PACKAGE2...&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create env and install packages&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda create --name ENVNAME PACKAGE1 PACKAGE2...&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Export env config&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda env export &amp;gt; environment.yml&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create env from environment.yml&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda env create&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List packages&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clone environment&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda create --clone ORIGINALENV --name NEWENV&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update conda&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda update conda&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update Anaconda&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda update anaconda&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update all packages&lt;/td&gt;
&lt;td align="right"&gt;&lt;code&gt;conda update --all&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#martinuribe"&gt;Martin&lt;/a&gt;&lt;/p&gt;</content><category term="Anaconda"></category><category term="Anaconda workflow"></category><category term="conda"></category><category term="pip"></category><category term="virtual environment"></category><category term="packages"></category><category term="packaging"></category><category term="distribution"></category><category term="configuration"></category><category term="YAML"></category><category term="python3.7"></category></entry><entry><title>PyBites Twitter Digest - Issue 24, 2018</title><link href="https://pybit.es/twitter_digest_201824.html" rel="alternate"></link><published>2018-07-22T20:31:00+02:00</published><updated>2018-07-22T20:31:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-07-22:/twitter_digest_201824.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Starting this week off with some great feedback from our 100DaysOfCode participants!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Day 19: Made a random object generator! A coin flip, card draw, and 6- and 20-sided die are all supported, and I ho‚Ä¶ &lt;a href="https://t.co/PCjWSWiA51" title="https://t.co/PCjWSWiA51" target="_blank"&gt;https://t.co/PCjWSWiA51&lt;/a&gt;&lt;/p&gt;‚Äî Yashas Lokesh (@yashaslokesh_) &lt;a href="https://twitter.com/yashaslokesh_/status/1019410240272502784" data-datetime="2018-07-18T02:35:15+00:00"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Day 36 &lt;a href="https://twitter.com/search/#100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; progress : &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; Code Challenges |11 - Generators for Fun and Profit Finally manged to o‚Ä¶ &lt;a href="https://t.co/tlQeAQkKs5" title="https://t.co/tlQeAQkKs5" target="_blank"&gt;https://t.co/tlQeAQkKs5&lt;/a&gt;&lt;/p&gt;‚Äî NaryD (@NaryD1) &lt;a href="https://twitter.com/NaryD1/status/1020311948582256640" data-datetime="2018-07-20T14:18:19+00:00"&gt;July 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Great resource for beginner Python errors. Raised by our very own Bob on the Python Bytes podcast!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;29 common beginner Python errors on one page by &lt;a href="https://twitter.com/@pythonforbiolog" target="_blank"&gt;@pythonforbiolog&lt;/a&gt; &lt;a href="https://t.co/JyG9PN3G9b" title="https://t.co/JyG9PN3G9b" target="_blank"&gt;https://t.co/JyG9PN3G9b&lt;/a&gt; &lt;a href="https://t.co/411UYSpyeF" title="https://t.co/411UYSpyeF" target="_blank"&gt;https://t.co/411UYSpyeF&lt;/a&gt;&lt;/p&gt;‚Äî Real Python (@realpython) &lt;a href="https://twitter.com/realpython/status/1020674021380247554" data-datetime="2018-07-21T14:17:04+00:00"&gt;July 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Love this method of noting down everything you learn. Thanks Rob!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How I make the most of what I learn from &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; and other online code challenges: &lt;a href="https://t.co/SDXBS0xbze" title="https://t.co/SDXBS0xbze" target="_blank"&gt;https://t.co/SDXBS0xbze&lt;/a&gt;&lt;/p&gt;‚Äî Rob Fowler (@BlueGator4) &lt;a href="https://twitter.com/BlueGator4/status/1020846920644857856" data-datetime="2018-07-22T01:44:06+00:00"&gt;July 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Why is Python so slow? Another quality article from Anthony Shaw&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Phew! Just published what turned into a bit-of-a-beast "Why is Python so slow?" &lt;a href="https://t.co/SSajY4FWAj" title="https://t.co/SSajY4FWAj" target="_blank"&gt;https://t.co/SSajY4FWAj&lt;/a&gt; This build‚Ä¶ &lt;a href="https://t.co/Y5CFBf8sul" title="https://t.co/Y5CFBf8sul" target="_blank"&gt;https://t.co/Y5CFBf8sul&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/1018712745351368704" data-datetime="2018-07-16T04:23:39+00:00"&gt;July 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A nice overview of Python and Guido&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python has brought computer programming to a vast new audience &lt;a href="https://t.co/K68ikshgkb" title="https://t.co/K68ikshgkb" target="_blank"&gt;https://t.co/K68ikshgkb&lt;/a&gt; by &lt;a href="https://twitter.com/@TheEconomist" target="_blank"&gt;@TheEconomist&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1020248790584909824" data-datetime="2018-07-20T10:07:21+00:00"&gt;July 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Bring on the next 100 Bites Ninja! Nice certificate too!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Today I earned this &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; certificate after coding a ton of &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; - join PyBites Code Platform and start codin‚Ä¶ &lt;a href="https://t.co/4Pb44KU7pF" title="https://t.co/4Pb44KU7pF" target="_blank"&gt;https://t.co/4Pb44KU7pF&lt;/a&gt;&lt;/p&gt;‚Äî Mohhinder Suresh (@mohhinder) &lt;a href="https://twitter.com/mohhinder/status/1019659828334120967" data-datetime="2018-07-18T19:07:02+00:00"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Monitoring Python 3.6 Functions on AWS Lambda&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@_Zephyros_:" target="_blank"&gt;@_Zephyros_:&lt;/a&gt; &lt;a href="https://t.co/VyU89isW1R" title="https://t.co/VyU89isW1R" target="_blank"&gt;https://t.co/VyU89isW1R&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1020712504626958338" data-datetime="2018-07-21T16:49:59+00:00"&gt;July 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A Complete Guide to Learning OpenCV! Brilliant!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Surprise! New blog post publishedüöÄA Complete Guide to Learning OpenCV: &lt;a href="https://t.co/gIBXT4kdKc" title="https://t.co/gIBXT4kdKc" target="_blank"&gt;https://t.co/gIBXT4kdKc&lt;/a&gt; üëçü¶ñü¶ï(with Jurassic Pa‚Ä¶ &lt;a href="https://t.co/tlwwhAZkPS" title="https://t.co/tlwwhAZkPS" target="_blank"&gt;https://t.co/tlwwhAZkPS&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1019952652501778433" data-datetime="2018-07-19T14:30:36+00:00"&gt;July 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Keep it simple&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"So much complexity in software comes from trying to make one thing do two things." ‚Äì Ryan Singer&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1019576023812276226" data-datetime="2018-07-18T13:34:01+00:00"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Weekly Regex&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;To group without capturing, use (?: ... ).&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1019235617585205248" data-datetime="2018-07-17T15:01:22+00:00"&gt;July 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;New release of pyjanitor&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ericmjl:" target="_blank"&gt;@ericmjl:&lt;/a&gt; New release of &lt;a href="https://twitter.com/search/#pyjanitor!" target="_blank"&gt;#pyjanitor!&lt;/a&gt; Data cleaning functions now register natively onto pandas DataFrames. Released to PyPI (&lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/1020239676924481536" data-datetime="2018-07-20T09:31:08+00:00"&gt;July 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;SciPy 2018 videos are up!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#SciPy2018" target="_blank"&gt;#SciPy2018&lt;/a&gt; (Scientific Computing with Python) videos are now available on YouTube: &lt;a href="https://t.co/MmpHUhwY5A" title="https://t.co/MmpHUhwY5A" target="_blank"&gt;https://t.co/MmpHUhwY5A&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1019825126865424384" data-datetime="2018-07-19T06:03:52+00:00"&gt;July 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Best practices for building containers&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;7 best practices for build containers &lt;a href="https://t.co/hscbmxAVne" title="https://t.co/hscbmxAVne" target="_blank"&gt;https://t.co/hscbmxAVne&lt;/a&gt; &lt;a href="https://t.co/V5BMQVyp7O" title="https://t.co/V5BMQVyp7O" target="_blank"&gt;https://t.co/V5BMQVyp7O&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/1019709911197011973" data-datetime="2018-07-18T22:26:02+00:00"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;HAHA!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üòÇüòÇüòÇ &lt;a href="https://t.co/rpIAIG7s3s" title="https://t.co/rpIAIG7s3s" target="_blank"&gt;https://t.co/rpIAIG7s3s&lt;/a&gt;&lt;/p&gt;‚Äî Kode With Klossy (@kodewithklossy) &lt;a href="https://twitter.com/kodewithklossy/status/1018935620616556546" data-datetime="2018-07-16T19:09:17+00:00"&gt;July 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="100daysofcode"></category><category term="AWS"></category><category term="Lambda"></category><category term="errors"></category><category term="learning"></category><category term="speed"></category><category term="OpenCV"></category><category term="regex"></category><category term="pyjanitor"></category><category term="SciPy"></category><category term="videos"></category><category term="containers"></category></entry><entry><title>PyBites Twitter Digest - Issue 23, 2018</title><link href="https://pybit.es/twitter_digest_201823.html" rel="alternate"></link><published>2018-07-15T20:35:00+02:00</published><updated>2018-07-15T20:35:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-07-15:/twitter_digest_201823.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;A sad day indeed! Thanks for everything Guido!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks for all the support (email and Twitter). I'm overwhelmed by the responses and won't be replying to most emai‚Ä¶ &lt;a href="https://t.co/zUK6Ss746a" title="https://t.co/zUK6Ss746a" target="_blank"&gt;https://t.co/zUK6Ss746a&lt;/a&gt;&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/1017546023227424768" data-datetime="2018-07-12T23:07:31+00:00"&gt;July 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;.&lt;a href="https://twitter.com/@gvanrossum" target="_blank"&gt;@gvanrossum&lt;/a&gt; is stepping down as BDFL for &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt;  Thank you for all the work you've done for the community Guido‚Ä¶ &lt;a href="https://t.co/LE9JinNSSI" title="https://t.co/LE9JinNSSI" target="_blank"&gt;https://t.co/LE9JinNSSI&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/1017453618851508224" data-datetime="2018-07-12T17:00:20+00:00"&gt;July 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#ThanksGuido" target="_blank"&gt;#ThanksGuido&lt;/a&gt; for creating the Python language, starting the kindest / most awesome developer community, and the pos‚Ä¶ &lt;a href="https://t.co/1jcMTVPA3Q" title="https://t.co/1jcMTVPA3Q" target="_blank"&gt;https://t.co/1jcMTVPA3Q&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1018114207152304129" data-datetime="2018-07-14T12:45:17+00:00"&gt;July 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Slicing tip&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Take care when using slicing to extract the last k elements of a sequence. The k==0 corner case migh‚Ä¶ &lt;a href="https://t.co/kROASingys" title="https://t.co/kROASingys" target="_blank"&gt;https://t.co/kROASingys&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/1017296439142240256" data-datetime="2018-07-12T06:35:46+00:00"&gt;July 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Quality Real Python article on setting up Sublime Text 3&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; üêç Setting Up Sublime Text 3 for Full Stack Python Development &lt;a href="https://t.co/kI5fhtcPTi" title="https://t.co/kI5fhtcPTi" target="_blank"&gt;https://t.co/kI5fhtcPTi&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1018098970822729729" data-datetime="2018-07-14T11:44:44+00:00"&gt;July 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;MatLab to Python migration guide&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@minrk:" target="_blank"&gt;@minrk:&lt;/a&gt; This might be my most exciting discovery &lt;a href="https://twitter.com/@SciPyConf:" target="_blank"&gt;@SciPyConf:&lt;/a&gt; MatLab to Python migration guide from &lt;a href="https://twitter.com/@enthought." target="_blank"&gt;@enthought.&lt;/a&gt; Also available as a PDF:‚Ä¶&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/1017818001557590016" data-datetime="2018-07-13T17:08:16+00:00"&gt;July 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Interview with the creator of the face_recognition library&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;In today's post, I interview &lt;a href="https://twitter.com/@ageitgey," target="_blank"&gt;@ageitgey,&lt;/a&gt; the creator of the super popular 'face_recognition' &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; package and dis‚Ä¶ &lt;a href="https://t.co/SCyQDgceAJ" title="https://t.co/SCyQDgceAJ" target="_blank"&gt;https://t.co/SCyQDgceAJ&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1017054787559411718" data-datetime="2018-07-11T14:35:31+00:00"&gt;July 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Building a basic StarCraft II neural network&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building a basic StarCraft II neural network: &lt;a href="https://t.co/6LAqOjW3Ho" title="https://t.co/6LAqOjW3Ho" target="_blank"&gt;https://t.co/6LAqOjW3Ho&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt;&lt;/p&gt;‚Äî Harrison Kinsleyüêç (@Sentdex) &lt;a href="https://twitter.com/Sentdex/status/1017797476252831744" data-datetime="2018-07-13T15:46:42+00:00"&gt;July 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Now this is a scary thought...&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@CodeWisdom:" target="_blank"&gt;@CodeWisdom:&lt;/a&gt; "One of my most productive days was throwing away 1000 lines of code." - Ken Thompson&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1017401692814487552" data-datetime="2018-07-12T13:34:00+00:00"&gt;July 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Always something to learn! Cool data viz.&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A user just submitted an example visualization to Altair that I had no idea was even possible‚Ä¶ &lt;a href="https://t.co/ddvXSrzofx" title="https://t.co/ddvXSrzofx" target="_blank"&gt;https://t.co/ddvXSrzofx&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/1017834764160471040" data-datetime="2018-07-13T18:14:52+00:00"&gt;July 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Asynchronous Python for the Complete Beginner. More awesome from Miguel!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jtpio:" target="_blank"&gt;@jtpio:&lt;/a&gt; Asynchronous Python for the Complete Beginner, by &lt;a href="https://twitter.com/@miguelgrinberg" target="_blank"&gt;@miguelgrinberg&lt;/a&gt; : &lt;a href="https://t.co/WZLLT9Fntu." title="https://t.co/WZLLT9Fntu." target="_blank"&gt;https://t.co/WZLLT9Fntu.&lt;/a&gt; A good overview to know where async‚Ä¶&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/1017132356979679232" data-datetime="2018-07-11T19:43:45+00:00"&gt;July 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Regex Love&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Don't confuse \1 with $1. \1 is used inside a regex; $1 (in Perl) is used outside the regex after a match.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1017061300764102658" data-datetime="2018-07-11T15:01:24+00:00"&gt;July 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;statcode - like man pages but for HTTP status codes. What a great idea!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I made statcode. It's like 'man' pages, but for HTTP status codes &lt;a href="https://t.co/XqEK2o4MD9" title="https://t.co/XqEK2o4MD9" target="_blank"&gt;https://t.co/XqEK2o4MD9&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1017077871251091456" data-datetime="2018-07-11T16:07:15+00:00"&gt;July 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Some good info on del&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; ‚Ä¢ del does not delete the object ‚Ä¢ del just decrease the reference counter ‚Ä¢ __del__ is an object destroyer, avoid using it‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/1017314275336048641" data-datetime="2018-07-12T07:46:38+00:00"&gt;July 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Ending on a high: Our first Sydney PyBites meet up!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Ad-hoc &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; Sydney meetup! Awesome catching up with these champions! &lt;a href="https://twitter.com/@thelynchpinau" target="_blank"&gt;@thelynchpinau&lt;/a&gt; &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; &lt;a href="https://twitter.com/@vipinreyo‚Ä¶" target="_blank"&gt;@vipinreyo‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/EuAHZK3w5M" title="https://t.co/EuAHZK3w5M" target="_blank"&gt;https://t.co/EuAHZK3w5M&lt;/a&gt;&lt;/p&gt;‚Äî Julian Sequeira (@_juliansequeira) &lt;a href="https://twitter.com/_juliansequeira/status/1017992121205194752" data-datetime="2018-07-14T04:40:09+00:00"&gt;July 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="BDFL"></category><category term="slicing"></category><category term="Sublime"></category><category term="MatLab"></category><category term="SciPy"></category><category term="Machine learning"></category><category term="AI"></category><category term="face_recognition"></category><category term="neural network"></category><category term="StarCraft"></category><category term="data visualisation"></category><category term="asyncio"></category><category term="dels"></category></entry><entry><title>Watch Me Code - Solving Bite 21. Query a Nested Data Structure</title><link href="https://pybit.es/nested-data-structure-exercise.html" rel="alternate"></link><published>2018-07-14T16:00:00+02:00</published><updated>2018-07-14T16:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2018-07-14:/nested-data-structure-exercise.html</id><summary type="html">&lt;p&gt;I recorded a video solving &lt;a href="https://codechalleng.es/bites/21/"&gt;Bite 21. Query a nested data structure&lt;/a&gt;. The exercise presents us with a dictionary of car manufacturers and their corresponding car models. We will extract various bits and pieces from it as well as sort the nested model lists. This is a common type of data structure so specially for a beginner it is important to have this become second nature. Prepare to learn more about looping, some string operations, and list / dict comprehensions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recorded a video solving &lt;a href="https://codechalleng.es/bites/21/"&gt;Bite 21. Query a nested data structure&lt;/a&gt;. The exercise presents us with a dictionary of car manufacturers and their corresponding car models. We will extract various bits and pieces from it as well as sort the nested model lists. This is a common type of data structure so specially for a beginner it is important to have this become second nature. Prepare to learn more about looping, some string operations, and list / dict comprehensions.&lt;/p&gt;
&lt;h2&gt;Warning&lt;/h2&gt;
&lt;p&gt;Before watching the solution video, we highly encourage you to follow &lt;a href="https://codechalleng.es/bites/promo/datastructures"&gt;this promo link&lt;/a&gt; and try it yourself. Seriously, you learn n times more by having tried it yourself and comparing your solution to ours or via the Bite Forum feature (see at the end of the video). Enjoy!&lt;/p&gt;
&lt;h3&gt;Ready for the solution?&lt;/h3&gt;
&lt;div class="container"&gt;
&lt;iframe src="https://www.youtube.com/embed/Yk13k-_QZ-U" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you don't need &lt;code&gt;(key, value)&lt;/code&gt; pairs, instead of &lt;code&gt;items&lt;/code&gt; you can use &lt;code&gt;keys()&lt;/code&gt; or &lt;code&gt;values()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;join&lt;/code&gt; is a super handy string method to know about: &lt;code&gt;return ', '.join(cars['Jeep'])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List comprehensions are one of our favorite features, I write them from the inside out and would probably not use more than one for loop: &lt;code&gt;return [models[0] for models in cars.values()]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can flatten a list of lists like this: &lt;code&gt;models = sum(cars.values(), [])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use a dictionary comprehension to modify an existing dict and returning a new dict, all in one go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return {manufacturer: sorted(models) for
        manufacturer, models in cars.items()}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It doesn't really matter here but just to note: &lt;code&gt;sorted&lt;/code&gt; returns a new list object, while &lt;code&gt;list.sort()&lt;/code&gt; would sort in-place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We defined this Bite some time ago, and I forgot about some parts of the solution. This served two purposes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Making mistakes and/or not coming to the best solution at first is actually a good thing. This is part of the learning: going through the struggle and contrasting an earlier iteration with a later one.&lt;/li&gt;
&lt;li&gt;It is good to know that once solved you can go back after some time and use a Bite to refresh your knowledge!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As you saw towards the end we have a forum for each Bite now where you can share / discuss your solution with other community members. This will only add to the learning. Note this is only accessible if you have resolved the Bite to avoid any spoilers. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Help&lt;/h3&gt;
&lt;p&gt;If you are stuck and don't want to use the &lt;em&gt;solution button&lt;/em&gt; - after all this would deduct points (unless it's an Intro Bite) - you can ask for help using our #codechallenges Slack channel. To join our Slack &lt;a href="http://codechalleng.es"&gt;confirm your email on our platform&lt;/a&gt;, then opt-in to Slack under &lt;em&gt;Settings&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;What did you learn?&lt;/h2&gt;
&lt;p&gt;Where there other insights you got while doing this Bite exercise? We hope to salute you on the platform and Slack. And remember ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="dict"></category><category term="list"></category><category term="beginner"></category><category term="data structures"></category><category term="bites of py"></category><category term="video"></category><category term="sum"></category><category term="list comprehension"></category><category term="dictionary comprehension"></category></entry><entry><title>PyBites Twitter Digest - Issue 22, 2018</title><link href="https://pybit.es/twitter_digest_201822.html" rel="alternate"></link><published>2018-07-08T18:29:00+02:00</published><updated>2018-07-08T18:29:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-07-08:/twitter_digest_201822.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Some of our amazing PyBites Pythonistas completed their &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;#100DaysofCode in Python&lt;/a&gt; Challenge!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Day 100: I completed the 100 Days of Code in Python course by &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/@talkpython!" target="_blank"&gt;@talkpython!&lt;/a&gt; &lt;a href="https://t.co/XARY1x1H8k‚Ä¶" title="https://t.co/XARY1x1H8k‚Ä¶" target="_blank"&gt;https://t.co/XARY1x1H8k‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/GTJ58bxfca" title="https://t.co/GTJ58bxfca" target="_blank"&gt;https://t.co/GTJ58bxfca&lt;/a&gt;&lt;/p&gt;‚Äî Steven H (@secdevthing) &lt;a href="https://twitter.com/secdevthing/status/1012431239519744000" data-datetime="2018-06-28T20:23:12+00:00"&gt;June 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Day 100: I completed the 100 Days of Code in Python course by &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/@talkpython!" target="_blank"&gt;@talkpython!&lt;/a&gt; Made a Web version of the HiLo‚Ä¶ &lt;a href="https://t.co/IxXH1vHcZC" title="https://t.co/IxXH1vHcZC" target="_blank"&gt;https://t.co/IxXH1vHcZC&lt;/a&gt;&lt;/p&gt;‚Äî Darren Jones (@djaychela) &lt;a href="https://twitter.com/djaychela/status/1014774998647607298" data-datetime="2018-07-05T07:36:27+00:00"&gt;July 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Day 100: ü•≥ I completed the 100 Days of Code in Python course by üíô &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; üíô! &lt;a href="https://t.co/t2NNmXay0r‚Ä¶" title="https://t.co/t2NNmXay0r‚Ä¶" target="_blank"&gt;https://t.co/t2NNmXay0r‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/Ef40h1UzWo" title="https://t.co/Ef40h1UzWo" target="_blank"&gt;https://t.co/Ef40h1UzWo&lt;/a&gt;&lt;/p&gt;‚Äî Taz (@devtazv2) &lt;a href="https://twitter.com/devtazv2/status/1015222577239810049" data-datetime="2018-07-06T13:14:58+00:00"&gt;July 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;That champion Anthony Shaw is back at it on the latest Talk Python episode, talking security this time!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here's &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; &lt;a href="https://twitter.com/search/#168:" target="_blank"&gt;#168:&lt;/a&gt; 10 Python security holes and how to plug them with &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; and &lt;a href="https://twitter.com/@alangsworth‚Ä¶" target="_blank"&gt;@alangsworth‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/XtHgcDHlnV" title="https://t.co/XtHgcDHlnV" target="_blank"&gt;https://t.co/XtHgcDHlnV&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/1015352713918500864" data-datetime="2018-07-06T21:52:05+00:00"&gt;July 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;It's stories like these that make everything we do worthwhile. Great work Rob!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thank you, &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; . &lt;a href="https://t.co/cwOjsoAxbX" title="https://t.co/cwOjsoAxbX" target="_blank"&gt;https://t.co/cwOjsoAxbX&lt;/a&gt;&lt;/p&gt;‚Äî Rob Fowler (@BlueGator4) &lt;a href="https://twitter.com/BlueGator4/status/1014584469339148293" data-datetime="2018-07-04T18:59:22+00:00"&gt;July 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Thanks to the PSF for all that they do!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePSF:" target="_blank"&gt;@ThePSF:&lt;/a&gt; Our sponsors support has enabled us to award $166,205 in grants to recipients in 34 different countries so far in 2018 &amp;amp; we‚Äôre‚Ä¶&lt;/p&gt;‚Äî Ewa Jodlowska (@ewa_jodlowska) &lt;a href="https://twitter.com/ewa_jodlowska/status/1014257389049171968" data-datetime="2018-07-03T21:19:40+00:00"&gt;July 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Zip Fun!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;One of my favorite little Python tidbits is that zip() is its own inverse... &amp;gt;&amp;gt;&amp;gt; data = [(1, 2, 3), ('a', 'b', 'c'‚Ä¶ &lt;a href="https://t.co/PUU1ncQgZZ" title="https://t.co/PUU1ncQgZZ" target="_blank"&gt;https://t.co/PUU1ncQgZZ&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/1014258560614580225" data-datetime="2018-07-03T21:24:19+00:00"&gt;July 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Nice regex tip&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You can include comments inside a regex with (?# ... ). For example, /the\s+(?# One or more spaces)end&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1014524676079603718" data-datetime="2018-07-04T15:01:46+00:00"&gt;July 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python 3.8 talk already!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just published "7 features proposed so far in Python 3.8" including a human-readable explanation of the controversi‚Ä¶ &lt;a href="https://t.co/SKlXv3Lo65" title="https://t.co/SKlXv3Lo65" target="_blank"&gt;https://t.co/SKlXv3Lo65&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/1015501733202518016" data-datetime="2018-07-07T07:44:14+00:00"&gt;July 07, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Calculate the distance between GPS points with Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I wrote a tutorial on how to calculate distance between GPS points in Python &lt;a href="https://t.co/24CjCpGSin" title="https://t.co/24CjCpGSin" target="_blank"&gt;https://t.co/24CjCpGSin&lt;/a&gt; by &lt;a href="https://twitter.com/@njanakiev" target="_blank"&gt;@njanakiev&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1015266053465636865" data-datetime="2018-07-06T16:07:44+00:00"&gt;July 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;What an amazing app! Can't wait to give it a try&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@cramforce:" target="_blank"&gt;@cramforce:&lt;/a&gt; ‚ú®NEW‚ú® After wanting to have this for years, I just built this little app that will read you Wikipedia articles about the pla‚Ä¶&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/1015381840964849664" data-datetime="2018-07-06T23:47:50+00:00"&gt;July 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Encoding in Python wonderfully explained&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How Encoding Works in Python2 vs Python3? The best explanation of encode, decode and UTF-8 I have ever seen:‚Ä¶ &lt;a href="https://t.co/Pcf8sFquvm" title="https://t.co/Pcf8sFquvm" target="_blank"&gt;https://t.co/Pcf8sFquvm&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1015127204320239616" data-datetime="2018-07-06T06:56:00+00:00"&gt;July 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;6 useful Python packages&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;5 rarely mentioned but super useful packages you should know about. Also, one of mine &lt;a href="https://t.co/1PtxfklyFg" title="https://t.co/1PtxfklyFg" target="_blank"&gt;https://t.co/1PtxfklyFg&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/1014947028181364736" data-datetime="2018-07-05T19:00:02+00:00"&gt;July 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Incredible effort! Super Mario themed stuff also instantly wins&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Extracting Super Mario Bros levels with Python &lt;a href="https://t.co/xUe5EetcHR" title="https://t.co/xUe5EetcHR" target="_blank"&gt;https://t.co/xUe5EetcHR&lt;/a&gt; &lt;a href="https://twitter.com/search/#mario" target="_blank"&gt;#mario&lt;/a&gt; &lt;a href="https://twitter.com/search/#video" target="_blank"&gt;#video&lt;/a&gt; &lt;a href="https://twitter.com/search/#data" target="_blank"&gt;#data&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/1013951588430315520" data-datetime="2018-07-03T01:04:31+00:00"&gt;July 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Multiline Strings&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I use textwrap.dedent on almost all of my user-facing multi-line strings. üêç If you're not using dedent already, I‚Ä¶ &lt;a href="https://t.co/YaV0w2lVtN" title="https://t.co/YaV0w2lVtN" target="_blank"&gt;https://t.co/YaV0w2lVtN&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/1015306892103561217" data-datetime="2018-07-06T18:50:01+00:00"&gt;July 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="100daysofcode"></category><category term="security"></category><category term="PSF"></category><category term="regex"></category><category term="zip"></category><category term="GPS"></category><category term="roadtrip"></category><category term="emulator"></category><category term="strings"></category><category term="textwrap"></category></entry><entry><title>PyBites Twitter Digest - Issue 21, 2018</title><link href="https://pybit.es/twitter_digest_201821.html" rel="alternate"></link><published>2018-07-01T21:16:00+02:00</published><updated>2018-07-01T21:16:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-07-01:/twitter_digest_201821.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Make your own Iterators&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How can you make your own iterators in &lt;a href="https://twitter.com/search/#Python?" target="_blank"&gt;#Python?&lt;/a&gt; ü§îüêç I wrote an article on this: &lt;a href="https://t.co/kDDXk30TAP" title="https://t.co/kDDXk30TAP" target="_blank"&gt;https://t.co/kDDXk30TAP&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/1010222790220263424" data-datetime="2018-06-22T18:07:36+00:00"&gt;June 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;We love seeing the enthusiasm as well as what people are getting out of our &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;#100DaysOfPython Course&lt;/a&gt;!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Created an email script using smtplib and email.mime in Python! It asks for a login, a ‚Äòto‚Äô address, and a subject‚Ä¶ &lt;a href="https://t.co/W25ohkX85f" title="https://t.co/W25ohkX85f" target="_blank"&gt;https://t.co/W25ohkX85f&lt;/a&gt;&lt;/p&gt;‚Äî Yashas Lokesh (@yashaslokesh_) &lt;a href="https://twitter.com/yashaslokesh_/status/1012843165789970433" data-datetime="2018-06-29T23:40:03+00:00"&gt;June 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Support Ned and have a read about Coverage.py&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/DQWUlxa3tL" title="https://t.co/DQWUlxa3tL" target="_blank"&gt;https://t.co/DQWUlxa3tL&lt;/a&gt; development is now on GitHub: &lt;a href="https://t.co/AhkWyjuUbR" title="https://t.co/AhkWyjuUbR" target="_blank"&gt;https://t.co/AhkWyjuUbR&lt;/a&gt; (stars please!) More about it: &lt;a href="https://t.co/IXgCxcMg76" title="https://t.co/IXgCxcMg76" target="_blank"&gt;https://t.co/IXgCxcMg76&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/1011219272809549825" data-datetime="2018-06-25T12:07:16+00:00"&gt;June 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Always love these tutorials by Adrian!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New tutorial published! üöÄ&lt;a href="https://twitter.com/@Raspberry_Pi" target="_blank"&gt;@Raspberry_Pi&lt;/a&gt; + Face Recognition + &lt;a href="https://twitter.com/search/#DeepLearning." target="_blank"&gt;#DeepLearning.&lt;/a&gt; üë®‚Äçü¶∞üßîüë©‚Äçü¶≥Check out the full tutorial here:‚Ä¶ &lt;a href="https://t.co/9e8ntv0Y5S" title="https://t.co/9e8ntv0Y5S" target="_blank"&gt;https://t.co/9e8ntv0Y5S&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1011248062499639296" data-datetime="2018-06-25T14:01:40+00:00"&gt;June 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;TensorFlow goodness&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Now you can translate between languages, using tf.keras + eager! Check out this nice example of Neural Machine Tran‚Ä¶ &lt;a href="https://t.co/8kmpHxNQt0" title="https://t.co/8kmpHxNQt0" target="_blank"&gt;https://t.co/8kmpHxNQt0&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/1009579409781772295" data-datetime="2018-06-20T23:31:03+00:00"&gt;June 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A great read for all of the data scientists out there&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;In this blog post, I share how data science is like the Model T or the Boeing 747 &lt;a href="https://t.co/saWOcyTPjM" title="https://t.co/saWOcyTPjM" target="_blank"&gt;https://t.co/saWOcyTPjM&lt;/a&gt; &lt;a href="https://t.co/AliMXMTyiE" title="https://t.co/AliMXMTyiE" target="_blank"&gt;https://t.co/AliMXMTyiE&lt;/a&gt;&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/1011291949289140226" data-datetime="2018-06-25T16:56:04+00:00"&gt;June 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Our mate Ant Shaw is trying out coding livestreams on Twitch. Check out the replay!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;YouTube recording of today‚Äôs livestream. Tried to make a new way to write tests for plugins of pytest. New approach‚Ä¶ &lt;a href="https://t.co/5ajaCs6mZj" title="https://t.co/5ajaCs6mZj" target="_blank"&gt;https://t.co/5ajaCs6mZj&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/1012954269895426048" data-datetime="2018-06-30T07:01:32+00:00"&gt;June 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Quality optimisation tip ha!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@larsiusprime:" target="_blank"&gt;@larsiusprime:&lt;/a&gt; Due to my elite programming skills, I figured out how to shave off THIRTY SECONDS from my app's startup time. Here's some‚Ä¶&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1013129718676185088" data-datetime="2018-06-30T18:38:42+00:00"&gt;June 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python Development Environment&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python development environment (with ROS!) &lt;a href="https://t.co/BULFwOlKfz" title="https://t.co/BULFwOlKfz" target="_blank"&gt;https://t.co/BULFwOlKfz&lt;/a&gt; &lt;a href="https://t.co/MPoUKdZsp5" title="https://t.co/MPoUKdZsp5" target="_blank"&gt;https://t.co/MPoUKdZsp5&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/1012023265487998981" data-datetime="2018-06-27T17:22:03+00:00"&gt;June 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Trey Hunner's Python Chat on datetimes&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@diek007:" target="_blank"&gt;@diek007:&lt;/a&gt; Great chat on &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; and date times with &lt;a href="https://twitter.com/@treyhunner" target="_blank"&gt;@treyhunner&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/@pganssle." target="_blank"&gt;@pganssle.&lt;/a&gt; Check it out, recorded episode &lt;a href="https://t.co/yiPonQmPQQ" title="https://t.co/yiPonQmPQQ" target="_blank"&gt;https://t.co/yiPonQmPQQ&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/1013207882655862789" data-datetime="2018-06-30T23:49:18+00:00"&gt;June 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Check out Raymond Hettingers tutorial on dataclasses&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.7 was just released. If you want a short tutorial on dataclasses, my Pycon talk will give you quick star‚Ä¶ &lt;a href="https://t.co/EKFejxDcC3" title="https://t.co/EKFejxDcC3" target="_blank"&gt;https://t.co/EKFejxDcC3&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/1012858339351408642" data-datetime="2018-06-30T00:40:20+00:00"&gt;June 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;The perfect use of dataviz!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@randal_olson:" target="_blank"&gt;@randal_olson:&lt;/a&gt; Who kissed whom in &lt;a href="https://twitter.com/search/#TheOffice" target="_blank"&gt;#TheOffice&lt;/a&gt; (US). &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; &lt;a href="https://t.co/X3E2HFXmgB" title="https://t.co/X3E2HFXmgB" target="_blank"&gt;https://t.co/X3E2HFXmgB&lt;/a&gt; &lt;a href="https://t.co/329BqvEHVC" title="https://t.co/329BqvEHVC" target="_blank"&gt;https://t.co/329BqvEHVC&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/1012761859886182400" data-datetime="2018-06-29T18:16:58+00:00"&gt;June 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Always Be Coding&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Take it from &lt;a href="https://twitter.com/@BillGates" target="_blank"&gt;@BillGates&lt;/a&gt; - if you're looking for something to keep your mind active this summer, why not learn to pr‚Ä¶ &lt;a href="https://t.co/7TKERusubA" title="https://t.co/7TKERusubA" target="_blank"&gt;https://t.co/7TKERusubA&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/1012735544088936448" data-datetime="2018-06-29T16:32:24+00:00"&gt;June 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A pretty interesting list of Python resources and projects (check out Bob's article on Bottle!)&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; üêçüì∞ What Can I Do With Python? &lt;a href="https://t.co/azrAP40WtC" title="https://t.co/azrAP40WtC" target="_blank"&gt;https://t.co/azrAP40WtC&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1013052322035978243" data-datetime="2018-06-30T13:31:09+00:00"&gt;June 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Write your own programming language and compiler with Python!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Writing your own programming language and compiler with Python &lt;a href="https://t.co/j9RFm3zQnJ" title="https://t.co/j9RFm3zQnJ" target="_blank"&gt;https://t.co/j9RFm3zQnJ&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1012608520288497664" data-datetime="2018-06-29T08:07:39+00:00"&gt;June 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="coverage.py"></category><category term="iterators"></category><category term="raspberry pi"></category><category term="OpenCV"></category><category term="tutorial"></category><category term="pytest"></category><category term="TensorFlow"></category><category term="data science"></category><category term="100daysofcode"></category><category term="IDE"></category><category term="datetime"></category><category term="Python 3.7"></category><category term="data visualisation"></category></entry><entry><title>Why Python is so popular in Devops?</title><link href="https://pybit.es/python-and-devops.html" rel="alternate"></link><published>2018-06-25T18:25:00+02:00</published><updated>2018-06-25T18:25:00+02:00</updated><author><name>Rhys Powell</name></author><id>tag:pybit.es,2018-06-25:/python-and-devops.html</id><summary type="html">&lt;p&gt;Along with the growth of Python for developers in the machine learning and data science space, Python is also a growing language for devops / in the ops tooling side. In this article Rhys will explain why that is ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;Along with the growth of Python for developers in the machine learning and data science space, Python is also a growing language for devops / in the ops tooling side. In this article Rhys will explain why that is ...&lt;/p&gt;
&lt;h2&gt;A bit of background&lt;/h2&gt;
&lt;p&gt;To understand why Python has been chosen you need to look at the environments and backgrounds of the people that have traditionally done ops works.&lt;/p&gt;
&lt;p&gt;For many years *nix systems and their operators have had the mindset of automating their works flows, &lt;em&gt;a good sysadmin is a lazy sysadmin&lt;/em&gt;. This has been supported through the ability to code in the shell, &lt;em&gt;bash&lt;/em&gt; being the default on many systems for many years.&lt;/p&gt;
&lt;p&gt;The ability to string together your shell commands into script files then run them time and time again was a very powerful thing. The difficulty was that trying to match what you get from modern languages is sometimes difficult and messy, so alternatives were sought. This is where Python stepped in ...&lt;/p&gt;
&lt;h2&gt;Why Python?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Its ubiquity and the fact it has been used for many years by OS providers gave admins the same warm fuzzy feeling as bash: they knew that they could write their scripts locally and that it should work anywhere, saving the need for individual scripts for all the different systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python is easy to read and learn. It‚Äôs also easy to copy, paste and run. Sometimes things just need to get done and Python allows you to jump into some complex things without the need to fully understand everything that‚Äôs happening. I‚Äôm not saying that‚Äôs a good thing, but if your site is down and the boss is screaming, sometimes the ability to just google, copy, paste and run, knowing you stand a good chance of achieving what you want, is just enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No need for object oriented programming. No structured coding required either. You can go straight into grabbing what you want and doing the work. Much like shell scripting (PyBites addition - related Pycon 2018 talk: &lt;a href="https://www.youtube.com/watch?v=QsTVDx20y1M"&gt;Solve Your Problem With Sloppy Python&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Batteries are mostly included but if not, there is likely a module out there. If you need to poke at a network, no problem, try &lt;a href="http://netaddr.readthedocs.io/en/latest/"&gt;netaddr&lt;/a&gt;. Need to grab data from a website? Use &lt;a href="https://pybit.es/tag/beautifulsoup.html"&gt;BeautifulSoup&lt;/a&gt;. Make a simple dashboard/data visualization with &lt;a href="https://pybit.es/tag/matplotlib.html"&gt;Matplotlib&lt;/a&gt; or &lt;a href="https://pybit.es/tag/bokeh.html"&gt;Bokeh&lt;/a&gt;. Python can do it all!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Big tools, same language&lt;/h2&gt;
&lt;p&gt;Beyond the day-to-day of ops work there are some big tools based on Python. Infrastructure management has &lt;a href="https://www.ansible.com"&gt;Ansible&lt;/a&gt; and &lt;a href="https://saltstack.com"&gt;Saltstack&lt;/a&gt;, both written in Python. &lt;a href="https://aws.amazon.com"&gt;AWS&lt;/a&gt;'s default command line tool is built in Python. &lt;a href="http://supervisord.org"&gt;Supervisor&lt;/a&gt; can be used to control services on systems. Or take pytest's &lt;a href="https://github.com/philpep/testinfra"&gt;testinfra&lt;/a&gt; which is specifically used for testing infrastructure deployments. Finally, we have &lt;a href="https://www.openstack.org"&gt;openstack&lt;/a&gt;, the open source cloud platform. Many of the components and management of these tools use Python underneath!&lt;/p&gt;
&lt;p&gt;The use of Python in many other areas, and the fact that devops is focused on breaking down silos and working across previously fixed boundaries, has also helped in increasing its use. If your data scientists and your ops guys are using it, the ability to talk and use code across disciplines is very useful.&lt;/p&gt;
&lt;h2&gt;Compared with other languages&lt;/h2&gt;
&lt;p&gt;While Python is certainly a leading choice, there is still the case for Ruby, where tools like &lt;a href="https://www.chef.io"&gt;Chef&lt;/a&gt; and &lt;a href="https://puppet.com"&gt;puppet&lt;/a&gt; are used. What both languages (as well as JS) can suffer from though is the need to install additional packages. I feel Python is a lot better as you can get most things done with the standard library. However external modules will often allow you to do things in an easier way, &lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt; being the perfect example.&lt;/p&gt;
&lt;p&gt;This difficulty has moved some developers into using &lt;a href="https://golang.org"&gt;Golang&lt;/a&gt;, which has many of the benefits of Python, but in addition can produce a &lt;em&gt;deployable&lt;/em&gt; component fast and capable of running on anything. This is certainly another language to look out for.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;&lt;a href="pages/guests.html#rhyspowell"&gt;Rhys&lt;/a&gt;&lt;/p&gt;</content><category term="guest"></category><category term="devops"></category><category term="deployment"></category><category term="scripting"></category><category term="netaddr"></category><category term="data visualization"></category><category term="sysadmin"></category><category term="automation"></category></entry><entry><title>PyBites Twitter Digest - Issue 20, 2018</title><link href="https://pybit.es/twitter_digest_201820.html" rel="alternate"></link><published>2018-06-18T20:47:00+02:00</published><updated>2018-06-18T20:47:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-06-18:/twitter_digest_201820.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;A great podcast episode on Continuous Delivery&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Ever wonder how to do continuous delivery with &lt;a href="https://twitter.com/search/#python?" target="_blank"&gt;#python?&lt;/a&gt; I recorded an episode of &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; with &lt;a href="https://twitter.com/@mkennedy" target="_blank"&gt;@mkennedy&lt;/a&gt; where w‚Ä¶ &lt;a href="https://t.co/qTYPGbrYHL" title="https://t.co/qTYPGbrYHL" target="_blank"&gt;https://t.co/qTYPGbrYHL&lt;/a&gt;&lt;/p&gt;‚Äî Cristian Medina (@tryexceptpass) &lt;a href="https://twitter.com/tryexceptpass/status/1007491249014759424" data-datetime="2018-06-15T05:13:26+00:00"&gt;June 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Inspecting module source code&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@DynamicWebPaige:" target="_blank"&gt;@DynamicWebPaige:&lt;/a&gt; üêç &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; family: if you ever want to inspect the source code for a module that you've imported, but don't want to was‚Ä¶&lt;/p&gt;‚Äî Jason Wattier (@jmwatt3) &lt;a href="https://twitter.com/jmwatt3/status/1008442541962858497" data-datetime="2018-06-17T20:13:32+00:00"&gt;June 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Origins of the Zen of Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@gvanrossum:" target="_blank"&gt;@gvanrossum:&lt;/a&gt; Origin of the Zen of Python. &lt;a href="https://t.co/2dzzLF922E" title="https://t.co/2dzzLF922E" target="_blank"&gt;https://t.co/2dzzLF922E&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/1006282628075544576" data-datetime="2018-06-11T21:10:49+00:00"&gt;June 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Teach kids to code!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mraspinall:" target="_blank"&gt;@mraspinall:&lt;/a&gt; 10 Reasons Kids Should Learn to Code &lt;a href="https://twitter.com/search/#CodeBreaker" target="_blank"&gt;#CodeBreaker&lt;/a&gt; &lt;a href="https://t.co/wfvKLTu8rN" title="https://t.co/wfvKLTu8rN" target="_blank"&gt;https://t.co/wfvKLTu8rN&lt;/a&gt; &lt;a href="https://t.co/rHKKraKapX" title="https://t.co/rHKKraKapX" target="_blank"&gt;https://t.co/rHKKraKapX&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/1008511105185013760" data-datetime="2018-06-18T00:45:59+00:00"&gt;June 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Sci-py lecture notes!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Scientific Python lecture notes &lt;a href="https://t.co/5UIkLUIOrl" title="https://t.co/5UIkLUIOrl" target="_blank"&gt;https://t.co/5UIkLUIOrl&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/1006920427694952448" data-datetime="2018-06-13T15:25:12+00:00"&gt;June 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;PyLadies Big Data Tutorial:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyLadies + Women in Big Data Python Tutorial, June 21 - Los Angeles, CA: &lt;a href="https://t.co/6DbkmV5suf." title="https://t.co/6DbkmV5suf." target="_blank"&gt;https://t.co/6DbkmV5suf.&lt;/a&gt; Visualizing Geogr‚Ä¶ &lt;a href="https://t.co/ATvKzHSCVi" title="https://t.co/ATvKzHSCVi" target="_blank"&gt;https://t.co/ATvKzHSCVi&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/1007638996539838465" data-datetime="2018-06-15T15:00:32+00:00"&gt;June 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Learn the internals of Scrapy&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Scrapy internals by Alexander Sibiryakov - &lt;a href="https://t.co/wGZLKdeITi." title="https://t.co/wGZLKdeITi." target="_blank"&gt;https://t.co/wGZLKdeITi.&lt;/a&gt; Covers Scrapy‚Äôs internal processing pipeline wo‚Ä¶ &lt;a href="https://t.co/dRNqAMnPdk" title="https://t.co/dRNqAMnPdk" target="_blank"&gt;https://t.co/dRNqAMnPdk&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/1005525063116914688" data-datetime="2018-06-09T19:00:31+00:00"&gt;June 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A very cool webcast on building PyPI.org with MongoDB&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Want to watch the recording of my 3-part &lt;a href="https://twitter.com/@MongoDB" target="_blank"&gt;@MongoDB&lt;/a&gt; webcast? We build &lt;a href="https://t.co/9hEjdxIsjw" title="https://t.co/9hEjdxIsjw" target="_blank"&gt;https://t.co/9hEjdxIsjw&lt;/a&gt; from scratch all the w‚Ä¶ &lt;a href="https://t.co/OcVpzbFCys" title="https://t.co/OcVpzbFCys" target="_blank"&gt;https://t.co/OcVpzbFCys&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/1007036428805640192" data-datetime="2018-06-13T23:06:09+00:00"&gt;June 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python's 3 main applications&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What exactly can you do with Python? Here are Python's 3 main applications. -- &lt;a href="https://t.co/G7OsXnbvoM" title="https://t.co/G7OsXnbvoM" target="_blank"&gt;https://t.co/G7OsXnbvoM&lt;/a&gt;&lt;/p&gt;‚Äî Real Python (@realpython) &lt;a href="https://twitter.com/realpython/status/1008519666925473798" data-datetime="2018-06-18T01:20:00+00:00"&gt;June 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;What a brilliant little project! pytest-tldr&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@freakboy3742:" target="_blank"&gt;@freakboy3742:&lt;/a&gt; My weekend project: A pytest plugin that makes test output less chatty and less colorful. pip install pytest-tldr and s‚Ä¶&lt;/p&gt;‚Äî Brian Okken (@brianokken) &lt;a href="https://twitter.com/brianokken/status/1008232849537822720" data-datetime="2018-06-17T06:20:18+00:00"&gt;June 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Article on security by Anthony Shaw - good stuff mate!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚Äú10 common security gotchas in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; and how to avoid them‚Äù by &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; &lt;a href="https://t.co/1oD2iPhsEy" title="https://t.co/1oD2iPhsEy" target="_blank"&gt;https://t.co/1oD2iPhsEy&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/1008667710618767361" data-datetime="2018-06-18T11:08:17+00:00"&gt;June 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Great new tutorial on Full Stack Python&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New post is up on how to quickly configure Python 3, Flask and Gunicorn on Ubuntu 18.04 LTS! &lt;a href="https://t.co/a1WxaPvJII" title="https://t.co/a1WxaPvJII" target="_blank"&gt;https://t.co/a1WxaPvJII&lt;/a&gt; &lt;a href="https://t.co/jZzSxE6W1r" title="https://t.co/jZzSxE6W1r" target="_blank"&gt;https://t.co/jZzSxE6W1r&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/1007994728560910336" data-datetime="2018-06-16T14:34:05+00:00"&gt;June 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;house - A runtime mobile application analysis toolkit with a Web GUI, powered by Frida, written in Python. &lt;a href="https://t.co/HsnMgHhGrL" title="https://t.co/HsnMgHhGrL" target="_blank"&gt;https://t.co/HsnMgHhGrL&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/1008499575752142853" data-datetime="2018-06-18T00:00:10+00:00"&gt;June 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;101 Pandas Exercises!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;101 Pandas Exercises for Data Analysi... &lt;a href="https://t.co/l3SvD7sqbV" title="https://t.co/l3SvD7sqbV" target="_blank"&gt;https://t.co/l3SvD7sqbV&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; &lt;a href="https://twitter.com/search/#package" target="_blank"&gt;#package&lt;/a&gt; &lt;a href="https://twitter.com/search/#data" target="_blank"&gt;#data&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/1007036114685681664" data-datetime="2018-06-13T23:04:54+00:00"&gt;June 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;How cool is this?!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Great 404 page. &lt;a href="https://twitter.com/search/#webdev" target="_blank"&gt;#webdev&lt;/a&gt;  Whenever you click one of their names, a small shock is sent to their work chair.‚Ä¶ &lt;a href="https://t.co/ZbO0MYeGO4" title="https://t.co/ZbO0MYeGO4" target="_blank"&gt;https://t.co/ZbO0MYeGO4&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/1008088458206703616" data-datetime="2018-06-16T20:46:32+00:00"&gt;June 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="continuous delivery"></category><category term="podcast"></category><category term="kids"></category><category term="inspect"></category><category term="source code"></category><category term="scientific python"></category><category term="big data"></category><category term="PyLadies"></category><category term="scrapy"></category><category term="MongoDB"></category><category term="pytest"></category><category term="pytest-tldr"></category><category term="Flask"></category><category term="Gunicorn"></category><category term="Ubuntu"></category><category term="house"></category><category term="Pandas"></category></entry><entry><title>PyBites Twitter Digest - Issue 19, 2018</title><link href="https://pybit.es/twitter_digest_201819.html" rel="alternate"></link><published>2018-06-11T16:05:00+02:00</published><updated>2018-06-11T16:05:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-06-11:/twitter_digest_201819.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;I wonder if this has anything to do with Microsoft!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@gitlab:" target="_blank"&gt;@gitlab:&lt;/a&gt; We're seeing 10x the normal daily amount of repositories &lt;a href="https://twitter.com/search/#movingtogitlab" target="_blank"&gt;#movingtogitlab&lt;/a&gt; &lt;a href="https://t.co/7AWH7BmMvM" title="https://t.co/7AWH7BmMvM" target="_blank"&gt;https://t.co/7AWH7BmMvM&lt;/a&gt; We're scaling our fleet to try‚Ä¶&lt;/p&gt;‚Äî Cristian Medina (@tryexceptpass) &lt;a href="https://twitter.com/tryexceptpass/status/1003417486698733568" data-datetime="2018-06-03T23:25:46+00:00"&gt;June 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;We hit 100 Bites!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pybites:" target="_blank"&gt;@pybites:&lt;/a&gt; Celebrating our 100th Bite of Py exercise on &lt;a href="https://t.co/UYcrpuWnxX" title="https://t.co/UYcrpuWnxX" target="_blank"&gt;https://t.co/UYcrpuWnxX&lt;/a&gt; we wrote an article on testing: Enough &lt;a href="https://twitter.com/search/#pytest" target="_blank"&gt;#pytest&lt;/a&gt; to be Dang‚Ä¶&lt;/p&gt;‚Äî Jason Wattier (@jmwatt3) &lt;a href="https://twitter.com/jmwatt3/status/1005118537583726594" data-datetime="2018-06-08T16:05:08+00:00"&gt;June 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;A great way to share your notes!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@VictorStinner:" target="_blank"&gt;@VictorStinner:&lt;/a&gt; I created a new website with all my notes about Python and CPython: &lt;a href="https://t.co/b66FZWM8B2" title="https://t.co/b66FZWM8B2" target="_blank"&gt;https://t.co/b66FZWM8B2&lt;/a&gt; Community, performance, Wind‚Ä¶&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1005521425623478272" data-datetime="2018-06-09T18:46:04+00:00"&gt;June 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Build an iOS Chat App with Django and Swift&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building A Real-Time iOS Chat Application With Django &lt;a href="https://t.co/wubYuqXtTs" title="https://t.co/wubYuqXtTs" target="_blank"&gt;https://t.co/wubYuqXtTs&lt;/a&gt; by &lt;a href="https://twitter.com/@neoneggplant" target="_blank"&gt;@neoneggplant&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/1004939606155038720" data-datetime="2018-06-08T04:14:07+00:00"&gt;June 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Awesome usage of Python on a cruise ship&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Very cool! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; getting the job done =&amp;gt; Controlling A Cruise Ship‚Äôs Massive Video Display &lt;a href="https://t.co/5EUuqii7yQ" title="https://t.co/5EUuqii7yQ" target="_blank"&gt;https://t.co/5EUuqii7yQ&lt;/a&gt;&lt;/p&gt;‚Äî diek (@diek007) &lt;a href="https://twitter.com/diek007/status/1005153650833022976" data-datetime="2018-06-08T18:24:39+00:00"&gt;June 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Great talk by Naomi at PyLondinium&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;If anyone wants them, here are the slides from my &lt;a href="https://twitter.com/@PyLondinium" target="_blank"&gt;@PyLondinium&lt;/a&gt; keynote this morning... &lt;a href="https://twitter.com/search/#PyLondinium18" target="_blank"&gt;#PyLondinium18&lt;/a&gt; &lt;a href="https://t.co/7FpFV95IPI" title="https://t.co/7FpFV95IPI" target="_blank"&gt;https://t.co/7FpFV95IPI&lt;/a&gt;&lt;/p&gt;‚Äî Naomi Ceder (@NaomiCeder) &lt;a href="https://twitter.com/NaomiCeder/status/1005457704478011394" data-datetime="2018-06-09T14:32:51+00:00"&gt;June 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python project structuring&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; One of the top questions we've been getting from new Python coders is "how should I structure my Python projects?" With th‚Ä¶&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1003684496628207616" data-datetime="2018-06-04T17:06:46+00:00"&gt;June 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;New TensorFlow!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;TensorFlow 1.9.0-rc0 has been released! Please see the full release notes for details on added features and change‚Ä¶ &lt;a href="https://t.co/ymV3xwwqkm" title="https://t.co/ymV3xwwqkm" target="_blank"&gt;https://t.co/ymV3xwwqkm&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/1005114601480994817" data-datetime="2018-06-08T15:49:29+00:00"&gt;June 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Ha!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"If at first you don‚Äôt succeed, call it version 1.0." - Unknown&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1005428553092141056" data-datetime="2018-06-09T12:37:01+00:00"&gt;June 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Looking forward to this Python Chat on Flask!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; Join me June 16 at 1pm PDT for a live &lt;a href="https://twitter.com/@PythonChat" target="_blank"&gt;@PythonChat&lt;/a&gt; with &lt;a href="https://twitter.com/@mitsuhiko" target="_blank"&gt;@mitsuhiko&lt;/a&gt; and &lt;a href="https://twitter.com/@davidism" target="_blank"&gt;@davidism&lt;/a&gt; about Flask. Armin and David will be answer‚Ä¶&lt;/p&gt;‚Äî Python Chat (@PythonChat) &lt;a href="https://twitter.com/PythonChat/status/1004129502568550406" data-datetime="2018-06-05T22:35:03+00:00"&gt;June 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Good point&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;For a long time I've been worrying about what would happen to the OSS community if the current tech bubble bursts &amp;amp;‚Ä¶ &lt;a href="https://t.co/IriIMXyRs6" title="https://t.co/IriIMXyRs6" target="_blank"&gt;https://t.co/IriIMXyRs6&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/1003625059603189760" data-datetime="2018-06-04T13:10:35+00:00"&gt;June 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;More Regex&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Outside a character class, ^ means 'start at the beginning of a line'. Example: /^The/ matches lines that begin with 'The'.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1004377824986324992" data-datetime="2018-06-06T15:01:48+00:00"&gt;June 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Very cool use of facial recognition&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@chordbug:" target="_blank"&gt;@chordbug:&lt;/a&gt; I wrote a sorting function that only works when you're looking at it: &lt;a href="https://t.co/vNMmXW8qzL" title="https://t.co/vNMmXW8qzL" target="_blank"&gt;https://t.co/vNMmXW8qzL&lt;/a&gt;&lt;/p&gt;‚Äî Alexander Kallaway ‚ö°Ô∏è (@ka11away) &lt;a href="https://twitter.com/ka11away/status/1006007441698447360" data-datetime="2018-06-11T02:57:19+00:00"&gt;June 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Turn your .py files to executables!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Make Executable File From Python (.Py to .Exe) &lt;a href="https://t.co/58QrL5RpMW" title="https://t.co/58QrL5RpMW" target="_blank"&gt;https://t.co/58QrL5RpMW&lt;/a&gt; by &lt;a href="https://twitter.com/@SourceProjects" target="_blank"&gt;@SourceProjects&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1005270044526301184" data-datetime="2018-06-09T02:07:10+00:00"&gt;June 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Very disappointing Apple!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@llanga:" target="_blank"&gt;@llanga:&lt;/a&gt; So far &lt;a href="https://twitter.com/search/#macOS" target="_blank"&gt;#macOS&lt;/a&gt; Mojave ships with Python 2.7.10. I don't even want to rant about how this should be 3.6 by now. What I'm disappo‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/1004218711652220928" data-datetime="2018-06-06T04:29:32+00:00"&gt;June 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Django"></category><category term="Swift"></category><category term="iOS"></category><category term="Github"></category><category term="TensorFlow"></category><category term="Flask"></category><category term="Regex"></category><category term="facial recognition"></category><category term="executable"></category><category term="pyinstaller"></category><category term="MacOS"></category></entry><entry><title>Enough pytest to be Dangerous, 10 Things I Learned Writing Tests for 100 Python (Bites of Py) Exercises</title><link href="https://pybit.es/pytest-coding-100-tests.html" rel="alternate"></link><published>2018-06-07T16:30:00+02:00</published><updated>2018-06-07T16:30:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2018-06-07:/pytest-coding-100-tests.html</id><summary type="html">&lt;p&gt;We hit 100 Bite exercises on &lt;a href="https://codechalleng.es/"&gt;our Code Platform&lt;/a&gt; and that means we have written tests for 100 exercises. In this article I share 10 things I learned about writing test code and pytest.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We hit 100 Bite exercises on &lt;a href="https://codechalleng.es/"&gt;our Code Platform&lt;/a&gt; and that means we have written tests for 100 exercises. In this article I share 10 things I learned about writing test code and pytest.&lt;/p&gt;
&lt;h2&gt;1. One thing, one test&lt;/h2&gt;
&lt;p&gt;When you write test code it is important to stick to general code best practices and that means: one function ideally does one thing. Shorter test functions means more focus and you can adequately name each test function which leads to better outputs, compare:
&lt;img alt="too much in one function" src="https://pybit.es/images/pytest-too-much-in-one-function.png"&gt;&lt;/p&gt;
&lt;p&gt;to:
&lt;img alt="one functon one thing to test, much better" src="https://pybit.es/images/pytest-one-function-one-thing-better.png"&gt;&lt;/p&gt;
&lt;p&gt;I rather see the latter.&lt;/p&gt;
&lt;h2&gt;2. Tests should be independent&lt;/h2&gt;
&lt;p&gt;A test should never depend on another test. This goes back to good design and decoupling functionality. Read up on &lt;a href="https://en.wikipedia.org/wiki/Orthogonality_(programming)"&gt;orthogonality&lt;/a&gt;, greatly explained in the &lt;a href="https://bobbelderbos.com/2011/02/great-book-about-software-engineering/"&gt;Pragmatic Programmer book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;3. Test for edge cases&lt;/h2&gt;
&lt;p&gt;In case you are looping through a sequence what are the boundaries? If my function throws an exception for bad input what are all scenarios that exception should be thrown and not. For example throwing a &lt;code&gt;ValueError&lt;/code&gt; for a non numeric value, are we testing more than &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; types?&lt;/p&gt;
&lt;p&gt;This is also a good way to document what your code is supposed to do. A good example of an edge case and added documentation was our addition of None checking in &lt;a href="https://codechalleng.es/bites/1/"&gt;Bite 1. Sum n numbers&lt;/a&gt;, look at the last line of &lt;code&gt;test_sum_numbers_various_inputs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numbers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sum_numbers&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sum_numbers_default_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5050&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5050&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sum_numbers_various_inputs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# !! [] not the same as None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was one of our first tests, &lt;code&gt;assert sum_numbers([])&lt;/code&gt; could actually go into its own test function, because it handles a separate test case!&lt;/p&gt;
&lt;h2&gt;4. Mocking and performance&lt;/h2&gt;
&lt;p&gt;If you call an external service you probably want to mock it out (see an example &lt;a href="https://pybit.es/twitter-api-geodata-mocking.html"&gt;here&lt;/a&gt;). But use mocking with caution, it might drive you away from testing the real thing (anti-pattern). Also in our case beginner Pythonistas need to understand the test code and this can make things more confusing.&lt;/p&gt;
&lt;p&gt;But for some code it's inevitable, for example random outputs, you can use the patch decorator to mock out random behavior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;

    &lt;span class="nd"&gt;@patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;randint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_random_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;get_random_number&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apart from controlling external resources we want tests to be fast and mocking out an external API call speeds up tests.&lt;/p&gt;
&lt;p&gt;You will run your test suite over and over again so non performant tests slow down your development.&lt;/p&gt;
&lt;p&gt;On our platform we run the tests via AWS lambda which performs a bunch of additional tasks like picking up the submitted code and test file. And we have a user waiting for a pass/fail response. More reasons for the test code to be performant.&lt;/p&gt;
&lt;p&gt;In this context you also want to abstract common code into setup/teardown code, which pytest offers via &lt;em&gt;fixtures&lt;/em&gt;  (see more under 8). For some Bites we needed to pull in an input text file (AWS Lambda runs in its own sandbox). This is an example of something you'd make sure you do once for a set of tests. &lt;/p&gt;
&lt;h2&gt;5. Test coverage&lt;/h2&gt;
&lt;p&gt;Since teaching a lesson on pytest in our &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;100 Days of Code course&lt;/a&gt; I discovered &lt;a href="https://pypi.org/project/pytest-cov/"&gt;&lt;em&gt;coverage&lt;/em&gt;&lt;/a&gt; and made this alias in my &lt;em&gt;.vimrc&lt;/em&gt; to simply check it with one keystroke:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    nmap ,t :w&amp;lt;CR&amp;gt;:!pytest -s --cov-report term-missing --cov=&amp;#39;.&amp;#39;&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to install this plugin for it to work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    # enable venv (TODO: switch to pipenv)
    $ pip install pytest-cov
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our Bites are small so it might be overkill but it's good practice to use this tool:&lt;/p&gt;
&lt;p&gt;&lt;img alt="check coverage with one keystroke" src="https://pybit.es/images/pytest-test-coverage.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;OK next the pytest specific things I learned:&lt;/p&gt;
&lt;h2&gt;6. Why pytest is our framework of choice&lt;/h2&gt;
&lt;p&gt;To recap what we wrote in our review of &lt;a href="https://twitter.com/brianokken"&gt;Brian Okken&lt;/a&gt;'s &lt;a href="https://pybit.es/pytest-book.html"&gt;awesome book on pytest&lt;/a&gt;, what are wins of pytest over the builtin unittest framework?&lt;/p&gt;
&lt;p&gt;Answer: it's less verbose (assert vs. self.assertEqual etc.) / classes are not required, it as a rich cli interface, informative test failures, a more convenient way to write setup/teardown functions with fixtures, parameterized tests, and a better test runner (marker- and name-based test selection).&lt;/p&gt;
&lt;h2&gt;7. Reading pytest output (and &lt;em&gt;Bites of Py&lt;/em&gt; validation at its core)&lt;/h2&gt;
&lt;p&gt;Our &lt;a href="https://codechalleng.es/bites/"&gt;&lt;em&gt;Bites of Py&lt;/em&gt;&lt;/a&gt; endorses reading test code output.&lt;/p&gt;
&lt;p&gt;It's our way to lead programmers to get their code to work. It might mean some extra effort for newer coders but the pay off is huge, as somebody said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The gold of your solution is in the tests&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;... and we concur:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;as a developer you are going to read way more code than write!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;as a developer you will write vast amounts of test code to verify your code and maybe even drive its design (TDD),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;running tests makes you better understand what your code does and is supposed to do,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test failure output might require some debugging what/where it went wrong and debugging is another crucial programmer skill.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence why coding on our platform requires you to become friends with the tests and their outputs.&lt;/p&gt;
&lt;p&gt;Luckily that's also an area where pytest really shines: it's output is very intuitive!&lt;/p&gt;
&lt;p&gt;Let's look at a practical example: &lt;a href="https://codechalleng.es/bites/5"&gt;Bite 5. Parse a list of names&lt;/a&gt;, and let me only focus on the first function (the Bite has 3). Note you would probably write more code between each step, but just to show how the tests may guide you:&lt;/p&gt;
&lt;p&gt;Running the template code without adding any code it shows:&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    NAMES = [&amp;#39;arnold schwarzenegger&amp;#39;, &amp;#39;alec baldwin&amp;#39;, &amp;#39;bob belderbos&amp;#39;,
            &amp;#39;julian sequeira&amp;#39;, &amp;#39;sandra bullock&amp;#39;, &amp;#39;keanu reeves&amp;#39;,
            &amp;#39;julbob pybites&amp;#39;, &amp;#39;bob belderbos&amp;#39;, &amp;#39;julian sequeira&amp;#39;,
            &amp;#39;al pacino&amp;#39;, &amp;#39;brad pitt&amp;#39;, &amp;#39;matt damon&amp;#39;, &amp;#39;brad pitt&amp;#39;]

    def dedup_and_title_case_names(names):
        &amp;quot;&amp;quot;&amp;quot;Should return a list of names, each name appears only once&amp;quot;&amp;quot;&amp;quot;
        pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    =================================== FAILURES ===================================
    _______________________ test_dedup_and_title_case_names ________________________

        def test_dedup_and_title_case_names():
            names = dedup_and_title_case_names(NAMES)
    &amp;gt;       assert names.count(&amp;#39;Bob Belderbos&amp;#39;) == 1
    E       AttributeError: &amp;#39;NoneType&amp;#39; object has no attribute &amp;#39;count&amp;#39;

    /tmp/test_names.py:7: AttributeError
    ...
    ...
    output for other tests - note how a test per function makes it easier to focus on one thing at a time!
    ...
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dedup_and_title_case_names&lt;/code&gt; does not return anything, let's return the &lt;code&gt;NAMES&lt;/code&gt; list (as passed in as argument):&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def dedup_and_title_case_names(names):
        &amp;quot;&amp;quot;&amp;quot;Should return a list of names, each name appears only once&amp;quot;&amp;quot;&amp;quot;
        return names
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    =================================== FAILURES ===================================
    _______________________ test_dedup_and_title_case_names ________________________

        def test_dedup_and_title_case_names():
            names = dedup_and_title_case_names(NAMES)
    &amp;gt;       assert names.count(&amp;#39;Bob Belderbos&amp;#39;) == 1
    E       AssertionError: assert 0 == 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK now I don't assert the amount of names and that is because the original &lt;code&gt;NAMES&lt;/code&gt; list passed in is still lowercase:&lt;/p&gt;
&lt;p&gt;So let's address that next in &lt;code&gt;dedup_and_title_case_names&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def dedup_and_title_case_names(names):
        &amp;quot;&amp;quot;&amp;quot;Should return a list of names, each name appears only once&amp;quot;&amp;quot;&amp;quot;
        return [name.title() for name in NAMES]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    =================================== FAILURES ===================================
    _______________________ test_dedup_and_title_case_names ________________________

        def test_dedup_and_title_case_names():
            names = dedup_and_title_case_names(NAMES)
    &amp;gt;       assert names.count(&amp;#39;Bob Belderbos&amp;#39;) == 1
    E       AssertionError: assert 2 == 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK so I have my name in there twice now, it should be once. Let's have the list only contain unique names using a set:&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def dedup_and_title_case_names(names):
        &amp;quot;&amp;quot;&amp;quot;Should return a list of names, each name appears only once&amp;quot;&amp;quot;&amp;quot;
        return {name.title() for name in NAMES}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    =================================== FAILURES ===================================
    _______________________ test_dedup_and_title_case_names ________________________

        def test_dedup_and_title_case_names():
            names = dedup_and_title_case_names(NAMES)
    &amp;gt;       assert names.count(&amp;#39;Bob Belderbos&amp;#39;) == 1
    E       AttributeError: &amp;#39;set&amp;#39; object has no attribute &amp;#39;count&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oops! That's right, the &lt;em&gt;docstring&lt;/em&gt; already said it should return a list, fair enough:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def dedup_and_title_case_names(names):
        &amp;quot;&amp;quot;&amp;quot;Should return a list of names, each name appears only once&amp;quot;&amp;quot;&amp;quot;
        return list({name.title() for name in NAMES})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That works, I have a pass (dot) and the test is not under &lt;code&gt;FAILURES&lt;/code&gt; anymore:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    ../../tmp/test_names.py .FF

    ... other 2 tests still to pass for the other 2 functions for this Bite ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We think teaching people how to read test code is win/win, but for that it's important to write isolated tests (see 1. and 2.) and have intuitive failure outputs, which pytest nails.&lt;/p&gt;
&lt;h2&gt;8. Fixtures are your friend!&lt;/h2&gt;
&lt;p&gt;To quote from Brian's book:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pytest fixtures ... are the reason why many people switch to and stay with pytest. ... one of the great reasons to use fixtures: to focus the test on what you‚Äôre actually testing, not on what you had to do to get ready for the test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Teaching pytest in our &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;100 Days of Code course&lt;/a&gt;, I got to the end of +/- 40 min dense video section without addressing them (WTF?). So I wrote &lt;a href="https://pybit.es/pytest-fixtures.html"&gt;this article about fixtures&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fixtures are awesome, basically any time you want to do some (repetitive) setup/teardown for a (set of) tests you want to use them.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://codechalleng.es/bites/99/"&gt;Bite 99. Write an infinite sequence generator&lt;/a&gt; for example we test a sequence generator and we want a fresh instance before each test ... easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@pytest.fixture
def gen():
    &amp;quot;&amp;quot;&amp;quot;Return a fresh new generator object for each test&amp;quot;&amp;quot;&amp;quot;
    return sequence_generator()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then access this fixture by passing it as argument to the test functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def test_first_ten_first_round(gen):
        ...
    def test_first_ten_second_round(gen):
        ...
    def test_last_ten_third_round(gen):
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to share the generator between tests, you can just give it a scope argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@pytest.fixture
def gen(scope=&amp;quot;module&amp;quot;):
    &amp;quot;&amp;quot;&amp;quot;Return a fresh new generator object for each test&amp;quot;&amp;quot;&amp;quot;
    return sequence_generator()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You probably don't want to do that for this code (remember: make tests independent), but you could have database setup code that persists across a bunch of tests for example.&lt;/p&gt;
&lt;h2&gt;9. Handle repetitive tests with parametrize&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;pytest.mark.parametrize&lt;/code&gt; decorator elegantly handles repetitive tests, for example to test an Uno card deck (&lt;a href="https://codechalleng.es/bites/60/"&gt;Bite 60. Create a deck of Uno cards&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    @pytest.mark.parametrize(&amp;quot;suit, count&amp;quot;, [
        (&amp;#39;Red&amp;#39;, 25),
        (&amp;#39;Green&amp;#39;, 25),
        (&amp;#39;Yellow&amp;#39;, 25),
        (&amp;#39;Blue&amp;#39;, 25),
        (None, 8),  # wild cards don&amp;#39;t have an associated suit
    ])
    def test_create_uno_deck_suit_distribution(deck, suit, count):
        assert _count_suits(deck, suit) == count
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not only is this readable, it splits every tuple into a test, showing a dot in the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [bbelderb@macbook 60 (master)]$ pytest test_uno.py::test_create_uno_deck_suit_distribution
    ==================================== test session starts ====================================
    platform darwin -- Python 3.6.1, pytest-3.0.7, py-1.4.33, pluggy-0.4.0
    rootdir: /Users/bbelderb/code/bites_of_py/60, inifile:
    collected 25 items

    test_uno.py .....

    ================================= 5 passed in 0.03 seconds ==================================
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will find it more in later Bites because, as the other pytest features, once we knew about them we made them part of our daily pytest vocabulary :)&lt;/p&gt;
&lt;h2&gt;10. Capturing stdout&lt;/h2&gt;
&lt;p&gt;This was an important technique to know about because, although most Bites have functions returning values, some exercises lend themselves better to have the user print to the console, so you need to capture the script's standard output:&lt;/p&gt;
&lt;p&gt;Here is the diff that shows the code we initially wrote to do this, before knowing about the &lt;code&gt;capfd&lt;/code&gt; (&lt;code&gt;capsys&lt;/code&gt;) fixture (thanks Brian):&lt;/p&gt;
&lt;p&gt;&lt;img alt="knowing about capfd saved a lot of unnecessary code" src="https://pybit.es/images/pytest-if-we-did-not-have-capfd.png"&gt;&lt;/p&gt;
&lt;p&gt;Yep, all you need is: &lt;code&gt;output = capfd.readouterr()[0]&lt;/code&gt; - sweet!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I hope you learned a few things about testing and pytest, at least enough to &lt;em&gt;become dangerous&lt;/em&gt;. Let us know if you have any feedback, some valuable improvements to our tests so far has come from user feedback, we really appreciate it.&lt;/p&gt;
&lt;p&gt;And the learning never stops. Yes, writing test code is a big part of the learning, but some formal reading is useful too. So I loaded &lt;a href="http://www.amazon.com/dp/0321503627/?tag=pyb0f-20"&gt;this book on my Kindle&lt;/a&gt; and am planning to listen to Brian's &lt;a href="http://testandcode.com/"&gt;Test and Code podcast&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Featured in this article: our Bites of Py service - &lt;em&gt;Do you want to grow as a programmer solving interesting Python challenges?&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Our Bites of Py have helped many programmers learn and practice more Python. We've seen them strengthen their skills and even start new careers - all while challenging themselves with our Bites.&lt;/p&gt;
&lt;p&gt;You not only get to solve interesting and relatable problems, but you also get to see how to do it in idiomatic Python.&lt;/p&gt;
&lt;p&gt;We challenge you! Click &lt;a href="http://codechalleng.es/"&gt;here&lt;/a&gt; and see if you can crack some Free Bites.&lt;/p&gt;
&lt;p&gt;Like what you see?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gumroad.com/l/ZFrD"&gt;Subscribe here&lt;/a&gt; and become a Premium member instantly unlocking our (at the time of this writing) 100 Bites of Py exercises.&lt;/p&gt;
&lt;p&gt;The key to improving your Python skills is continuous practice and PyBites makes it easy to get you into the coding habit and/or retain your existing coding muscles.&lt;/p&gt;
&lt;p&gt;Additionally, coding with PyBites gives you access to an incredible (Slack) community of passionate Pythonistas happy to share their knowledge and learn from your experience.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="pytest"></category><category term="learning"></category><category term="mock"></category><category term="parametrize"></category><category term="capfd"></category><category term="fixtures"></category></entry><entry><title>PyBites Twitter Digest - Issue 18, 2018</title><link href="https://pybit.es/twitter_digest_201818.html" rel="alternate"></link><published>2018-06-03T20:56:00+02:00</published><updated>2018-06-03T20:56:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-06-03:/twitter_digest_201818.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;We love the idea of teaching kids code! This makes our day!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sat down wth my 2 daughters to code the &lt;a href="https://twitter.com/@adafruit" target="_blank"&gt;@adafruit&lt;/a&gt; Gemma from &lt;a href="https://twitter.com/search/#pycon2018" target="_blank"&gt;#pycon2018&lt;/a&gt; to go red when it‚Äôs warm and lilac when it‚Äô‚Ä¶ &lt;a href="https://t.co/x6i19zaK1k" title="https://t.co/x6i19zaK1k" target="_blank"&gt;https://t.co/x6i19zaK1k&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/1003145394576953344" data-datetime="2018-06-03T05:24:34+00:00"&gt;June 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Very cool if you use Python for video editing:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ASpannbauer:" target="_blank"&gt;@ASpannbauer:&lt;/a&gt; I'm still excited &amp;amp; tweeting about the release of the vidstab library to pypi (now with a logo!) If you want to stabilize‚Ä¶&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/1001442316324884480" data-datetime="2018-05-29T12:37:08+00:00"&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Something to consistently strive toward:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@CodeWisdom:" target="_blank"&gt;@CodeWisdom:&lt;/a&gt; "It turns out that style matters in programming for the same reason that it matters in writing. It makes for better reading‚Ä¶&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/1002167080844750848" data-datetime="2018-05-31T12:37:06+00:00"&gt;May 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Useful Regex Tip:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Character classes are characters listed inside square brackets. For example, [aeiou] is a character class that matches any vowel.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/1001841070966214669" data-datetime="2018-05-30T15:01:39+00:00"&gt;May 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Cool little script to record gratitudes. What a great little project!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I made a little Python project to track and remember gratitudes. Open to anyone playing, contributing, using for th‚Ä¶ &lt;a href="https://t.co/dKmWhAjtC2" title="https://t.co/dKmWhAjtC2" target="_blank"&gt;https://t.co/dKmWhAjtC2&lt;/a&gt;&lt;/p&gt;‚Äî Melanie Crutchfield (@HelloMelanieC) &lt;a href="https://twitter.com/HelloMelanieC/status/1001484729240076293" data-datetime="2018-05-29T15:25:40+00:00"&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Python bug tracking and GitHub issues:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Why not use GitHub issues?", I said. To Python core developers. At Python Language Summit 2018. üò≥ üò± &lt;a href="https://t.co/POLRgxRBsr" title="https://t.co/POLRgxRBsr" target="_blank"&gt;https://t.co/POLRgxRBsr&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/1002762740258074624" data-datetime="2018-06-02T04:04:02+00:00"&gt;June 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;We love data viz!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄòRussian Fake Tweets Visualized &lt;a href="https://t.co/vR7NXvi6TP" title="https://t.co/vR7NXvi6TP" target="_blank"&gt;https://t.co/vR7NXvi6TP&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/1002975017477423104" data-datetime="2018-06-02T18:07:33+00:00"&gt;June 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Mmm Pandas:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@twiecki:" target="_blank"&gt;@twiecki:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Pandas" target="_blank"&gt;#Pandas&lt;/a&gt; tip: Make jaws drop with &lt;a href="https://t.co/9Hc0fpmWSq" title="https://t.co/9Hc0fpmWSq" target="_blank"&gt;https://t.co/9Hc0fpmWSq&lt;/a&gt; &lt;a href="https://t.co/Je4gwrb74h" title="https://t.co/Je4gwrb74h" target="_blank"&gt;https://t.co/Je4gwrb74h&lt;/a&gt; &lt;a href="https://t.co/yST4q8rQSs" title="https://t.co/yST4q8rQSs" target="_blank"&gt;https://t.co/yST4q8rQSs&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/1001598684662910976" data-datetime="2018-05-29T22:58:29+00:00"&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Speed up your Python:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;6+1 &lt;a href="https://twitter.com/search/#pythontips" target="_blank"&gt;#pythontips&lt;/a&gt; to Speed-up Your Calculations (by &lt;a href="https://twitter.com/@jakevdp" target="_blank"&gt;@jakevdp&lt;/a&gt; &lt;a href="https://twitter.com/search/#PyCon2018):" target="_blank"&gt;#PyCon2018):&lt;/a&gt; ‚Ä¢ Line profiling ‚Ä¢ NumPy vectorization ‚Ä¢ Sp‚Ä¶ &lt;a href="https://t.co/lubqs43bZs" title="https://t.co/lubqs43bZs" target="_blank"&gt;https://t.co/lubqs43bZs&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/1002228567059595264" data-datetime="2018-05-31T16:41:25+00:00"&gt;May 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;An in depth and awesome deep dive into itertools:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; üêçüì∞ Master Python's "itertools" module by constructing practical examples in our latest in-depth tutorial: &lt;a href="https://t.co/pPO‚Ä¶" title="https://t.co/pPO‚Ä¶" target="_blank"&gt;https://t.co/pPO‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/1001857022323642368" data-datetime="2018-05-30T16:05:02+00:00"&gt;May 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Don't forget to fill out the survey if you haven't already done so!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hello &lt;a href="https://twitter.com/search/#pycon2018" target="_blank"&gt;#pycon2018&lt;/a&gt; Pythonistas! Don't forget to fill out our attendee survey. We read EVERY response and strive to im‚Ä¶ &lt;a href="https://t.co/OLwVjAVwly" title="https://t.co/OLwVjAVwly" target="_blank"&gt;https://t.co/OLwVjAVwly&lt;/a&gt;&lt;/p&gt;‚Äî PyCon (@pycon) &lt;a href="https://twitter.com/pycon/status/999357085442891776" data-datetime="2018-05-23T18:31:10+00:00"&gt;May 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Nice tutorial on adding Maps to a Django Web App:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New Full Stack Python tutorial is up! How to Add Maps to Django Web App Projects with &lt;a href="https://twitter.com/@Mapbox‚Ä¶" target="_blank"&gt;@Mapbox‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/JJKniRATV5" title="https://t.co/JJKniRATV5" target="_blank"&gt;https://t.co/JJKniRATV5&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/1001475215065534464" data-datetime="2018-05-29T14:47:52+00:00"&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Nice little read on applying for data science jobs:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@robinson_es:" target="_blank"&gt;@robinson_es:&lt;/a&gt; New blog post üéâ! A collection of advice and resources for folks applying to data science jobs, starting from preparing you‚Ä¶&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/1001516833747472390" data-datetime="2018-05-29T17:33:15+00:00"&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Great talk from PyCon!&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; Newer to programming and finding lots of resources that are either too beginner or too advanced for you? Watch &lt;a href="https://twitter.com/@mssjpackma‚Ä¶" target="_blank"&gt;@mssjpackma‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Jason Wattier (@jmwatt3) &lt;a href="https://twitter.com/jmwatt3/status/1001292602862424064" data-datetime="2018-05-29T02:42:14+00:00"&gt;May 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;The first course of its kind! New features of Python 3.7:&lt;/h3&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üéâ My new &lt;a href="https://twitter.com/@Pluralsight" target="_blank"&gt;@Pluralsight&lt;/a&gt; course ‚ÄúWhat‚Äôs new in Python 3.7‚Äù is live! Learn about data classes, type annotations and all‚Ä¶ &lt;a href="https://t.co/mpdAdzxXOc" title="https://t.co/mpdAdzxXOc" target="_blank"&gt;https://t.co/mpdAdzxXOc&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/1002866369136812032" data-datetime="2018-06-02T10:55:49+00:00"&gt;June 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="coding"></category><category term="Python 3.7"></category><category term="OpenCV"></category><category term="regex"></category><category term="GitHub"></category><category term="data visualisation"></category><category term="Pandas"></category><category term="pycon"></category><category term="python tip"></category><category term="itertools"></category><category term="Django"></category><category term="Mapbox"></category><category term="data science"></category></entry><entry><title>Pushing the Packt "free book of the day" to the world with Scrapy and Alexa</title><link href="https://pybit.es/guest-scrapy-packt-alexa.html" rel="alternate"></link><published>2018-05-31T20:32:00+02:00</published><updated>2018-05-31T20:32:00+02:00</updated><author><name>Rhys Powell</name></author><id>tag:pybit.es,2018-05-31:/guest-scrapy-packt-alexa.html</id><summary type="html">&lt;p&gt;I have a love of the goodies that you get as part of the developer rewards from submitting Alexa skills to Amazon. Another thing that I also love is the fact that Packt gives away a free book. What I always forget to do is look at what today‚Äôs book is and what I didn‚Äôt have was a lot of time to meet this month's deadline for app submission. Why not combine them both?&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a love of the goodies that you get as part of the developer rewards from submitting Alexa skills to Amazon. Another thing that I also love is the fact that Packt gives away a free book. What I always forget to do is look at what today‚Äôs book is and what I didn‚Äôt have was a lot of time to meet this month's deadline for app submission. Why not combine them both?&lt;/p&gt;
&lt;p&gt;All of the code can be &lt;a href="https://gitlab.com/rhyspowell/packt_free_daily_book"&gt;found on Gitlab&lt;/a&gt;.
This post covers the build of the core code. To see the alexa and deployment sections, check out &lt;a href="www.rhyspowell.com"&gt;www.rhyspowell.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Still to do: tests, logging in and adding the book to my collection.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;First steps&lt;/h2&gt;
&lt;p&gt;Looking at ways of scraping data from websites the option that comes up first is the use of requests and beautifulsoup. Having a little bit of experience with requests it looked as though this would be a fairly easy task, sadly I was wrong. Packt has a level of protection in place that just blocked a simple requests call, despite trying lots of options I just couldn‚Äôt get the data. &lt;/p&gt;
&lt;p&gt;The next option was to look at using Selenium, something I had done for site testing previously, despite the fact that it was running chrome headless I still kept getting blocked. &lt;/p&gt;
&lt;p&gt;A little more searching around and I came across &lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt;. I had previously heard of Scrapy through a &lt;a href="https://talkpython.fm/episodes/show/50/web-scraping-at-scale-with-scrapy-and-scrapinghub"&gt;talkpython&lt;/a&gt; podcast so I thought I would give it a go.&lt;/p&gt;
&lt;h2&gt;Scrapy&lt;/h2&gt;
&lt;p&gt;A first look at the &lt;a href="https://doc.scrapy.org/en/latest/intro/overview.html"&gt;documentation&lt;/a&gt; is pretty daunting, there‚Äôs so much that Scrapy can do for you but the team behind it has put a huge amount of effort into both the docs and getting you up and running very quickly. The tutorial can give you a fully working scraper in less than five minutes and gives a great explanation on how things work, the perfect starting point to butcher the code to my needs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PacktSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;packt&amp;#39;&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.packtpub.com/packt/offers/free-learning&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;name&lt;/code&gt; has to be set as the name of the spider, the &lt;code&gt;url&lt;/code&gt; was updated to point to the free learning page and set the response to print out:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrapy code" src="https://pybit.es/images/scrapy-code.png"&gt;&lt;/p&gt;
&lt;p&gt;The response was exactly what I was looking for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-05-24 07:59:26 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET https://www.packtpub.com/packt/offers/free-learning&amp;gt; (referer: None)
&amp;lt;200 https://www.packtpub.com/packt/offers/free-learning&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Scraping the Page&lt;/h2&gt;
&lt;p&gt;With the ability to finally grab the page data, the next step is to open the page in a browser. I use Chrome, opening the developer tools I can inspect the page html.&lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome inspection" src="https://pybit.es/images/scrapy-chromeconsole.png"&gt;&lt;/p&gt;
&lt;p&gt;From this it‚Äôs easy to see that the piece of information that we are after, the book title, is wrapped with in the class &lt;code&gt;dotd-title&lt;/code&gt;. Now the work begins to get the information out of the response data. &lt;/p&gt;
&lt;p&gt;Scrapy gives you the choice of three methods of querying the data: css, xpath and re, with css or xpath being the standard methods. Once again the documentation is quite extensive and should be read through to give an idea of what can be done. An additional tool that Scrapy provides is a shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) ‚ûú  packt_free_learning git:(master) ‚úó scrapy shell &amp;#39;https://www.packtpub.com/packt/offers/free-learning&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running the above, processes the spider as it would normally but opens you into a python shell and provides the following objects and information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2018-05-24 09:20:58 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET https://www.packtpub.com/packt/offers/free-learning&amp;gt; (referer: None)
[s] Available Scrapy objects:
[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)
[s]   crawler    &amp;lt;scrapy.crawler.Crawler object at 0x10a3bad30&amp;gt;
[s]   item       {}
[s]   request    &amp;lt;GET https://www.packtpub.com/packt/offers/free-learning&amp;gt;
[s]   response   &amp;lt;200 https://www.packtpub.com/packt/offers/free-learning&amp;gt;
[s]   settings   &amp;lt;scrapy.settings.Settings object at 0x10b1c9710&amp;gt;
[s]   spider     &amp;lt;DefaultSpider &amp;#39;default&amp;#39; at 0x10b5684e0&amp;gt;
[s] Useful shortcuts:
[s]   fetch(url[, redirect=True]) Fetch URL and update local objects (by default, redirects are followed)
[s]   fetch(req)                  Fetch a scrapy.Request and update local objects
[s]   shelp()           Shell help (print this help)
[s]   view(response)    View response in a browser
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Word of warning, when playing in the shell the actual response will be trimmed to a fixed length, if you want to see the full text you need to add the &lt;code&gt;extract()&lt;/code&gt; method at the end of the query.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will leave you, reader, to play with your own site and work out the selectors.&lt;/p&gt;
&lt;p&gt;After much toiling and playing, the fog of how it worked cleared and there was a very simple xpath that gave me what I wanted&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;response.xpath(
           &amp;#39;normalize-space(//div[@class=&amp;quot;dotd-title&amp;quot;])&amp;#39;
           ).extract()[0]

//div[@class=‚Äùdotd-title‚Äù].extract() 

 returns 

[&amp;#39;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dotd-title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;\n\t\t\t\t\t\t\t&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPython for Secret Agents\t\t\t\t\t\t\t\t\t\t\t\t\t\t&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;\n\t\t\t\t\t\t&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This shows scrapy returning an array of items that match. In this case, only one. It also pulls everything associated with that div, the css div identifier and all of the white space that is seen on the inspection shown above. The use of xpaths &lt;code&gt;normalize-space&lt;/code&gt;
 clears the class and all of the whitespace away just leaving the text.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;Python for Secret Agents&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pushing the data&lt;/h2&gt;
&lt;p&gt;As this was to be used by Alexa and for the Flash Briefing system it needs to be read as an rss feed in a specific format. As this is a simple feed, one item only, using a library was a bit overkill but as this was always going to run on python 3.6 I could pull f strings out of the bag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;file_text = f&amp;#39;&amp;#39;&amp;#39; {{
 &amp;quot;uid&amp;quot;: &amp;quot;urn:uuid:{uuid.uuid4()}&amp;quot;,
 &amp;quot;updateDate&amp;quot;: &amp;quot;{time.strftime(&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;)}&amp;quot;,
 &amp;quot;titleText&amp;quot;: &amp;quot;Packt free learning ebook for today&amp;quot;,
 &amp;quot;mainText&amp;quot;: &amp;quot;{title}.&amp;quot;,
 &amp;quot;redirectionUrl&amp;quot;: &amp;quot;https://www.packtpub.com/packt/offers/free-learning&amp;quot;
}}&amp;#39;&amp;#39;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using f strings allows you to evaluate code or even previously set variables. If you haven't yet played with them, I would recommend that you take a look as they can make things so much easier. With the file text set it is fairly simple using the Boto3 library to upload to S3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3_client = boto3.client(
           &amp;#39;s3&amp;#39;,
           aws_access_key_id=AWS_ACCESS_KEY,
           aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
           region_name=&amp;#39;us-east-1&amp;#39;
       )
       with open(&amp;#39;feed.json&amp;#39;, &amp;#39;w&amp;#39;) as f:
           f.write(file_text)

       # Upload the file to S3
       response = s3_client.put_object(
           ACL=&amp;#39;public-read&amp;#39;,
           Bucket=&amp;#39;packt-free-learning&amp;#39;,
           Key=&amp;#39;feed.json&amp;#39;,
           Body=file_text,
           ContentEncoding=&amp;#39;utf-8&amp;#39;,
           ContentType=&amp;#39;application/json&amp;#39;,
           StorageClass=&amp;#39;REDUCED_REDUNDANCY&amp;#39;
           )
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Error Handling&lt;/h2&gt;
&lt;p&gt;Happy with the fact I could now grab the data and push it somewhere for Alexa to consume, as my devoted users wouldn‚Äôt want to miss their daily update, I needed to make sure that I would be alerted to any issues. At the time I had just listened to a &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes podcast&lt;/a&gt; where they had mentioned a package named &lt;a href="https://github.com/notifiers/notifiers"&gt;notifiers&lt;/a&gt; and this seemed like a great time to test it out.&lt;/p&gt;
&lt;p&gt;For me, doing ops, I live in Slack for most of the day, so that as a platform to send alerts to looked like the best option. The integration required the enabling of the webhooks, a simple app install on the Slack side, then using that app create a specific url to push the data to.&lt;/p&gt;
&lt;p&gt;First steps were to define some errors I would likely get that I would be able to see if it was caused by a programming error, the script getting blocked or something on the AWS side.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;handle_httpstatus_list = [401, 403, 404, 408, 500, 502, 503, 504]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sets scrapy to handle any of the http status errors listed allowing me the opportunity to do something with them later in the script. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;notifiers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_notifier&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sets up our ability to call one of the applications that notifiers supports. Not to tie them together.&lt;/p&gt;
&lt;p&gt;404 would give an indication that they have moved the page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if response.status == 404:
           slack.notify(webhook_url=hook, message=&amp;#39;404 URL is not good&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;402 and 403 might indicate that we were now getting blocked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;elif response.status == 401 or response.status == 403:
           slack.notify(
               webhook_url=hook,
               message=&amp;#39;We might have been blocked status &amp;#39;
               + str(response.status)
               )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;408 and any of the 500s that are being trapped are likely to be a transient error so wait and try again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
               &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                   &lt;span class="n"&gt;webhook_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Warning connection type errors. Error number &amp;#39;&lt;/span&gt;
                   &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                   &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; count &amp;#39;&lt;/span&gt;
                   &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                   &lt;span class="o"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                   &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                   &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start_requests&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It was then a simple case of deploying the app where I wanted it to run. More on that can be found in a post on my blog.&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;A couple of months after the app had been running, a conversation started on &lt;a href="https://pybit.es"&gt;PyBites&lt;/a&gt; Slack about posting the free book, each day, to the #books channel. I jumped at the chance to offer the app, thinking it would be fun to extend it a bit more.&lt;/p&gt;
&lt;p&gt;At the time of offering to help, it had been quite a while since I had looked at the code. I had in mind to use the notifiers module that I had heard of months before, remembering how useful it was. &lt;/p&gt;
&lt;p&gt;It was a delight seeing it post to the PyBites Slack channel! Even better, the whole process of adding another notifier took less than 5 minutes!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;&lt;a href="pages/guests.html#rhyspowell"&gt;Rhys&lt;/a&gt;&lt;/p&gt;</content><category term="guest"></category><category term="Alexa"></category><category term="Scrapy"></category><category term="web scraping"></category><category term="Packt"></category><category term="books"></category></entry><entry><title>PyBites Twitter Digest - Issue 17, 2018</title><link href="https://pybit.es/twitter_digest_201817.html" rel="alternate"></link><published>2018-05-27T13:10:00+02:00</published><updated>2018-05-27T13:10:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-05-27:/twitter_digest_201817.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The Panda‚Äôs Dozen: Top PyCon 2018&amp;nbsp;Talks &lt;a href="https://t.co/enzLjDdZMa" title="https://t.co/enzLjDdZMa" target="_blank"&gt;https://t.co/enzLjDdZMa&lt;/a&gt; &lt;a href="https://t.co/SmRfqC0wF6" title="https://t.co/SmRfqC0wF6" target="_blank"&gt;https://t.co/SmRfqC0wF6&lt;/a&gt;&lt;/p&gt;‚Äî Automation Panda (@AutomationPanda) &lt;a href="https://twitter.com/AutomationPanda/status/998765144292421632" data-datetime="2018-05-22T03:19:01+00:00"&gt;May 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePSF:" target="_blank"&gt;@ThePSF:&lt;/a&gt; Did you miss &lt;a href="https://twitter.com/search/#pycon2018?" target="_blank"&gt;#pycon2018?&lt;/a&gt; Not to worry - videos are posted here: &lt;a href="https://t.co/MT25kHT1ar" title="https://t.co/MT25kHT1ar" target="_blank"&gt;https://t.co/MT25kHT1ar&lt;/a&gt; &lt;a href="https://t.co/3PxDxSUDVA" title="https://t.co/3PxDxSUDVA" target="_blank"&gt;https://t.co/3PxDxSUDVA&lt;/a&gt;&lt;/p&gt;‚Äî Jason Wattier (@jmwatt3) &lt;a href="https://twitter.com/jmwatt3/status/1000155133458763777" data-datetime="2018-05-25T23:22:20+00:00"&gt;May 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@HelloMelanieC:" target="_blank"&gt;@HelloMelanieC:&lt;/a&gt; Uh-oh. Codes of conduct are the most basic way to say people matter to you. People. Not the language, or the tech, or pr‚Ä¶&lt;/p&gt;‚Äî Diane Chen (@PurpleDiane88) &lt;a href="https://twitter.com/PurpleDiane88/status/998612766901518336" data-datetime="2018-05-21T17:13:31+00:00"&gt;May 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@Israelem:" target="_blank"&gt;@Israelem:&lt;/a&gt; The Ultimate Guide to Data Classes in Python 3.7 &lt;a href="https://t.co/GSeuGdHag0" title="https://t.co/GSeuGdHag0" target="_blank"&gt;https://t.co/GSeuGdHag0&lt;/a&gt; v√≠a &lt;a href="https://twitter.com/@realpython" target="_blank"&gt;@realpython&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/1000541202356187136" data-datetime="2018-05-27T00:56:26+00:00"&gt;May 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Uplink: A Declarative HTTP Client for Python (powered by Requests!) &lt;a href="https://t.co/0h5xMaxCWJ" title="https://t.co/0h5xMaxCWJ" target="_blank"&gt;https://t.co/0h5xMaxCWJ&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/999688115789983746" data-datetime="2018-05-24T16:26:34+00:00"&gt;May 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePSF:" target="_blank"&gt;@ThePSF:&lt;/a&gt; Thank you to all the Pythonistas who supported our donation drive. We collected $22,000! This helps support 11 Python conferenc‚Ä¶&lt;/p&gt;‚Äî Naomi Ceder (@NaomiCeder) &lt;a href="https://twitter.com/NaomiCeder/status/1000224393920950273" data-datetime="2018-05-26T03:57:33+00:00"&gt;May 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;TensorFlow at Google I/O 2018! Here's a recap of Tensorflow‚Äôs presence at &lt;a href="https://twitter.com/search/#io18," target="_blank"&gt;#io18,&lt;/a&gt; including 7 Sessions and our AI‚Ä¶ &lt;a href="https://t.co/rI2UTUviVS" title="https://t.co/rI2UTUviVS" target="_blank"&gt;https://t.co/rI2UTUviVS&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/1000060814437498881" data-datetime="2018-05-25T17:07:33+00:00"&gt;May 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just published a new blog post! üöÄHow to build an OpenCV barcode and QR code scanner. Check it out here:‚Ä¶ &lt;a href="https://t.co/QzLwp0nnFv" title="https://t.co/QzLwp0nnFv" target="_blank"&gt;https://t.co/QzLwp0nnFv&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/998564925718003712" data-datetime="2018-05-21T14:03:25+00:00"&gt;May 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@deeplytrivial:" target="_blank"&gt;@deeplytrivial:&lt;/a&gt; Have words in Taylor Swift's songs changed as she moved from country to pop? Find out, through text analysis and regress‚Ä¶&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/998965076156665856" data-datetime="2018-05-22T16:33:28+00:00"&gt;May 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;now I ‚ù§Ô∏è &lt;a href="https://twitter.com/@risingstarcle" target="_blank"&gt;@risingstarcle&lt;/a&gt; even more! This brought tears to my eyes. &lt;a href="https://twitter.com/search/#PyCon2018" target="_blank"&gt;#PyCon2018&lt;/a&gt; &lt;a href="https://t.co/JkxSn0DImm" title="https://t.co/JkxSn0DImm" target="_blank"&gt;https://t.co/JkxSn0DImm&lt;/a&gt;&lt;/p&gt;‚Äî Ewa Jodlowska (@ewa_jodlowska) &lt;a href="https://twitter.com/ewa_jodlowska/status/997225611776192519" data-datetime="2018-05-17T21:21:28+00:00"&gt;May 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You might not think that programmers are artists, but programming is an extremely creative profession. It's logic-b‚Ä¶ &lt;a href="https://t.co/ZNHp7vnQxB" title="https://t.co/ZNHp7vnQxB" target="_blank"&gt;https://t.co/ZNHp7vnQxB&lt;/a&gt;&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/999696658924556288" data-datetime="2018-05-24T17:00:31+00:00"&gt;May 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@palewire:" target="_blank"&gt;@palewire:&lt;/a&gt; I've brewed up a tutorial showing how to make different kinds of area charts with Python's new Altair library. Learn how ea‚Ä¶&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/997145657663078400" data-datetime="2018-05-17T16:03:45+00:00"&gt;May 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I have redesigned the site for the ebook/video edition of the Flask Mega-Tutorial. Let me know what you think! (and‚Ä¶ &lt;a href="https://t.co/50seKyN23H" title="https://t.co/50seKyN23H" target="_blank"&gt;https://t.co/50seKyN23H&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/1000060823635611648" data-datetime="2018-05-25T17:07:35+00:00"&gt;May 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A dot matches any single character. For example, /r.de/ matches 'ride', 'rode' etc.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/998579573985030144" data-datetime="2018-05-21T15:01:37+00:00"&gt;May 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;THIS!!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Resolved: next year at PyCon, I will snap pictures of people I talk to so I won‚Äôt lose track of as many threads as‚Ä¶ &lt;a href="https://t.co/jhtrNZAefF" title="https://t.co/jhtrNZAefF" target="_blank"&gt;https://t.co/jhtrNZAefF&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/997834356755492865" data-datetime="2018-05-19T13:40:24+00:00"&gt;May 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="pycon"></category><category term="videos"></category><category term="Reddit"></category><category term="Python 3.7"></category><category term="HTTP"></category><category term="Uplink"></category><category term="PSF"></category><category term="TensorFlow"></category><category term="OpenCV"></category><category term="Raspberry Pi"></category><category term="data science"></category><category term="data visualisation"></category><category term="Altair"></category><category term="regex"></category></entry><entry><title>PyCon 2018 - My First PyCon</title><link href="https://pybit.es/pycon-2018.html" rel="alternate"></link><published>2018-05-19T10:35:00+02:00</published><updated>2018-05-19T10:35:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2018-05-19:/pycon-2018.html</id><summary type="html">&lt;p&gt;Going into my first PyCon was pretty daunting. Luckily, the Python community is absolutely incredible so my fears quickly faded. Surprisingly, there was a lot to gain that wasn't actually technical or code related. Read on for a recap of the experience.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was pretty nervous going into my first PyCon. As usual however, the Python community was &lt;em&gt;so&lt;/em&gt; incredibly supportive and inviting that I felt at home within minutes. I was surprised at how much there was to gain that wasn't actually technical or related to code. Read on for a recap of the experience and some tips for getting the most out of your next PyCon visit.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Balancing Talks and Activities&lt;/h2&gt;
&lt;p&gt;There was an absolute smorgasboard of talks going on during the Conference Days. Unfortunately, there were also Open Spaces to attend as well PyBites duties to fulfill at the same time.&lt;/p&gt;
&lt;p&gt;With PyCon, you're going to need to prioritise. Talks are wonderful but they're also available online (check &lt;a href="https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ"&gt;this year's talks here&lt;/a&gt;) so I found that I didn't need to fill my schedule with talk after talk.&lt;/p&gt;
&lt;p&gt;Given the talks were online, I ended up participating in more Open Spaces than actual Talks. That said, I'm looking forward to a good YouTube session to watch the talks I missed out on!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Open Spaces&lt;/h2&gt;
&lt;p&gt;Open Spaces ROCK. They're small form, themed group sessions where you sit around with other interested parties and discuss the aforementioned theme. Generally the person who created the session will lead the discussion but it ends up being a bit of a free for all. Not in a bad way either! The spirited discussion and knowledge dumped by participants was wonderful.&lt;/p&gt;
&lt;p&gt;I attended an awesome session on AR/VR in Python that was run by &lt;a href="https://twitter.com/tryexceptpass"&gt;Christian Medina&lt;/a&gt;. The discussion was invaluable as participants discussed Unity 3D and the Unreal Engine and how we could possibly interact with them using Python. I also got some great ideas on using OpenCV for non-game related purposes that interest me.&lt;/p&gt;
&lt;p&gt;I was also lucky enough to attend a session led by &lt;a href="https://twitter.com/treyhunner"&gt;Trey Hunner&lt;/a&gt; and &lt;a href="https://twitter.com/reuvenmlerner"&gt;Reuven Lerner&lt;/a&gt; on Python Training. There was wonderful conversation on training techniques and the like.&lt;/p&gt;
&lt;p&gt;As you can see, the sessions allowed for more varied, open and casual conversation. If you head to PyCon 2019, definitely attend at least a few of them! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open Space Recommendation: Don't hog the limelight. Allow and encourage others to speak up and give their opinions, share their stories and add to the collective knowledge of the room.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conversation and Networking&lt;/h2&gt;
&lt;p&gt;There's a lot of networking to be done at a conference like PyCon so it's incredibly important to bring your manners. No one likes rude people!&lt;/p&gt;
&lt;p&gt;When you strike up a conversation with another person, again, don't hog the limelight. Ask probing questions to learn more about the other person and what their interest in Python is. Ask for the business card! It's a great way to really show you're listening and you're interested in what they do.&lt;/p&gt;
&lt;p&gt;It was in this way that I was able to make a &lt;em&gt;heap&lt;/em&gt; of new friends and connections as well as even generate some future business opportunities.&lt;/p&gt;
&lt;p&gt;I'll even go as far as saying that the connections you make are more important than the talks the conference has on offer.&lt;/p&gt;
&lt;p&gt;The key with all of this is to simply &lt;strong&gt;listen&lt;/strong&gt;. Make sure you hear the other person and you'll be fine!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Be Social&lt;/h2&gt;
&lt;p&gt;One of the greatest ways I was able to connect with other Pythonistas (and our community!) was to get out of the conference and grab lunch/dinner externally. Chatting at a booth or in a hallway at the conference is one thing. Chatting over a beer and some grub is another.&lt;/p&gt;
&lt;p&gt;Don't disappear after the conference day has finished. Find the people you've connected with and see if you can go out for a meal. It'll be one of the best things you'll do! It's also a wonderful way to experience the city you're visiting. May as well enjoy the time away from home right?&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@tryexceptpass:" target="_blank"&gt;@tryexceptpass:&lt;/a&gt; Sat night at &lt;a href="https://twitter.com/search/#PyCon2018," target="_blank"&gt;#PyCon2018,&lt;/a&gt; hanging out with the &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; gang. &lt;a href="https://t.co/OqMZTXs69s" title="https://t.co/OqMZTXs69s" target="_blank"&gt;https://t.co/OqMZTXs69s&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/995508758565580800" data-datetime="2018-05-13T03:39:18+00:00"&gt;May 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@Spatcholla:" target="_blank"&gt;@Spatcholla:&lt;/a&gt; Love the Python community! First &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; meet up! &lt;a href="https://twitter.com/@_juliansequeira" target="_blank"&gt;@_juliansequeira&lt;/a&gt; &lt;a href="https://twitter.com/@bbelderbos" target="_blank"&gt;@bbelderbos&lt;/a&gt; &lt;a href="https://twitter.com/@jmwatt3" target="_blank"&gt;@jmwatt3&lt;/a&gt; &lt;a href="https://twitter.com/@pycon" target="_blank"&gt;@pycon&lt;/a&gt; &lt;a href="https://twitter.com/search/#pycon2018" target="_blank"&gt;#pycon2018&lt;/a&gt; &lt;a href="https://t.co/jwf‚Ä¶" title="https://t.co/jwf‚Ä¶" target="_blank"&gt;https://t.co/jwf‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/994445231054438400" data-datetime="2018-05-10T05:13:13+00:00"&gt;May 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Bring Water&lt;/h2&gt;
&lt;p&gt;PyCon makes every effort to keep you hydrated but I definitely found myself searching for a water cooler or bottles of water to no avail. Keep a bottle with you at all times to ensure you don't find yourself parched like I did!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Meet Contributors&lt;/h2&gt;
&lt;p&gt;PyCon is your chance to say g'day to the people that have really made a difference in your Python life/journey. I'm happy to report that I was able to meet and shake &lt;a href="https://twitter.com/miguelgrinberg"&gt;Miguel Grinberg's&lt;/a&gt; hand. I love his Flask material so meeting him was a big deal!&lt;/p&gt;
&lt;p&gt;Just remember, these contributors are people too so there's no need to be afraid of saying hi. In fact, saying hi and thanking them for their product/vision etc is one of the best things you can do!&lt;/p&gt;
&lt;p&gt;I thoroughly enjoyed meeting the likes of Trey Hunner, &lt;a href="https://twitter.com/dbader_org"&gt;Dan Bader&lt;/a&gt;, &lt;a href="https://twitter.com/__mharrison__"&gt;Matt Harrison&lt;/a&gt;, &lt;a href="https://twitter.com/anthonypjshaw"&gt;Anthony Shaw&lt;/a&gt; and many more!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Great night with the gang! Here's to an awesome &lt;a href="https://twitter.com/search/#pycon2018!" target="_blank"&gt;#pycon2018!&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; &lt;a href="https://twitter.com/@realpython" target="_blank"&gt;@realpython&lt;/a&gt; &lt;a href="https://twitter.com/@_juliansequeira‚Ä¶" target="_blank"&gt;@_juliansequeira‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/fnM4g6p3Oq" title="https://t.co/fnM4g6p3Oq" target="_blank"&gt;https://t.co/fnM4g6p3Oq&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/994448750998245376" data-datetime="2018-05-10T05:27:12+00:00"&gt;May 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Participate&lt;/h2&gt;
&lt;p&gt;Contributing is another way to really get a lot out of PyCon. Bob and I presented PyBites and CodeChalleng.es at the PyCon2018 Poster Session. The response to the platform was overwhelmingly positive!&lt;/p&gt;
&lt;p&gt;That said, there are many ways to participate in PyCon. Some people were hosting talks for their very first time! I can't even imagine how daunting that was. Kudos to them!&lt;/p&gt;
&lt;p&gt;If talking isn't your thing, you can volunteer to help with events, tutorials, guiding people around and so on.&lt;/p&gt;
&lt;p&gt;Whatever you choose to do, it's guaranteed you'll meet new people and feel great for helping out. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Proud to be presenting our &lt;a href="https://t.co/UYcrpuWnxX" title="https://t.co/UYcrpuWnxX" target="_blank"&gt;https://t.co/UYcrpuWnxX&lt;/a&gt; poster at &lt;a href="https://twitter.com/search/#PyCon2018" target="_blank"&gt;#PyCon2018&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/0xrYw0pnhC" title="https://t.co/0xrYw0pnhC" target="_blank"&gt;https://t.co/0xrYw0pnhC&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/995687868633899008" data-datetime="2018-05-13T15:31:01+00:00"&gt;May 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;See Stuff!&lt;/h2&gt;
&lt;p&gt;One of the stand out parts of PyCon was seeing all of the cool stuff vendors and people were showcasing at their booths.&lt;/p&gt;
&lt;p&gt;We got to see an awesome demo from the guys at &lt;a href="https://anvil.works/"&gt;Anvil&lt;/a&gt;; discuss everything books at the &lt;a href="https://www.oreilly.com/"&gt;O'Reilly&lt;/a&gt; stand; meet fellow Amazonians at the AWS booth; meet and chat with PSF Board members... and so much more!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;TalkPython and Test &amp;amp; Code Booth&lt;/h2&gt;
&lt;p&gt;During the conference days, Bob and I had the absolute privilege of joining &lt;a href="https://twitter.com/brianokken"&gt;Brian Okken&lt;/a&gt; and &lt;a href="https://twitter.com/mkennedy"&gt;Michael Kennedy&lt;/a&gt; at their Podcast booth. It was &lt;em&gt;so&lt;/em&gt; much fun getting to meet their communities, talk about their podcasts and even meet Pythonistas that enjoyed the &lt;a href="https://talkpython.fm/episodes/show/140/level-up-your-python-with-100daysofcode-challenge"&gt;Talk Python episode Bob and I were on&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The thing that really struck me while we were at the booth was how generous and welcoming the Python community was. Mike and Brian not only invited us to come hang out at the stand but also supported us in discussing and sharing PyBites and &lt;a href="https://codechalleng.es"&gt;CodeChalleng.es&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They also encouraged other contributors to join in so in no time at all we also had &lt;a href="https://twitter.com/TobiasMacey"&gt;Tobias Macey&lt;/a&gt; of &lt;em&gt;Podcast._&lt;em&gt;init_&lt;/em&gt;&lt;/em&gt;, Anthony Shaw, Christian Medina and Matt Harrison hanging out talking about what they do as well!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jmwatt3:" target="_blank"&gt;@jmwatt3:&lt;/a&gt; &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; and &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt; at the &lt;a href="https://twitter.com/@TalkPython," target="_blank"&gt;@TalkPython,&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; and &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; table. Having a great time at &lt;a href="https://twitter.com/@pycon‚Ä¶" target="_blank"&gt;@pycon‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/995508592873803776" data-datetime="2018-05-13T03:38:38+00:00"&gt;May 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The key take away from attending PyCon is that it's about the people. The friendly volunteers; the contributors; the friends, you name it. Everyone was so incredibly wonderful that I can't wait to get back there again!&lt;/p&gt;
&lt;p&gt;The key to success at the conference is to be nice, open to conversation and always respectful. If you can engage with people effectively then you'll have no issue.&lt;/p&gt;
&lt;p&gt;On that note, I just want to say a special thanks to &lt;a href="https://twitter.com/mkennedy"&gt;Mike Kennedy&lt;/a&gt; for all of his support and hospitality during the conference. Mike, you seriously went above and beyond to help Bob and I feel welcome - something we truly appreciated and won't forget.&lt;/p&gt;
&lt;p&gt;The same goes for all of the wonderful people we met, especially those from our community - &lt;a href="https://twitter.com/spatcholla"&gt;Sam&lt;/a&gt;, Daniel, &lt;a href="https://twitter.com/jmwatt3"&gt;Jason&lt;/a&gt;, Julianna, Davis and Andrew - we loved every minute we got to spend with you all. You're wonderful people!&lt;/p&gt;
&lt;p&gt;PyCon2018 was amazing. We can't wait to go back in 2019!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@_juliansequeira:" target="_blank"&gt;@_juliansequeira:&lt;/a&gt; &lt;a href="https://twitter.com/search/#PyCon2018" target="_blank"&gt;#PyCon2018&lt;/a&gt; was my first PyCon. I have had an INCREDIBLE time! I've listened to inspirational speakers; met some of the‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/996005382245019654" data-datetime="2018-05-14T12:32:42+00:00"&gt;May 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Keep Calm and Code in Python.&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="conference"></category><category term="pycon"></category><category term="learning"></category><category term="community"></category><category term="networking"></category></entry><entry><title>Twitter Digest 2018 Week 16</title><link href="https://pybit.es/twitter_digest_201816.html" rel="alternate"></link><published>2018-04-29T22:19:00+02:00</published><updated>2018-04-29T22:19:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-04-29:/twitter_digest_201816.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@DocFast:" target="_blank"&gt;@DocFast:&lt;/a&gt; Stoked! üéâ importnb makes it VERY easy to &lt;a href="https://twitter.com/search/#pytest" target="_blank"&gt;#pytest&lt;/a&gt; notebooks with without any extra tomfoolery. I appreciate the I spent using‚Ä¶&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/990054301597745152" data-datetime="2018-04-28T02:25:14+00:00"&gt;April 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; How to structure a Flask application using Blueprints and an Application Factory function &lt;a href="https://t.co/MzwuUkrx4a" title="https://t.co/MzwuUkrx4a" target="_blank"&gt;https://t.co/MzwuUkrx4a&lt;/a&gt;&lt;/p&gt;‚Äî Rene Sanchez (@cod3ghoul) &lt;a href="https://twitter.com/cod3ghoul/status/989432551247892480" data-datetime="2018-04-26T09:14:37+00:00"&gt;April 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@YuriEngelhardt:" target="_blank"&gt;@YuriEngelhardt:&lt;/a&gt; Data Visualization Type Catalogs Classic &lt;a href="https://t.co/taCEovH6Q9" title="https://t.co/taCEovH6Q9" target="_blank"&gt;https://t.co/taCEovH6Q9&lt;/a&gt; Thorough &lt;a href="https://t.co/2pfLUuodo7" title="https://t.co/2pfLUuodo7" target="_blank"&gt;https://t.co/2pfLUuodo7&lt;/a&gt; R &lt;a href="https://t.co/AXO8lq‚Ä¶" title="https://t.co/AXO8lq‚Ä¶" target="_blank"&gt;https://t.co/AXO8lq‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî R+Py Graph Galleries (@R_Graph_Gallery) &lt;a href="https://twitter.com/R_Graph_Gallery/status/988186844289417217" data-datetime="2018-04-22T22:44:37+00:00"&gt;April 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@randal_olson:" target="_blank"&gt;@randal_olson:&lt;/a&gt; The &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Graph Gallery: Useful for discovering and learning how to code &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; in Python. &lt;a href="https://t.co/1HWEYiZxCA" title="https://t.co/1HWEYiZxCA" target="_blank"&gt;https://t.co/1HWEYiZxCA&lt;/a&gt; h‚Ä¶&lt;/p&gt;‚Äî R+Py Graph Galleries (@R_Graph_Gallery) &lt;a href="https://twitter.com/R_Graph_Gallery/status/969334351887458304" data-datetime="2018-03-01T22:11:33+00:00"&gt;March 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New course! "Python 3, an Illustrated Tour" by &lt;a href="https://twitter.com/@__mharrison__" target="_blank"&gt;@__mharrison__&lt;/a&gt; just launched on Talk Python Training. Over 5 hours o‚Ä¶ &lt;a href="https://t.co/NQ4WMyHYpm" title="https://t.co/NQ4WMyHYpm" target="_blank"&gt;https://t.co/NQ4WMyHYpm&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/989255399575605249" data-datetime="2018-04-25T21:30:41+00:00"&gt;April 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Swift for TensorFlow is now open source! It is a new programming model for machine learning combining the performa‚Ä¶ &lt;a href="https://t.co/FIPVj0u8lb" title="https://t.co/FIPVj0u8lb" target="_blank"&gt;https://t.co/FIPVj0u8lb&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/989562853957996546" data-datetime="2018-04-26T17:52:24+00:00"&gt;April 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;And here's the video demo for today's &lt;a href="https://twitter.com/search/#Keras" target="_blank"&gt;#Keras&lt;/a&gt; + &lt;a href="https://twitter.com/search/#iOS" target="_blank"&gt;#iOS&lt;/a&gt; + &lt;a href="https://twitter.com/search/#CoreML" target="_blank"&gt;#CoreML&lt;/a&gt; blog post. Enjoy it and find the full tutorial here:‚Ä¶ &lt;a href="https://t.co/mycvsciUdX" title="https://t.co/mycvsciUdX" target="_blank"&gt;https://t.co/mycvsciUdX&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/988422895914377217" data-datetime="2018-04-23T14:22:37+00:00"&gt;April 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@spolsky:" target="_blank"&gt;@spolsky:&lt;/a&gt; There's this popular idea among developers that when you face a problem with code, you should get out a rubber duck and explai‚Ä¶&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/988429073163735046" data-datetime="2018-04-23T14:47:09+00:00"&gt;April 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Measuring programming progress by lines of code is like measuring aircraft building progress by weight." - Bill Gates&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/989549888559108096" data-datetime="2018-04-26T17:00:53+00:00"&gt;April 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PalletsTeam:" target="_blank"&gt;@PalletsTeam:&lt;/a&gt; Flask 1.0 has been released. üéâ &lt;a href="https://t.co/f32icWZzpJ" title="https://t.co/f32icWZzpJ" target="_blank"&gt;https://t.co/f32icWZzpJ&lt;/a&gt;&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/989602337676316673" data-datetime="2018-04-26T20:29:17+00:00"&gt;April 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;In my view, the most important change in Flask 1.0 is the support for the .flaskenv file, where you can define FLAS‚Ä¶ &lt;a href="https://t.co/m2bmRmHjWa" title="https://t.co/m2bmRmHjWa" target="_blank"&gt;https://t.co/m2bmRmHjWa&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/989624026959089665" data-datetime="2018-04-26T21:55:29+00:00"&gt;April 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TomAugspurger:" target="_blank"&gt;@TomAugspurger:&lt;/a&gt; Part 8: Scaling pandas with Dask: &lt;a href="https://t.co/6ebUyOD5sj" title="https://t.co/6ebUyOD5sj" target="_blank"&gt;https://t.co/6ebUyOD5sj&lt;/a&gt; A belated update to my series on using pandas. This post cove‚Ä¶&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/988812646827749376" data-datetime="2018-04-24T16:11:20+00:00"&gt;April 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;13 Python GUI Libraries &lt;a href="https://t.co/w80OQIDnGj" title="https://t.co/w80OQIDnGj" target="_blank"&gt;https://t.co/w80OQIDnGj&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/990351751965327361" data-datetime="2018-04-28T22:07:12+00:00"&gt;April 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn the difference between 'apply', 'applymap' and 'map' &lt;a href="https://t.co/9WhKbfW9L9" title="https://t.co/9WhKbfW9L9" target="_blank"&gt;https://t.co/9WhKbfW9L9&lt;/a&gt; &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; &lt;a href="https://t.co/vjRdjr3Qnu" title="https://t.co/vjRdjr3Qnu" target="_blank"&gt;https://t.co/vjRdjr3Qnu&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/989036287440146432" data-datetime="2018-04-25T07:00:00+00:00"&gt;April 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Everything you always wanted to know about implementing scrolling but were afraid to ask. &lt;a href="https://t.co/ZHkUQ1f7Fp" title="https://t.co/ZHkUQ1f7Fp" target="_blank"&gt;https://t.co/ZHkUQ1f7Fp&lt;/a&gt; &lt;a href="https://t.co/iP3j3g2wad" title="https://t.co/iP3j3g2wad" target="_blank"&gt;https://t.co/iP3j3g2wad&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/989269363411865600" data-datetime="2018-04-25T22:26:10+00:00"&gt;April 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;HAHA!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;git commit -m "fixed flickering" &lt;a href="https://t.co/jjNzrzBCOc" title="https://t.co/jjNzrzBCOc" target="_blank"&gt;https://t.co/jjNzrzBCOc&lt;/a&gt;&lt;/p&gt;‚Äî Kelly Vaughn (@kvlly) &lt;a href="https://twitter.com/kvlly/status/989840101554507776" data-datetime="2018-04-27T12:14:05+00:00"&gt;April 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="pytest"></category><category term="Flask"></category><category term="data visualisation"></category><category term="course"></category><category term="TensorFlow"></category><category term="machine learning"></category><category term="Keras"></category><category term="Pandas"></category><category term="GUI"></category></entry><entry><title>Twitter Digest 2018 Week 15</title><link href="https://pybit.es/twitter_digest_201815.html" rel="alternate"></link><published>2018-04-22T14:39:00+02:00</published><updated>2018-04-22T14:39:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-04-22:/twitter_digest_201815.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Another Pythonista starting the &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;challenge&lt;/a&gt;!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Day 1: &lt;a href="https://twitter.com/search/#100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; progress: today I worked on Playing with Datetimes / D1 (lectures) &lt;a href="https://t.co/PEAY69TxU8‚Ä¶" title="https://t.co/PEAY69TxU8‚Ä¶" target="_blank"&gt;https://t.co/PEAY69TxU8‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/DPWEVvzyuj" title="https://t.co/DPWEVvzyuj" target="_blank"&gt;https://t.co/DPWEVvzyuj&lt;/a&gt;&lt;/p&gt;‚Äî Sophia Brandt (@hisophiabrandt) &lt;a href="https://twitter.com/hisophiabrandt/status/987361255714443267" data-datetime="2018-04-20T16:04:02+00:00"&gt;April 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;'Coconut is a simple, elegant, Pythonic functional programming language that compiles to Python.' &lt;a href="https://t.co/iPNI4yFcQ8" title="https://t.co/iPNI4yFcQ8" target="_blank"&gt;https://t.co/iPNI4yFcQ8&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/986989093589577728" data-datetime="2018-04-19T15:25:11+00:00"&gt;April 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Interested in a quick, written intro to Python? Check out &lt;a href="https://t.co/p6kyuJ2cY2" title="https://t.co/p6kyuJ2cY2" target="_blank"&gt;https://t.co/p6kyuJ2cY2&lt;/a&gt; by &lt;a href="https://twitter.com/@gramnix" target="_blank"&gt;@gramnix&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/985207454483922944" data-datetime="2018-04-14T17:25:36+00:00"&gt;April 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;American Mosaic: Largest racial/ethnic group and &lt;a href="https://twitter.com/search/#religious" target="_blank"&gt;#religious&lt;/a&gt; group by US county. &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; &lt;a href="https://t.co/x4TmgO7y60" title="https://t.co/x4TmgO7y60" target="_blank"&gt;https://t.co/x4TmgO7y60&lt;/a&gt; &lt;a href="https://t.co/QfK2xEm9ku" title="https://t.co/QfK2xEm9ku" target="_blank"&gt;https://t.co/QfK2xEm9ku&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/987399224462422016" data-datetime="2018-04-20T18:34:54+00:00"&gt;April 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; list comparison techniques: # identity matters a is b # order matters; duplicates matter a == b # order‚Ä¶ &lt;a href="https://t.co/3nVQsxl0RX" title="https://t.co/3nVQsxl0RX" target="_blank"&gt;https://t.co/3nVQsxl0RX&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/985216546103422976" data-datetime="2018-04-14T18:01:43+00:00"&gt;April 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building a Python &amp;amp; Django &lt;a href="https://twitter.com/@Twilio" target="_blank"&gt;@Twilio&lt;/a&gt; Programmable Chat Application &lt;a href="https://t.co/JmjQW7pnKS" title="https://t.co/JmjQW7pnKS" target="_blank"&gt;https://t.co/JmjQW7pnKS&lt;/a&gt; &lt;a href="https://t.co/UkbkOpl5V0" title="https://t.co/UkbkOpl5V0" target="_blank"&gt;https://t.co/UkbkOpl5V0&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/987640531294580736" data-datetime="2018-04-21T10:33:46+00:00"&gt;April 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;open-data-registry - A registry of publicly available datasets on AWS &lt;a href="https://t.co/YljoObtoeD" title="https://t.co/YljoObtoeD" target="_blank"&gt;https://t.co/YljoObtoeD&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/987055527569092608" data-datetime="2018-04-19T19:49:11+00:00"&gt;April 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python 3.7: Introducing Data Classes &lt;a href="https://t.co/XGMCjCn6dK" title="https://t.co/XGMCjCn6dK" target="_blank"&gt;https://t.co/XGMCjCn6dK&lt;/a&gt; &lt;a href="https://twitter.com/search/#set" target="_blank"&gt;#set&lt;/a&gt; &lt;a href="https://twitter.com/search/#3.7" target="_blank"&gt;#3.7&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pycharm" target="_blank"&gt;#pycharm&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/987887301677105152" data-datetime="2018-04-22T02:54:21+00:00"&gt;April 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The best of Python: a collection of my ... &lt;a href="https://t.co/YYmt0W5X66" title="https://t.co/YYmt0W5X66" target="_blank"&gt;https://t.co/YYmt0W5X66&lt;/a&gt; &lt;a href="https://twitter.com/search/#list" target="_blank"&gt;#list&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/987794426243178496" data-datetime="2018-04-21T20:45:18+00:00"&gt;April 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@AlSweigart:" target="_blank"&gt;@AlSweigart:&lt;/a&gt; Someone made a "please don't learn to code" video. I like to encourage people to learn to code. I get... upset by these c‚Ä¶&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/987560330158002176" data-datetime="2018-04-21T05:15:05+00:00"&gt;April 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Pass functions to .loc[] and .iloc[] for indexing: df.loc[lambda x: x.col != 0] In this way, you can easily chain‚Ä¶ &lt;a href="https://t.co/XK5g0mMC7K" title="https://t.co/XK5g0mMC7K" target="_blank"&gt;https://t.co/XK5g0mMC7K&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/987316485545750529" data-datetime="2018-04-20T13:06:08+00:00"&gt;April 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ArneKoehn:" target="_blank"&gt;@ArneKoehn:&lt;/a&gt; Do you debug your &lt;a href="https://twitter.com/search/#nlproc" target="_blank"&gt;#nlproc&lt;/a&gt; parser using &lt;a href="https://twitter.com/search/#jupyter?" target="_blank"&gt;#jupyter?&lt;/a&gt; Want nice visualizations? Use jupyter-annodoc to visualize your dependency‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/986709363988414464" data-datetime="2018-04-18T20:53:39+00:00"&gt;April 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Create TUI on Python &lt;a href="https://t.co/GWht95TG0s" title="https://t.co/GWht95TG0s" target="_blank"&gt;https://t.co/GWht95TG0s&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/987694254754447361" data-datetime="2018-04-21T14:07:15+00:00"&gt;April 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Happy Monday! Here's a new tutorial on using &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; &lt;a href="https://twitter.com/search/#Keras" target="_blank"&gt;#Keras&lt;/a&gt; and Convolutional Neural Networks to classify &lt;a href="https://twitter.com/@Pokemon‚Ä¶" target="_blank"&gt;@Pokemon‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/bjTmetRdRZ" title="https://t.co/bjTmetRdRZ" target="_blank"&gt;https://t.co/bjTmetRdRZ&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/985881818451922945" data-datetime="2018-04-16T14:05:16+00:00"&gt;April 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;We have a whole bunch printed for PyCon2018!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@iamrecruitr:" target="_blank"&gt;@iamrecruitr:&lt;/a&gt; Just so I‚Äôm clear, laptop stickers are the tech equivalent of prison tattoos right?&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/987402275864723456" data-datetime="2018-04-20T18:47:02+00:00"&gt;April 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="100DaysOfCode"></category><category term="course"></category><category term="Coconut"></category><category term="learning"></category><category term="Data Visualisation"></category><category term="lists"></category><category term="Twilio"></category><category term="AWS"></category><category term="data"></category><category term="Python 3.7"></category><category term="PyCharm"></category><category term="resources"></category><category term="Pandas"></category><category term="Jupyter"></category><category term="TUI"></category><category term="npyscreen"></category><category term="Keras"></category><category term="Pokemon"></category><category term="PyCon"></category></entry><entry><title>Twitter Digest 2018 Week 14</title><link href="https://pybit.es/twitter_digest_201814.html" rel="alternate"></link><published>2018-04-15T21:24:00+02:00</published><updated>2018-04-15T21:24:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-04-15:/twitter_digest_201814.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's official: Starting January 1, 2019, pandas will drop support for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 2. This includes no backports of secu‚Ä¶ &lt;a href="https://t.co/uyVWOmxEVT" title="https://t.co/uyVWOmxEVT" target="_blank"&gt;https://t.co/uyVWOmxEVT&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/985215366891646976" data-datetime="2018-04-14T17:57:02+00:00"&gt;April 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;mypy 0.590 is out! &lt;a href="https://t.co/QwucglPTeS" title="https://t.co/QwucglPTeS" target="_blank"&gt;https://t.co/QwucglPTeS&lt;/a&gt; &lt;a href="https://twitter.com/@mypyproject" target="_blank"&gt;@mypyproject&lt;/a&gt; With PEP 561 suport (&lt;a href="https://t.co/XsU7bcZESY)," title="https://t.co/XsU7bcZESY)," target="_blank"&gt;https://t.co/XsU7bcZESY),&lt;/a&gt; thanks &lt;a href="https://twitter.com/@__ethanhs__" target="_blank"&gt;@__ethanhs__&lt;/a&gt;&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/984910718410547200" data-datetime="2018-04-13T21:46:28+00:00"&gt;April 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@AlSweigart:" target="_blank"&gt;@AlSweigart:&lt;/a&gt; Whew. After a ton of work, I've create a basic sudoku module for folks to look at. Next, I'm going to make an actual sudoku‚Ä¶&lt;/p&gt;‚Äî Diane Chen (@PurpleDiane88) &lt;a href="https://twitter.com/PurpleDiane88/status/984691534166544384" data-datetime="2018-04-13T07:15:31+00:00"&gt;April 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@EWDurbin:" target="_blank"&gt;@EWDurbin:&lt;/a&gt; Donations to the Python Software Foundation‚Äôs Packaging Working Group, which works to sustain PyPI, pip, setuptools, and all‚Ä¶&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/984932902692577280" data-datetime="2018-04-13T23:14:37+00:00"&gt;April 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; list comparison techniques: # identity matters a is b # order matters; duplicates matter a == b # order‚Ä¶ &lt;a href="https://t.co/3nVQsxl0RX" title="https://t.co/3nVQsxl0RX" target="_blank"&gt;https://t.co/3nVQsxl0RX&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/985216546103422976" data-datetime="2018-04-14T18:01:43+00:00"&gt;April 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@__amol__:" target="_blank"&gt;@__amol__:&lt;/a&gt; I'm super proud to say that Packt Publishing announced today my Cookbook on &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; standard library: &lt;a href="https://t.co/IwthZW9uF7‚Ä¶" title="https://t.co/IwthZW9uF7‚Ä¶" target="_blank"&gt;https://t.co/IwthZW9uF7‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Mike Driscoll (@driscollis) &lt;a href="https://twitter.com/driscollis/status/985314973369892864" data-datetime="2018-04-15T00:32:50+00:00"&gt;April 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brainwane:" target="_blank"&gt;@brainwane:&lt;/a&gt; &lt;a href="https://t.co/SCszreEj1F" title="https://t.co/SCszreEj1F" target="_blank"&gt;https://t.co/SCszreEj1F&lt;/a&gt; My new &lt;a href="https://twitter.com/@lwnnet" target="_blank"&gt;@lwnnet&lt;/a&gt; article about &lt;a href="https://t.co/YGLq5Tcc5V" title="https://t.co/YGLq5Tcc5V" target="_blank"&gt;https://t.co/YGLq5Tcc5V&lt;/a&gt; &lt;a href="https://t.co/Zae9ULF2QW" title="https://t.co/Zae9ULF2QW" target="_blank"&gt;https://t.co/Zae9ULF2QW&lt;/a&gt; covers why a &lt;a href="https://twitter.com/search/#newpypi‚Ä¶" target="_blank"&gt;#newpypi‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Naomi Ceder (@NaomiCeder) &lt;a href="https://twitter.com/NaomiCeder/status/984281443789692929" data-datetime="2018-04-12T04:05:57+00:00"&gt;April 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Software Foundation Fellow Members for Q1 2018 &lt;a href="https://t.co/1SVXnqFn7k" title="https://t.co/1SVXnqFn7k" target="_blank"&gt;https://t.co/1SVXnqFn7k&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/984491905152151552" data-datetime="2018-04-12T18:02:15+00:00"&gt;April 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Today I'm kicking off an epic 3-part series on building an actual &lt;a href="https://twitter.com/@Pokemon" target="_blank"&gt;@Pokemon&lt;/a&gt; Pokedex with &lt;a href="https://twitter.com/search/#DeepLearning." target="_blank"&gt;#DeepLearning.&lt;/a&gt; We'll start‚Ä¶ &lt;a href="https://t.co/VAAcAOJR9z" title="https://t.co/VAAcAOJR9z" target="_blank"&gt;https://t.co/VAAcAOJR9z&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/983345401578352640" data-datetime="2018-04-09T14:06:28+00:00"&gt;April 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;On Friday we announced Swift for TensorFlow - an early stage project that builds on language and compiler technolog‚Ä¶ &lt;a href="https://t.co/uSxymNM6Ot" title="https://t.co/uSxymNM6Ot" target="_blank"&gt;https://t.co/uSxymNM6Ot&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/983786170760007682" data-datetime="2018-04-10T19:17:55+00:00"&gt;April 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pycon:" target="_blank"&gt;@pycon:&lt;/a&gt; There‚Äôs no time to delay! &lt;a href="https://twitter.com/search/#pycon2018" target="_blank"&gt;#pycon2018&lt;/a&gt; ticket sales are approaching sellout. For up to the minute numbers, you can watch &lt;a href="https://‚Ä¶" title="https://‚Ä¶" target="_blank"&gt;https://‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Ewa Jodlowska (@ewa_jodlowska) &lt;a href="https://twitter.com/ewa_jodlowska/status/984098283202203648" data-datetime="2018-04-11T15:58:09+00:00"&gt;April 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@FractalIdeas:" target="_blank"&gt;@FractalIdeas:&lt;/a&gt; Blog post: Making React and Django play well together &lt;a href="https://t.co/JxzstC0Uif" title="https://t.co/JxzstC0Uif" target="_blank"&gt;https://t.co/JxzstC0Uif&lt;/a&gt; ‚Äî feedback welcome!&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/984382360505454592" data-datetime="2018-04-12T10:46:58+00:00"&gt;April 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@Jillian_Scudder:" target="_blank"&gt;@Jillian_Scudder:&lt;/a&gt; okay how many of you jokers knew that there's a "make my plot look like xkcd" option built into matplotlib and DIDN'T‚Ä¶&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/984096949715390464" data-datetime="2018-04-11T15:52:51+00:00"&gt;April 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Do you want to learn how to Dockerize a Flask application? Part 19 of the Flask Mega-Tutorial is up on the blog! &lt;a href="https://t.co/5qK0HqrAUn" title="https://t.co/5qK0HqrAUn" target="_blank"&gt;https://t.co/5qK0HqrAUn&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/983769257262501889" data-datetime="2018-04-10T18:10:43+00:00"&gt;April 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Minesweeper clone in Python, using PyQt &lt;a href="https://t.co/uYXoDjcwgd" title="https://t.co/uYXoDjcwgd" target="_blank"&gt;https://t.co/uYXoDjcwgd&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/983466453809549313" data-datetime="2018-04-09T22:07:29+00:00"&gt;April 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Pandas"></category><category term="MyPy"></category><category term="PyPI"></category><category term="lists"></category><category term="book"></category><category term="PSF"></category><category term="deep learning"></category><category term="machine learning"></category><category term="TensorFlow"></category><category term="PyCon"></category><category term="Django"></category><category term="matplotlib"></category><category term="Flask"></category><category term="Docker"></category><category term="PyQt"></category></entry><entry><title>Code Challenge 50 - Use Celery to Offload an Expensive Task</title><link href="https://pybit.es/codechallenge50.html" rel="alternate"></link><published>2018-04-02T00:35:00+02:00</published><updated>2018-04-02T00:35:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-04-02:/codechallenge50.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, back-to-back with our Planet Python challenge 49 here is our special Easter Challenge #50 where you will use Celery to offload a simplified Easter ecard mailer app.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, back-to-back with our Planet Python challenge 49 here is our special Easter Challenge #50 where you will use Celery to offload a simplified Easter ecard mailer app. &lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href="https://codechalleng.es/challenges/50/"&gt;Challenge 50 on our platform&lt;/a&gt; and pull/update the Community branch. cd into the 50 directories, &lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;create your virtual env&lt;/a&gt; and &lt;code&gt;pip install&lt;/code&gt; the requirements (Flask and Celery).&lt;/p&gt;
&lt;p&gt;The app let's your enter a banner URL, a comma separated list of emails and optional message:&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple flask app for celery" src="https://pybit.es/images/celery-flask-app1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="simple flask app for celery" src="https://pybit.es/images/celery-flask-app2.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;_emails_users&lt;/code&gt; simulates some processing time by sleeping 1 second - in real life this could be an intentional short pause so as to not hit a server or API too often. For the end users though, the page just appears slow and could result in them navigating away while the emailing is still taking place! Time to add some asynchronous processing so the user can keep navigating the site!&lt;/p&gt;
&lt;p&gt;Can you offload the emailing to a Celery task so the user does not have to wait for it to end or to prevent an impatient user from navigating away? Change the Flask app as you want, it's just some bootstrap code to get started ... You could also add an option to the form to send the card at a later date ...&lt;/p&gt;
&lt;p&gt;Set up a &lt;a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/"&gt;message broker&lt;/a&gt; of your choice and &lt;a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html"&gt;start playing with Celery&lt;/a&gt;. For a Flask + Celery basic example check &lt;a href="http://flask.pocoo.org/docs/0.12/patterns/celery/"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;Bonus points if you can display progress of the emailing on the page. Secondly try to deploy it to a cloud service provider and make the emailing work. You could try &lt;a href="https://devcenter.heroku.com/articles/sendgrid"&gt;Heroku + Sendgrid&lt;/a&gt; for example.&lt;/p&gt;
&lt;h3&gt;Credit&lt;/h3&gt;
&lt;p&gt;PR your work &lt;a href="https://codechalleng.es/challenges/50/"&gt;on our platform&lt;/a&gt; and get our special &lt;a href="https://codechalleng.es/badge/easter"&gt;PyBites Easter Badge&lt;/a&gt; added to your dashboard.&lt;/p&gt;
&lt;p&gt;We are moving the review posts to a &lt;em&gt;featured view&lt;/em&gt; on our platform (audience &amp;gt; 1800 users and growing), PR and standby ... &lt;/p&gt;
&lt;h2&gt;PyBites Community&lt;/h2&gt;
&lt;p&gt;A few more things before we take off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do you want to discuss this challenge and share your Pythonic journey with other passionate Pythonistas? Confirm your email on our platform then request access to our Slack via &lt;a href="https://codechalleng.es/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites is here to challenge you because becoming a better Pythonista requires practice, a lot of it. For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or ping us on our Slack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And of course Happy Easter!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Celery"></category><category term="Flask"></category><category term="broker"></category><category term="async"></category><category term="Easter"></category></entry><entry><title>Code Challenge 49 - Contribute to Open Source: Clean up Planet Python</title><link href="https://pybit.es/codechallenge49.html" rel="alternate"></link><published>2018-04-01T23:55:00+02:00</published><updated>2018-04-01T23:55:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-04-01:/codechallenge49.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, it has been silent on the Community Blog challenges front, but then again we completed the &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;100 Days of Code in Python course&lt;/a&gt; which was a great milestone. Although less frequent, we will keep doing blog challenges though, not to worry! Let's start with a long pending item: cleaning up Python planets feeds, an interesting and valuable open source contribution.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, it has been silent on the Community Blog challenges front, but then again we completed the &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;100 Days of Code in Python course&lt;/a&gt; which was a great milestone. Although less frequent, we will however,  keep doing blog challenges so not to worry! Let's start with a long pending item: cleaning up Python planets feeds, an interesting and valuable open source contribution.&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/python/planet/issues/233"&gt;issue 233&lt;/a&gt;: there are a lot of feeds that are invalid or outdated. For this Challenge you're to write a script that does the cleaning as per requirements stated in the issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run weekly or monthly&lt;/li&gt;
&lt;li&gt;Iterate all urls on config.ini and also python libraries and python planets list&lt;/li&gt;
&lt;li&gt;Call each URL and assert (following redirects) -&lt;ul&gt;
&lt;li&gt;Check return code is 200&lt;/li&gt;
&lt;li&gt;Check data of last update is newer than one year&lt;/li&gt;
&lt;li&gt;Check feed is valid using feedvalidator/podcastvalidator/othervalidator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If not valid, store the URL in a simple database (text file, sqlite or something)&lt;ul&gt;
&lt;li&gt;ACTION: If link returns bad status\invalid 3 times, remove from planet&lt;/li&gt;
&lt;li&gt;ACTION: If feed is outdated for more than one year, keep in planet but remove from sidebar&lt;/li&gt;
&lt;li&gt;ACTION: If feed is updated and not in sidebar, put it there again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;Ours and potentially a lot of other feeds are not showing up due to what seems to be an SSL issue. Can you solve it and make a lot of Pythonistas happy? Check our inital debugging on &lt;a href="https://github.com/python/planet/issues/135"&gt;issue 135&lt;/a&gt; and feel free to chime in (be warned though: might require some very old Python 2.x ...)&lt;/p&gt;
&lt;h3&gt;Credit&lt;/h3&gt;
&lt;p&gt;Ready to contribute to this important Python news app? &lt;a href="https://codechalleng.es/challenges/49"&gt;PR your work via our platform&lt;/a&gt; - valid PRs will receive our cool &lt;a href="http://codechalleng.es/badge/contributor"&gt;PyBites Contributor Badge&lt;/a&gt; added to their dashboards. &lt;/p&gt;
&lt;p&gt;We are moving the review posts to a &lt;em&gt;featured view&lt;/em&gt; on our platform (audience &amp;gt; 1800 users and growing), PR and standby ... &lt;/p&gt;
&lt;h2&gt;PyBites Community&lt;/h2&gt;
&lt;p&gt;A few more things before we take off:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do you want to discuss this challenge and share your Pythonic journey with other passionate Pythonistas? Confirm your email on our platform then request access to our Slack via &lt;a href="https://codechalleng.es/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites is here to challenge you because becoming a better Pythonista requires practice, a lot of it. For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or ping us on our Slack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Planet"></category><category term="feedparser"></category><category term="RSS"></category><category term="parsing"></category><category term="hacking"></category><category term="scripting"></category><category term="community"></category><category term="debugging"></category></entry><entry><title>Twitter Digest 2018 Week 13</title><link href="https://pybit.es/twitter_digest_201813.html" rel="alternate"></link><published>2018-04-01T21:43:00+02:00</published><updated>2018-04-01T21:43:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-04-01:/twitter_digest_201813.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;We're receiving very encouraging feedback on &lt;a href="https://talkpython.fm/100days?s=pybites"&gt;the course&lt;/a&gt;!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This &lt;a href="https://twitter.com/search/#100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; video course by &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; seems to be quite nicely made, there is even video appendix from ma‚Ä¶ &lt;a href="https://t.co/KYFDt61rDf" title="https://t.co/KYFDt61rDf" target="_blank"&gt;https://t.co/KYFDt61rDf&lt;/a&gt;&lt;/p&gt;‚Äî Harri V√§yrynen (@HarriVayrynen) &lt;a href="https://twitter.com/HarriVayrynen/status/979693904214790144" data-datetime="2018-03-30T12:16:43+00:00"&gt;March 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@StackAbuse:" target="_blank"&gt;@StackAbuse:&lt;/a&gt; Single Page Apps with Vue.js and Flask: JWT Authentication &lt;a href="https://t.co/DuQ7i0G8hu" title="https://t.co/DuQ7i0G8hu" target="_blank"&gt;https://t.co/DuQ7i0G8hu&lt;/a&gt; by &lt;a href="https://twitter.com/@adamjmcquistan" target="_blank"&gt;@adamjmcquistan&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#flask" target="_blank"&gt;#flask&lt;/a&gt; &lt;a href="https://twitter.com/search/#vuejs" target="_blank"&gt;#vuejs&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/979833339631755264" data-datetime="2018-03-30T21:30:47+00:00"&gt;March 30, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; Let‚Äôs hack the world‚Äôs most popular Wordpress CAPTCHA Plug-in with machine learning in Python &lt;a href="https://t.co/840zSRpew0" title="https://t.co/840zSRpew0" target="_blank"&gt;https://t.co/840zSRpew0&lt;/a&gt; by &lt;a href="https://twitter.com/@a‚Ä¶" target="_blank"&gt;@a‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/979371681285378049" data-datetime="2018-03-29T14:56:19+00:00"&gt;March 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@random_forests:" target="_blank"&gt;@random_forests:&lt;/a&gt; We're beginning to update tutorials on &lt;a href="https://t.co/BsLdHtNezs" title="https://t.co/BsLdHtNezs" target="_blank"&gt;https://t.co/BsLdHtNezs&lt;/a&gt; to link directly to Colab notebooks. Read about a concep‚Ä¶&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/979846497582723072" data-datetime="2018-03-30T22:23:04+00:00"&gt;March 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"The only way to learn a new programming language is by writing programs in it." - Dennis Ritchie&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/979713355165429763" data-datetime="2018-03-30T13:34:00+00:00"&gt;March 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Github pro tip: use "python-traceback" mode to syntax-highlight Python tracebacks. No more ugly red lines! &lt;a href="https://t.co/juOxc3MrYu" title="https://t.co/juOxc3MrYu" target="_blank"&gt;https://t.co/juOxc3MrYu&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/978111914625589248" data-datetime="2018-03-26T03:30:27+00:00"&gt;March 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Pelican Tutorial: Static, Python-Powered Blog with Search &amp;amp; Comments &lt;a href="https://t.co/PpM9t41Esj" title="https://t.co/PpM9t41Esj" target="_blank"&gt;https://t.co/PpM9t41Esj&lt;/a&gt; by &lt;a href="https://twitter.com/@snipcart" target="_blank"&gt;@snipcart&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/979902878327259136" data-datetime="2018-03-31T02:07:06+00:00"&gt;March 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Is &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; interpreted, or compiled? Yes. &lt;a href="https://t.co/vKaACNJBNw" title="https://t.co/vKaACNJBNw" target="_blank"&gt;https://t.co/vKaACNJBNw&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/979319784604164096" data-datetime="2018-03-29T11:30:06+00:00"&gt;March 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ericmjl:" target="_blank"&gt;@ericmjl:&lt;/a&gt; I just released pyjanitor, a light wrapper around pandas to provide easy data cleaning. Highly inspired by the Janitor &lt;a href="https://twitter.com/search/#rstats‚Ä¶" target="_blank"&gt;#rstats‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/979407384391987201" data-datetime="2018-03-29T17:18:11+00:00"&gt;March 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You may know that &amp;gt;&amp;gt;&amp;gt; import this prints the Zen of Python. But have you ever looked into its‚Ä¶ &lt;a href="https://t.co/6p74XcByOv" title="https://t.co/6p74XcByOv" target="_blank"&gt;https://t.co/6p74XcByOv&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/978874331374628864" data-datetime="2018-03-28T06:00:01+00:00"&gt;March 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to rewrite your SQL queries... &lt;a href="https://t.co/FR3jKs1I4Z" title="https://t.co/FR3jKs1I4Z" target="_blank"&gt;https://t.co/FR3jKs1I4Z&lt;/a&gt; &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; &lt;a href="https://twitter.com/search/#csv" target="_blank"&gt;#csv&lt;/a&gt; &lt;a href="https://twitter.com/search/#data" target="_blank"&gt;#data&lt;/a&gt; &lt;a href="https://twitter.com/search/#sql" target="_blank"&gt;#sql&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/979816230671364096" data-datetime="2018-03-30T20:22:48+00:00"&gt;March 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Looking back at 10 years of compartmentalization at AWS &lt;a href="https://t.co/dAf1kfFOJG" title="https://t.co/dAf1kfFOJG" target="_blank"&gt;https://t.co/dAf1kfFOJG&lt;/a&gt; &lt;a href="https://t.co/PGMGdVmshH" title="https://t.co/PGMGdVmshH" target="_blank"&gt;https://t.co/PGMGdVmshH&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/979770737539080192" data-datetime="2018-03-30T17:22:01+00:00"&gt;March 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A great list of Flask resources &lt;a href="https://t.co/inuByn9IhK" title="https://t.co/inuByn9IhK" target="_blank"&gt;https://t.co/inuByn9IhK&lt;/a&gt; by &lt;a href="https://twitter.com/@fullstackpython" target="_blank"&gt;@fullstackpython&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/979502218993963008" data-datetime="2018-03-29T23:35:01+00:00"&gt;March 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;patsy is a Python library for describing statistical models, largely compatible with R formulas. &lt;a href="https://t.co/peHlVI1SM0" title="https://t.co/peHlVI1SM0" target="_blank"&gt;https://t.co/peHlVI1SM0&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/978382365306314752" data-datetime="2018-03-26T21:25:08+00:00"&gt;March 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;Not coding related but this looks GREAT!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@Sheril_:" target="_blank"&gt;@Sheril_:&lt;/a&gt; I'm so excited to finally share the trailer for Serving Up Science! I'll be hosting a new series all about &lt;a href="https://twitter.com/search/#food," target="_blank"&gt;#food,&lt;/a&gt; where it com‚Ä¶&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/980128785474273280" data-datetime="2018-03-31T17:04:47+00:00"&gt;March 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="course"></category><category term="Flask"></category><category term="machine learning"></category><category term="TensorFlow"></category><category term="GitHub"></category><category term="Pelican"></category><category term="tutorial"></category><category term="Pandas"></category><category term="SQL"></category><category term="AWS"></category><category term="resources"></category><category term="data science"></category><category term="patsy"></category></entry><entry><title>CodeChalleng.es Platform Update 26-Mar-2018</title><link href="https://pybit.es/platform_update_20180326.html" rel="alternate"></link><published>2018-03-26T21:17:00+02:00</published><updated>2018-03-26T21:17:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-03-26:/platform_update_20180326.html</id><summary type="html">&lt;p&gt;Details of the latest CodeChalleng.es Code Platform updates.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;New Home Page Dashboard&lt;/h2&gt;
&lt;p&gt;On logging into our &lt;a href="https://codechalleng.es"&gt;CodeChalleng.es&lt;/a&gt; platform, you've previously been directed straight to the list of Bites.&lt;/p&gt;
&lt;p&gt;At PyBites we like to keep things lightweight and trimmed down (still an ad free experience!) so going straight to the Bites list has actually been working for us.&lt;/p&gt;
&lt;p&gt;As the library of Bites has grown however, we've realised that there's been nothing on the platform letting you know a new Bite has been released! The only way we were notifying users was via Twitter and occasionally via the platform internal messaging system.&lt;/p&gt;
&lt;p&gt;We're proud to say that you'll now see a brand new dashboard on the home page when you login to the platform!&lt;/p&gt;
&lt;p&gt;&lt;img alt="premium dashboard" src="https://pybit.es/images/dashboard-premium.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="free dashboard" src="https://pybit.es/images/dashboard-free.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're currently on our free tier, your dashboard will display the platform subscription text, an announcement panel and below, a list of our latest News Posts (like this one!) and our newest Bites and Blog Code Challenges.&lt;/p&gt;
&lt;p&gt;If you're already subscribed, you'll see the same dashboard minus the subscription text - no need seeing as you're already subbed right?&lt;/p&gt;
&lt;p&gt;The dashboard will continually evolve as we create more widgets to add to the board.&lt;/p&gt;
&lt;p&gt;Overall, it will provide greater visibility on updates to the platform as we make them.&lt;/p&gt;
&lt;p&gt;We've covered the features in the following video from our new &lt;a href="https://www.youtube.com/channel/UCBn-uKDGsRBfcB0lQeOB_gA/"&gt;YouTube Channel&lt;/a&gt;.&lt;/p&gt;
&lt;div class="container"&gt;
&lt;iframe src="https://www.youtube.com/embed/hvYID0shc3g" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Feature Requests&lt;/h2&gt;
&lt;p&gt;If you have any ideas or features you'd like to see added to the platform, please let us know through the &lt;a href="https://codechalleng.es/inbox/new"&gt;platform messaging system&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="news"></category><category term="platform_update"></category><category term="bites of py"></category></entry><entry><title>Twitter Digest 2018 Week 12</title><link href="https://pybit.es/twitter_digest_201812.html" rel="alternate"></link><published>2018-03-25T19:04:00+02:00</published><updated>2018-03-25T19:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-03-25:/twitter_digest_201812.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Our New Course #100DaysofCode in Python is now live!!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python is increasingly becoming a super skill these days. One of the best ways to learn is to tackle the‚Ä¶ &lt;a href="https://t.co/CtjJAcwIez" title="https://t.co/CtjJAcwIez" target="_blank"&gt;https://t.co/CtjJAcwIez&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/976573156780539904" data-datetime="2018-03-21T21:35:59+00:00"&gt;March 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;And here's an example of why you need to take it!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python is the most wanted, and third-most loved, programming language: &lt;a href="https://t.co/YdXrlMPFV1" title="https://t.co/YdXrlMPFV1" target="_blank"&gt;https://t.co/YdXrlMPFV1&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/973626888890482688" data-datetime="2018-03-13T18:28:34+00:00"&gt;March 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Want to hear &lt;a href="https://twitter.com/@KaiChang_Kevin" target="_blank"&gt;@KaiChang_Kevin&lt;/a&gt; read feedback from our Twitter giveaway winners? Listen to &lt;a href="https://twitter.com/@PythonOutLoud" target="_blank"&gt;@PythonOutLoud&lt;/a&gt; Episode 1 Po‚Ä¶ &lt;a href="https://t.co/4av7uZdbwq" title="https://t.co/4av7uZdbwq" target="_blank"&gt;https://t.co/4av7uZdbwq&lt;/a&gt;&lt;/p&gt;‚Äî Python Out Loud! (@PythonOutLoud) &lt;a href="https://twitter.com/PythonOutLoud/status/972834629605642240" data-datetime="2018-03-11T14:00:24+00:00"&gt;March 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@lisacrost:" target="_blank"&gt;@lisacrost:&lt;/a&gt; It's time for a new "What to consider" article! After pie charts, area charts, line charts and stacked column charts, I wrot‚Ä¶&lt;/p&gt;‚Äî R+Py Graph Galleries (@R_Graph_Gallery) &lt;a href="https://twitter.com/R_Graph_Gallery/status/976750524421648384" data-datetime="2018-03-22T09:20:46+00:00"&gt;March 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check this detailed intro to &lt;a href="https://twitter.com/search/#speechrecognition" target="_blank"&gt;#speechrecognition&lt;/a&gt; using &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; get coding, that code is not going to write itself &lt;a href="https://t.co/83IjijUqAI" title="https://t.co/83IjijUqAI" target="_blank"&gt;https://t.co/83IjijUqAI&lt;/a&gt;&lt;/p&gt;‚Äî diek (@diek007) &lt;a href="https://twitter.com/diek007/status/976520225880461313" data-datetime="2018-03-21T18:05:39+00:00"&gt;March 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to build a barcode reader with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; and OpenMV: &lt;a href="https://t.co/839mrsyyKx" title="https://t.co/839mrsyyKx" target="_blank"&gt;https://t.co/839mrsyyKx&lt;/a&gt; CC: &lt;a href="https://twitter.com/@openmvcam" target="_blank"&gt;@openmvcam&lt;/a&gt; &lt;a href="https://twitter.com/search/#ComputerVision‚Ä¶" target="_blank"&gt;#ComputerVision‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/GcSpLwxhGk" title="https://t.co/GcSpLwxhGk" target="_blank"&gt;https://t.co/GcSpLwxhGk&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/975734540705632256" data-datetime="2018-03-19T14:03:37+00:00"&gt;March 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to use multiple versions of Python in your Windows environment &lt;a href="https://t.co/ywoFr1h2FP" title="https://t.co/ywoFr1h2FP" target="_blank"&gt;https://t.co/ywoFr1h2FP&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/977013818265100288" data-datetime="2018-03-23T02:47:00+00:00"&gt;March 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Distributed Testing with Selenium Grid and Docker &amp;gt;&amp;gt; &lt;a href="https://t.co/NYEel48rcr" title="https://t.co/NYEel48rcr" target="_blank"&gt;https://t.co/NYEel48rcr&lt;/a&gt; &lt;a href="https://twitter.com/search/#Selenium" target="_blank"&gt;#Selenium&lt;/a&gt; &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/g8WrQVL5Qd" title="https://t.co/g8WrQVL5Qd" target="_blank"&gt;https://t.co/g8WrQVL5Qd&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/975722501895479296" data-datetime="2018-03-19T13:15:47+00:00"&gt;March 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This article is a continuation of the previous one dedicated to the speeches of a core Python developer - Mr. Raymo‚Ä¶ &lt;a href="https://t.co/jCTcxeF9P7" title="https://t.co/jCTcxeF9P7" target="_blank"&gt;https://t.co/jCTcxeF9P7&lt;/a&gt;&lt;/p&gt;‚Äî CheckiO (@PlayCheckiO) &lt;a href="https://twitter.com/PlayCheckiO/status/976882227538747393" data-datetime="2018-03-22T18:04:07+00:00"&gt;March 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Learning to code is the single best thing anyone can do to get the most out of the amazing future in front of us." - Marc Andreessen&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/977191742696017920" data-datetime="2018-03-23T14:34:01+00:00"&gt;March 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks to everyone who attended my Flask live stream today. You can watch the recording now:‚Ä¶ &lt;a href="https://t.co/i5GhextrvK" title="https://t.co/i5GhextrvK" target="_blank"&gt;https://t.co/i5GhextrvK&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/977626083418824704" data-datetime="2018-03-24T19:19:56+00:00"&gt;March 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pjasimoes:" target="_blank"&gt;@pjasimoes:&lt;/a&gt; My Python script to run scattering animations is now available on github &lt;a href="https://t.co/nJKBAApT75" title="https://t.co/nJKBAApT75" target="_blank"&gt;https://t.co/nJKBAApT75&lt;/a&gt; Note: not a simulation code‚Ä¶&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/975674390204514304" data-datetime="2018-03-19T10:04:36+00:00"&gt;March 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;vi and vim's engine uses \+ and \= in place of the more common + and ?.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/975749168806465539" data-datetime="2018-03-19T15:01:45+00:00"&gt;March 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/iNwQEsAsGt" title="https://t.co/iNwQEsAsGt" target="_blank"&gt;https://t.co/iNwQEsAsGt&lt;/a&gt; - Simple, lightweight, and magic-free static site/blog generator for Python coders (&amp;lt; 120 l‚Ä¶ &lt;a href="https://t.co/8GtLsWKHam" title="https://t.co/8GtLsWKHam" target="_blank"&gt;https://t.co/8GtLsWKHam&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/977366155051483137" data-datetime="2018-03-24T02:07:04+00:00"&gt;March 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jennifershehane:" target="_blank"&gt;@jennifershehane:&lt;/a&gt; The most comprehensive guide I've ever read on testing. I'd recommend &lt;a href="https://twitter.com/@Cypress_io" target="_blank"&gt;@Cypress_io&lt;/a&gt; for e2e obv, but grab a ‚òïÔ∏è, take a b‚Ä¶&lt;/p&gt;‚Äî Michael Herman (@MikeHerman) &lt;a href="https://twitter.com/MikeHerman/status/977271080489381888" data-datetime="2018-03-23T19:49:17+00:00"&gt;March 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Ridgeline plots are an alternative to violin plots. Make them easily with joypy. &lt;a href="https://t.co/1LLEs2aimr" title="https://t.co/1LLEs2aimr" target="_blank"&gt;https://t.co/1LLEs2aimr&lt;/a&gt; &lt;a href="https://twitter.com/search/#python‚Ä¶" target="_blank"&gt;#python‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/z6vsDfc633" title="https://t.co/z6vsDfc633" target="_blank"&gt;https://t.co/z6vsDfc633&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/975708743060152320" data-datetime="2018-03-19T12:21:06+00:00"&gt;March 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="course"></category><category term="training"></category><category term="podcast"></category><category term="data visualisation"></category><category term="speech recognition"></category><category term="OpenMV"></category><category term="Windows"></category><category term="Selenium"></category><category term="Docker"></category><category term="platform_update"></category><category term="Flask"></category><category term="regex"></category><category term="make site"></category><category term="tests"></category><category term="joypy"></category><category term="pandas"></category></entry><entry><title>All You Need to Know to Start Using Fixtures in Your pytest Code</title><link href="https://pybit.es/pytest-fixtures.html" rel="alternate"></link><published>2018-03-15T13:00:00+01:00</published><updated>2018-03-15T13:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2018-03-15:/pytest-fixtures.html</id><summary type="html">&lt;p&gt;Setting up test cases for code that manage data can be challenging but it's an important skill to reliably test your code. You might have heard of the setup and teardown methods in &lt;code&gt;unittest&lt;/code&gt;. In &lt;code&gt;pytest&lt;/code&gt; you use &lt;em&gt;fixtures&lt;/em&gt; and as you will discover in this article they are actually not that hard to set up. Fixtures have been labelled &lt;em&gt;pytest's killer feature&lt;/em&gt; so let's explore them in this article using a practical example.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Setting up test cases for code that manage data can be challenging but it's an important skill to reliably test your code. You might have heard of the setup and teardown methods in &lt;code&gt;unittest&lt;/code&gt;. In &lt;code&gt;pytest&lt;/code&gt; you use &lt;em&gt;fixtures&lt;/em&gt; and as you will discover in this article they are actually not that hard to set up. Fixtures have been labelled &lt;em&gt;pytest's killer feature&lt;/em&gt; so let's explore them in this article using a practical example.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pytest fixtures ... are the reason why many people switch to and stay with pytest. ... one of the great reasons to use fixtures: to focus the test on what you‚Äôre actually testing, not on what you had to do to get ready for the test. - Brian Okken's &lt;a href="https://pybit.es/pytest-book.html"&gt;Python testing with pytest&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Why do you want fixtures?&lt;/h2&gt;
&lt;p&gt;If your tests need to work on data you typically need to set them up. This is often a process that has to be repeated and independent for each test. This often leads to duplicate code which is "number one in the stink parade" (&lt;a href="https://www.safaribooksonline.com/library/view/building-maintainable-software/9781491955987/ch04.html"&gt;Kent Beck and Martin Fowler&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;@pytest.fixture&lt;/code&gt; decorator provides an easy yet powerful way to setup and teardown resources. You can then pass these defined fixture objects into your test functions as input arguments.&lt;/p&gt;
&lt;p&gt;You want each test to be independent, something that you can enforce by &lt;a href="https://twitter.com/tarek_ziade/status/973848758227173376"&gt;running your tests in random order&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fixtures are also referred to as dependency injections which you can read more about &lt;a href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;here&lt;/a&gt;. Let's look at some actual code next.&lt;/p&gt;
&lt;h2&gt;An example - working with databases&lt;/h2&gt;
&lt;p&gt;This is a common scenario. In my guest article &lt;a href="https://realpython.com/blog/python/building-a-simple-web-app-with-bottle-sqlalchemy-twitter-api/"&gt;Building a Simple Web App With Bottle, SQLAlchemy, and the Twitter API&lt;/a&gt; I used a small DB app and pytest for testing. I defined a fixture to make a fresh DB with some test tweets for every test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@pytest.fixture()
def db_setup(request):

    tweets = list(_gen_tweets())
    import_tweets(tweets)
    import_hashtags()

    def fin():
        truncate_tables()

    request.addfinalizer(fin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A couple of things to notice here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You define a fixture with a function wrapping it into the &lt;code&gt;@pytest.fixture()&lt;/code&gt; decorator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You probably want some static data to work with, here &lt;code&gt;_gen_tweets&lt;/code&gt; loaded in a &lt;em&gt;tweets.json&lt;/em&gt; file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To define a teardown use the &lt;code&gt;def fin(): ...&lt;/code&gt; + &lt;code&gt;request.addfinalizer(fin)&lt;/code&gt; construct to do the required cleanup after each test. You can also use &lt;code&gt;yield&lt;/code&gt; (see &lt;a href="https://docs.pytest.org/en/latest/fixture.html#fixture-finalization-executing-teardown-code"&gt;pytest docs&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then to use this fixture on the test methods we can just pass it in as function argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_get_tips(db_setup):
    ...


def test_add_tips(db_setup):
    ...


def test_get_hashtags(db_setup):
    ...


def test_add_hashtags(db_setup):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can access this code &lt;a href="https://github.com/pybites/pytip/blob/master/tests/test_tips.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Second example - a groceries cart&lt;/h2&gt;
&lt;p&gt;I prepared a second example for this article. Here is a &lt;code&gt;Groceries&lt;/code&gt; class (final code examples are &lt;a href="https://github.com/pybites/blog_code/tree/master/pytest/fixtures"&gt;here&lt;/a&gt;). It lets you manage a list of items. Each &lt;code&gt;Item&lt;/code&gt; is a &lt;code&gt;namedtuple&lt;/code&gt; of product (name), price and a craving &lt;code&gt;bool&lt;/code&gt;. The &lt;code&gt;DuplicateProduct&lt;/code&gt; and &lt;code&gt;MaxCravingsReached&lt;/code&gt; exceptions are used to control the data added and the amount of sugary foods I try to buy üòÇ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="n"&gt;MAX_CRAVINGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;product price craving&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DuplicateProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MaxCravingsReached&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This cart can be instantiated with a list of namedtuple&lt;/span&gt;
&lt;span class="sd"&gt;        items, if not provided use an empty list&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Print a simple table of cart items with total at the end&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{item.product}&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; (craving)&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{product:&amp;lt;30} | {item.price:&amp;gt;3}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;Total&amp;quot;:&amp;lt;30} | {self.due:&amp;gt;3}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Add a new item to cart, raise exceptions if item already in&lt;/span&gt;
&lt;span class="sd"&gt;        cart, or when we exceed MAX_CRAVINGS&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;DuplicateProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{new_item.product} already in items&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;craving&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_cravings_reached&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;MaxCravingsReached&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{MAX_CRAVINGS} allowed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Delete item matching &amp;#39;product&amp;#39;, raises IndexError&lt;/span&gt;
&lt;span class="sd"&gt;        if no item matches&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{product} not in cart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Case insensitive &amp;#39;contains&amp;#39; search, this is a&lt;/span&gt;
&lt;span class="sd"&gt;        generator returning matching Item namedtuples&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;due&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Calculate total due value of cart&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;num_cravings_reached&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Checks if I have too many cravings in my cart &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;MAX_CRAVINGS&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The len of cart&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Making the class iterable (cart = Groceries() -&amp;gt; cart[1] etc)&lt;/span&gt;
&lt;span class="sd"&gt;        without this dunder I would get &amp;#39;TypeError: &amp;#39;Cart&amp;#39; object does&lt;/span&gt;
&lt;span class="sd"&gt;        not support indexing&amp;#39; when trying to index it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some non-pytest related things to notice here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It supports &lt;em&gt;show&lt;/em&gt;/&lt;em&gt;add&lt;/em&gt;/&lt;em&gt;delete&lt;/em&gt;, I left the &lt;em&gt;update&lt;/em&gt; method out for now. I did leave the &lt;em&gt;search&lt;/em&gt; method in though (to show &lt;code&gt;@pytest.mark.parametrize&lt;/code&gt; later)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The convenient use of &lt;a href="https://pybit.es/property-decorator.html"&gt;properties&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using __len__ and __getitem__ to make the class &lt;em&gt;iterable&lt;/em&gt; (we discussed &lt;em&gt;dunder methods&lt;/em&gt; in depth in &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;this guest article&lt;/a&gt;). Thanks to this Groceries now supports &lt;em&gt;indexing&lt;/em&gt; for example (&lt;em&gt;slicing&lt;/em&gt; would work too). So when I later instantiate a &lt;code&gt;cart&lt;/code&gt; object from it, I can do &lt;code&gt;cart[0].product&lt;/code&gt; instead of &lt;code&gt;cart._items[0].product&lt;/code&gt;, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Initial tests for Groceries&lt;/h2&gt;
&lt;p&gt;And here is the initial set of tests I wrote for this class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;groceries&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DuplicateProduct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;MaxCravingsReached&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;celery apples water coffee chicken pizza&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;cravings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cravings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_initial_empty_cart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;due&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_initial_filled_cart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# thanks to __getitem__ can index the cart&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;celery&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pizza&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;due&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_cravings_reached&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;oranges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oranges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;due&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_cravings_reached&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item_duplicate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DuplicateProduct&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item_max_cravings&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;chocolate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chocolate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chocolate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_cravings_reached&lt;/span&gt;

    &lt;span class="n"&gt;croissants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;croissants&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MaxCravingsReached&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;croissants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# wait till next week!&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_delete_item&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# not in collection&lt;/span&gt;
    &lt;span class="n"&gt;croissant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;croissant&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;croissant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# in collection&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="n"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# new product at this index&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;water&amp;#39;&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_input,expected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Apples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;le&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_show_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capfd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_setup_items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;capfd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readouterr&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^celery.*1$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^pizza \(craving\).*4$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^Total.*22$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Things to notice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Right off the bat you see that annoying setup repetition in each test: &lt;code&gt;cart = Groceries&lt;/code&gt;! We will tackle this shortly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here are some other nice pytest features I am using a lot lately:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To test an exception (&lt;code&gt;DuplicateProduct&lt;/code&gt; and &lt;code&gt;MaxCravingsReached&lt;/code&gt; here) you can use this construct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with pytest.raises(Exception):
    run code that triggers the Exception
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@pytest.mark.parametrize&lt;/code&gt; to run a test with a different set of &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;expected&lt;/em&gt; values. This addresses the same need to keep your code slim avoiding duplication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to consume the &lt;em&gt;stdout&lt;/em&gt; of your program you can pass in the &lt;em&gt;capfd&lt;/em&gt; input parameter to your test function and accessing its &lt;code&gt;readouterr&lt;/code&gt; method. I use it in &lt;code&gt;test_show_ output&lt;/code&gt; to test the groceries report output. Actually as I was writing this article I discovered that &lt;code&gt;capfd&lt;/code&gt; is actually a &lt;em&gt;fixture&lt;/em&gt; itself, you can see this when you run &lt;code&gt;pytest --fixtures&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
...
capfd
Enable capturing of writes to file descriptors 1 and 2 and make
captured output available via ``capfd.readouterr()`` method calls
which return a ``(out, err)`` tuple.  ``out`` and ``err`` will be ``text``
objects.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Coverage&lt;/h2&gt;
&lt;p&gt;I am making a habit of using &lt;a href="https://pypi.python.org/pypi/pytest-cov"&gt;pytest-cov&lt;/a&gt; to see my test coverage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(pytest) [bbelderb@macbook fixtures (master)]$ pytest --cov-report term-missing --cov=&amp;#39;.&amp;#39;
============================================= test session starts ==============================================
platform darwin -- Python 3.6.1, pytest-3.4.2, py-1.5.2, pluggy-0.6.0
rootdir: /Users/bbelderb/code/pybites_code/pytest/fixtures, inifile:
plugins: cov-2.5.1
collected 14 items

test_groceries.py ..............                                                                         [100%]

---------- coverage: platform darwin, python 3.6.1-final-0 -----------
Name                Stmts   Miss  Cover   Missing
-------------------------------------------------
groceries.py           42      0   100%
test_groceries.py      71      0   100%
-------------------------------------------------
TOTAL                 113      0   100%


========================================== 14 passed in 0.34 seconds ===========================================
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As I run this over and over again I added this alias to my &lt;code&gt;.vimrc&lt;/code&gt; so I can run this from my test file pressing &lt;code&gt;,t&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap ,t :w&amp;lt;CR&amp;gt;:!pytest -s --cov-report term-missing --cov=&amp;#39;.&amp;#39;&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(if you don't want to see stdout from your tests drop the &lt;em&gt;-s&lt;/em&gt;)&lt;/p&gt;
&lt;h2&gt;Let's refactor this using a fixture&lt;/h2&gt;
&lt;p&gt;As we saw the setup code of the Groceries gets repeated over and over again. Let's wrap it in a fixture:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@pytest.fixture
def cart():
    &amp;quot;&amp;quot;&amp;quot;Setup code to create a groceries cart object with 6 items in it&amp;quot;&amp;quot;&amp;quot;
    products = &amp;#39;celery apples water coffee chicken pizza&amp;#39;.split()
    prices = [1, 4, 2, 5, 6, 4]
    cravings = False, False, False, False, False, True

    items = []
    for item in zip(products, prices, cravings):
        items.append(Item(*item))

    return Groceries(items)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To use it I need to add it as input argument to each test function that uses it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep ^def test_groceries.py
def cart&lt;span class="o"&gt;()&lt;/span&gt;:
def test_initial_empty_cart&lt;span class="o"&gt;()&lt;/span&gt;:
def test_initial_filled_cart&lt;span class="o"&gt;(&lt;/span&gt;cart&lt;span class="o"&gt;)&lt;/span&gt;:
def test_add_item&lt;span class="o"&gt;(&lt;/span&gt;cart&lt;span class="o"&gt;)&lt;/span&gt;:
def test_add_item_duplicate&lt;span class="o"&gt;(&lt;/span&gt;cart&lt;span class="o"&gt;)&lt;/span&gt;:
def test_add_item_max_cravings&lt;span class="o"&gt;(&lt;/span&gt;cart&lt;span class="o"&gt;)&lt;/span&gt;:
def test_delete_item&lt;span class="o"&gt;(&lt;/span&gt;cart&lt;span class="o"&gt;)&lt;/span&gt;:
def test_search_item&lt;span class="o"&gt;(&lt;/span&gt;cart, test_input, expected&lt;span class="o"&gt;)&lt;/span&gt;:
def test_show_items&lt;span class="o"&gt;(&lt;/span&gt;cart, capfd&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the first test I left the &lt;code&gt;Groceries&lt;/code&gt; instantiation in because I wanted to create it with an empty &lt;code&gt;items&lt;/code&gt; list (you can probably parametrize the fixture but this will do for now).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the tests that use other arguments like &lt;code&gt;@pytest.mark.parametrize&lt;/code&gt; and &lt;code&gt;capfd&lt;/code&gt; (in &lt;code&gt;test_search_item&lt;/code&gt; and &lt;code&gt;test_show_items&lt;/code&gt; respectively), the fixture argument comes first!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And now I can ditch these lines of code which were duplicated multiple times:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;items = list(_setup_items())
cart = Groceries(items=items)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's run the tests again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(pytest) [bbelderb@macbook fixtures (master)]$ pytest --cov-report term-missing --cov=&amp;#39;.&amp;#39;
============================================= test session starts ==============================================
platform darwin -- Python 3.6.1, pytest-3.4.2, py-1.5.2, pluggy-0.6.0
Using --random-order-bucket=module
Using --random-order-seed=270491

rootdir: /Users/bbelderb/code/pybites_code/pytest/fixtures, inifile:
plugins: random-order-0.5.4, cov-2.5.1
collected 14 items

test_groceries.py ..............                                                                         [100%]

---------- coverage: platform darwin, python 3.6.1-final-0 -----------
Name                Stmts   Miss  Cover   Missing
-------------------------------------------------
groceries.py           42      0   100%
test_groceries.py      59      0   100%
-------------------------------------------------
TOTAL                 101      0   100%


========================================== 14 passed in 0.14 seconds ===========================================
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice: 12 lines of test code less!&lt;/p&gt;
&lt;p&gt;I only covered the basics so far. However this should get you started using fixtures in your tests. Next I will highlight 2 more features of fixtures.&lt;/p&gt;
&lt;h2&gt;Define a scope of a fixture&lt;/h2&gt;
&lt;p&gt;How to share your fixture across tests in a class, module or session?&lt;/p&gt;
&lt;p&gt;In our example the setup is super fast so it is not really needed. But what if your setup code deals with a lot of data or has a costly network connection dependency? To simulate this let's add a &lt;code&gt;sleep(1)&lt;/code&gt; to our &lt;code&gt;cart&lt;/code&gt; fixture to see what happens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Setup code to create a groceries cart object with 6 items in it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;13.15&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oops ... it slept upon each test function! That is because a fixture's scope is set to &lt;em&gt;function&lt;/em&gt; by default. To run the fixture once per module add &lt;code&gt;scope="module"&lt;/code&gt; to the &lt;code&gt;@pytest.fixture&lt;/code&gt; decorator (or &lt;code&gt;scope="session"&lt;/code&gt; as we will see later on). Let's compare:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@pytest.fixture(scope=&amp;quot;module&amp;quot;)
def cart():
    &amp;quot;&amp;quot;&amp;quot;Setup code to create a groceries cart object with 6 items in it&amp;quot;&amp;quot;&amp;quot;
    sleep(1)
    ...

$ pytest
...
6 failed, 8 passed in 1.21 seconds
$ pytest
...
3 failed, 11 passed in 1.17 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happened?! The timing is right, there is a sleep of 1 second, but I introduced random test failures! The tests became tainted because it changed the same mutable &lt;code&gt;cart&lt;/code&gt; object in various tests, not resetting it back to its initial state (like it did when scope was &lt;em&gt;function&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;So use this with caution. In this case we should just use the default &lt;em&gt;function&lt;/em&gt; scope because the setup is very fast (&lt;code&gt;14 passed in 0.14 seconds&lt;/code&gt; remember?). But to further demo the &lt;em&gt;scope&lt;/em&gt; feature let's make this example work.&lt;/p&gt;
&lt;p&gt;In this case I just make a copy of the &lt;code&gt;cart&lt;/code&gt; object where I am going to  manipulate it. I am using &lt;code&gt;deepcopy&lt;/code&gt; because this is a nested data structure (learn more why you want this &lt;a href="https://pybit.es/mutability.html"&gt;here&lt;/a&gt;). It was only in 3 places:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;B1&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt; &lt;span class="n"&gt;test_groceries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# not needed if scope &amp;gt; function (module/session)&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item_max_cravings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_delete_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it works again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest
...
&lt;span class="m"&gt;14&lt;/span&gt; passed in &lt;span class="m"&gt;1&lt;/span&gt;.10 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Re-use fixtures in various test files&lt;/h2&gt;
&lt;p&gt;The second and last feature I want to highlight. You can add fixtures to a predefined file called &lt;code&gt;conftest.py&lt;/code&gt;. Fixtures in this file will be automatically discovered upon running pytest, no import needed.&lt;/p&gt;
&lt;p&gt;Let's do an experiment: let's move the tests that make changes to the &lt;code&gt;cart&lt;/code&gt; object into &lt;code&gt;test_edit_cart.py&lt;/code&gt; and the ones that don't into &lt;code&gt;test_view_cart.py&lt;/code&gt;. We will need the fixture for both test files so I am moving it into &lt;code&gt;conftest.py&lt;/code&gt;. The code looks more modular now:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/blob/master/pytest/fixtures/conftest.py"&gt;conftest.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;groceries&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Setup code to create a groceries cart object with 6 items in it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleeping a bit at session level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# for scope=module/session demo purposes&lt;/span&gt;
    &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;celery apples water coffee chicken pizza&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;cravings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cravings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/blob/master/pytest/fixtures/test_view_cart.py"&gt;test_view_cart.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;groceries&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_initial_empty_cart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Note no fixture here to test an empty cart creation&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Groceries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;due&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_initial_filled_cart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# thanks to __getitem__ can index the cart&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;celery&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pizza&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;due&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_cravings_reached&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_input,expected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;water&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Apples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;le&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_search_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_show_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capfd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;capfd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readouterr&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^celery.*1$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^pizza \(craving\).*4$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^Total.*22$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/blob/master/pytest/fixtures/test_edit_cart.py"&gt;test_edit_cart.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;groceries&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DuplicateProduct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MaxCravingsReached&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# not needed if scope=function&lt;/span&gt;

    &lt;span class="n"&gt;oranges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oranges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;due&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_cravings_reached&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item_max_cravings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chocolate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chocolate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chocolate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_cravings_reached&lt;/span&gt;

    &lt;span class="n"&gt;croissants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;croissants&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MaxCravingsReached&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;croissants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# wait till next week!&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_item_duplicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;craving&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DuplicateProduct&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_delete_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# not in collection&lt;/span&gt;
    &lt;span class="n"&gt;croissant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;croissant&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;croissant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# in collection&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="n"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# new product at this index&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;water&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And let's run the tests again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;pytest&lt;/span&gt;
&lt;span class="o"&gt;================================================&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;================================================&lt;/span&gt;
platform darwin -- Python &lt;span class="m"&gt;3&lt;/span&gt;.6.1, pytest-3.4.2, py-1.5.2, pluggy-0.6.0
Using --random-order-bucket&lt;span class="o"&gt;=&lt;/span&gt;module
Using --random-order-seed&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;885306&lt;/span&gt;

rootdir: /Users/bbelderb/code/pybites_code/pytest/fixtures, inifile:
plugins: random-order-0.5.4, cov-2.5.1
collected &lt;span class="m"&gt;14&lt;/span&gt; items

test_edit_cart.py ...                                                                                         &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;
test_view_cart.py ...........                                                                                 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=============================================&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; passed in &lt;span class="m"&gt;2&lt;/span&gt;.12 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=============================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again note that I did not have to import &lt;code&gt;conftest.py&lt;/code&gt;, nice!&lt;/p&gt;
&lt;p&gt;But wait, the &lt;code&gt;sleep&lt;/code&gt; ran twice this time, because the scope was still defined as &lt;em&gt;module&lt;/em&gt; (meaning &lt;em&gt;file&lt;/em&gt;). Let's change it to &lt;em&gt;session&lt;/em&gt; and check again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@pytest.fixture(scope=&amp;quot;session&amp;quot;)
def cart():
    &amp;quot;&amp;quot;&amp;quot;Setup code to create a groceries cart object with 6 items in it&amp;quot;&amp;quot;&amp;quot;
    print(&amp;#39;sleeping a bit at session level&amp;#39;)
    sleep(1)  # for scope=module/session demo purposes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running the tests now gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(pytest) [bbelderb@macbook fixtures (master)]$ pytest
================================================ test session starts ================================================
platform darwin -- Python 3.6.1, pytest-3.4.2, py-1.5.2, pluggy-0.6.0
Using --random-order-bucket=module
Using --random-order-seed=578283

rootdir: /Users/bbelderb/code/pybites_code/pytest/fixtures, inifile:
plugins: random-order-0.5.4, cov-2.5.1
collected 14 items

test_view_cart.py ...........                                                                                 [ 78%]
test_edit_cart.py ...                                                                                         [100%]

============================================= 14 passed in 1.13 seconds =============================================
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome!&lt;/p&gt;
&lt;h2&gt;List all fixtures&lt;/h2&gt;
&lt;p&gt;Lastly I recommend adding docstrings to your fixtures so that they show up when somebody probes for them with the &lt;code&gt;--fixtures&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest --fixtures test_groceries.py
...
pytest&lt;span class="s1"&gt;&amp;#39;s fixtures&lt;/span&gt;
&lt;span class="s1"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;pytest_cov&amp;#39;&lt;/span&gt;s fixtures
...
--------------------------------------- fixtures defined from test_groceries ----------------------------------------
cart
    Setup code to create a groceries cart object with &lt;span class="m"&gt;6&lt;/span&gt; items in it
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;This should give you all you need to start using fixtures in your pytest code. You will save time, be more content and most importantly produce more robust test code!&lt;/p&gt;
&lt;p&gt;There is more to fixtures though, checkout the well written &lt;a href="https://docs.pytest.org/en/latest/fixture.html"&gt;pytest docs&lt;/a&gt;. Also &lt;a href="https://pybit.es/pytest-book.html"&gt;Brian Okken's book&lt;/a&gt; covers them extensively.&lt;/p&gt;
&lt;p&gt;Let us know in the comments below if you came up with interesting use cases or you hit a wall?&lt;/p&gt;
&lt;p&gt;You will see fixtures increasingly used in our &lt;a href="http://codechalleng.es"&gt;Bites of Py&lt;/a&gt; test code and I am happy we covered it here now, because it is one of the things that makes pytest great!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="pytest"></category><category term="fixtures"></category><category term="testing"></category><category term="refactoring"></category><category term="pytest-cov"></category><category term="coverage"></category></entry><entry><title>Twitter Digest 2018 Week 11</title><link href="https://pybit.es/twitter_digest_201811.html" rel="alternate"></link><published>2018-03-11T20:50:00+01:00</published><updated>2018-03-11T20:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-03-11:/twitter_digest_201811.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What happens when a student chooses to combine a science project with computer science? Rather than watching a vide‚Ä¶ &lt;a href="https://t.co/yXcYXqBDd8" title="https://t.co/yXcYXqBDd8" target="_blank"&gt;https://t.co/yXcYXqBDd8&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/970743975190528000" data-datetime="2018-03-05T19:32:53+00:00"&gt;March 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Spyder: Scientific Python IDE &lt;a href="https://t.co/gZpZ8uQS8B" title="https://t.co/gZpZ8uQS8B" target="_blank"&gt;https://t.co/gZpZ8uQS8B&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/971421517178396672" data-datetime="2018-03-07T16:25:12+00:00"&gt;March 07, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@twilio:" target="_blank"&gt;@twilio:&lt;/a&gt; How &lt;a href="https://twitter.com/@dgouldin" target="_blank"&gt;@dgouldin&lt;/a&gt; potty-trained his kid using Twilio and an AWS IoT button &lt;a href="https://t.co/Qu76ZLkL1F" title="https://t.co/Qu76ZLkL1F" target="_blank"&gt;https://t.co/Qu76ZLkL1F&lt;/a&gt; &lt;a href="https://t.co/NPVVBZaEQq" title="https://t.co/NPVVBZaEQq" target="_blank"&gt;https://t.co/NPVVBZaEQq&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/971544636534771717" data-datetime="2018-03-08T00:34:26+00:00"&gt;March 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Have you always wanted to learn Python and how it can be used? You can contribute to hundreds of open source projec‚Ä¶ &lt;a href="https://t.co/nXib8DyWB0" title="https://t.co/nXib8DyWB0" target="_blank"&gt;https://t.co/nXib8DyWB0&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/971672082982625281" data-datetime="2018-03-08T09:00:52+00:00"&gt;March 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The highlight of the new mypy 0.570 release is definitely attrs support! &lt;a href="https://t.co/wgBVKs2ain" title="https://t.co/wgBVKs2ain" target="_blank"&gt;https://t.co/wgBVKs2ain&lt;/a&gt;&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/971426033013465090" data-datetime="2018-03-07T16:43:09+00:00"&gt;March 07, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@randal_olson:" target="_blank"&gt;@randal_olson:&lt;/a&gt; Heat map of 1,058,383 &lt;a href="https://twitter.com/search/#basketball" target="_blank"&gt;#basketball&lt;/a&gt; shots from &lt;a href="https://twitter.com/search/#NCAA" target="_blank"&gt;#NCAA&lt;/a&gt; games. &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; &lt;a href="https://t.co/5JKErIHtX7" title="https://t.co/5JKErIHtX7" target="_blank"&gt;https://t.co/5JKErIHtX7&lt;/a&gt; &lt;a href="https://t.co/8xvU0SQsYY" title="https://t.co/8xvU0SQsYY" target="_blank"&gt;https://t.co/8xvU0SQsYY&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/972649741874950147" data-datetime="2018-03-11T01:45:44+00:00"&gt;March 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tutorial on how to put text on an image using Python &lt;a href="https://t.co/ZUPBWOwVpX" title="https://t.co/ZUPBWOwVpX" target="_blank"&gt;https://t.co/ZUPBWOwVpX&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/972181637755699200" data-datetime="2018-03-09T18:45:39+00:00"&gt;March 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tips and tricks for shipping a PyGame app on the Mac &lt;a href="https://t.co/jNVumC9Uo4" title="https://t.co/jNVumC9Uo4" target="_blank"&gt;https://t.co/jNVumC9Uo4&lt;/a&gt; by &lt;a href="https://twitter.com/@glyph" target="_blank"&gt;@glyph&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/971907205049012224" data-datetime="2018-03-09T00:35:09+00:00"&gt;March 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Are you excited for &lt;a href="https://twitter.com/search/#pycon2018" target="_blank"&gt;#pycon2018&lt;/a&gt; yet? Yes? Crank it up a notch! Our talk schedule is now live at‚Ä¶ &lt;a href="https://t.co/w8EJKZ3Gxc" title="https://t.co/w8EJKZ3Gxc" target="_blank"&gt;https://t.co/w8EJKZ3Gxc&lt;/a&gt;&lt;/p&gt;‚Äî PyCon (@pycon) &lt;a href="https://twitter.com/pycon/status/971054778527703040" data-datetime="2018-03-06T16:07:55+00:00"&gt;March 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A little math fun with &lt;a href="https://twitter.com/search/#python:" target="_blank"&gt;#python:&lt;/a&gt; # Pythagorean triples for x, y, z in itertools.combinations(range(500), 3): if‚Ä¶ &lt;a href="https://t.co/J8t2vFOxkk" title="https://t.co/J8t2vFOxkk" target="_blank"&gt;https://t.co/J8t2vFOxkk&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/972175192872042497" data-datetime="2018-03-09T18:20:02+00:00"&gt;March 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I just wrote another article! üìù It's on multiple assignment (aka tuple unpacking) and how you should be using it mo‚Ä¶ &lt;a href="https://t.co/gPo2ZtgMTw" title="https://t.co/gPo2ZtgMTw" target="_blank"&gt;https://t.co/gPo2ZtgMTw&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/971545746334932992" data-datetime="2018-03-08T00:38:51+00:00"&gt;March 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here‚Äôs how I configure my machines, with Homebrew, mostly (including a full package list of what I have installed): &lt;a href="https://t.co/ExVVTh0C2A" title="https://t.co/ExVVTh0C2A" target="_blank"&gt;https://t.co/ExVVTh0C2A&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz üêç (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/971377840255008769" data-datetime="2018-03-07T13:31:39+00:00"&gt;March 07, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building A Jupyter Notebook To Analyze Cryptocurrency Portfolios &lt;a href="https://t.co/IuUb3fu7eb" title="https://t.co/IuUb3fu7eb" target="_blank"&gt;https://t.co/IuUb3fu7eb&lt;/a&gt; &lt;a href="https://t.co/DXmG3akPH6" title="https://t.co/DXmG3akPH6" target="_blank"&gt;https://t.co/DXmG3akPH6&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/972538119227625472" data-datetime="2018-03-10T18:22:11+00:00"&gt;March 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python 3 cheatsheet &lt;a href="https://t.co/ZIycZaT8O4" title="https://t.co/ZIycZaT8O4" target="_blank"&gt;https://t.co/ZIycZaT8O4&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/967732149968236544" data-datetime="2018-02-25T12:04:58+00:00"&gt;February 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@vboykis:" target="_blank"&gt;@vboykis:&lt;/a&gt; Somewhere in the multiverse, this HN exists. &lt;a href="https://t.co/bdk0sZeucF" title="https://t.co/bdk0sZeucF" target="_blank"&gt;https://t.co/bdk0sZeucF&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/971544662862254080" data-datetime="2018-03-08T00:34:32+00:00"&gt;March 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Spyder"></category><category term="IoT"></category><category term="open source"></category><category term="MyPy"></category><category term="data visualisation"></category><category term="images"></category><category term="PyGame"></category><category term="Pycon"></category><category term="math"></category><category term="tuples"></category><category term="Jupyter"></category><category term="cryptocurrency"></category><category term="cheatsheet"></category></entry><entry><title>Twitter Digest 2018 Week 10</title><link href="https://pybit.es/twitter_digest_201810.html" rel="alternate"></link><published>2018-03-04T21:07:00+01:00</published><updated>2018-03-04T21:07:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-03-04:/twitter_digest_201810.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Absolutely stoked to announce that our PyBites in-browser &lt;a href="https://twitter.com/search/#code" target="_blank"&gt;#code&lt;/a&gt; challenge platform is now 100% live! Subscribe to B‚Ä¶ &lt;a href="https://t.co/wzaz38tAnv" title="https://t.co/wzaz38tAnv" target="_blank"&gt;https://t.co/wzaz38tAnv&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/969179303190523904" data-datetime="2018-03-01T11:55:27+00:00"&gt;March 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kvnmclaughlin:" target="_blank"&gt;@kvnmclaughlin:&lt;/a&gt; How to pass data between Google Sheets and Jupyter Notebooks. &lt;a href="https://t.co/8IoPXlrqi6" title="https://t.co/8IoPXlrqi6" target="_blank"&gt;https://t.co/8IoPXlrqi6&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/970088473112690688" data-datetime="2018-03-04T00:08:10+00:00"&gt;March 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; üêçüì∞ Practical Introduction to Web Scraping in Python ‚Üí Learn how to work with requests and BeautifulSoup in this step-by-ste‚Ä¶&lt;/p&gt;‚Äî Rene Sanchez (@cod3ghoul) &lt;a href="https://twitter.com/cod3ghoul/status/969834695151276032" data-datetime="2018-03-03T07:19:44+00:00"&gt;March 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Part 13 of the Flask Mega-Tutorial is now available on my blog. In this one I cover how to make an app render itsel‚Ä¶ &lt;a href="https://t.co/cwwesphQvm" title="https://t.co/cwwesphQvm" target="_blank"&gt;https://t.co/cwwesphQvm&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/968550098136309760" data-datetime="2018-02-27T18:15:12+00:00"&gt;February 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@raymondh:" target="_blank"&gt;@raymondh:&lt;/a&gt; When teaching testing, it is important to show examples of code with 100% test coverage that is nevertheless still wrong. Go‚Ä¶&lt;/p&gt;‚Äî Diane Chen (@PurpleDiane88) &lt;a href="https://twitter.com/PurpleDiane88/status/968138572078264321" data-datetime="2018-02-26T14:59:57+00:00"&gt;February 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Plotting With Matplotlib (Guide) ‚Äì Real Python &lt;a href="https://t.co/tTFemHuJQN" title="https://t.co/tTFemHuJQN" target="_blank"&gt;https://t.co/tTFemHuJQN&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/969451641748557824" data-datetime="2018-03-02T05:57:37+00:00"&gt;March 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Fast, more accurate face detection with OpenCV's "hidden" deep learning face detector: &lt;a href="https://t.co/QWRKoUq9Tv‚Ä¶" title="https://t.co/QWRKoUq9Tv‚Ä¶" target="_blank"&gt;https://t.co/QWRKoUq9Tv‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/pi3fAyFVpK" title="https://t.co/pi3fAyFVpK" target="_blank"&gt;https://t.co/pi3fAyFVpK&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/968139025549807618" data-datetime="2018-02-26T15:01:45+00:00"&gt;February 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Our approach uses deep learning to draw connections between changes in the human anatomy and disease" See how the‚Ä¶ &lt;a href="https://t.co/3BaaziddkV" title="https://t.co/3BaaziddkV" target="_blank"&gt;https://t.co/3BaaziddkV&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/969663636582096896" data-datetime="2018-03-02T20:00:01+00:00"&gt;March 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I hadn‚Äôt heard of the humanize library before Alex Samuel introduced it but usefulness for UI is immediately obviou‚Ä¶ &lt;a href="https://t.co/4zfeRmEmmV" title="https://t.co/4zfeRmEmmV" target="_blank"&gt;https://t.co/4zfeRmEmmV&lt;/a&gt;&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/969752039864532995" data-datetime="2018-03-03T01:51:18+00:00"&gt;March 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Testing can show the presence of errors, but not their absence." - E. W. Dijkstra&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/969929635751440385" data-datetime="2018-03-03T13:37:00+00:00"&gt;March 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;[Ctrl-d] # When programming in &lt;a href="https://twitter.com/search/#vim," target="_blank"&gt;#vim,&lt;/a&gt; you can use Ctrl-d to "De-tab" (Mnemonic) a line and move the cursor back one tab width. &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Command Line Magic (@climagic) &lt;a href="https://twitter.com/climagic/status/969593579659292672" data-datetime="2018-03-02T15:21:38+00:00"&gt;March 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Inside a character class, ^ means 'not'. For example, [^abc] matches any character except a, b, or c.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/968516506157047813" data-datetime="2018-02-27T16:01:43+00:00"&gt;February 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My bad, I was in the zone &lt;a href="https://t.co/G0aaAVCqCS" title="https://t.co/G0aaAVCqCS" target="_blank"&gt;https://t.co/G0aaAVCqCS&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/969372790028615681" data-datetime="2018-03-02T00:44:17+00:00"&gt;March 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Have you ever wondered how Python has successfully evolved over the past 25 years to become one of the most popular program‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/969706629733101569" data-datetime="2018-03-02T22:50:51+00:00"&gt;March 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Ha!!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;so, today i received this email from a health/wellbeing blog because of my blog post about django + celery‚Ä¶ &lt;a href="https://t.co/EUd6EUbjtS" title="https://t.co/EUd6EUbjtS" target="_blank"&gt;https://t.co/EUd6EUbjtS&lt;/a&gt;&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/970057620483690497" data-datetime="2018-03-03T22:05:34+00:00"&gt;March 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="code challenges"></category><category term="Flask"></category><category term="reds"></category><category term="Jupyter"></category><category term="web scraping"></category><category term="Matplotlib"></category><category term="OpenCV"></category><category term="TensorFlow"></category><category term="datetime"></category><category term="testing"></category><category term="celery"></category><category term="vim"></category><category term="regex"></category><category term="GitHub"></category></entry><entry><title>Twitter Digest 2018 Week 09</title><link href="https://pybit.es/twitter_digest_201809.html" rel="alternate"></link><published>2018-02-25T15:29:00+01:00</published><updated>2018-02-25T15:29:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-02-25:/twitter_digest_201809.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I put together a list of tools that I thought would have been useful when I first started to code (not that it was‚Ä¶ &lt;a href="https://t.co/O9Zhlqkt6R" title="https://t.co/O9Zhlqkt6R" target="_blank"&gt;https://t.co/O9Zhlqkt6R&lt;/a&gt;&lt;/p&gt;‚Äî Mario Hoyos (@marioahoyos) &lt;a href="https://twitter.com/marioahoyos/status/964548378272124929" data-datetime="2018-02-16T17:13:48+00:00"&gt;February 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; üêçüì∞ Looking for an intro to OOP in Python + exercises? Check out this tutorial we just posted on Real Python: &lt;a href="https://t.co/J‚Ä¶" title="https://t.co/J‚Ä¶" target="_blank"&gt;https://t.co/J‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rene Sanchez (@cod3ghoul) &lt;a href="https://twitter.com/cod3ghoul/status/963623701345390592" data-datetime="2018-02-14T03:59:28+00:00"&gt;February 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Good cheat sheet on &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; functions &lt;a href="https://t.co/3LUxZMQ0Sx" title="https://t.co/3LUxZMQ0Sx" target="_blank"&gt;https://t.co/3LUxZMQ0Sx&lt;/a&gt;&lt;/p&gt;‚Äî Pavel Anni (@PavelAnni) &lt;a href="https://twitter.com/PavelAnni/status/966282169017651201" data-datetime="2018-02-21T12:03:16+00:00"&gt;February 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Twitter friends! I'm giving a tutorial at &lt;a href="https://twitter.com/@pycon" target="_blank"&gt;@pycon&lt;/a&gt; this year! I'm super duper excited about it and if you've been wan‚Ä¶ &lt;a href="https://t.co/SGF0mmrXik" title="https://t.co/SGF0mmrXik" target="_blank"&gt;https://t.co/SGF0mmrXik&lt;/a&gt;&lt;/p&gt;‚Äî Melanie Crutchfield (@HelloMelanieC) &lt;a href="https://twitter.com/HelloMelanieC/status/966688659633192962" data-datetime="2018-02-22T14:58:31+00:00"&gt;February 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@begahtan:" target="_blank"&gt;@begahtan:&lt;/a&gt; Just finished a new post on collecting your &lt;a href="https://twitter.com/search/#Fitbit" target="_blank"&gt;#Fitbit&lt;/a&gt; data with &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; Enjoy! &lt;a href="https://t.co/c4TjN89M4r" title="https://t.co/c4TjN89M4r" target="_blank"&gt;https://t.co/c4TjN89M4r&lt;/a&gt;&lt;/p&gt;‚Äî TestDriven.io (@testdrivenio) &lt;a href="https://twitter.com/testdrivenio/status/967500683904663553" data-datetime="2018-02-24T20:45:12+00:00"&gt;February 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You can name your slices: &amp;gt;&amp;gt;&amp;gt; record = "01234567890123456789I want this0123456789" &amp;gt;&amp;gt;&amp;gt; IWANT = slice(20,31) &amp;gt;&amp;gt;&amp;gt; r‚Ä¶ &lt;a href="https://t.co/i4HWi2r0Zc" title="https://t.co/i4HWi2r0Zc" target="_blank"&gt;https://t.co/i4HWi2r0Zc&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/966704808328646657" data-datetime="2018-02-22T16:02:41+00:00"&gt;February 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Building a Twitter art bot with Python, AWS, and socialist realism art" by &lt;a href="https://twitter.com/@vboykis" target="_blank"&gt;@vboykis&lt;/a&gt; &lt;a href="https://t.co/CpFWSqG18t" title="https://t.co/CpFWSqG18t" target="_blank"&gt;https://t.co/CpFWSqG18t&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/967055916335091712" data-datetime="2018-02-23T15:17:52+00:00"&gt;February 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just published part 12 of the redesigned Flask Mega-Tutorial on my blog. This time you are going to learn about wor‚Ä¶ &lt;a href="https://t.co/ZOPiejd5lC" title="https://t.co/ZOPiejd5lC" target="_blank"&gt;https://t.co/ZOPiejd5lC&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/966027095158616064" data-datetime="2018-02-20T19:09:42+00:00"&gt;February 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@testdrivenio:" target="_blank"&gt;@testdrivenio:&lt;/a&gt; Building A Concurrent Web Scraper With Python and Selenium &amp;gt;&amp;gt; &lt;a href="https://t.co/Su3d8CqCfk" title="https://t.co/Su3d8CqCfk" target="_blank"&gt;https://t.co/Su3d8CqCfk&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Selenium" target="_blank"&gt;#Selenium&lt;/a&gt; &lt;a href="https://t.co/mBaV‚Ä¶" title="https://t.co/mBaV‚Ä¶" target="_blank"&gt;https://t.co/mBaV‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/965655964748828672" data-datetime="2018-02-19T18:34:57+00:00"&gt;February 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A simple tutorial to train a neural network by reading data from a CSV üß†üì≤ Read more on &lt;a href="https://twitter.com/@lmoroney's" target="_blank"&gt;@lmoroney's&lt;/a&gt; website üëâ &lt;a href="https://t.co/UGxbSuK3ze" title="https://t.co/UGxbSuK3ze" target="_blank"&gt;https://t.co/UGxbSuK3ze&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/966749430803288064" data-datetime="2018-02-22T19:00:00+00:00"&gt;February 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Is real-time, deep learning-based object detection possible on the &lt;a href="https://twitter.com/@Raspberry_Pi?" target="_blank"&gt;@Raspberry_Pi?&lt;/a&gt; It turns out, we can get pretty c‚Ä¶ &lt;a href="https://t.co/ERJ81sNb9E" title="https://t.co/ERJ81sNb9E" target="_blank"&gt;https://t.co/ERJ81sNb9E&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/965603068917243904" data-datetime="2018-02-19T15:04:46+00:00"&gt;February 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mofongotron:" target="_blank"&gt;@mofongotron:&lt;/a&gt; As someone in this exact situation who is a bit unclear on what comes next, this piece on transitioning from academia into‚Ä¶&lt;/p&gt;‚Äî Jonathan Nolis (@skyetetra) &lt;a href="https://twitter.com/skyetetra/status/967112161792176128" data-datetime="2018-02-23T19:01:22+00:00"&gt;February 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Prototyping Interactive Dashboards with Jupyter Notebooks (PyVideo) by Camilo Cardona at PyData Barcelona 2017. Cov‚Ä¶ &lt;a href="https://t.co/RrpW2Ok1oD" title="https://t.co/RrpW2Ok1oD" target="_blank"&gt;https://t.co/RrpW2Ok1oD&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/966749941480685568" data-datetime="2018-02-22T19:02:02+00:00"&gt;February 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build a bikesharing app with Redis and... &lt;a href="https://t.co/rhW1Cp6j7p" title="https://t.co/rhW1Cp6j7p" target="_blank"&gt;https://t.co/rhW1Cp6j7p&lt;/a&gt; &lt;a href="https://twitter.com/search/#redis" target="_blank"&gt;#redis&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/967594484258168833" data-datetime="2018-02-25T02:57:56+00:00"&gt;February 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Theory is when you know something, but it doesn‚Äôt work. Practice is when something works, but you don‚Äôt know why.‚Ä¶ &lt;a href="https://t.co/KFgC8E2tLD" title="https://t.co/KFgC8E2tLD" target="_blank"&gt;https://t.co/KFgC8E2tLD&lt;/a&gt;&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/967044888285065216" data-datetime="2018-02-23T14:34:02+00:00"&gt;February 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="tools"></category><category term="OOP"></category><category term="functions"></category><category term="PyCon"></category><category term="Fitbit"></category><category term="slices"></category><category term="Twitter"></category><category term="bot"></category><category term="Flask"></category><category term="TensorFlow"></category><category term="CSV"></category><category term="Raspberry Pi"></category><category term="machine learning"></category><category term="deep learning"></category><category term="Selenium"></category><category term="Jupyter"></category><category term="redis"></category></entry><entry><title>Twitter Digest 2018 Week 08</title><link href="https://pybit.es/twitter_digest_201808.html" rel="alternate"></link><published>2018-02-18T20:52:00+01:00</published><updated>2018-02-18T20:52:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-02-18:/twitter_digest_201808.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Part 11 of the Flask Mega-Tutorial is up on my blog. On this one you'll learn how to work with a CSS framework to m‚Ä¶ &lt;a href="https://t.co/WklyNBUJDG" title="https://t.co/WklyNBUJDG" target="_blank"&gt;https://t.co/WklyNBUJDG&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/963437720054857728" data-datetime="2018-02-13T15:40:26+00:00"&gt;February 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúThe best thing about a boolean is even if you are wrong, you are only off by a bit.‚Äù - Anonymous&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/964856220183093249" data-datetime="2018-02-17T13:37:03+00:00"&gt;February 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;.* will match as much as it can, but then backtrack if the next atom can also be matched. Backtracking on some engines is slow.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/963805614697742336" data-datetime="2018-02-14T16:02:19+00:00"&gt;February 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New blog post: The New Way To Generate Secure Tokens in Python &lt;a href="https://t.co/2zlJqUL5QM" title="https://t.co/2zlJqUL5QM" target="_blank"&gt;https://t.co/2zlJqUL5QM&lt;/a&gt; &lt;a href="https://t.co/OYpmdqhlWj" title="https://t.co/OYpmdqhlWj" target="_blank"&gt;https://t.co/OYpmdqhlWj&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/964627180373164032" data-datetime="2018-02-16T22:26:56+00:00"&gt;February 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@AllenDowney:" target="_blank"&gt;@AllenDowney:&lt;/a&gt; Report: 80‚Äôs kids started programming at an earlier age than today‚Äôs millennials &lt;a href="https://t.co/9p8FBJYb0n" title="https://t.co/9p8FBJYb0n" target="_blank"&gt;https://t.co/9p8FBJYb0n&lt;/a&gt;&lt;/p&gt;‚Äî Luciano Ramalho @PyCaribbean üêç üá©üá¥ (@ramalhoorg) &lt;a href="https://twitter.com/ramalhoorg/status/965066954812870656" data-datetime="2018-02-18T03:34:26+00:00"&gt;February 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The one-stop guide to (easy) cross-platform Python freezing &lt;a href="https://t.co/owPtBjQtoa" title="https://t.co/owPtBjQtoa" target="_blank"&gt;https://t.co/owPtBjQtoa&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/964682626349936640" data-datetime="2018-02-17T02:07:15+00:00"&gt;February 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Stuck using Python 2 but looking forward to finally using Python 3? üôÅüôÇ Want to know how range in Python 3 has impro‚Ä¶ &lt;a href="https://t.co/TUXRtWGfa8" title="https://t.co/TUXRtWGfa8" target="_blank"&gt;https://t.co/TUXRtWGfa8&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/964177466217648128" data-datetime="2018-02-15T16:39:56+00:00"&gt;February 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pybokeh:" target="_blank"&gt;@pybokeh:&lt;/a&gt; Found this little gem of a Python/MATPLOTLIB package which tries to make labels not overlap plot elements &lt;a href="https://t.co/eaDxVyL‚Ä¶" title="https://t.co/eaDxVyL‚Ä¶" target="_blank"&gt;https://t.co/eaDxVyL‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/964211575107170309" data-datetime="2018-02-15T18:55:28+00:00"&gt;February 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Jupyter" target="_blank"&gt;#Jupyter&lt;/a&gt; notebook autocomplete and docs: Tab = autocomplete Shift-tab = arguments of the function/method 2 x shift‚Ä¶ &lt;a href="https://t.co/kWFNHbrixb" title="https://t.co/kWFNHbrixb" target="_blank"&gt;https://t.co/kWFNHbrixb&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/964046629128024065" data-datetime="2018-02-15T08:00:02+00:00"&gt;February 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python notification library for Windows &lt;a href="https://t.co/o9twr9YgBP" title="https://t.co/o9twr9YgBP" target="_blank"&gt;https://t.co/o9twr9YgBP&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/964726108259266561" data-datetime="2018-02-17T05:00:02+00:00"&gt;February 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;With the new &lt;a href="https://twitter.com/search/#twitter" target="_blank"&gt;#twitter&lt;/a&gt; search API I can convert any hashtag on any given day to an Excel file in 60 lines of &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/o3lCOO4nY6" title="https://t.co/o3lCOO4nY6" target="_blank"&gt;https://t.co/o3lCOO4nY6&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/963965330426028032" data-datetime="2018-02-15T02:36:59+00:00"&gt;February 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python to Google Sheets &lt;a href="https://t.co/ubIV4afQ1B" title="https://t.co/ubIV4afQ1B" target="_blank"&gt;https://t.co/ubIV4afQ1B&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/962865508256161792" data-datetime="2018-02-12T01:46:41+00:00"&gt;February 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here are my slides from my new talk from &lt;a href="https://twitter.com/@PyTennessee:" target="_blank"&gt;@PyTennessee:&lt;/a&gt; ‚ÄúThe Future of Python Dependency Management‚Äù &lt;a href="https://t.co/fhUpdyOdJC" title="https://t.co/fhUpdyOdJC" target="_blank"&gt;https://t.co/fhUpdyOdJC&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz üêç (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/963065398089404417" data-datetime="2018-02-12T15:00:58+00:00"&gt;February 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why should I care about Kubernetes, Docker, and Container Orchestration? &lt;a href="https://t.co/TPTKMPpOBN" title="https://t.co/TPTKMPpOBN" target="_blank"&gt;https://t.co/TPTKMPpOBN&lt;/a&gt; &lt;a href="https://t.co/csuEG3HrzJ" title="https://t.co/csuEG3HrzJ" target="_blank"&gt;https://t.co/csuEG3HrzJ&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/964966185640058882" data-datetime="2018-02-17T20:54:01+00:00"&gt;February 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;gnomecast - A native Linux / Gnome / GTK Chromecast GUI that supports transcoding and subtitles. &lt;a href="https://t.co/SascSx6QQc" title="https://t.co/SascSx6QQc" target="_blank"&gt;https://t.co/SascSx6QQc&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/964410313792659456" data-datetime="2018-02-16T08:05:11+00:00"&gt;February 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Flask"></category><category term="CSS"></category><category term="Regex"></category><category term="security"></category><category term="programming"></category><category term="Matplotlib"></category><category term="Jupyter"></category><category term="Windows"></category><category term="Twitter"></category><category term="spreadsheets"></category><category term="Kubernetes"></category><category term="Docker"></category><category term="Gnomecast"></category></entry><entry><title>Twitter Digest 2018 Week 07</title><link href="https://pybit.es/twitter_digest_201807.html" rel="alternate"></link><published>2018-02-11T13:13:00+01:00</published><updated>2018-02-11T13:13:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-02-11:/twitter_digest_201807.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;A moment for some self indulgence! Stoked to see people enjoying our &lt;a href="https://codechalleng.es"&gt;Code Challenges Platform&lt;/a&gt;!:&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Day 39 of &lt;a href="https://twitter.com/search/#100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; and I just cracked Bite of Py 39. Calculate the total duration of a course - on behalf of‚Ä¶ &lt;a href="https://t.co/iTKpgDCZXk" title="https://t.co/iTKpgDCZXk" target="_blank"&gt;https://t.co/iTKpgDCZXk&lt;/a&gt;&lt;/p&gt;‚Äî Robert (@RobHimself1982) &lt;a href="https://twitter.com/RobHimself1982/status/962084952799174657" data-datetime="2018-02-09T22:05:02+00:00"&gt;February 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Linear Regression in Python with Scikit-Learn &lt;a href="https://t.co/jAaj7QwzgP" title="https://t.co/jAaj7QwzgP" target="_blank"&gt;https://t.co/jAaj7QwzgP&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/961666727116451842" data-datetime="2018-02-08T18:23:09+00:00"&gt;February 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here‚Äôs my code + benchmark to scaling a single GPU machine to over 500+ concurrent API requests using Python,‚Ä¶ &lt;a href="https://t.co/7kSGQCdXxZ" title="https://t.co/7kSGQCdXxZ" target="_blank"&gt;https://t.co/7kSGQCdXxZ&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/960529163861069825" data-datetime="2018-02-05T15:02:53+00:00"&gt;February 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks &lt;a href="https://twitter.com/@MIT" target="_blank"&gt;@MIT&lt;/a&gt; for sharing your Intro to Deep Learning class online! üôå They include slides and videos, as well as labs‚Ä¶ &lt;a href="https://t.co/RSIZDWaQBY" title="https://t.co/RSIZDWaQBY" target="_blank"&gt;https://t.co/RSIZDWaQBY&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/962023297662660608" data-datetime="2018-02-09T18:00:02+00:00"&gt;February 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I love this: &lt;a href="https://twitter.com/@DonateForDonald" target="_blank"&gt;@DonateForDonald&lt;/a&gt; lets you pick a Trumpism such that every time he tweets it you automatically donate üíµ‚Ä¶ &lt;a href="https://t.co/sySSAH2VIQ" title="https://t.co/sySSAH2VIQ" target="_blank"&gt;https://t.co/sySSAH2VIQ&lt;/a&gt;&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/962028502978473985" data-datetime="2018-02-09T18:20:43+00:00"&gt;February 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Developers and tech leads: We've used search data from our online learning platform to identify what's hot &amp;amp; what's‚Ä¶ &lt;a href="https://t.co/8ZbnxedBt8" title="https://t.co/8ZbnxedBt8" target="_blank"&gt;https://t.co/8ZbnxedBt8&lt;/a&gt;&lt;/p&gt;‚Äî O'Reilly Media (@OReillyMedia) &lt;a href="https://twitter.com/OReillyMedia/status/960922379890429952" data-datetime="2018-02-06T17:05:23+00:00"&gt;February 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Our Tutorial Schedule is live! You can find a list of tutorials and their details at &lt;a href="https://t.co/BNZoatxl7t." title="https://t.co/BNZoatxl7t." target="_blank"&gt;https://t.co/BNZoatxl7t.&lt;/a&gt; When‚Ä¶ &lt;a href="https://t.co/heW7Kffi1N" title="https://t.co/heW7Kffi1N" target="_blank"&gt;https://t.co/heW7Kffi1N&lt;/a&gt;&lt;/p&gt;‚Äî PyCon (@pycon) &lt;a href="https://twitter.com/pycon/status/961707263223304193" data-datetime="2018-02-08T21:04:13+00:00"&gt;February 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Debugging is like being the detective in a crime movie where you are also the murderer." - Filipe Fortes&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/961971447299297280" data-datetime="2018-02-09T14:34:00+00:00"&gt;February 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The tutorial on restful apis is finally out! üòÄ &lt;a href="https://t.co/PGMDmiNlda" title="https://t.co/PGMDmiNlda" target="_blank"&gt;https://t.co/PGMDmiNlda&lt;/a&gt;&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/959801032971882496" data-datetime="2018-02-03T14:49:33+00:00"&gt;February 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;TIL Python functions can accept invalid identifiers if they're passed via **kwargs: &lt;a href="https://t.co/9Gzybrgp64" title="https://t.co/9Gzybrgp64" target="_blank"&gt;https://t.co/9Gzybrgp64&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/961987760197267456" data-datetime="2018-02-09T15:38:49+00:00"&gt;February 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Part 10 of the Flask Mega-Tutorial is up on my blog. This one is about email support. &lt;a href="https://t.co/mF0bCk69XT" title="https://t.co/mF0bCk69XT" target="_blank"&gt;https://t.co/mF0bCk69XT&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/960893880848736257" data-datetime="2018-02-06T15:12:08+00:00"&gt;February 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Created an augmented reality filter with python &lt;a href="https://t.co/mspoxR8A80" title="https://t.co/mspoxR8A80" target="_blank"&gt;https://t.co/mspoxR8A80&lt;/a&gt; by &lt;a href="https://twitter.com/@codemadeio" target="_blank"&gt;@codemadeio&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/962266740662026240" data-datetime="2018-02-10T10:07:23+00:00"&gt;February 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check out this awesome article by &lt;a href="https://twitter.com/@alexip" target="_blank"&gt;@alexip&lt;/a&gt; !! üíª‚òÅÔ∏è &lt;a href="https://t.co/YqgR9zWCfN" title="https://t.co/YqgR9zWCfN" target="_blank"&gt;https://t.co/YqgR9zWCfN&lt;/a&gt;&lt;/p&gt;‚Äî Karlijn Willems (@willems_karlijn) &lt;a href="https://twitter.com/willems_karlijn/status/961588673476202496" data-datetime="2018-02-08T13:12:59+00:00"&gt;February 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hashability in &lt;a href="https://twitter.com/search/#python:" target="_blank"&gt;#python:&lt;/a&gt; Mutable containers (lists) are inherently unhashable. Immutable containers (tuples) are ha‚Ä¶ &lt;a href="https://t.co/YzGMkKObLg" title="https://t.co/YzGMkKObLg" target="_blank"&gt;https://t.co/YzGMkKObLg&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/960582687248605194" data-datetime="2018-02-05T18:35:34+00:00"&gt;February 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;And just because this cracked me up!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@zakagan:" target="_blank"&gt;@zakagan:&lt;/a&gt; date: what‚Äôs your dream job? me: designing food stats for RPGs date: umm ok‚Ä¶ *sips water* me: [under breath] -2 thirst&lt;/p&gt;‚Äî Jeff Atwood (@codinghorror) &lt;a href="https://twitter.com/codinghorror/status/960770037895241729" data-datetime="2018-02-06T07:00:01+00:00"&gt;February 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="code challenges"></category><category term="Sci-Kit Learn"></category><category term="Keras"></category><category term="Flask"></category><category term="TensorFlow"></category><category term="deep learning"></category><category term="PyCon"></category><category term="Django"></category><category term="augmented reality"></category><category term="data science"></category><category term="Jupyter"></category></entry><entry><title>Twitter Digest 2018 Week 06</title><link href="https://pybit.es/twitter_digest_201806.html" rel="alternate"></link><published>2018-02-04T14:02:00+01:00</published><updated>2018-02-04T14:02:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-02-04:/twitter_digest_201806.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;unimatrix - Python script to simulate the display from "The Matrix" in terminal. &lt;a href="https://t.co/FljevArnKb" title="https://t.co/FljevArnKb" target="_blank"&gt;https://t.co/FljevArnKb&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/4JipLrICRL" title="https://t.co/4JipLrICRL" target="_blank"&gt;https://t.co/4JipLrICRL&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/959109277234401282" data-datetime="2018-02-01T17:00:45+00:00"&gt;February 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check out our new video series, How Computers Work, starring &lt;a href="https://twitter.com/@BillGates," target="_blank"&gt;@BillGates,&lt;/a&gt; &lt;a href="https://twitter.com/@natbro," target="_blank"&gt;@natbro,&lt;/a&gt; &lt;a href="https://twitter.com/@mayli," target="_blank"&gt;@mayli,&lt;/a&gt; &lt;a href="https://twitter.com/@adafruit," target="_blank"&gt;@adafruit,&lt;/a&gt; &lt;a href="https://twitter.com/@Maddy_Maxey,‚Ä¶" target="_blank"&gt;@Maddy_Maxey,‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/P8c8zdlY4P" title="https://t.co/P8c8zdlY4P" target="_blank"&gt;https://t.co/P8c8zdlY4P&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/958341991166652422" data-datetime="2018-01-30T14:11:50+00:00"&gt;January 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;SfePy: Simple Finite Elements in Python &lt;a href="https://t.co/LCoGTRF3Gd" title="https://t.co/LCoGTRF3Gd" target="_blank"&gt;https://t.co/LCoGTRF3Gd&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/958466129038540801" data-datetime="2018-01-30T22:25:07+00:00"&gt;January 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Zulko/moviepy: Video editing with Python &lt;a href="https://t.co/263WPH4a7P" title="https://t.co/263WPH4a7P" target="_blank"&gt;https://t.co/263WPH4a7P&lt;/a&gt; &lt;a href="https://twitter.com/search/#video" target="_blank"&gt;#video&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/959860399108628480" data-datetime="2018-02-03T18:45:27+00:00"&gt;February 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python 3.7b1 is out! So much goodness. Thanks all devs, contributors, and especially release manager &lt;a href="https://twitter.com/@baybryj." target="_blank"&gt;@baybryj.&lt;/a&gt; &lt;a href="https://t.co/QQCDJrEuWz" title="https://t.co/QQCDJrEuWz" target="_blank"&gt;https://t.co/QQCDJrEuWz&lt;/a&gt;&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/958930025603977216" data-datetime="2018-02-01T05:08:28+00:00"&gt;February 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3 quick tip: pathlib, the easy way to deal with file paths on &lt;a href="https://twitter.com/search/#Windows," target="_blank"&gt;#Windows,&lt;/a&gt; Mac and &lt;a href="https://twitter.com/search/#Linux." target="_blank"&gt;#Linux.&lt;/a&gt; &lt;a href="https://twitter.com/search/#programming‚Ä¶" target="_blank"&gt;#programming‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/ngmgwtoC1O" title="https://t.co/ngmgwtoC1O" target="_blank"&gt;https://t.co/ngmgwtoC1O&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/959112885237460992" data-datetime="2018-02-01T17:15:05+00:00"&gt;February 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;piwheelshelps you install Python packages on your Raspberry Pi within seconds instead of minutes or hours‚Ä¶ &lt;a href="https://t.co/95RV8CNiSh" title="https://t.co/95RV8CNiSh" target="_blank"&gt;https://t.co/95RV8CNiSh&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/958773262124756992" data-datetime="2018-01-31T18:45:33+00:00"&gt;January 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nanosecond resolution is coming as part of the Python 3.7.0b1 release &lt;a href="https://t.co/ZLvrcXiD7h" title="https://t.co/ZLvrcXiD7h" target="_blank"&gt;https://t.co/ZLvrcXiD7h&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/959641001844453376" data-datetime="2018-02-03T04:13:38+00:00"&gt;February 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.7 news: The new builtin breakpoint() function implements PEP 553 by &lt;a href="https://twitter.com/@pumpichank" target="_blank"&gt;@pumpichank&lt;/a&gt; . It makes the traditio‚Ä¶ &lt;a href="https://t.co/gwf8SKy8Tn" title="https://t.co/gwf8SKy8Tn" target="_blank"&gt;https://t.co/gwf8SKy8Tn&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/959951072474230785" data-datetime="2018-02-04T00:45:45+00:00"&gt;February 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jason_koebler:" target="_blank"&gt;@jason_koebler:&lt;/a&gt; A year ago, I found out about a community of farmers who trade John Deere firmware hacks on forums and torrent sites. Th‚Ä¶&lt;/p&gt;‚Äî David Beazley (@dabeaz) &lt;a href="https://twitter.com/dabeaz/status/959281081810788357" data-datetime="2018-02-02T04:23:27+00:00"&gt;February 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Jupyter Notebook Tricks for Da... &lt;a href="https://t.co/mzpP7RmDFb" title="https://t.co/mzpP7RmDFb" target="_blank"&gt;https://t.co/mzpP7RmDFb&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/959969383438102528" data-datetime="2018-02-04T01:58:31+00:00"&gt;February 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@sandiegopython:" target="_blank"&gt;@sandiegopython:&lt;/a&gt; Did you know that SD &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; has a YouTube channel with videos from our monthly meetup? Check it out! &lt;a href="https://t.co/J7WZ‚Ä¶" title="https://t.co/J7WZ‚Ä¶" target="_blank"&gt;https://t.co/J7WZ‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/959514267002253312" data-datetime="2018-02-02T19:50:02+00:00"&gt;February 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pvergain:" target="_blank"&gt;@pvergain:&lt;/a&gt; &lt;a href="https://t.co/GtfXReaal6" title="https://t.co/GtfXReaal6" target="_blank"&gt;https://t.co/GtfXReaal6&lt;/a&gt; An other great tutorial for &lt;a href="https://twitter.com/search/#dockerizing" target="_blank"&gt;#dockerizing&lt;/a&gt; a &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; application &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pipenv" target="_blank"&gt;#pipenv&lt;/a&gt; &lt;a href="https://twitter.com/search/#docker-compose" target="_blank"&gt;#docker-compose&lt;/a&gt; &lt;a href="https://twitter.com/@kenn‚Ä¶" target="_blank"&gt;@kenn‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz üêç (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/957719330208342017" data-datetime="2018-01-28T20:57:36+00:00"&gt;January 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúAn interesting collection of surprising snippets and lesser-known Python features.‚Äù &lt;a href="https://t.co/nZG0B3ZVzG" title="https://t.co/nZG0B3ZVzG" target="_blank"&gt;https://t.co/nZG0B3ZVzG&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/958750098871209984" data-datetime="2018-01-31T17:13:30+00:00"&gt;January 31, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building a Full-Text Search App Using Docker and Elasticsearch &lt;a href="https://t.co/aYfMJ1GpwB" title="https://t.co/aYfMJ1GpwB" target="_blank"&gt;https://t.co/aYfMJ1GpwB&lt;/a&gt; &lt;a href="https://t.co/vszZuOSYSg" title="https://t.co/vszZuOSYSg" target="_blank"&gt;https://t.co/vszZuOSYSg&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/959208252956430338" data-datetime="2018-02-01T23:34:03+00:00"&gt;February 01, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="learning"></category><category term="SfePy"></category><category term="moviepy"></category><category term="pathlib"></category><category term="piwheels"></category><category term="raspberry pi"></category><category term="Jupyter"></category><category term="Django"></category><category term="Docker"></category><category term="Elasticsearch"></category></entry><entry><title>Using Feedparser, Difflib and Plotly to Analyze PyBites Blog Tags</title><link href="https://pybit.es/guest-pybites-blog-tag-analysis-plotly.html" rel="alternate"></link><published>2018-01-29T12:15:00+01:00</published><updated>2018-01-29T12:15:00+01:00</updated><author><name>Mridu Bhatnagar</name></author><id>tag:pybit.es,2018-01-29:/guest-pybites-blog-tag-analysis-plotly.html</id><summary type="html">&lt;p&gt;I came across PyBites through a random retweet by some other Pythonista and was intrigued by the challenges Bob and Julian post. Learning cool things by building something always fascinated me so I love and enjoy contributing to the PyBites community through solving random challenges that I find interesting. Long story short I picked up &lt;a href="https://pybit.es/codechallenge03.html"&gt;PyBites Code Challenge 03&lt;/a&gt; and am sharing my solution here.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I came across PyBites through a random retweet by some other Pythonista and was intrigued by the challenges Bob and Julian post. Learning cool things by building something always fascinated me so I love and enjoy contributing to the PyBites community through solving random challenges that I find interesting.&lt;/p&gt;
&lt;p&gt;Long story short I picked up &lt;a href="https://pybit.es/codechallenge03.html"&gt;PyBites Code Challenge 03&lt;/a&gt; and share my solution here.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The aim behind the challenge was to show the top 10 most frequently used tags by PyBites. And similar tags should be listed as well, for example &lt;code&gt;game&lt;/code&gt; and &lt;code&gt;games&lt;/code&gt;, &lt;code&gt;challenge&lt;/code&gt; and  &lt;code&gt;challenges&lt;/code&gt;, etc. It ended up being even more interesting because I could use the live RSS feed of PyBites which means I could write a script that could monitor commonly used tags over time. I even went one step further by graphically showing them.&lt;/p&gt;
&lt;h2&gt;Modules Used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plot.ly/python/"&gt;Plotly&lt;/a&gt; - a free and Open Source Python graphing library. It has good documentation and is quite easy to use. I used it to come up with the Bar Graph for top 10 tags (see further down).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/feedparser"&gt;FeedParser&lt;/a&gt; - a module that makes it easier to parse RSS feeds. Using this you can directly extract title, subtitle, link, entries etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;The full code for this challenge is &lt;a href="https://raw.githubusercontent.com/pybites/challenges/community/03/mridubhatnagar/tags.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The live RSS feed for Pybites returns XML. One possible approach  was to parse the XML response and list all the tags being used by PyBites. The other one was to lookout for a module that is used for parsing the RSS feeds. This is how I used feedparser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog_feed = feedparser.parse(&amp;#39;https://pybit.es/feeds/all.rss.xml&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, blog_feed has feed of complete PyBites. But, at a granular level what I really wanted  was to retrieve all of the tags. To reach up to tags I had to do two levels of parsing. Going top-bottom. First I looped around all the entries. In particular blog_feed.entries would list details related to all the blog posts by PyBites. Per Blog it would have details like title, title_details, content, tags and so on for all the blogs. Then I looped across all the entries to get the tags. Per blog post I appended all the tags to a list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tags():
&amp;quot;&amp;quot;&amp;quot;
Find all tags in live feed.
Replace dash with whitespace.
&amp;quot;&amp;quot;&amp;quot;
tags = []
blog_feed = feedparser.parse(&amp;#39;https://pybit.es/feeds/all.rss.xml&amp;#39;)
for item in range(len(blog_feed.entries)):
    for i in range(len(blog_feed.entries[item].tags)):
        word = blog_feed.entries[item].tags[i][&amp;#39;term&amp;#39;]
        tags.append(word)
return tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next step was to get the top 10 tags that are being most commonly used. For this I created a dictionary having tag as the key and count per tag as the corresponding value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_top_tags(tags):
    &amp;quot;&amp;quot;&amp;quot;
    Get the TOP_NUMBER of most common tags.
    tags: List of all the tags used by the website.
    &amp;quot;&amp;quot;&amp;quot;
    tag_list = []
    D = {}
    top_tags = {}
    for words in tags:
        tag_list.append(words.lower())
        key = words.lower()
        D[key] = tag_list.count(key)
    top_tags = sorted(D.items(),key=operator.itemgetter(1), reverse=True)[:TOP_NUMBER]
    return top_tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The top 10 tags were getting retrieved but similarity had to be calculated as well. SequenceMatcher came in handy for this. Based on the input words it returns a value that shows how similar the two words are. Given the threshold was 0.85, anything above this value was considered similar. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_similarities(tags):
    &amp;quot;&amp;quot;&amp;quot;
    Find set of tags pairs with similarity ratio of &amp;gt; SIMILAR.
    Argument:
    tags: List of all the tags used by the website.
    &amp;quot;&amp;quot;&amp;quot;
    D={}
    for word in tags:
        word=word.replace(&amp;#39; &amp;#39;,&amp;#39;&amp;#39;).lower()
        for words in tags:
            words=words.replace(&amp;#39; &amp;#39;,&amp;#39;&amp;#39;).lower()
            value = SequenceMatcher(None, word, words).ratio()
            if SIMILAR&amp;lt;value&amp;lt;1:
                D[word]=words
    return D
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Last but not least, visualization. All I aimed for was to come up with a bar graph that at any point in time shows me the most commonly used tags. To meet this requirement I used Plotly. The crisp documentation helped me a lot. On the x-axis I mentioned the tags being used. And y-axis showed the counts of each tag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def visualizations(top_tags):
    &amp;#39;&amp;#39;&amp;#39;
    Data visualization using Bar Graph.
    Argument:
    top_tags: List containing tuples.
    And tuple have tag and count respectively.

    x axis - tags
    y axis - counts
    &amp;#39;&amp;#39;&amp;#39;
    tags=[]
    counts=[]
    for tag,count in top_tags:
        tags.append(tag)
        counts.append(count)
    data=[go.Bar(
        x=tags,
        y=counts)]
    py.plot(data, filename=&amp;#39;basic-visualization&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The top 10 tags at the time I wrote my script:&lt;/p&gt;
&lt;p&gt;&lt;img alt="result of visualizations" src="https://pybit.es/images/pybites-tags-plot.png"&gt;&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Parsing of RSS Feeds, their utility and scope, and how you can use &lt;code&gt;feedparser&lt;/code&gt; to parse them. &lt;/li&gt;
&lt;li&gt;Making a basic visualisation using &lt;code&gt;plotly&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Calculate similarity between 2 words using the builtin &lt;code&gt;difflib&lt;/code&gt; module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In a nutshell Python is something I love to code in and talk about. PyBites has given me a platform to code more, solve interesting problems to learn by building things. It is definitely a stepping stone. Thanks PyBites!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#mridubhatnagar"&gt;Mridu&lt;/a&gt;&lt;/p&gt;</content><category term="bots"></category><category term="code challenge"></category><category term="guest"></category><category term="Plotly"></category><category term="learning"></category></entry><entry><title>Twitter Digest 2018 Week 05</title><link href="https://pybit.es/twitter_digest_201805.html" rel="alternate"></link><published>2018-01-28T16:19:00+01:00</published><updated>2018-01-28T16:19:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-01-28:/twitter_digest_201805.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Comparing regular expressions in Perl, Python, and Emacs &lt;a href="https://t.co/4F48w8SlPA" title="https://t.co/4F48w8SlPA" target="_blank"&gt;https://t.co/4F48w8SlPA&lt;/a&gt; &lt;a href="https://t.co/HQCp5rpVMq" title="https://t.co/HQCp5rpVMq" target="_blank"&gt;https://t.co/HQCp5rpVMq&lt;/a&gt;&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/956188363110932480" data-datetime="2018-01-24T15:34:05+00:00"&gt;January 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@biolojical:" target="_blank"&gt;@biolojical:&lt;/a&gt; Mass in grams 10^33üåû . . . . 10^28üåé . 10^26üåñ . . . . . . . . 10^17üóª . . 10^14üåÄ . . 10^11üåâ . 10^9üå≤ 10^8üêã 10^7üêò 10^6ü¶è 10^5‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/957138964061786112" data-datetime="2018-01-27T06:31:26+00:00"&gt;January 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;cutelog - GUI for Python's logging module. &lt;a href="https://t.co/65A9EGE6iB" title="https://t.co/65A9EGE6iB" target="_blank"&gt;https://t.co/65A9EGE6iB&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#logging" target="_blank"&gt;#logging&lt;/a&gt; &lt;a href="https://twitter.com/search/#gui" target="_blank"&gt;#gui&lt;/a&gt; &lt;a href="https://t.co/D5gNWSmR56" title="https://t.co/D5gNWSmR56" target="_blank"&gt;https://t.co/D5gNWSmR56&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/956587479368388608" data-datetime="2018-01-25T18:00:02+00:00"&gt;January 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üêçüì∞ Simplifying Offline Python Deployments With Docker and Python Wheels &lt;a href="https://t.co/eONaeDZiHU" title="https://t.co/eONaeDZiHU" target="_blank"&gt;https://t.co/eONaeDZiHU&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/957076696913596416" data-datetime="2018-01-27T02:24:00+00:00"&gt;January 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Chapter 8 of the Flask-Mega Tutorial is now available on my blog. Head there to learn about Followers!‚Ä¶ &lt;a href="https://t.co/aBwjzgLp9A" title="https://t.co/aBwjzgLp9A" target="_blank"&gt;https://t.co/aBwjzgLp9A&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/955899615668142080" data-datetime="2018-01-23T20:26:42+00:00"&gt;January 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; Interesting... "How to turn Django Admin into a lightweight dashboard" &lt;a href="https://t.co/oiguyII1LI" title="https://t.co/oiguyII1LI" target="_blank"&gt;https://t.co/oiguyII1LI&lt;/a&gt;&lt;/p&gt;‚Äî Rene Sanchez (@cod3ghoul) &lt;a href="https://twitter.com/cod3ghoul/status/957311014281805824" data-datetime="2018-01-27T17:55:06+00:00"&gt;January 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Using Python for Research Course from Harvard University - MOOC &lt;a href="https://t.co/InlAQxc0Y8" title="https://t.co/InlAQxc0Y8" target="_blank"&gt;https://t.co/InlAQxc0Y8&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/957276336673849346" data-datetime="2018-01-27T15:37:18+00:00"&gt;January 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Misleading &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; readability: x is "hello"; x is "a" or "b"; these don't do what they look like they do! &lt;a href="https://t.co/jXVeV0ZqbV" title="https://t.co/jXVeV0ZqbV" target="_blank"&gt;https://t.co/jXVeV0ZqbV&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/956200400331399168" data-datetime="2018-01-24T16:21:55+00:00"&gt;January 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks to the work of &lt;a href="https://twitter.com/@nulhom" target="_blank"&gt;@nulhom&lt;/a&gt; and &lt;a href="https://twitter.com/@AboveVacant," target="_blank"&gt;@AboveVacant,&lt;/a&gt; the latest release of dlib is easier than ever to install. I detail‚Ä¶ &lt;a href="https://t.co/nVKOFCYgLF" title="https://t.co/nVKOFCYgLF" target="_blank"&gt;https://t.co/nVKOFCYgLF&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/955456463044005888" data-datetime="2018-01-22T15:05:46+00:00"&gt;January 22, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;TensorFlow 1.5.0 has been released, including previews of Eager execution (&lt;a href="https://t.co/QpCXfuBvSD)" title="https://t.co/QpCXfuBvSD)" target="_blank"&gt;https://t.co/QpCXfuBvSD)&lt;/a&gt; and TensorFlow‚Ä¶ &lt;a href="https://t.co/JKjYRHMtFK" title="https://t.co/JKjYRHMtFK" target="_blank"&gt;https://t.co/JKjYRHMtFK&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/957342457133400064" data-datetime="2018-01-27T20:00:03+00:00"&gt;January 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@IainDey:" target="_blank"&gt;@IainDey:&lt;/a&gt; He wrote the manuals that allowed 80s computing pioneers to build the &lt;a href="https://twitter.com/search/#internet.," target="_blank"&gt;#internet.,&lt;/a&gt; then led the Open Source movement. Now &lt;a href="https://twitter.com/@timo‚Ä¶" target="_blank"&gt;@timo‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Tim O'Reilly (@timoreilly) &lt;a href="https://twitter.com/timoreilly/status/957423603573665792" data-datetime="2018-01-28T01:22:29+00:00"&gt;January 28, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThoHeller:" target="_blank"&gt;@ThoHeller:&lt;/a&gt; A &lt;a href="https://twitter.com/search/#Kubernetes" target="_blank"&gt;#Kubernetes&lt;/a&gt; guide for &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; &lt;a href="https://twitter.com/search/#Swarm" target="_blank"&gt;#Swarm&lt;/a&gt; lovers ‚Äì &lt;a href="https://twitter.com/@HackerNoon" target="_blank"&gt;@HackerNoon&lt;/a&gt; &lt;a href="https://t.co/mbCYFF8iFZ" title="https://t.co/mbCYFF8iFZ" target="_blank"&gt;https://t.co/mbCYFF8iFZ&lt;/a&gt; &lt;a href="https://twitter.com/search/#DockerSwarm" target="_blank"&gt;#DockerSwarm&lt;/a&gt; &lt;a href="https://twitter.com/search/#Orchestraion" target="_blank"&gt;#Orchestraion&lt;/a&gt; &lt;a href="https://twitter.com/@kubernetesio‚Ä¶" target="_blank"&gt;@kubernetesio‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/957326223922757632" data-datetime="2018-01-27T18:55:32+00:00"&gt;January 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúJava is to JavaScript as ham is to hamster.‚Äù - Jeremy Keith, Resilient Web Design&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/956950044619497474" data-datetime="2018-01-26T18:00:44+00:00"&gt;January 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@drob:" target="_blank"&gt;@drob:&lt;/a&gt; New blog post: "Exploring handwritten digit classification: a tidy analysis of the MNIST dataset" &lt;a href="https://t.co/fuhnBfuA6o" title="https://t.co/fuhnBfuA6o" target="_blank"&gt;https://t.co/fuhnBfuA6o&lt;/a&gt; &lt;a href="https:/‚Ä¶" title="https:/‚Ä¶" target="_blank"&gt;https:/‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/955856468682690560" data-datetime="2018-01-23T17:35:15+00:00"&gt;January 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How To Create A Reddit Bot With Python &lt;a href="https://t.co/KOmbdtuGJZ" title="https://t.co/KOmbdtuGJZ" target="_blank"&gt;https://t.co/KOmbdtuGJZ&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#reddit" target="_blank"&gt;#reddit&lt;/a&gt; &lt;a href="https://twitter.com/search/#bot" target="_blank"&gt;#bot&lt;/a&gt; &lt;a href="https://t.co/bW2P6E2a4c" title="https://t.co/bW2P6E2a4c" target="_blank"&gt;https://t.co/bW2P6E2a4c&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/956527446395883522" data-datetime="2018-01-25T14:01:29+00:00"&gt;January 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="regex"></category><category term="cutelog"></category><category term="Docker"></category><category term="Flask"></category><category term="Django"></category><category term="courses"></category><category term="code"></category><category term="Deep Learning"></category><category term="Machine Learning"></category><category term="data science"></category><category term="TensorFlow"></category><category term="Kubernetes"></category><category term="bot"></category></entry><entry><title>Twitter Digest 2018 Week 04</title><link href="https://pybit.es/twitter_digest_201804.html" rel="alternate"></link><published>2018-01-21T16:19:00+01:00</published><updated>2018-01-21T16:19:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-01-21:/twitter_digest_201804.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Congrats Rod!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Announcing the &lt;a href="https://twitter.com/@PyBites" target="_blank"&gt;@PyBites&lt;/a&gt; Code Challenge 47 winner: &lt;a href="https://twitter.com/@FerroRodolfo!" target="_blank"&gt;@FerroRodolfo!&lt;/a&gt; Thanks for your awesome Twitter Hashtag word cloud‚Ä¶ &lt;a href="https://t.co/YR21EVfzoG" title="https://t.co/YR21EVfzoG" target="_blank"&gt;https://t.co/YR21EVfzoG&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/955028261557346306" data-datetime="2018-01-21T10:44:15+00:00"&gt;January 21, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A short guide on features of Python 3 &lt;a href="https://t.co/6Ii6RemIzd" title="https://t.co/6Ii6RemIzd" target="_blank"&gt;https://t.co/6Ii6RemIzd&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/953479904749916161" data-datetime="2018-01-17T04:11:38+00:00"&gt;January 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Are you a lover of (very) cool socks, stickers, and supporting computer science education? Well, good news! For the‚Ä¶ &lt;a href="https://t.co/xbFmZAtslK" title="https://t.co/xbFmZAtslK" target="_blank"&gt;https://t.co/xbFmZAtslK&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/954424094706970625" data-datetime="2018-01-19T18:43:31+00:00"&gt;January 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build your first website at Django Girls Legon: &lt;a href="https://t.co/J4MtkWhelZ." title="https://t.co/J4MtkWhelZ." target="_blank"&gt;https://t.co/J4MtkWhelZ.&lt;/a&gt; Saturday, 3rd February, 2018 at University of Ghana in Legon.&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/953235464399572992" data-datetime="2018-01-16T12:00:19+00:00"&gt;January 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;.&lt;a href="https://twitter.com/@Uber" target="_blank"&gt;@Uber&lt;/a&gt; AI Labs has open sourced the implementation of their Deep Neuroevolution algorithms, which are competitive w‚Ä¶ &lt;a href="https://t.co/b9vBcSWuP2" title="https://t.co/b9vBcSWuP2" target="_blank"&gt;https://t.co/b9vBcSWuP2&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/954753591503241222" data-datetime="2018-01-20T16:32:49+00:00"&gt;January 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What if your &lt;a href="https://twitter.com/search/#Flask" target="_blank"&gt;#Flask&lt;/a&gt; app could run 3x faster and handle way more concurrent users? Maybe you should check out this w‚Ä¶ &lt;a href="https://t.co/BID1cnGafY" title="https://t.co/BID1cnGafY" target="_blank"&gt;https://t.co/BID1cnGafY&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/954489125691953152" data-datetime="2018-01-19T23:01:55+00:00"&gt;January 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üêçüì∞ &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; web dev tutorial: Token-Based Authentication With Flask &lt;a href="https://t.co/zUlXXgaMjG" title="https://t.co/zUlXXgaMjG" target="_blank"&gt;https://t.co/zUlXXgaMjG&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/954515089318666245" data-datetime="2018-01-20T00:45:05+00:00"&gt;January 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to speed up Python application startup time &lt;a href="https://t.co/Nt9iGAWD8r" title="https://t.co/Nt9iGAWD8r" target="_blank"&gt;https://t.co/Nt9iGAWD8r&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/954294459293949952" data-datetime="2018-01-19T10:08:23+00:00"&gt;January 19, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: It is easy to add default arguments to named tuples: &amp;gt;&amp;gt;&amp;gt; Account = namedtuple('Account', ['owner_name‚Ä¶ &lt;a href="https://t.co/1RbjmqctDQ" title="https://t.co/1RbjmqctDQ" target="_blank"&gt;https://t.co/1RbjmqctDQ&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/953173419486359552" data-datetime="2018-01-16T07:53:46+00:00"&gt;January 16, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Pandas: Assign Last Value of DataFrame Group to All Entries of That Group [Score:6] &lt;a href="https://t.co/Qzku914BNV" title="https://t.co/Qzku914BNV" target="_blank"&gt;https://t.co/Qzku914BNV&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/946432459658448896" data-datetime="2017-12-28T17:27:36+00:00"&gt;December 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Documentation is a love letter that you write to your future self." - Damian Conway üíå&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/952979074221305859" data-datetime="2018-01-15T19:01:31+00:00"&gt;January 15, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ChrisBolman:" target="_blank"&gt;@ChrisBolman:&lt;/a&gt; build a blockchain (and learn/brush up on python) with this quick &lt;a href="https://twitter.com/@hackernoon" target="_blank"&gt;@hackernoon&lt;/a&gt; tutorial by &lt;a href="https://twitter.com/@van_flymen" target="_blank"&gt;@van_flymen&lt;/a&gt; &lt;a href="https://t.co/P3SIsgP‚Ä¶" title="https://t.co/P3SIsgP‚Ä¶" target="_blank"&gt;https://t.co/P3SIsgP‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/954843158671589376" data-datetime="2018-01-20T22:28:43+00:00"&gt;January 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Using regular expressions in PowerShell &lt;a href="https://t.co/BH9zIPow6y" title="https://t.co/BH9zIPow6y" target="_blank"&gt;https://t.co/BH9zIPow6y&lt;/a&gt; &lt;a href="https://t.co/1u7zvqhg2G" title="https://t.co/1u7zvqhg2G" target="_blank"&gt;https://t.co/1u7zvqhg2G&lt;/a&gt;&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/954020992849989632" data-datetime="2018-01-18T16:01:44+00:00"&gt;January 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mariatta:" target="_blank"&gt;@mariatta:&lt;/a&gt; I'm so so so excited for &lt;a href="https://twitter.com/@pycascades" target="_blank"&gt;@pycascades&lt;/a&gt; üòÜ What the stickers say. &lt;a href="https://t.co/I4NeYOAFKp" title="https://t.co/I4NeYOAFKp" target="_blank"&gt;https://t.co/I4NeYOAFKp&lt;/a&gt;&lt;/p&gt;‚Äî PyCascades (@pycascades) &lt;a href="https://twitter.com/pycascades/status/954568173134598144" data-datetime="2018-01-20T04:16:02+00:00"&gt;January 20, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@essobi:" target="_blank"&gt;@essobi:&lt;/a&gt; I laughed way too hard at the php one... &lt;a href="https://t.co/BAwuWN3pEg" title="https://t.co/BAwuWN3pEg" target="_blank"&gt;https://t.co/BAwuWN3pEg&lt;/a&gt;&lt;/p&gt;‚Äî Alisha Aneja (@alisha_aneja17) &lt;a href="https://twitter.com/alisha_aneja17/status/953802168351338496" data-datetime="2018-01-18T01:32:12+00:00"&gt;January 18, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="data science"></category><category term="Django"></category><category term="machine learning"></category><category term="deep learning"></category><category term="python_tip"></category><category term="Flask"></category><category term="Pandas"></category><category term="Blockchain"></category><category term="Regex"></category><category term="challenges"></category></entry><entry><title>Twitter Digest 2018 Week 03</title><link href="https://pybit.es/twitter_digest_201803.html" rel="alternate"></link><published>2018-01-14T15:57:00+01:00</published><updated>2018-01-14T15:57:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-01-14:/twitter_digest_201803.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Milestone!!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;WOW &lt;a href="https://twitter.com/search/#milestone:" target="_blank"&gt;#milestone:&lt;/a&gt; 391 Pythonistas have solved 1,000 Bites, writing 18,003 lines of code. Join us at‚Ä¶ &lt;a href="https://t.co/z6m3HmIr0E" title="https://t.co/z6m3HmIr0E" target="_blank"&gt;https://t.co/z6m3HmIr0E&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/952485653413007360" data-datetime="2018-01-14T10:20:50+00:00"&gt;January 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to visualize &lt;a href="https://twitter.com/search/#traffic" target="_blank"&gt;#traffic&lt;/a&gt; flow with a dynamic 2D histogram in &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; &lt;a href="https://twitter.com/search/#OpenSource" target="_blank"&gt;#OpenSource&lt;/a&gt; notebook:‚Ä¶ &lt;a href="https://t.co/OgsNp9ecw5" title="https://t.co/OgsNp9ecw5" target="_blank"&gt;https://t.co/OgsNp9ecw5&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/950761680065081344" data-datetime="2018-01-09T16:10:23+00:00"&gt;January 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Want to create a voice assistant app? Check out &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; &lt;a href="https://twitter.com/search/#146:" target="_blank"&gt;#146:&lt;/a&gt; Building Alexa Skills with Python and Flask with &lt;a href="https://twitter.com/@ericcho‚Ä¶" target="_blank"&gt;@ericcho‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/951605713712816128" data-datetime="2018-01-12T00:04:16+00:00"&gt;January 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@MrYongpradit:" target="_blank"&gt;@MrYongpradit:&lt;/a&gt; By understanding basics such as - algorithms, data structures, networks, etc - we can prep kids for any future, AI or wha‚Ä¶&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/951211133045583872" data-datetime="2018-01-10T21:56:21+00:00"&gt;January 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;FiPy is a Finite Volume PDE solver written in Python &lt;a href="https://t.co/aWKdEqLQVq" title="https://t.co/aWKdEqLQVq" target="_blank"&gt;https://t.co/aWKdEqLQVq&lt;/a&gt; &lt;a href="https://t.co/uQLsThucR3" title="https://t.co/uQLsThucR3" target="_blank"&gt;https://t.co/uQLsThucR3&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/951943154185527296" data-datetime="2018-01-12T22:25:08+00:00"&gt;January 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; üêçüì∞ What's the best way to reverse a string in Python? Learn and compare 3 approaches in this brand new tutorial: &lt;a href="https://t.‚Ä¶" title="https://t.‚Ä¶" target="_blank"&gt;https://t.‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/950766198362460160" data-datetime="2018-01-09T16:28:20+00:00"&gt;January 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: zip() with star-arguments is great for transposing 2-D data: &amp;gt;&amp;gt;&amp;gt; m = [(1, 2, 3), (4, 5, 6)] &amp;gt;&amp;gt;&amp;gt; list(‚Ä¶ &lt;a href="https://t.co/dwbYlLTqeP" title="https://t.co/dwbYlLTqeP" target="_blank"&gt;https://t.co/dwbYlLTqeP&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/951548193363275776" data-datetime="2018-01-11T20:15:42+00:00"&gt;January 11, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to parse complex text files using Python? [Score:13] &lt;a href="https://t.co/ExjfjIPAA9" title="https://t.co/ExjfjIPAA9" target="_blank"&gt;https://t.co/ExjfjIPAA9&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/951075874169860098" data-datetime="2018-01-10T12:58:53+00:00"&gt;January 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@miguelgrinberg:" target="_blank"&gt;@miguelgrinberg:&lt;/a&gt; Part 6 of the new Flask Mega-Tutorial is up on the blog! &lt;a href="https://t.co/F8i7bfnlxb" title="https://t.co/F8i7bfnlxb" target="_blank"&gt;https://t.co/F8i7bfnlxb&lt;/a&gt; &lt;a href="https://t.co/XsO08rbxeU" title="https://t.co/XsO08rbxeU" target="_blank"&gt;https://t.co/XsO08rbxeU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/950797645064429568" data-datetime="2018-01-09T18:33:18+00:00"&gt;January 09, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to build a Serverless URL shortener using AWS Lambda and S3 &lt;a href="https://t.co/CKUBXRR5wP" title="https://t.co/CKUBXRR5wP" target="_blank"&gt;https://t.co/CKUBXRR5wP&lt;/a&gt; &lt;a href="https://t.co/dq6wKMXue3" title="https://t.co/dq6wKMXue3" target="_blank"&gt;https://t.co/dq6wKMXue3&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/952282621261819904" data-datetime="2018-01-13T20:54:04+00:00"&gt;January 13, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;cutelog - GUI for Python's logging module &lt;a href="https://t.co/FyTV1t537W" title="https://t.co/FyTV1t537W" target="_blank"&gt;https://t.co/FyTV1t537W&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/951784115501699072" data-datetime="2018-01-12T11:53:11+00:00"&gt;January 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Or &lt;a href="mailto:pybitesblog@gmail.com"&gt;request access&lt;/a&gt; to our Slack Channel and have a Pythonic chat with our community!:&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kentcdodds:" target="_blank"&gt;@kentcdodds:&lt;/a&gt; Teaching is the best way to solidify your understanding. Looking for opportunities? - Stack Overflow - Community Chat - Gi‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/951646708299055104" data-datetime="2018-01-12T02:47:10+00:00"&gt;January 12, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Almost due: Code Challenges &lt;a href="https://twitter.com/search/#47" target="_blank"&gt;#47&lt;/a&gt; - PyBites First Year in Data (Special) &lt;a href="https://t.co/XHJBROl6Vk" title="https://t.co/XHJBROl6Vk" target="_blank"&gt;https://t.co/XHJBROl6Vk&lt;/a&gt; - PR your data analy‚Ä¶ &lt;a href="https://t.co/sGUpIPRp39" title="https://t.co/sGUpIPRp39" target="_blank"&gt;https://t.co/sGUpIPRp39&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/952332149910310914" data-datetime="2018-01-14T00:10:52+00:00"&gt;January 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@bitfield:" target="_blank"&gt;@bitfield:&lt;/a&gt; Q: Is my Kubernetes cluster vulnerable to &lt;a href="https://twitter.com/search/#Spectre?" target="_blank"&gt;#Spectre?&lt;/a&gt; A: Yes. Yes, it is. kubectl run -it spectre --image bitfield/spectre:0.2‚Ä¶&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/952479962065289216" data-datetime="2018-01-14T09:58:13+00:00"&gt;January 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Trying to find a bug in your script? Rerun it with pdb as follows python -m pdb example.py (example.py and output‚Ä¶ &lt;a href="https://t.co/FVcELzExQa" title="https://t.co/FVcELzExQa" target="_blank"&gt;https://t.co/FVcELzExQa&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/950275889127936000" data-datetime="2018-01-08T08:00:01+00:00"&gt;January 08, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="Bites of Py"></category><category term="data visualisation"></category><category term="Alexa"></category><category term="AI"></category><category term="FiPy"></category><category term="strings"></category><category term="zip"></category><category term="Flask"></category><category term="AWS Lambda"></category><category term="Kubernetes"></category><category term="Spectre"></category><category term="pdb"></category></entry><entry><title>Code Challenge 48 - Create a Python News Digest Tool</title><link href="https://pybit.es/codechallenge48.html" rel="alternate"></link><published>2018-01-07T12:00:00+01:00</published><updated>2018-01-07T12:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-01-07:/codechallenge48.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, welcome to a new year of challenges. Are you as amazed as we are by all the awesome Python stuff that comes out every week? But then you feel you always are behind because you lack the time to keep up? Welcome to daily reality. In this challenge we have you contribute to our community with tools to improve our weekly delivery of Python News. Be creative, have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, welcome to a new year of challenges. Are you as amazed as we are by all the awesome Python stuff that comes out every week? But then you feel you always are behind because you lack the time to keep up? Welcome to daily reality. In this challenge we have you contribute to our community with tools to improve our weekly delivery of Python News. Be creative, have fun!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;See our &lt;a href="https://pybit.es/pages/news.html"&gt;News archive&lt;/a&gt;. We use Bob's &lt;a href="http://projects.bobbelderbos.com/tweetdigest/"&gt;PHP tool&lt;/a&gt; to pick and choose Python related tweets. It creates the required html for our digest post. It works quite well. However wouldn't it be nicer to have a Python powered tool?!&lt;/p&gt;
&lt;p&gt;It currently only supports one Twitter handle at a time. What if we could have 3 columns: own tweets, influencers and #Python and/or other related hashtag (#Django, #ML, ...)&lt;/p&gt;
&lt;p&gt;What about other Python news resources like the weekly newsletters (&lt;a href="https://www.pythonweekly.com/"&gt;Python weekly&lt;/a&gt;, &lt;a href="http://pycoders.com/"&gt;PyCoder's weekly&lt;/a&gt;, &lt;a href="https://python.libhunt.com/newsletter"&gt;Awesome Python&lt;/a&gt;, etc), could we pull those feeds in too? &lt;/p&gt;
&lt;p&gt;Then we have &lt;a href="http://planetpython.org/"&gt;Planet Python&lt;/a&gt;, a source of new Python articles. BTW it seems our and potentially other feeds &lt;a href="https://github.com/python/planet/issues/240"&gt;are broken&lt;/a&gt; there so bonus karma if somebody can debug and fix it! :)&lt;/p&gt;
&lt;p&gt;What about Reddit? Could we pull in a digest of &lt;a href="https://www.reddit.com/r/Python/"&gt;/Python&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/learnpython/"&gt;/learnpython&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal is to code a simple solution PyBites and the Python community can use to digest awesome news. We know the newsletters are there to solve this problem, yet how would YOU code this up?&lt;/p&gt;
&lt;p&gt;Use you favorite tool, it does not have to be a web app. As long as your solution includes Python. We review this challenge beginning of February.&lt;/p&gt;
&lt;h3&gt;Join our Community&lt;/h3&gt;
&lt;p&gt;We &lt;a href="https://twitter.com/pybites/status/943811489537945600"&gt;built our code challenge platform&lt;/a&gt; which should guide you in the Git setup and lets you PR your work!&lt;/p&gt;
&lt;p&gt;Join a growing community of passionate Pythonistas. Here is the &lt;a href="https://codechalleng.es/challenges/48/"&gt;direct challenge link&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Cool PRs get featured in our &lt;a href="https://pybit.es/pages/challenges.html"&gt;monthly review post&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="chdata analysis"></category><category term="news"></category><category term="Twitter"></category><category term="tools"></category><category term="Planet Python"></category><category term="digest"></category><category term="information overload"></category></entry><entry><title>Twitter Digest 2018 Week 02</title><link href="https://pybit.es/twitter_digest_201802.html" rel="alternate"></link><published>2018-01-07T11:00:00+01:00</published><updated>2018-01-07T11:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-01-07:/twitter_digest_201802.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Happy birthday &lt;a href="https://twitter.com/@_juliansequeira," target="_blank"&gt;@_juliansequeira,&lt;/a&gt; to celebrate here is a free bite of &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; just on a topic you like, you gotta l‚Ä¶ &lt;a href="https://t.co/J4dhYBw53o" title="https://t.co/J4dhYBw53o" target="_blank"&gt;https://t.co/J4dhYBw53o&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/949539953700204545" data-datetime="2018-01-06T07:15:41+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Twenty! 20 Early Bird Registrations remain for PyCon US 2018! Register at &lt;a href="https://t.co/qZUhbljovA" title="https://t.co/qZUhbljovA" target="_blank"&gt;https://t.co/qZUhbljovA&lt;/a&gt; Real Time Data:‚Ä¶ &lt;a href="https://t.co/NNUoyiOM63" title="https://t.co/NNUoyiOM63" target="_blank"&gt;https://t.co/NNUoyiOM63&lt;/a&gt;&lt;/p&gt;‚Äî PyCon (@pycon) &lt;a href="https://twitter.com/pycon/status/949616150672965634" data-datetime="2018-01-06T12:18:27+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Grab every course at &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; (87+ hours) at an early-bird discount if you get it before Jan 8th.‚Ä¶ &lt;a href="https://t.co/J94IGhx8ap" title="https://t.co/J94IGhx8ap" target="_blank"&gt;https://t.co/J94IGhx8ap&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/948964076398366720" data-datetime="2018-01-04T17:07:21+00:00"&gt;January 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúBuild a Taylor Swift detector with the TensorFlow Object Detection API, ML Engine, and Swift‚Äù by &lt;a href="https://twitter.com/@SRobTweets" target="_blank"&gt;@SRobTweets&lt;/a&gt; &lt;a href="https://t.co/w9chLEG738" title="https://t.co/w9chLEG738" target="_blank"&gt;https://t.co/w9chLEG738&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/948582456264941571" data-datetime="2018-01-03T15:50:56+00:00"&gt;January 03, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Saturday &lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; fun: Training a SSD to recognize front/rear views of vehicles. Thank you to &lt;a href="https://twitter.com/@nulhom" target="_blank"&gt;@nulhom&lt;/a&gt; for the‚Ä¶ &lt;a href="https://t.co/6eykHKqWCn" title="https://t.co/6eykHKqWCn" target="_blank"&gt;https://t.co/6eykHKqWCn&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/949677179864014848" data-datetime="2018-01-06T16:20:58+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;NPM as a build tool for a Python Project &lt;a href="https://t.co/GO83TGJpre" title="https://t.co/GO83TGJpre" target="_blank"&gt;https://t.co/GO83TGJpre&lt;/a&gt; via &lt;a href="https://twitter.com/@ami" target="_blank"&gt;@ami&lt;/a&gt; &lt;a href="https://twitter.com/search/#tech" target="_blank"&gt;#tech&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/948990648610410497" data-datetime="2018-01-04T18:52:56+00:00"&gt;January 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;absl-py is a library for building Python applications developed by Google, extensively tested and used in productio‚Ä¶ &lt;a href="https://t.co/qYWOIxrC7x" title="https://t.co/qYWOIxrC7x" target="_blank"&gt;https://t.co/qYWOIxrC7x&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/949516017838956545" data-datetime="2018-01-06T05:40:34+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ylogx:" target="_blank"&gt;@ylogx:&lt;/a&gt; Working with a 10Gig csv data. Pandas read_csv took 16mins to load the csv into memory. Converted to &lt;a href="https://twitter.com/@ApacheParquet" target="_blank"&gt;@ApacheParquet&lt;/a&gt; with &lt;a href="https://twitter.com/@Apache‚Ä¶" target="_blank"&gt;@Apache‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/949371152903778304" data-datetime="2018-01-05T20:04:55+00:00"&gt;January 05, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3 wall of superpowers (compatibility of the top pypi packages with 3) is up to 95% green! &lt;a href="https://t.co/oStP8RxXmM" title="https://t.co/oStP8RxXmM" target="_blank"&gt;https://t.co/oStP8RxXmM&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/949462755089645568" data-datetime="2018-01-06T02:08:55+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@voidspace:" target="_blank"&gt;@voidspace:&lt;/a&gt; Ooh, another favourite confusing Python exception: TypeError: func() takes at least 1 argument (1 given) &amp;gt;&amp;gt;&amp;gt; def func(a, b=‚Ä¶&lt;/p&gt;‚Äî Harry Percival (@hjwp) &lt;a href="https://twitter.com/hjwp/status/949010650101141506" data-datetime="2018-01-04T20:12:25+00:00"&gt;January 04, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Eel - A little Python library for making simple Electron-like HTML/JS GUI apps &lt;a href="https://t.co/V51pctCWiE" title="https://t.co/V51pctCWiE" target="_blank"&gt;https://t.co/V51pctCWiE&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/949791486371082240" data-datetime="2018-01-06T23:55:11+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;CoffeeMiner: Hacking WiFi with Python to inject cryptocurrency miner to HTML requests &lt;a href="https://t.co/aK0raqvyB7" title="https://t.co/aK0raqvyB7" target="_blank"&gt;https://t.co/aK0raqvyB7&lt;/a&gt; &lt;a href="https://t.co/HHRKZVWuAI" title="https://t.co/HHRKZVWuAI" target="_blank"&gt;https://t.co/HHRKZVWuAI&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/949707681543213057" data-datetime="2018-01-06T18:22:10+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@anthonypjshaw:" target="_blank"&gt;@anthonypjshaw:&lt;/a&gt; I just published ‚Äú8 Python developers that inspired me in 2017‚Äù &lt;a href="https://t.co/fNI0tf0kgi" title="https://t.co/fNI0tf0kgi" target="_blank"&gt;https://t.co/fNI0tf0kgi&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/948012244801122304" data-datetime="2018-01-02T02:05:07+00:00"&gt;January 02, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python is really weakened by its poor choices for UI (outside of server web). I wish it was better, maybe embedded‚Ä¶ &lt;a href="https://t.co/8TMdXtwSuL" title="https://t.co/8TMdXtwSuL" target="_blank"&gt;https://t.co/8TMdXtwSuL&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/949688651058835456" data-datetime="2018-01-06T17:06:33+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PatrickStotz:" target="_blank"&gt;@PatrickStotz:&lt;/a&gt; Informative and beautiful &lt;a href="https://twitter.com/search/#map" target="_blank"&gt;#map&lt;/a&gt; by &lt;a href="https://twitter.com/@PostGraphics:" target="_blank"&gt;@PostGraphics:&lt;/a&gt; &lt;a href="https://t.co/TpwY4CSKpP." title="https://t.co/TpwY4CSKpP." target="_blank"&gt;https://t.co/TpwY4CSKpP.&lt;/a&gt; Makes me feel like weather &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; is totally‚Ä¶&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/949758747479429120" data-datetime="2018-01-06T21:45:05+00:00"&gt;January 06, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="PyCon"></category><category term="BitesOfPy"></category><category term="courses"></category><category term="TensorFlow"></category><category term="machine learning"></category><category term="Swift"></category><category term="deep learning"></category><category term="NPM"></category><category term="Abseil"></category><category term="CSV"></category><category term="exceptions"></category><category term="Eel"></category><category term="cryptocurrency"></category><category term="data visualisation"></category></entry><entry><title>Twitter Digest 2018 Week 01</title><link href="https://pybit.es/twitter_digest_201801.html" rel="alternate"></link><published>2018-01-01T19:50:00+01:00</published><updated>2018-01-01T19:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2018-01-01:/twitter_digest_201801.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Happy New Year Pythonistas!!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Happy New Year / Feliz a√±o nuevo. Wishing you all a joyful, healthy and Python rich 2018! &lt;a href="https://t.co/2EgjDc9eKt" title="https://t.co/2EgjDc9eKt" target="_blank"&gt;https://t.co/2EgjDc9eKt&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/947611974275231744" data-datetime="2017-12-31T23:34:35+00:00"&gt;December 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The 2017 Python Year in Review with &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt; on &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; is now out! &lt;a href="https://t.co/Us7KMKeuG4" title="https://t.co/Us7KMKeuG4" target="_blank"&gt;https://t.co/Us7KMKeuG4&lt;/a&gt; It was a great 2‚Ä¶ &lt;a href="https://t.co/GZ6Lru3wEW" title="https://t.co/GZ6Lru3wEW" target="_blank"&gt;https://t.co/GZ6Lru3wEW&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/947282975175176194" data-datetime="2017-12-31T01:47:15+00:00"&gt;December 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Call For Proposals close in just 94 hours! You can submit your Talk, Poster, or Education Summit Talk before the e‚Ä¶ &lt;a href="https://t.co/HQ9lasbURq" title="https://t.co/HQ9lasbURq" target="_blank"&gt;https://t.co/HQ9lasbURq&lt;/a&gt;&lt;/p&gt;‚Äî PyCon (@pycon) &lt;a href="https://twitter.com/pycon/status/947466698856288258" data-datetime="2017-12-31T13:57:18+00:00"&gt;December 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üé•New Video!üì∫ ‚ÄúHow to Commit to any &lt;a href="https://twitter.com/search/#100DaysOfX" target="_blank"&gt;#100DaysOfX&lt;/a&gt; Challenge to change your habits!‚Äù Learn the Essential Steps! üôåSUBSC‚Ä¶ &lt;a href="https://t.co/053MGsno5b" title="https://t.co/053MGsno5b" target="_blank"&gt;https://t.co/053MGsno5b&lt;/a&gt;&lt;/p&gt;‚Äî Alexander Kallaway ‚ö°Ô∏è (@ka11away) &lt;a href="https://twitter.com/ka11away/status/947197110616711168" data-datetime="2017-12-30T20:06:03+00:00"&gt;December 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kasperfredn:" target="_blank"&gt;@kasperfredn:&lt;/a&gt; Need to brush up on your Tensorflow skills? Here's an Introduction to Tensorflow as a Computational Framework &lt;a href="https://t.co‚Ä¶" title="https://t.co‚Ä¶" target="_blank"&gt;https://t.co‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/946855475101958144" data-datetime="2017-12-29T21:28:31+00:00"&gt;December 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"There's nothing more permanent than a temporary hack." - Kyle Simpson&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/946891331019923457" data-datetime="2017-12-29T23:51:00+00:00"&gt;December 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Extending Python 3 in Go &lt;a href="https://t.co/PjS9Xo47qY" title="https://t.co/PjS9Xo47qY" target="_blank"&gt;https://t.co/PjS9Xo47qY&lt;/a&gt; via &lt;a href="https://twitter.com/@ami" target="_blank"&gt;@ami&lt;/a&gt; &lt;a href="https://twitter.com/search/#tech" target="_blank"&gt;#tech&lt;/a&gt; &lt;a href="https://t.co/ytTRLF6Yad" title="https://t.co/ytTRLF6Yad" target="_blank"&gt;https://t.co/ytTRLF6Yad&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/947214624113549312" data-datetime="2017-12-30T21:15:39+00:00"&gt;December 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;\d matches any digit, i.e. [0-9]. \D matches anything except a digit, i.e. [^0-9].&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/946410742818967553" data-datetime="2017-12-28T16:01:19+00:00"&gt;December 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Simple Linear Regression in Python &lt;a href="https://t.co/mir53Gt88h" title="https://t.co/mir53Gt88h" target="_blank"&gt;https://t.co/mir53Gt88h&lt;/a&gt; &lt;a href="https://twitter.com/search/#scikit" target="_blank"&gt;#scikit&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/945033559986790401" data-datetime="2017-12-24T20:48:53+00:00"&gt;December 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;reddit discussion on "What is the best ML paper you read in 2017 and why?" -- would love to see some more suggestio‚Ä¶ &lt;a href="https://t.co/4QYwXQF0xn" title="https://t.co/4QYwXQF0xn" target="_blank"&gt;https://t.co/4QYwXQF0xn&lt;/a&gt;&lt;/p&gt;‚Äî Sebastian Raschka (@rasbt) &lt;a href="https://twitter.com/rasbt/status/947352610947981312" data-datetime="2017-12-31T06:23:58+00:00"&gt;December 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;For all the people working in open source - paid or unpaid. Thank you. üëèüëèüëè I know we spend way more hours than we‚Ä¶ &lt;a href="https://t.co/zZlLcszH2p" title="https://t.co/zZlLcszH2p" target="_blank"&gt;https://t.co/zZlLcszH2p&lt;/a&gt;&lt;/p&gt;‚Äî Jenny Wong üêù (@miss_jwo) &lt;a href="https://twitter.com/miss_jwo/status/947100474922151936" data-datetime="2017-12-30T13:42:04+00:00"&gt;December 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Using MS Excel with pandas &lt;a href="https://t.co/1jTWrLBsIQ" title="https://t.co/1jTWrLBsIQ" target="_blank"&gt;https://t.co/1jTWrLBsIQ&lt;/a&gt; &lt;a href="https://t.co/OT6ZhBO6Ok" title="https://t.co/OT6ZhBO6Ok" target="_blank"&gt;https://t.co/OT6ZhBO6Ok&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/946023620974870528" data-datetime="2017-12-27T14:23:02+00:00"&gt;December 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Create new directories with &lt;a href="https://twitter.com/search/#pathlib.Path.mkdir()" target="_blank"&gt;#pathlib.Path.mkdir()&lt;/a&gt; method import pathlib pathlib.Path('/my/new/directory').mkdir(pa‚Ä¶ &lt;a href="https://t.co/Hd0b1vDWfc" title="https://t.co/Hd0b1vDWfc" target="_blank"&gt;https://t.co/Hd0b1vDWfc&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/946764011080732672" data-datetime="2017-12-29T15:25:04+00:00"&gt;December 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Top 10 Python libraries of 2017 - Tryolabs Blog &lt;a href="https://t.co/UU62Fqkp4V" title="https://t.co/UU62Fqkp4V" target="_blank"&gt;https://t.co/UU62Fqkp4V&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/945026512339615744" data-datetime="2017-12-24T20:20:52+00:00"&gt;December 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;pydu - Useful data structures, utils for Python &lt;a href="https://t.co/2H1yCGfVYF" title="https://t.co/2H1yCGfVYF" target="_blank"&gt;https://t.co/2H1yCGfVYF&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/946523201126969344" data-datetime="2017-12-28T23:28:11+00:00"&gt;December 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="PyCon"></category><category term="100DaysOfX"></category><category term="TensorFlow"></category><category term="Go"></category><category term="Regex"></category><category term="Matplotlib"></category><category term="machine learning"></category><category term="Excel"></category><category term="Pandas"></category><category term="python_tip"></category><category term="path lib"></category><category term="pydu"></category></entry><entry><title>Twitter Digest 2017 Week 51</title><link href="https://pybit.es/twitter_digest_201751.html" rel="alternate"></link><published>2017-12-24T11:45:00+01:00</published><updated>2017-12-24T11:45:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-24:/twitter_digest_201751.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Happy Birthday PyBites!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Happy birthday &lt;a href="https://twitter.com/@PyBites:" target="_blank"&gt;@PyBites:&lt;/a&gt; in today's new article we reflect on last year and we have an important announcement to ma‚Ä¶ &lt;a href="https://t.co/pAFQmYtjA7" title="https://t.co/pAFQmYtjA7" target="_blank"&gt;https://t.co/pAFQmYtjA7&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943450562795921409" data-datetime="2017-12-20T11:58:37+00:00"&gt;December 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;... and we launched our new platform!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; import this ... Now is better than never. ... Start coding in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; PyBites Code Challenge Platform is‚Ä¶ &lt;a href="https://t.co/8iNjGWrJuQ" title="https://t.co/8iNjGWrJuQ" target="_blank"&gt;https://t.co/8iNjGWrJuQ&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943811489537945600" data-datetime="2017-12-21T11:52:48+00:00"&gt;December 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Wow Excel + Python! (forgot to include last week)&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Microsoft Considers Adding Python as an Official Scripting Language to Excel - by &lt;a href="https://twitter.com/@campuscodi" target="_blank"&gt;@campuscodi&lt;/a&gt; &lt;a href="https://t.co/pNR8nHDwoG" title="https://t.co/pNR8nHDwoaG" target="_blank"&gt;https://t.co/pNR8nHDwoG&lt;/a&gt;&lt;/p&gt;‚Äî BleepingComputer (@BleepinComputer) &lt;a href="https://twitter.com/BleepinComputer/status/941612615528304640" data-datetime="2017-12-15T10:15:16+00:00"&gt;December 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@OReillyMedia:" target="_blank"&gt;@OReillyMedia:&lt;/a&gt; Algorithmic trading in less than 100 lines of &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; code by Yves Hilpisch &lt;a href="https://twitter.com/@dyjh" target="_blank"&gt;@dyjh&lt;/a&gt; ‚Äî One of our &lt;a href="https://twitter.com/search/#TopHits2017" target="_blank"&gt;#TopHits2017&lt;/a&gt; &lt;a href="https://t.co/‚Ä¶" title="https://t.co/‚Ä¶" target="_blank"&gt;https://t.co/‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/944345129355227136" data-datetime="2017-12-22T23:13:18+00:00"&gt;December 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@testdrivenio:" target="_blank"&gt;@testdrivenio:&lt;/a&gt; v2.1 of ‚ÄúMicroservices with Docker, Flask, and React‚Äù is out! &lt;a href="https://t.co/GtOQHy3u8u" title="https://t.co/GtOQHy3u8u" target="_blank"&gt;https://t.co/GtOQHy3u8u&lt;/a&gt; &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#JavaScript" target="_blank"&gt;#JavaScript&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/944224675558719488" data-datetime="2017-12-22T15:14:40+00:00"&gt;December 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúMyths and mistakes of PyCon proposals‚Äù by &lt;a href="https://twitter.com/@irinatruong" target="_blank"&gt;@irinatruong&lt;/a&gt; &lt;a href="https://t.co/L69H3Q7VcY" title="https://t.co/L69H3Q7VcY" target="_blank"&gt;https://t.co/L69H3Q7VcY&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943997351181672449" data-datetime="2017-12-22T00:11:21+00:00"&gt;December 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@fullstackpython:" target="_blank"&gt;@fullstackpython:&lt;/a&gt; Django Logging, The Right Way &lt;a href="https://t.co/O07fDOPJoH" title="https://t.co/O07fDOPJoH" target="_blank"&gt;https://t.co/O07fDOPJoH&lt;/a&gt; &lt;a href="https://t.co/AQgUfN1sVA" title="https://t.co/AQgUfN1sVA" target="_blank"&gt;https://t.co/AQgUfN1sVA&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943987279604977664" data-datetime="2017-12-21T23:31:20+00:00"&gt;December 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúHow to use Python and Flask to build a web app ‚Äî an in-depth tutorial‚Äù by &lt;a href="https://twitter.com/@abhisuri97" target="_blank"&gt;@abhisuri97&lt;/a&gt; &lt;a href="https://t.co/gQ0KcRNC64" title="https://t.co/gQ0KcRNC64" target="_blank"&gt;https://t.co/gQ0KcRNC64&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943886683354824704" data-datetime="2017-12-21T16:51:36+00:00"&gt;December 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jakevdp:" target="_blank"&gt;@jakevdp:&lt;/a&gt; Just learned about the pyautogui library: automate mouse clicks &amp;amp; other interactions with Python! &lt;a href="https://t.co/wEsTdoxB9S" title="https://t.co/wEsTdoxB9S" target="_blank"&gt;https://t.co/wEsTdoxB9S&lt;/a&gt; &lt;a href="http‚Ä¶" title="http‚Ä¶" target="_blank"&gt;http‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943748485999972352" data-datetime="2017-12-21T07:42:27+00:00"&gt;December 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;More Pycons please&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pyconit:" target="_blank"&gt;@pyconit:&lt;/a&gt; Have you ever been in Florence? No? PyCon Nove could be a chance to visit it and taste delicious foodüçïüç∑! Enjoy the best Italia‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943417000256311296" data-datetime="2017-12-20T09:45:15+00:00"&gt;December 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pyconau:" target="_blank"&gt;@pyconau:&lt;/a&gt; Want to help make &lt;a href="https://twitter.com/@pyconau" target="_blank"&gt;@pyconau&lt;/a&gt; happen? We‚Äôre looking for sponsors üí∏ Prospectus and details can be found at &lt;a href="https://t.co/xQBSvh3‚Ä¶" title="https://t.co/xQBSvh3‚Ä¶" target="_blank"&gt;https://t.co/xQBSvh3‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943128399668760578" data-datetime="2017-12-19T14:38:27+00:00"&gt;December 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsycombinator:" target="_blank"&gt;@newsycombinator:&lt;/a&gt; Oh, shit, Git &lt;a href="https://t.co/qW7PSYR2lY" title="https://t.co/qW7PSYR2lY" target="_blank"&gt;https://t.co/qW7PSYR2lY&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/943128233830174720" data-datetime="2017-12-19T14:37:48+00:00"&gt;December 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PyImageSearch:" target="_blank"&gt;@PyImageSearch:&lt;/a&gt; Here it is, the best post I've ever written! How to build a Santa/Not Santa detector with &lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; + &lt;a href="https://twitter.com/search/#Keras," target="_blank"&gt;#Keras,&lt;/a&gt; &lt;a href="https://twitter.com/search/#Pytho‚Ä¶" target="_blank"&gt;#Pytho‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/942782331559055361" data-datetime="2017-12-18T15:43:18+00:00"&gt;December 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePracticalDev:" target="_blank"&gt;@ThePracticalDev:&lt;/a&gt; "A good programmer is someone who always looks both ways before crossing a one-way street." - Doug Linder&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/942482789785653248" data-datetime="2017-12-17T19:53:02+00:00"&gt;December 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Good to know:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;2018 is coming! Find all US holidays in the new year: from &lt;a href="https://t.co/qnfMyvMjvg" title="https://t.co/qnfMyvMjvg" target="_blank"&gt;https://t.co/qnfMyvMjvg&lt;/a&gt; import USFederalHolidayCalendar‚Ä¶ &lt;a href="https://t.co/KlY4Arq4ZO" title="https://t.co/KlY4Arq4ZO" target="_blank"&gt;https://t.co/KlY4Arq4ZO&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/943024844995571713" data-datetime="2017-12-19T07:46:58+00:00"&gt;December 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3&gt;Merry Xmas and a Happy New Year!&lt;/h3&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="twitter"></category><category term="news"></category><category term="pybites"></category><category term="codechalleng.es"></category><category term="testdrivenio"></category><category term="excel"></category><category term="keras"></category><category term="Django"></category><category term="Git"></category><category term="Flask"></category><category term="Pycon"></category><category term="finance"></category><category term="milestone"></category><category term="1year"></category><category term="python_tip"></category></entry><entry><title>Code Challenge 47 - PyBites First Year in Data (Special)</title><link href="https://pybit.es/codechallenge47.html" rel="alternate"></link><published>2017-12-22T22:00:00+01:00</published><updated>2017-12-22T22:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-22:/codechallenge47.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, can you believe &lt;a href="https://pybit.es/special-birthday-new-platform.html"&gt;it‚Äôs been a full year of PyBites&lt;/a&gt; already?! To commemorate our 1st birthday we figured the next challenge should be around‚Ä¶ us!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a name="top"&gt;&lt;/a&gt;Hi Pythonistas, can you believe &lt;a href="https://pybit.es/special-birthday-new-platform.html"&gt;it‚Äôs been a full year of PyBites&lt;/a&gt; already?! To commemorate our 1st birthday we figured the next challenge should be around‚Ä¶ us!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is open in that you‚Äôre welcome to use whatever floats your boat. The requirement however, is that you analyse PyBites data!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data gathering&lt;/p&gt;
&lt;p&gt;We‚Äôve compiled some ideas for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Analyse our blog posts with a data point of your choice. Most common blog post tag or category? With 239 posts (&lt;a href="#numposts"&gt;*1&lt;/a&gt;) there should be quite some data to consume (you can &lt;a href="https://github.com/pybites/pybites.github.io"&gt;clone the repo&lt;/a&gt;, don‚Äôt make repeated requests)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hit up our &lt;a href="https://twitter.com/pybites"&gt;Twitter Account&lt;/a&gt; and look for our most popular tweets / hashtags. Spot any more obvious trends or themes? 
Look at our &lt;a href="https://github.com/pybites/"&gt;Github Repos&lt;/a&gt; and see what data you can collect and represent. Commit times? Commit totals? Growth rate of the blog in words committed per month? Popular Repos? Or do an analysis per repo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;: who PRs the most, what challenge has the most PRs?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100DaysOfCode&lt;/a&gt; - another repo with a lot of data / code in it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These are the main sources that come to mind. If you have other ideas, share them in the comments below. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data visualization&lt;/p&gt;
&lt;p&gt;Once you have your data, we‚Äôd love it if you tested your data visualisation skills and creativity to show off the dataset! Pandas, Matplotlib, Bokeh, Seaborn, use what you are most comfortable with or what you want to learn.&lt;/p&gt;
&lt;p&gt;Ideally you deliver more than one graph. Be creative, you not only delight us, our growing community loves this stuff too, so they are probably on the watch out for cool PRs ü§ì&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Rewards&lt;/h2&gt;
&lt;p&gt;It wouldn‚Äôt be a birthday without gifts right? Our three favourite PRs for this challenge will win a prize!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Most original / die hard solution: A hardcopy of &lt;a href="https://pybit.es/python-resources.html"&gt;one of our favorite Python books&lt;/a&gt;: &lt;a href="http://www.amazon.com/dp/0134034287/?tag=pyb0f-20"&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10 USD towards your favorite beverage. That‚Äôs right, the winner of this price sends us his or her email and we deposit 10 bucks which should go towards a wine, beer or coffee, or if that‚Äôs not your thing, well ‚Ä¶ towards a Python related goal. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Best submissions 3, 4 and 5 get a (limited edition) set of PyBites stickers (bear with us though, they are still &lt;em&gt;in dev&lt;/em&gt; ...)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Submission deadline: &lt;strike&gt;6th of January 2018 05:00:00 CET__ (happy birthday Julian!)&lt;/strike&gt; - UPDATE: holidays are busy, and starting the New Year ... let's extend this to the 16th of Jan 00:00:00 &lt;a href="https://www.timeanddate.com/time/zones/aoe"&gt;AoE&lt;/a&gt; - have fun!&lt;/p&gt;
&lt;h2&gt;Logistics&lt;/h2&gt;
&lt;h3&gt;Getting Ready&lt;/h3&gt;
&lt;p&gt;As &lt;a href="https://twitter.com/pybites/status/943811489537945600"&gt;you might have seen&lt;/a&gt; we launched our &lt;a href="https://codechalleng.es/"&gt;Code Challenges Platform&lt;/a&gt;. We encourage you to make it your default workflow for our challenges. 
It should save you time and standardize the process. &lt;/p&gt;
&lt;p&gt;And you can enjoy our new line we‚Äôre starting: &lt;em&gt;Bites of Py&lt;/em&gt;: work on small code exercises in the comfort of your browser. We are thrilled how this is coming along so please use it and let us know what you think ...&lt;/p&gt;
&lt;h3&gt;PR (Pull Request) to Get Credit&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;PR or it did not happen&lt;/em&gt; - but seriously why? Check our &lt;strong&gt;Grow by PR&lt;/strong&gt; section on our &lt;a href="https://pybit.es/special-birthday-new-platform.html"&gt;1 Year article&lt;/a&gt;. Basically it makes you a more valuable developer. &lt;/p&gt;
&lt;p&gt;Make sure you PR your work providing some feedback where requested! We will make sure to include original ones in our &lt;a href="https://pybit.es/pages/challenges.html"&gt;monthly review post&lt;/a&gt;. For &lt;em&gt;original&lt;/em&gt; we weigh both the code as well as the info provided in the PR.&lt;/p&gt;
&lt;h3&gt;PyBites Slack&lt;/h3&gt;
&lt;p&gt;You like these challenges? We have published &lt;a href="https://github.com/pybites/challenges"&gt;quite a few&lt;/a&gt; and we're not planning to stop anytime soon!&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;really&lt;/em&gt; like our challenges and plan to submit PRs? You‚Äôd like to share ideas with other Pythonistas? Consider joining our growing community on Slack. It becomes an opt-in when you confirm your email &lt;a href="https://codechalleng.es/"&gt;on our platform&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

&lt;span class="n"&gt;Keep&lt;/span&gt; &lt;span class="n"&gt;Calm&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;&lt;a name="numposts"&gt;&lt;/a&gt;*1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ numposts

- total pybites &lt;span class="nv"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; number of md + meta &lt;span class="o"&gt;(=&lt;/span&gt; notebook posts&lt;span class="o"&gt;)&lt;/span&gt; files:
    &lt;span class="m"&gt;239&lt;/span&gt;

- of which currently in draft status:
    &lt;span class="m"&gt;0&lt;/span&gt;

- post distribution by pillar:
&lt;span class="m"&gt;92&lt;/span&gt; article
&lt;span class="m"&gt;88&lt;/span&gt; challenge
&lt;span class="m"&gt;4&lt;/span&gt; guest
&lt;span class="m"&gt;47&lt;/span&gt; news
&lt;span class="m"&gt;3&lt;/span&gt; news
&lt;span class="m"&gt;5&lt;/span&gt; special
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="#top"&gt;Go to top&lt;/a&gt;&lt;/p&gt;</content><category term="data analysis"></category><category term="data visualization"></category><category term="anniversary"></category><category term="special"></category><category term="Twitter"></category><category term="Github"></category><category term="Pelican"></category></entry><entry><title>PyBites 1 Year Special - Taking Python Code Challenges to the Next Level ‚Ä¶</title><link href="https://pybit.es/special-birthday-new-platform.html" rel="alternate"></link><published>2017-12-20T11:14:00+01:00</published><updated>2017-12-20T11:14:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-20:/special-birthday-new-platform.html</id><summary type="html">&lt;p&gt;A milestone: yesterday, 19th of December 2017, we celebrated our first PyBirthday! That is, PyBites is one year old! We are proud of what we have achieved so far and we are ignited to continue our course of learning and teaching Python with our growing community. A bit of reflection followed by a big announcement! Read on ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;A milestone: yesterday, 19th of December 2017, we celebrated our first PyBirthday! That is, PyBites is one year old! We are proud of what we have achieved so far and we are ignited to continue our course of learning and teaching Python with our growing community. A bit of reflection followed by a big announcement! Read on ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We are so happy we decided a year ago to bite the bullet, from the simplest of &lt;code&gt;inits&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-humble-beginnings.png"&gt;&lt;/p&gt;
&lt;p&gt;To week 6:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-after-6weeks.png"&gt;&lt;/p&gt;
&lt;p&gt;To nowadays:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-site-nowadays.png"&gt;&lt;/p&gt;
&lt;p&gt;We‚Äôve come a long way. But to us it feels like we're just starting out.&lt;/p&gt;
&lt;p&gt;Some valuable lessons we learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get started. Drop perfectionism. The timing ain‚Äôt never right (Tim Ferriss). If it was not for accepting a ok‚Äôish first design and battling imposter syndrome, we would still be merely talking over beers. You have to take action. Related: &lt;a href="https://pybit.es/special-building-pybites.html"&gt;Behind the Scenes of PyBites&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related to 1. - don‚Äôt plan too much in advance. Design happens when building things, when the rubber hits the road, when you get actual readers! For example, our code challenges have become one of our corner stones, but the idea only struck when we challenged each other one day to code a simple date parsing script, and we reviewed each other‚Äôs code. We learned a ton! We had this Fight Club moment of "man we should do this again" (nobody got hurt!)&lt;/p&gt;
&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-discover-codechallenge-moment.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you get momentum it becomes easier. A lot of weekly effort goes in, that won‚Äôt change as that's what it means to have a project you‚Äôre passionate about. However once you find your style and structure it becomes easier and more fun.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building a community around your project is one of the best things you can possibly do. We get to meet awesome Pythonistas every week sharing their ideas and experience. We learn from them and they learn from us. Invaluable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having to explain technical aspects by article or code challenge can be hard. You learn. Having your piece being criticised on Reddit might suck, but you grow. Committing and &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;finishing a #100DaysOfCode&lt;/a&gt; challenge can be insane, but the amount of deliberate practice counts and made us better coders (more about this &lt;a href="https://talkpython.fm/episodes/show/140/level-up-your-python-with-100daysofcode-challenge"&gt;on Task Python episode 140&lt;/a&gt;). Talking before a group of people can be scary, but you evolve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try new things! We recently launched &lt;a href="https://www.udemy.com/python-flask-for-beginners/?couponCode=PYBITES"&gt;our first online course on learning Python Flask&lt;/a&gt;. It was nothing we expected we'd ever do but we had the idea, sucked up the nerves and gave it a go - to great success! In everything we do, if there was ever a regret to be had it'd be not trying something new.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consistently writing on a blog (this should be entry #238!) you improve this important skill. As with coding, less is more, expressing things more succinctly is both elegant and more efficient.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Our Big Announcement for today&lt;/h3&gt;
&lt;p&gt;We have been a bit quiet with articles, but for a good reason. We have been developing our code challenge platform! We‚Äôve been eager to share it but we really wanted to get as much in before the 1 year mark. It‚Äôs out now and free to use:&lt;/p&gt;
&lt;h4&gt;PyBites Code Challenge Platform&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://codechalleng.es/"&gt;https://codechalleng.es/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;(yes we like &lt;code&gt;.es&lt;/code&gt; domain names)&lt;/p&gt;
&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-new-code-platform-bites-of-py.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-new-code-platform-challenge-index.png"&gt;&lt;/p&gt;
&lt;p&gt;Since we confirmed interest on HN (&lt;a href="https://news.ycombinator.com/item?id=13274876"&gt;here&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13274876"&gt;here&lt;/a&gt;) we developed 46 Python challenges on our blog. Our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt; gets forked every week by an increasing amount of developers all wanting to learn Python. We endorsed a proper git flow from day 1, but it‚Äôs not always an easy add-on for newer developers. &lt;/p&gt;
&lt;p&gt;We took this feedback to heart and integrated the whole process into our new platform. You can login with Github and work on our blog challenges. It gives you all the git commands you need to create your branch and PR your work.&lt;/p&gt;
&lt;h4&gt;Grow by PR&lt;/h4&gt;
&lt;p&gt;Why should you PR your work anyways?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is an opportunity to learn. We honestly don‚Äôt have time to review all the code, we‚Äôre getting an increasing amount of PRs, but we do keep an eye out, and we know our community does too!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVs are so ‚Ä¶ - OK we might get into trouble here, but the fact is that recruiters of developers/coders look at your Github. We offer a unique opportunity to grow your online portfolio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As we merge in all (valid) PRs our Challenges repo gets enriched with a lot of different solutions. People pull those in when working on their solution. What you submit might help somebody else, you might be teaching other developers in need.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We feature cool submissions in &lt;a href="https://pybit.es/pages/challenges.html"&gt;our review posts&lt;/a&gt;, but &lt;a href="https://pybit.es/pages/guests.html"&gt;featured guests posts&lt;/a&gt; are another opportunity to show your work, check out &lt;a href="https://pybit.es/guest-telegram-python-chatbot.html"&gt;this chatbot submission&lt;/a&gt; for example!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although we recommend you use the platform for any future challenge work you are of course totally free to use your existing workflow.&lt;/p&gt;
&lt;h4&gt;Code in the comfort of your browser - Bites of Py&lt;/h4&gt;
&lt;p&gt;But that‚Äôs not all, we started a whole new line of Challenges we call "&lt;strong&gt;Bites of Py&lt;/strong&gt;". We were always fascinated how one could practice coding in the browser. No environment setup‚Ä¶ code anywhere! So we wanted this for PyBites too.&lt;/p&gt;
&lt;p&gt;So we hacked at it for a couple of weeks coming up with a prototype. We left the &lt;a href="https://codechalleng.es/bites/1/"&gt;first working bite in&lt;/a&gt; just as a testimonial to this &lt;em&gt;Eureka&lt;/em&gt; moment (in case you're wondering if it's an incomplete one lol).&lt;/p&gt;
&lt;p&gt;It‚Äôs running with 5 bites for free consumption. If you‚Äôre reading this and had nothing but watching Netflix planned for tonight, skip the TV, take a Bite of Py, and let us know what you think. &lt;/p&gt;
&lt;p&gt;We‚Äôre curious how you experience them and what you think we should add. &lt;/p&gt;
&lt;p&gt;We are working on a whole series of them which should jumpstart a subscription service in March next year. You can subscribe on the site. The first Pythonistas in get more for less (and earlier).&lt;/p&gt;
&lt;h3&gt;What‚Äôs next - part II&lt;/h3&gt;
&lt;p&gt;Other than that we‚Äôre going to enjoy a serious Xmas break and we hope you get time off too to relax and recharge. &lt;/p&gt;
&lt;p&gt;Next? Apart from ongoing improvements to our platform and hosting more code challenges, we will keep delivering news, articles and projects and sharing our learning. Stay tuned ‚Ä¶ &lt;/p&gt;
&lt;h3&gt;One more thing&lt;/h3&gt;
&lt;p&gt;We would not be PyBites if we didn't add a little anniversary challenge. Can you quantify our year‚Äôs worth of work? That‚Äôs right, show us what we‚Äôve accomplished this year using data of your choice (Twitter, Github, blog, other). We‚Äôd love you to practice with your favorite data visualizations. We're pushing the challenge writeup to the blog and platform later this week ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-we-challenge-you.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pybites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Happy&lt;/span&gt; &lt;span class="n"&gt;Birthday&lt;/span&gt; &lt;span class="n"&gt;fellas&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image alt text" src="https://pybit.es/images/pb1y-pybites-birthday-cake.png"&gt;&lt;/p&gt;</content><category term="milestone"></category><category term="code challenges"></category><category term="platform"></category><category term="bites of py"></category><category term="python"></category><category term="community"></category><category term="1year"></category><category term="learning"></category></entry><entry><title>Twitter Digest 2017 Week 50</title><link href="https://pybit.es/twitter_digest_201750.html" rel="alternate"></link><published>2017-12-17T22:00:00+01:00</published><updated>2017-12-17T22:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-17:/twitter_digest_201750.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Congratulations again Rodolfo!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thank you so so much &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; ! Best book gift of the year! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Bots" target="_blank"&gt;#Bots&lt;/a&gt; &lt;a href="https://twitter.com/search/#DisAtBot" target="_blank"&gt;#DisAtBot&lt;/a&gt; Cc. &lt;a href="https://twitter.com/@bbelderbos‚Ä¶" target="_blank"&gt;@bbelderbos‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/WNqimVXO9Q" title="https://t.co/WNqimVXO9Q" target="_blank"&gt;https://t.co/WNqimVXO9Q&lt;/a&gt;&lt;/p&gt;‚Äî Rodolfo Ferro (@FerroRodolfo) &lt;a href="https://twitter.com/FerroRodolfo/status/941797087552909312" data-datetime="2017-12-15T22:28:18+00:00"&gt;December 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
Better secure your tickets for 2018!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;We have sold ~70% of early bird tickets for &lt;a href="https://twitter.com/@pycon." target="_blank"&gt;@pycon.&lt;/a&gt; If you wish to take advantage of the reduced rate, register soo‚Ä¶ &lt;a href="https://t.co/Aqo4cHEHuO" title="https://t.co/Aqo4cHEHuO" target="_blank"&gt;https://t.co/Aqo4cHEHuO&lt;/a&gt;&lt;/p&gt;‚Äî Ewa Jodlowska (@ewa_jodlowska) &lt;a href="https://twitter.com/ewa_jodlowska/status/942028698198380544" data-datetime="2017-12-16T13:48:38+00:00"&gt;December 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Yep. Experience just helps you know what to Google, whether to use what you find, and what to keep handy for later‚Ä¶ &lt;a href="https://t.co/si8fsNAhg4" title="https://t.co/si8fsNAhg4" target="_blank"&gt;https://t.co/si8fsNAhg4&lt;/a&gt;&lt;/p&gt;‚Äî Data Science Renee (@BecomingDataSci) &lt;a href="https://twitter.com/BecomingDataSci/status/941862926713020422" data-datetime="2017-12-16T02:49:55+00:00"&gt;December 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ageitgey:" target="_blank"&gt;@ageitgey:&lt;/a&gt; New article: How to break a CAPTCHA system in 15 minutes with Machine Learning! &lt;a href="https://t.co/3RXR2ssb2B" title="https://t.co/3RXR2ssb2B" target="_blank"&gt;https://t.co/3RXR2ssb2B&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/940941808800018433" data-datetime="2017-12-13T13:49:43+00:00"&gt;December 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üêçüì∞ Looking for block comments in Python? Check out this brand new article I just posted: &lt;a href="https://t.co/NYXwQDMfUy" title="https://t.co/NYXwQDMfUy" target="_blank"&gt;https://t.co/NYXwQDMfUy&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/940592419665580032" data-datetime="2017-12-12T14:41:22+00:00"&gt;December 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@googleresearch:" target="_blank"&gt;@googleresearch:&lt;/a&gt; In order to make Generative Adversarial Networks (GANs) easier to experiment with, we‚Äôve open sourced TFGAN, a lightwei‚Ä¶&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/940734764289613825" data-datetime="2017-12-13T00:07:00+00:00"&gt;December 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePracticalDev:" target="_blank"&gt;@ThePracticalDev:&lt;/a&gt; 7 Ranks of Coderhood: Coder, Programmer, Computer Scientist, Developer, Engineer, Architect { author: &lt;a href="https://twitter.com/@lpasqualis" target="_blank"&gt;@lpasqualis&lt;/a&gt; } ht‚Ä¶&lt;/p&gt;‚Äî The Practical Dev (@ThePracticalDev) &lt;a href="https://twitter.com/ThePracticalDev/status/942083903392755714" data-datetime="2017-12-16T17:28:00+00:00"&gt;December 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accoun‚Ä¶ &lt;a href="https://t.co/CJAW5KlCDu" title="https://t.co/CJAW5KlCDu" target="_blank"&gt;https://t.co/CJAW5KlCDu&lt;/a&gt;&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/941729771423260673" data-datetime="2017-12-15T18:00:48+00:00"&gt;December 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; news: üòÄ &lt;a href="https://twitter.com/@gvanrossum" target="_blank"&gt;@gvanrossum&lt;/a&gt; just pronounced that dicts are now guaranteed to retain insertion order. This is the end of a long journey.&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/941709626545864704" data-datetime="2017-12-15T16:40:45+00:00"&gt;December 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The Flask Mega-Tutorial Part II: Templates &lt;a href="https://t.co/2b59mtIJi3" title="https://t.co/2b59mtIJi3" target="_blank"&gt;https://t.co/2b59mtIJi3&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/940620027035664384" data-datetime="2017-12-12T16:31:04+00:00"&gt;December 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Regex was taking 5 days to run. So I built a tool that did it in 15 minutes. &lt;a href="https://t.co/SBfeEgGdg0" title="https://t.co/SBfeEgGdg0" target="_blank"&gt;https://t.co/SBfeEgGdg0&lt;/a&gt;&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/940402706820329474" data-datetime="2017-12-12T02:07:31+00:00"&gt;December 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Friday can be more fun and festive by learning about f-strings. üòé One great resource is my &lt;a href="https://twitter.com/search/#pyconca2017" target="_blank"&gt;#pyconca2017&lt;/a&gt; closing ke‚Ä¶ &lt;a href="https://t.co/fcwR342v6g" title="https://t.co/fcwR342v6g" target="_blank"&gt;https://t.co/fcwR342v6g&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/941868809819787264" data-datetime="2017-12-16T03:13:17+00:00"&gt;December 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
GO BOB!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building a Simple Web App with Bottle, SQLAlchemy, and the Twitter API &amp;gt;&amp;gt; &lt;a href="https://t.co/fhNvbI8tt0" title="https://t.co/fhNvbI8tt0" target="_blank"&gt;https://t.co/fhNvbI8tt0&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#BottlePy" target="_blank"&gt;#BottlePy&lt;/a&gt; &lt;a href="https://twitter.com/search/#webdev" target="_blank"&gt;#webdev&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/940222726626623489" data-datetime="2017-12-11T14:12:21+00:00"&gt;December 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build your very own machine learning model in Python with Scikit-learn (tutorial by &lt;a href="https://twitter.com/@MichMorales)" target="_blank"&gt;@MichMorales)&lt;/a&gt; &lt;a href="https://t.co/6V9ydbCZgB" title="https://t.co/6V9ydbCZgB" target="_blank"&gt;https://t.co/6V9ydbCZgB&lt;/a&gt;&lt;/p&gt;‚Äî DigitalOcean (@digitalocean) &lt;a href="https://twitter.com/digitalocean/status/941851624770867200" data-datetime="2017-12-16T02:05:00+00:00"&gt;December 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Introducing PrettyPrinter for Python &lt;a href="https://t.co/k3ecQyXDrN" title="https://t.co/k3ecQyXDrN" target="_blank"&gt;https://t.co/k3ecQyXDrN&lt;/a&gt; &lt;a href="https://twitter.com/search/#haskell" target="_blank"&gt;#haskell&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/942142929027547136" data-datetime="2017-12-16T21:22:33+00:00"&gt;December 16, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="challenges"></category><category term="PyCon"></category><category term="motivation"></category><category term="machine learning"></category><category term="comments"></category><category term="TensorFlow"></category><category term="code"></category><category term="dicts"></category><category term="Flask"></category><category term="Regex"></category><category term="F-strings"></category><category term="Bottle"></category><category term="SQLAlchemy"></category><category term="Twitter"></category><category term="Scikit-learn"></category><category term="PrettyPrinter"></category></entry><entry><title>Code Challenge 46 - Add Continuous Integration (CI) to Your Project</title><link href="https://pybit.es/codechallenge46.html" rel="alternate"></link><published>2017-12-11T12:00:00+01:00</published><updated>2017-12-11T12:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-11:/codechallenge46.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, becoming a Python developer is partly about knowing your tools. Managing your environment, testing and continuous integration are unmissable skills when you start working on bigger projects with a team. So we decided to dedicate a code challenge to deployment. Take an existing projects or make a demo app from scratch, the goal is to build an automated pipeline. Will you be the next guy or girl at work receiving kudos for setting up a Jenkins server? Have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, becoming a Python developer is partly about knowing your tools. Managing your environment, testing and continuous integration are unmissable skills when you start working on bigger projects with a team. So we decided to dedicate a code challenge to deployment. &lt;/p&gt;
&lt;p&gt;Take an existing projects or make a demo app from scratch, the goal is to build an automated pipeline. Will you be the next guy or girl at work receiving kudos for setting up a Jenkins server? Have fun!&lt;/p&gt;
&lt;h2&gt;CI Defined&lt;/h2&gt;
&lt;p&gt;CI is great to streamline and automate deployment of your software, saving time and quickly finding regression bugs. It enforces quality of your software. For a broader definition check out Martin Fowler's &lt;a href="https://martinfowler.com/articles/continuousIntegration.html"&gt;Continuous Integration article&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. Many teams find that this approach leads to significantly reduced integration problems and allows a team to develop cohesive software more rapidly. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose one of your existing projects or start a small demo project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have tests, good move on to the next step, if not add them now - &lt;a href="http://docs.python-guide.org/en/latest/writing/tests/"&gt;overview testing&lt;/a&gt; / if you go with pytest consider taking &lt;a href="https://pybit.es/codechallenge39.html"&gt;Code Challenge 39 - Writing Tests With Pytest&lt;/a&gt; too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose a tool to automate your build. We played a bit with &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt; and it's nice. Alternatively there is &lt;a href="https://semaphoreci.com/"&gt;Semaphore&lt;/a&gt; or what about &lt;a href="https://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;? We want you to be free. You can check out the &lt;a href="http://docs.python-guide.org/en/latest/scenarios/ci/"&gt;Hitchhiker's guide&lt;/a&gt; or Full Stack Python's &lt;a href="https://www.fullstackpython.com/continuous-integration.html"&gt;CI&lt;/a&gt; and &lt;a href="https://www.fullstackpython.com/jenkins.html"&gt;Jenkins&lt;/a&gt; reference pages and choose the tool you feel most comfortable with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open a PR against our repo with a &lt;em&gt;username&lt;/em&gt;/README.md file detailing what you did, ideally with a screenshot of an automated build. We are happy to share it with our community &lt;a href="https://pybit.es/pages/challenges.html"&gt;in our monthly review post&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus: Rob van der Leek (SIG) wrote a great article: &lt;a href="https://medium.com/bettercode/how-to-build-a-modern-ci-cd-pipeline-5faa01891a5b"&gt;How to build a modern CI/CD pipeline&lt;/a&gt;. You get bonus karma if you additionally use Docker and Better Code Hub.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Good luck and if any issues or brainstorming, there is ...&lt;/p&gt;
&lt;h2&gt;Pybites Slack&lt;/h2&gt;
&lt;p&gt;You like these challenges? We have published &lt;a href="https://github.com/pybites/challenges"&gt;quite a few&lt;/a&gt; and we're not planning to stop anytime soon!&lt;/p&gt;
&lt;p&gt;You really like them and plan on submitting (PR'ing) your work? Then consider joining our private Slack channel sending us &lt;a href="mailto:pybitesblog@gmail.com"&gt;an email&lt;/a&gt;. This way you get the unique opportunity to learn from other passionate Pythonistas and share your experience.&lt;/p&gt;
&lt;h2&gt;Get Credit&lt;/h2&gt;
&lt;p&gt;As always you can PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. We will include it in our review post. Our PR template also lets you reflect a bit on your learning and provide some feedback how we can keep this interesting for you. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are working on a Code Challenge Platform to facilitate this process, stay tuned ...&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;About PyBites Code Challenges&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python &lt;a href="https://pybit.es/learn-by-doing.html"&gt;through practical exercises&lt;/a&gt;. We are almost a year in now and the progress we've seen in our Python learning, as well as that of our growing community, is absolutely amazing! Besides, learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;. If you have a cool idea for a challenge please open &lt;a href="https://github.com/pybites/challenges/issues"&gt;an issues against our Challenges repo&lt;/a&gt; and we can discuss it there. &lt;/p&gt;
&lt;p&gt;Thanks for your support.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="CI"></category><category term="Jenkins"></category><category term="Heroku"></category><category term="Travis"></category><category term="Semaphore"></category><category term="automation"></category><category term="deployment"></category><category term="Docker"></category><category term="Better Code Hub"></category><category term="SIG"></category></entry><entry><title>DisAtBot - How I Built a Chatbot With Telegram And Python</title><link href="https://pybit.es/guest-telegram-python-chatbot.html" rel="alternate"></link><published>2017-12-10T23:30:00+01:00</published><updated>2017-12-10T23:30:00+01:00</updated><author><name>Rodolfo Ferro</name></author><id>tag:pybit.es,2017-12-10:/guest-telegram-python-chatbot.html</id><summary type="html">&lt;p&gt;Rodolfo recently joined our &lt;a href="https://pybit.es/pages/challenges.html"&gt;Code Challenges&lt;/a&gt; and built &lt;em&gt;Disaster Attention Bot (DisAtBot)&lt;/em&gt;, a chatbot that helps people affected by natural disasters. In this article he shows how he built this bot with Telegram and (of course) Python. Show him some love because who knows, this could be a life saver (pun intended)! We are delighted to have him show this interesting project he submitted for &lt;a href="https://pybit.es/codechallenge43.html"&gt;Code Challenge 43&lt;/a&gt; which earned him a book on chatbots. /Rod please share ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;Rodolfo recently joined our &lt;a href="https://pybit.es/pages/challenges.html"&gt;Code Challenges&lt;/a&gt; and built &lt;em&gt;Disaster Attention Bot (DisAtBot)&lt;/em&gt;, a chatbot that helps people affected by natural disasters. In this article he shows how he built this bot with Telegram and (of course) Python. Show him some love because who knows, this could be a life saver (pun intended)! We are delighted to have him show this interesting project he submitted for &lt;a href="https://pybit.es/codechallenge43.html"&gt;Code Challenge 43&lt;/a&gt; which earned him a book on chatbots. /Rod please share ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"¬øQui√©n convoc√≥ a tanto muchacho, de d√≥nde sali√≥ tanto voluntario, c√≥mo fue que la sangre sobr√≥ en los hospitales, qui√©n organiz√≥ las brigadas que dirigieron el tr√°nsito de veh√≠culos y de peatones por toda la zona afectada? No hubo ninguna convocatoria, no se hizo ning√∫n llamado y todos acudieron"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"El jueves negro que cambi√≥ a M√©xico"&lt;/strong&gt;
‚Äì Emilio Viale, 1985.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;A bit of context...&lt;/h2&gt;
&lt;p&gt;Since September 19th, 2017 &lt;a href="https://en.wikipedia.org/wiki/2017_Central_Mexico_earthquake"&gt;Mexico has been hit by several earthquakes&lt;/a&gt; (&lt;a href="https://www.theguardian.com/world/live/2017/sep/20/mexico-city-earthquake-dozens-dead-powerful-quake-live-updates"&gt;The Guardian&lt;/a&gt;, &lt;a href="http://edition.cnn.com/2017/09/19/americas/mexico-earthquake/index.html"&gt;CNN&lt;/a&gt;). This made me wonder how we could better handle the reporting of damaged zones, people buried under the rubble of buildings, injured people in need of medical attention and other situations.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.verificado19s.org"&gt;Verificado 19s&lt;/a&gt; was an immediate solution to follow up reports from social media and visualize the info on an online map. This required a lot of real-time (24/7) monitoring of posts on social media from people that were located in the effected areas. And that data was updated every ~10 minutes.&lt;/p&gt;
&lt;p&gt;So I started thinking about a way to optimize this process for future situations, not only for earthquakes, but for disaster situations in general. This incentivized me to work on this bot for Pybites &lt;a href="https://pybit.es/codechallenge43.html"&gt;Code Challenge 43 - Build a Chatbot Using Python&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;So DisAtBot was born&lt;/h2&gt;
&lt;p&gt;DisAtBot automates the process of reporting incidents via messaging platforms, such as Telegram, Facebook Messenger, Twitter, etc. At this time it only supports Telegram, but I hope to expand it to other social media. If you'd like to contribute, see the Contribute section at the end.&lt;/p&gt;
&lt;p&gt;You can find DisAtBot at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Telegram: &lt;a href="https://t.me/DisAtBot"&gt;https://t.me/DisAtBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The official repo: &lt;a href="https://github.com/RodolfoFerro/DisAtBot"&gt;https://github.com/RodolfoFerro/DisAtBot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea was to have a simple flow that allowed disaster reporting to be quick and easy. The general process of DisAtBot is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img alt="disatbot flow" src="https://pybit.es/images/disatbot-flow.png"&gt;&lt;/p&gt;
&lt;p&gt;The idea is that any user can interact with the bot by selecting options from button menus in the conversation. This greatly speeds up incidents reporting.&lt;/p&gt;
&lt;p&gt;The next step would be opening a ticket which will be stored in a database, for the corresponding government instance/public organization/NGO/etc. to validate and send assistance. When no more help is needed, or the situation is under control, the ticket is closed.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First clone &lt;a href="https://github.com/RodolfoFerro/DisAtBot"&gt;the repo&lt;/a&gt;. I used Python 3.6 and the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://geopandas.org/"&gt;geopandas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://geocoder.readthedocs.io/"&gt;geocoder&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/maps/documentation/"&gt;googlemaps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://geojson.io/"&gt;geojsonio&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://shapely.readthedocs.io/en/latest/"&gt;Shapely&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://python-telegram-bot.org/"&gt;python-telegram-bot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To install all dependencies create &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;a virtual env&lt;/a&gt; and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then cd into the scripts folder and run the bot as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python DisAtBot.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;The focus of the initial version was the creation of menu buttons for an easy interaction with the user. The second ‚Äì&lt;em&gt;and main&lt;/em&gt;‚Äì issue addressed was the conversation handler. A &lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine"&gt;finite state machine&lt;/a&gt; was needed to preserve the desired flow and the responses for each state.&lt;/p&gt;
&lt;p&gt;I won‚Äôt go too deep into the explanation, but the code below will show how I tackled this.&lt;/p&gt;
&lt;p&gt;First of all, Telegram‚Äôs library has several methods to create button menus for user responses during the conversation flow. The idea is to create a Keyboard Markup to handle responses through buttons. This can either be Inline (buttons will appear in the conversation window) or as a Reply Keyboard (buttons will be displayed under the textbox to write messages).&lt;/p&gt;
&lt;p&gt;An example can be seen in the menu function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Main menu function.&lt;/span&gt;
&lt;span class="sd"&gt;    This will display the options from the main menu.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Create buttons to select language:&lt;/span&gt;
    &lt;span class="n"&gt;keyboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;send_report&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LANG&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;view_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LANG&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;view_faq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LANG&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;view_about&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LANG&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;

    &lt;span class="n"&gt;reply_markup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ReplyKeyboardMarkup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;one_time_keyboard&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;resize_keyboard&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_user&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Menu command requested by {}.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main_menu&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LANG&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reply_markup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reply_markup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SET_STAT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the &lt;code&gt;keyboard&lt;/code&gt; variable is a list that contains the four buttons to be displayed. The layout can be set by nesting lists inside. In this case the &lt;strong&gt;Report&lt;/strong&gt; and &lt;strong&gt;Map&lt;/strong&gt; buttons are in the first row, while &lt;strong&gt;FAQ&lt;/strong&gt; and &lt;strong&gt;About&lt;/strong&gt; buttons are in the second row. This looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="disatbot menu" src="https://pybit.es/images/disatbot-menu.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Continuing with the code, a &lt;code&gt;ReplyMarkup&lt;/code&gt; is needed to handle the button responses. It specifies the layout of the menu: if only one menu is displayed, if it needs to be resized, etc. &lt;/p&gt;
&lt;p&gt;A logger is used for the bot, and the &lt;code&gt;update.message.reply(...)&lt;/code&gt; function is used to update the displayed text according to the response from the user. The &lt;code&gt;SET_STAT&lt;/code&gt; variable returned in this function is a (predefined) integer to return the state at that time, and to follow the flow.&lt;/p&gt;
&lt;p&gt;We now understand the menu creation and handling. The reason of using buttons is that we want a quick interaction because the bot is used in an emergency situation.&lt;/p&gt;
&lt;p&gt;The conversation handler - Telegram's &lt;code&gt;ConversationHandler&lt;/code&gt; - takes care of setting the state or step of the flow we're currently at, the finite state machine I mentioned earlier. Note that each state also needs to handle its respective information (button responses, etc.)&lt;/p&gt;
&lt;p&gt;This code shows the conversation handler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Main function.&lt;/span&gt;
&lt;span class="sd"&gt;    This function handles the conversation flow by setting&lt;/span&gt;
&lt;span class="sd"&gt;    states on each step of the flow. Each state has its own&lt;/span&gt;
&lt;span class="sd"&gt;    handler for the interaction with the user.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;LANG&lt;/span&gt;
    &lt;span class="c1"&gt;# Create the EventHandler and pass it your bot&amp;#39;s token.&lt;/span&gt;
    &lt;span class="n"&gt;updater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;telegram_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Get the dispatcher to register handlers:&lt;/span&gt;
    &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updater&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;

    &lt;span class="c1"&gt;# Add conversation handler with predefined states:&lt;/span&gt;
    &lt;span class="n"&gt;conv_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConversationHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CommandHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;

        &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;SET_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RegexHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^(ES|EN)$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_lang&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;

            &lt;span class="n"&gt;MENU&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CommandHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;menu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;

            &lt;span class="n"&gt;SET_STAT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RegexHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="s1"&gt;&amp;#39;^({}|{}|{}|{})$&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;send_report&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;view_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="n"&gt;view_faq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;view_about&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                        &lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="n"&gt;RegexHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="s1"&gt;&amp;#39;^({}|{}|{}|{})$&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;send_report&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;view_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                            &lt;span class="n"&gt;view_faq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;view_about&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                        &lt;span class="n"&gt;set_state&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;

            &lt;span class="n"&gt;LOCATION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MessageHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="n"&gt;CommandHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;menu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="n"&gt;fallbacks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CommandHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                   &lt;span class="n"&gt;CommandHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conv_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Log all errors:&lt;/span&gt;
    &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_error_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Start DisAtBot:&lt;/span&gt;
    &lt;span class="n"&gt;updater&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_polling&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Run the bot until the user presses Ctrl-C or the process&lt;/span&gt;
    &lt;span class="c1"&gt;# receives SIGINT, SIGTERM or SIGABRT:&lt;/span&gt;
    &lt;span class="n"&gt;updater&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It might seem a bit confusing at first, but it boils down to:
- The conversation handler has the states of the flow.
- It also has entry points (such as the &lt;code&gt;start&lt;/code&gt; function), and fallbacks (such as the &lt;code&gt;cancel&lt;/code&gt; and &lt;code&gt;help&lt;/code&gt; functions).
- It also contains some error handlers.
- A global &lt;code&gt;LANG&lt;/code&gt; variable is used, since the implementation - I forgot to mention - support interacting in English or Spanish! To support this I created dictionaries for each interaction in both languages.&lt;/p&gt;
&lt;p&gt;If you want to check the full code of this bot, check out &lt;a href="https://github.com/RodolfoFerro/DisAtBot/tree/master/scripts"&gt;the scripts directory&lt;/a&gt; where you'll find the main script and the language dictionaries.&lt;/p&gt;
&lt;p&gt;Some other features implemented are geolocation handling and &lt;code&gt;About&lt;/code&gt; / &lt;code&gt;FAQ&lt;/code&gt; sections. But the best way to know about this project is by watching it in action (for a live demo go to 8.30):&lt;/p&gt;
&lt;iframe src="https://drive.google.com/file/d/1dOvF17AYKiic85HmzMjnK5Qza2Tg0PNw/preview" width="800" height="480"&gt;&lt;/iframe&gt;

&lt;h2&gt;Future work&lt;/h2&gt;
&lt;p&gt;For future development I am thinking about adding a map. The system already creates a GeoJSON file from the locations acquired. &lt;/p&gt;
&lt;p&gt;As mentioned I am considering expanding this to other platforms like Facebook Messenger and Twitter. Another good thing to add would be a website explaining the main use cases of the bot, maybe a wiki ‚Äì&lt;em&gt;kinda&lt;/em&gt;‚Äì site? &lt;/p&gt;
&lt;p&gt;If you have any other ideas or suggestions feel free to &lt;a href="https://twitter.com/FerroRodolfo"&gt;contact me&lt;/a&gt; or:&lt;/p&gt;
&lt;h2&gt;Contribute&lt;/h2&gt;
&lt;p&gt;If you're interested in contributing to this project, feel free to take a look at the repo's &lt;a href="https://github.com/RodolfoFerro/DisAtBot/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; file. I'd be very pleased if this project would grow out to something used in real life to alleviate the dramatic consequences of natural disaster, which always seem to hit when least expected.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;&lt;a href="pages/guests.html#rodolfoferro"&gt;Rodolfo&lt;/a&gt;&lt;/p&gt;</content><category term="bots"></category><category term="code challenge"></category><category term="guest"></category><category term="DisAtBot"></category><category term="chatbots"></category><category term="opensource"></category><category term="Telegram"></category><category term="Mexico"></category></entry><entry><title>Twitter Digest 2017 Week 49</title><link href="https://pybit.es/twitter_digest_201749.html" rel="alternate"></link><published>2017-12-10T22:47:00+01:00</published><updated>2017-12-10T22:47:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-10:/twitter_digest_201749.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I just published ‚ÄúOverview of Python Data Visualization Tools‚Äù &lt;a href="https://t.co/iROcid8CfA" title="https://t.co/iROcid8CfA" target="_blank"&gt;https://t.co/iROcid8CfA&lt;/a&gt;&lt;/p&gt;‚Äî Elena Kirzhner (@ekirzhner) &lt;a href="https://twitter.com/ekirzhner/status/938540722910826496" data-datetime="2017-12-06T22:48:40+00:00"&gt;December 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;As you begin your holiday shopping, don't forget to shop with &lt;a href="https://t.co/MxS9uxLccT" title="https://t.co/MxS9uxLccT" target="_blank"&gt;https://t.co/MxS9uxLccT&lt;/a&gt; and set your charity to‚Ä¶ &lt;a href="https://t.co/VI5TsRKJGf" title="https://t.co/VI5TsRKJGf" target="_blank"&gt;https://t.co/VI5TsRKJGf&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/939509956138614786" data-datetime="2017-12-09T15:00:03+00:00"&gt;December 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Article on pandas and &lt;a href="https://twitter.com/@wesmckinn" target="_blank"&gt;@wesmckinn&lt;/a&gt; &lt;a href="https://t.co/eWPRejUJMw" title="https://t.co/eWPRejUJMw" target="_blank"&gt;https://t.co/eWPRejUJMw&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/939283373142564866" data-datetime="2017-12-08T23:59:41+00:00"&gt;December 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@anthonypjshaw:" target="_blank"&gt;@anthonypjshaw:&lt;/a&gt; Looks like &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.7 will be getting attrs-style data classes &lt;a href="https://t.co/f0WZ2WOgUv" title="https://t.co/f0WZ2WOgUv" target="_blank"&gt;https://t.co/f0WZ2WOgUv&lt;/a&gt; "mutable namedtuples with defaul‚Ä¶&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/938978828944162816" data-datetime="2017-12-08T03:49:32+00:00"&gt;December 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to build amazing image filters with Python‚Äî Median filter üì∑ , Sobel filter ‚ö´Ô∏è ‚ö™Ô∏è { author: &lt;a href="https://twitter.com/@enzoftware" target="_blank"&gt;@enzoftware&lt;/a&gt; } &lt;a href="https://t.co/6i3NYA3XJk" title="https://t.co/6i3NYA3XJk" target="_blank"&gt;https://t.co/6i3NYA3XJk&lt;/a&gt;&lt;/p&gt;‚Äî The Practical Dev (@ThePracticalDev) &lt;a href="https://twitter.com/ThePracticalDev/status/939615894296293381" data-datetime="2017-12-09T22:01:01+00:00"&gt;December 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Dealing with datetimes like a pro in Python &lt;a href="https://t.co/KqtrFW97ni" title="https://t.co/KqtrFW97ni" target="_blank"&gt;https://t.co/KqtrFW97ni&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/939620771151806464" data-datetime="2017-12-09T22:20:23+00:00"&gt;December 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@joshua_e_k:" target="_blank"&gt;@joshua_e_k:&lt;/a&gt; Wrote a thing about forecasting &lt;a href="https://twitter.com/search/#bitcoin" target="_blank"&gt;#bitcoin&lt;/a&gt; prices using &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/0d87RCIUw4" title="https://t.co/0d87RCIUw4" target="_blank"&gt;https://t.co/0d87RCIUw4&lt;/a&gt; &lt;a href="https://twitter.com/search/#NotInvestmentAdvice" target="_blank"&gt;#NotInvestmentAdvice&lt;/a&gt; &lt;a href="https://t.co/T‚Ä¶" title="https://t.co/T‚Ä¶" target="_blank"&gt;https://t.co/T‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/939624702934376448" data-datetime="2017-12-09T22:36:01+00:00"&gt;December 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@scienmag:" target="_blank"&gt;@scienmag:&lt;/a&gt; Ballerina's movements mesmerizingly traced by algorithmically-generated geometries - Credits: Massahiko Sato / Euphrates &lt;a href="http‚Ä¶" title="http‚Ä¶" target="_blank"&gt;http‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/939525531849990145" data-datetime="2017-12-09T16:01:56+00:00"&gt;December 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@LorenaABarba:" target="_blank"&gt;@LorenaABarba:&lt;/a&gt; I published this video: "Jupyter demo 2‚ÄîPlaying with Strings" &lt;a href="https://t.co/UT5k6jvz8H" title="https://t.co/UT5k6jvz8H" target="_blank"&gt;https://t.co/UT5k6jvz8H&lt;/a&gt; See the full lesson as a &lt;a href="https://twitter.com/search/#Jupyter‚Ä¶" target="_blank"&gt;#Jupyter‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî David Beazley (@dabeaz) &lt;a href="https://twitter.com/dabeaz/status/939487241423945728" data-datetime="2017-12-09T13:29:47+00:00"&gt;December 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RedditPython:" target="_blank"&gt;@RedditPython:&lt;/a&gt; First Steps with GitPython &lt;a href="https://t.co/9g7DpWf7rL" title="https://t.co/9g7DpWf7rL" target="_blank"&gt;https://t.co/9g7DpWf7rL&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/939532892610363392" data-datetime="2017-12-09T16:31:11+00:00"&gt;December 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RetinaNet - An implementation of RetinaNet in PyTorch. &lt;a href="https://t.co/wuSIz4Sl6W" title="https://t.co/wuSIz4Sl6W" target="_blank"&gt;https://t.co/wuSIz4Sl6W&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/939027252376846336" data-datetime="2017-12-08T07:01:57+00:00"&gt;December 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Get introduced to Python data structures: learn more about data types and primitive as well as non-primitive data s‚Ä¶ &lt;a href="https://t.co/J8dChgLFoz" title="https://t.co/J8dChgLFoz" target="_blank"&gt;https://t.co/J8dChgLFoz&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/939244431089258496" data-datetime="2017-12-08T21:24:57+00:00"&gt;December 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python3" target="_blank"&gt;#Python3&lt;/a&gt; is coming. Still need to code in Python2? Use these 4 lines and your future self will thank you: from __f‚Ä¶ &lt;a href="https://t.co/wWjs0EEtxB" title="https://t.co/wWjs0EEtxB" target="_blank"&gt;https://t.co/wWjs0EEtxB&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/938317088183242752" data-datetime="2017-12-06T08:00:01+00:00"&gt;December 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@hynek:" target="_blank"&gt;@hynek:&lt;/a&gt; Your friendly reminder that beside its verbosity, `"".format()` is quite a bit slower than `"" % ()` and there‚Äôs nothing virtuou‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/939129994705494016" data-datetime="2017-12-08T13:50:13+00:00"&gt;December 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The joy of new iter-tools: Oddity &lt;a href="https://t.co/4xXigQ5wnp" title="https://t.co/4xXigQ5wnp" target="_blank"&gt;https://t.co/4xXigQ5wnp&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/939181073975664640" data-datetime="2017-12-08T17:13:11+00:00"&gt;December 08, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="data visualisation"></category><category term="code"></category><category term="Pandas"></category><category term="classes"></category><category term="PIL"></category><category term="date time"></category><category term="Bitcoin"></category><category term="data analysis"></category><category term="Jupyter"></category><category term="gitpython"></category><category term="Pytorch"></category><category term="data structures"></category><category term="strings"></category><category term="Itertools"></category></entry><entry><title>Code Challenge 41-44 Review - APIs, Regex, Chatbots and Marvel Data Analysis</title><link href="https://pybit.es/codechallenge41-44_review.html" rel="alternate"></link><published>2017-12-10T22:41:00+01:00</published><updated>2017-12-10T22:41:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-10:/codechallenge41-44_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge40.html"&gt;Daily Python Tip Part 1 - Make a Web App&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we‚Äôre reviewing four of our recent challenges! Challenges &lt;a href="https://pybit.es/codechallenge41.html"&gt;41&lt;/a&gt;, &lt;a href="https://pybit.es/codechallenge42.html"&gt;42&lt;/a&gt;, &lt;a href="https://pybit.es/codechallenge43.html"&gt;43&lt;/a&gt;, and &lt;a href="https://pybit.es/codechallenge44.html"&gt;44&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pybit.es/codechallenge41.html"&gt;Challenge 41: Daily Python Tip Part 2 - Build an API&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No submissions as of yet! Keep at it everyone!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We think we go with Flask, but GraphQL is on our TODO list too. We will post our PR here when done ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pybit.es/codechallenge42.html"&gt;Challenge 42: Mastering Regular Expressions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We provided you with a template containing the different matches you could make using Regex which most of you followed. Here are your submissions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/shalgrim"&gt;shalgrim&lt;/a&gt; had his first PyBites challenge &lt;a href="https://github.com/pybites/challenges/tree/community/42/shalgrim"&gt;here&lt;/a&gt;. Nice!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dseptem"&gt;dseptem&lt;/a&gt; forced himself to get this one done with assistance from our community. Really cool to see the assist! Check it out &lt;a href="https://github.com/pybites/challenges/tree/community/42/dseptem"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/gityob"&gt;bityob&lt;/a&gt; got his submitted &lt;a href="https://github.com/pybites/challenges/tree/community/42/bityob"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; submitted a solution (&lt;a href="https://github.com/pybites/challenges/tree/community/42/clamytoe"&gt;here&lt;/a&gt;) while also helping others with their regex woes - thanks mate!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/mridubhatnagar"&gt;mridubhatnagar&lt;/a&gt; submitted yet another &lt;a href="https://github.com/pybites/challenges/tree/community/42/mridubhatnagar"&gt;great solution&lt;/a&gt;. Thanks for your continued involvement!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pybit.es/codechallenge43.html"&gt;Challenge 43: Build a Chatbot Using Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We were &lt;em&gt;so&lt;/em&gt; impressed with the submissions for this one! Congratulations to &lt;a href="https://twitter.com/FerroRodolfo"&gt;Rodolfo Ferro&lt;/a&gt; for his impressive ‚ÄúDisaster Attention Bot‚Äù! He‚Äôs won a copy of &lt;a href="https://www.amazon.com/dp/B0723B91XD/?tag=pyb0f-20"&gt;&lt;em&gt;Designing Bots: Creating Conversational Experiences&lt;/em&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Thanks to everyone who pushed hard to create their very own bot!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; made an awesome Slack bot that will get you a random desktop wallpaper based on your search pattern. Check it out &lt;a href="https://github.com/pybites/challenges/tree/community/43/clamytoe"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dseptem"&gt;dseptem&lt;/a&gt; created ‚ÄúExkayceedi‚Äù, a simple &lt;a href="https://xkcd.com/"&gt;XKCD&lt;/a&gt; bot for Slack. You can specify which number strip to present and display in Slack! Seriously cool! Check it out &lt;a href="https://github.com/pybites/challenges/tree/community/43/dseptem"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/RodolfoFerro"&gt;RodolfoFerro&lt;/a&gt; blew us away with is Disaster Attention Bot for Telegram! It automates the process of reporting incidents via messaging platforms (just Telegram at the moment). To learn more, check out &lt;a href="https://drive.google.com/file/d/1dOvF17AYKiic85HmzMjnK5Qza2Tg0PNw/view"&gt;this video&lt;/a&gt; he‚Äôs created detailing the bot. The code is &lt;a href="https://github.com/pybites/challenges/tree/community/43/RodolfoFerro"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have some ideas for chatbots, but did not get around building another one yet. You can check our previous Slack bots &lt;a href="https://pybit.es/simple-chatbot.html"&gt;here&lt;/a&gt; and &lt;a href="https://pybit.es/slack-karma-bot.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://pybit.es/codechallenge44.html"&gt;Challenge 44: Marvel Data Analysis (Alicante PyChallengeDay)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Our first live code challenge was a success! You can read all about it &lt;a href="https://pybit.es/alicante-pychallengeday.html"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/peinad0"&gt;peinad0&lt;/a&gt; was the well deserved winner on the day. You can check out his submission &lt;a href="https://github.com/pybites/marvel_challenge/tree/community/peinad0"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; participated with his own submission after the event. Very cool!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/westen30"&gt;westen30&lt;/a&gt; used Pandas and Seaborn to solve this challenge which he shared &lt;a href="https://pybit.es/guest-marvel-data-analysis.html"&gt;here&lt;/a&gt; - awesome!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We posted our solution &lt;a href="https://github.com/pybites/marvel_challenge/blob/solution/marvel.py"&gt;here&lt;/a&gt; including a simple &lt;a href="https://github.com/pybites/marvel_challenge/tree/solution/bonus"&gt;Bokeh viz&lt;/a&gt; we did for the bonus section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
Thanks to everyone for your participation in these challenges! Remember, you can participate at any time, even after we‚Äôve completed the review.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="Daily Python Tip"></category><category term="regex"></category><category term="bot"></category><category term="chatbot"></category><category term="Marvel"></category><category term="Pandas"></category><category term="Seaborn"></category><category term="data"></category><category term="Python Alicante"></category><category term="live coding"></category><category term="Bokeh"></category></entry><entry><title>Code Challenge 45 - TDD: Code FizzBuzz Writing Tests First!</title><link href="https://pybit.es/codechallenge45.html" rel="alternate"></link><published>2017-12-08T02:00:00+01:00</published><updated>2017-12-08T02:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-08:/codechallenge45.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, it‚Äôs time to do things differently! Test-Driven Development has to be one of the hardest programming methodologies to adopt yet also one of the most satisfying. It forces a different mindset which is definitely not for everyone. Either way, put your thinking caps on and jump in!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, it‚Äôs time to do things differently! Test Driven Development has to be one of the hardest programming methodologies to adopt yet also one of the most satisfying. It forces a different mindset which is definitely not for everyone. Either way, put your thinking caps on and jump in!&lt;/p&gt;
&lt;h2&gt;What is Test-Driven Development?&lt;/h2&gt;
&lt;p&gt;An excerpt from this cool &lt;a href="https://code.tutsplus.com/tutorials/beginning-test-driven-development-in-python--net-30137"&gt;TDD tutorial on Tuts+&lt;/a&gt; sums it up nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TDD, in its most basic terms, is the process of implementing code by writing your tests first, seeing them fail, then writing the code to make the tests pass. You can then build upon this developed code by appropriately altering your test to expect the outcome of additional functionality, then writing the code to make it pass again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is to use TDD of course but to make what? Rather than leave this open ended, we‚Äôre going to ask you to use TDD while solving a kata featured in &lt;a href="https://github.com/aleasoluciones/pycones2016"&gt;PyConEs 2016 Introduction to TDD Workshop&lt;/a&gt; (&lt;a href="https://translate.googleusercontent.com/translate_c?depth=1&amp;amp;rurl=translate.google.com&amp;amp;sl=auto&amp;amp;sp=nmt4&amp;amp;tl=en&amp;amp;u=https://github.com/aleasoluciones/pycones2016&amp;amp;usg=ALkJrhi1AQ1pIyVxIIeAOIPfiRsco7o2cw"&gt;translation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz"&gt;FizzBuzz&lt;/a&gt; is a simple problem wherein your program will print the numbers from 1 to 100. The tricky part is that if a number being printed is divisible by 3, the program returns ‚ÄúFizz‚Äù instead of the number.&lt;/p&gt;
&lt;p&gt;Likewise, print ‚ÄúBuzz‚Äù for any number divisible by 5 and ‚ÄúFizzBuzz‚Äù for any number divisible by 3 and 5.&lt;/p&gt;
&lt;p&gt;It‚Äôs &lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz#Programming_interviews"&gt;a very simple problem to solve&lt;/a&gt; which is why we choose it to focus on learning / practicing TDD!&lt;/p&gt;
&lt;p&gt;Code a solution to the FizzBuzz problem using TDD and the challenge is complete. Make sure to PR your solution &lt;em&gt;and&lt;/em&gt; your test file.&lt;/p&gt;
&lt;h2&gt;Doing it for Yourself&lt;/h2&gt;
&lt;p&gt;We‚Äôre aware that you can simply submit a PR with a test file you‚Äôve created &lt;em&gt;after&lt;/em&gt; writing your script but clearly that defeats the purpose of this challenge!&lt;/p&gt;
&lt;p&gt;This challenge is intended to get you to try using TDD. There are no winners or losers so there really would be no point in writing the tests after! For that, feel free to try &lt;a href="https://pybit.es/codechallenge39.html"&gt;Code Challenge 39&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Pybites Slack&lt;/h2&gt;
&lt;p&gt;You like these challenges? We have published &lt;a href="https://github.com/pybites/challenges"&gt;quite a few&lt;/a&gt; and we're not planning to stop anytime soon.&lt;/p&gt;
&lt;p&gt;You really like them and plan on PR'ing more in the future? Then consider joining our private Slack channel sending us &lt;a href="mailto:pybitesblog@gmail.com"&gt;an email&lt;/a&gt;. This way you get the unique opportunity to learn from other passionate Pythonistas and share some of your experience.&lt;/p&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;You can PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. We will include it in our review post. Our PR template also lets you reflect a bit on your learning and provide some feedback how we can keep our challenges interesting. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="tdd"></category><category term="tests"></category><category term="test-driven development"></category></entry><entry><title>Twitter Digest 2017 Week 48</title><link href="https://pybit.es/twitter_digest_201748.html" rel="alternate"></link><published>2017-12-03T22:14:00+01:00</published><updated>2017-12-03T22:14:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-12-03:/twitter_digest_201748.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Biggest news of the week! (Clearly!) We were hosted on the Talk Python Podcast!!! We had a BLAST. We hope you enjoyed it!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's time to challenge yourself with &lt;a href="https://twitter.com/search/#100daysofcode" target="_blank"&gt;#100daysofcode&lt;/a&gt; in Python. Listen to &lt;a href="https://twitter.com/@pybites's" target="_blank"&gt;@pybites's&lt;/a&gt; &lt;a href="https://twitter.com/@bbelderbos" target="_blank"&gt;@bbelderbos&lt;/a&gt; and‚Ä¶ &lt;a href="https://t.co/4Hhx13cgga" title="https://t.co/4Hhx13cgga" target="_blank"&gt;https://t.co/4Hhx13cgga&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/935953972447318022" data-datetime="2017-11-29T19:29:50+00:00"&gt;November 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Restore normal dict behavior of a defaultdict by setting &amp;gt;&amp;gt;&amp;gt; d.default_factory = None &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/BkYktbjgGl" title="https://t.co/BkYktbjgGl" target="_blank"&gt;https://t.co/BkYktbjgGl&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/935439990418477062" data-datetime="2017-11-28T09:27:28+00:00"&gt;November 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;[&lt;a href="https://twitter.com/search/#BLOG]" target="_blank"&gt;#BLOG]&lt;/a&gt; Do you wanna know 5 of the best ways to &lt;a href="https://twitter.com/search/#debug" target="_blank"&gt;#debug&lt;/a&gt; in &lt;a href="https://twitter.com/search/#Django?" target="_blank"&gt;#Django?&lt;/a&gt; Keep reading because &lt;a href="https://twitter.com/@PyPiglesias" target="_blank"&gt;@PyPiglesias&lt;/a&gt; bring you awes‚Ä¶ &lt;a href="https://t.co/UMrNATMd1W" title="https://t.co/UMrNATMd1W" target="_blank"&gt;https://t.co/UMrNATMd1W&lt;/a&gt;&lt;/p&gt;‚Äî BeDjango (@bedjango) &lt;a href="https://twitter.com/bedjango/status/936225857055744000" data-datetime="2017-11-30T13:30:13+00:00"&gt;November 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How I built a robot that can beat the Mario Odyssey Jump-Rope Challenge for you, by &lt;a href="https://twitter.com/@antin" target="_blank"&gt;@antin&lt;/a&gt; &lt;a href="https://t.co/kAs9GQa17K" title="https://t.co/kAs9GQa17K" target="_blank"&gt;https://t.co/kAs9GQa17K&lt;/a&gt;&lt;/p&gt;‚Äî freeCodeCamp (@freeCodeCamp) &lt;a href="https://twitter.com/freeCodeCamp/status/936943543247167488" data-datetime="2017-12-02T13:02:02+00:00"&gt;December 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@openmjnd:" target="_blank"&gt;@openmjnd:&lt;/a&gt; Here is a list of 50 unique &lt;a href="https://twitter.com/search/#ArtificalIntelligence" target="_blank"&gt;#ArtificalIntelligence&lt;/a&gt; technologies, brought to you by &lt;a href="https://twitter.com/@hackernoon:" target="_blank"&gt;@hackernoon:&lt;/a&gt; &lt;a href="https://t.co/oaAN0bFyNH" title="https://t.co/oaAN0bFyNH" target="_blank"&gt;https://t.co/oaAN0bFyNH&lt;/a&gt; &lt;a href="https‚Ä¶" title="https‚Ä¶" target="_blank"&gt;https‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/936982689843834882" data-datetime="2017-12-02T15:37:36+00:00"&gt;December 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Need something to do this weekend? Why not try one of our FREE training labs? It'll help improve your &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; skill‚Ä¶ &lt;a href="https://t.co/AEyD5YkJPK" title="https://t.co/AEyD5YkJPK" target="_blank"&gt;https://t.co/AEyD5YkJPK&lt;/a&gt;&lt;/p&gt;‚Äî Docker (@Docker) &lt;a href="https://twitter.com/Docker/status/936831813221150720" data-datetime="2017-12-02T05:38:04+00:00"&gt;December 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;* means zero or more occurrences. Ex: /ab*c/ matches 'ac', 'abc', 'abbc', etc.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/935901583048609797" data-datetime="2017-11-29T16:01:40+00:00"&gt;November 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Binder 2.0, a Tech Guide, from &lt;a href="https://twitter.com/@mybinderteam" target="_blank"&gt;@mybinderteam&lt;/a&gt; &lt;a href="https://t.co/b1U8PnREBH" title="https://t.co/b1U8PnREBH" target="_blank"&gt;https://t.co/b1U8PnREBH&lt;/a&gt;&lt;/p&gt;‚Äî Project Jupyter (@ProjectJupyter) &lt;a href="https://twitter.com/ProjectJupyter/status/936265849366892545" data-datetime="2017-11-30T16:09:08+00:00"&gt;November 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Merry Christmas: Data science advent calendar. :) &lt;a href="https://t.co/rOwLtULesB" title="https://t.co/rOwLtULesB" target="_blank"&gt;https://t.co/rOwLtULesB&lt;/a&gt; by &lt;a href="https://twitter.com/@filmfranz" target="_blank"&gt;@filmfranz&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/936899551264305152" data-datetime="2017-12-02T10:07:14+00:00"&gt;December 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to split a list-of-strings into sublists-of-strings by a specific string element [Score:20] &lt;a href="https://t.co/lbMQ6vOYVN" title="https://t.co/lbMQ6vOYVN" target="_blank"&gt;https://t.co/lbMQ6vOYVN&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/937209951403020288" data-datetime="2017-12-03T06:40:39+00:00"&gt;December 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;AWS Security Primer &lt;a href="https://t.co/yphyMCMEl1" title="https://t.co/yphyMCMEl1" target="_blank"&gt;https://t.co/yphyMCMEl1&lt;/a&gt; &lt;a href="https://t.co/gEoTQ1BOU5" title="https://t.co/gEoTQ1BOU5" target="_blank"&gt;https://t.co/gEoTQ1BOU5&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/935290653017362438" data-datetime="2017-11-27T23:34:03+00:00"&gt;November 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;python-snippets - :100: The most useful python snippets &lt;a href="https://t.co/VIrA0CF9F6" title="https://t.co/VIrA0CF9F6" target="_blank"&gt;https://t.co/VIrA0CF9F6&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/936845296474062848" data-datetime="2017-12-02T06:31:39+00:00"&gt;December 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Using NLTK to visualize my favorit... &lt;a href="https://t.co/xWthKefnHz" title="https://t.co/xWthKefnHz" target="_blank"&gt;https://t.co/xWthKefnHz&lt;/a&gt; &lt;a href="https://twitter.com/search/#course" target="_blank"&gt;#course&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/936776199208026113" data-datetime="2017-12-02T01:57:05+00:00"&gt;December 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@github:" target="_blank"&gt;@github:&lt;/a&gt; This December, join &lt;a href="https://twitter.com/@24PullRequests" target="_blank"&gt;@24PullRequests&lt;/a&gt; and contribute your bug fixes, documentation, and more to the open source projects you use‚Ä¶&lt;/p&gt;‚Äî BetterCodeHub (@BetterCodeHub) &lt;a href="https://twitter.com/BetterCodeHub/status/936167856231927808" data-datetime="2017-11-30T09:39:44+00:00"&gt;November 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kennethreitz:" target="_blank"&gt;@kennethreitz:&lt;/a&gt; Pipenv is now *officially* the recommended tool on &lt;a href="https://t.co/2Sz5dS2ZV5" title="https://t.co/2Sz5dS2ZV5" target="_blank"&gt;https://t.co/2Sz5dS2ZV5&lt;/a&gt; for managing application dependencies!!! ‚ú®üç∞‚ú® h‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/936356514951872512" data-datetime="2017-11-30T22:09:24+00:00"&gt;November 30, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="podcast"></category><category term="dictionaries"></category><category term="Django"></category><category term="robot"></category><category term="AI"></category><category term="Docker"></category><category term="training"></category><category term="regex"></category><category term="Binder"></category><category term="Jupyter"></category><category term="Data Science"></category><category term="strings"></category><category term="AWS"></category><category term="NLTK"></category><category term="Pipenv"></category></entry><entry><title>Twitter Digest 2017 Week 47</title><link href="https://pybit.es/twitter_digest_201747.html" rel="alternate"></link><published>2017-11-26T21:55:00+01:00</published><updated>2017-11-26T21:55:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-26:/twitter_digest_201747.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Runing 10+ million PostgreSQL indexes in Production &lt;a href="https://t.co/7LMr80wlTx" title="https://t.co/7LMr80wlTx" target="_blank"&gt;https://t.co/7LMr80wlTx&lt;/a&gt; &lt;a href="https://t.co/1pSTLpHSGK" title="https://t.co/1pSTLpHSGK" target="_blank"&gt;https://t.co/1pSTLpHSGK&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/933841097331265536" data-datetime="2017-11-23T23:34:02+00:00"&gt;November 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to write a simple Python class &lt;a href="https://t.co/i40yOBS1My" title="https://t.co/i40yOBS1My" target="_blank"&gt;https://t.co/i40yOBS1My&lt;/a&gt; via &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/934218830565511169" data-datetime="2017-11-25T00:35:00+00:00"&gt;November 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Inspire a love of coding and robotics with these techie gifts! Perfect for students who love the &lt;a href="https://twitter.com/search/#HourOfCode." target="_blank"&gt;#HourOfCode.&lt;/a&gt; &lt;a href="https://t.co/OD8jB1lKv4" title="https://t.co/OD8jB1lKv4" target="_blank"&gt;https://t.co/OD8jB1lKv4&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/932727266982862848" data-datetime="2017-11-20T21:48:04+00:00"&gt;November 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Happy Thanksgiving from &lt;a href="https://twitter.com/@ThePSF!" target="_blank"&gt;@ThePSF!&lt;/a&gt; Thank you to the Python community for everything you do to encourage the growth of‚Ä¶ &lt;a href="https://t.co/pbKmvIE5De" title="https://t.co/pbKmvIE5De" target="_blank"&gt;https://t.co/pbKmvIE5De&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/933726939646513152" data-datetime="2017-11-23T16:00:24+00:00"&gt;November 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Good insights about software engineering, focused on data science, by my friend &lt;a href="https://twitter.com/@gvwilson:" target="_blank"&gt;@gvwilson:&lt;/a&gt; &lt;a href="https://t.co/hSenc9q3hz" title="https://t.co/hSenc9q3hz" target="_blank"&gt;https://t.co/hSenc9q3hz&lt;/a&gt;&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/932669213289865216" data-datetime="2017-11-20T17:57:23+00:00"&gt;November 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Bitcoin" target="_blank"&gt;#Bitcoin&lt;/a&gt; mining is now consuming more electricity than 159 countries, including &lt;a href="https://twitter.com/search/#Ireland" target="_blank"&gt;#Ireland&lt;/a&gt; &amp;amp; most countries in‚Ä¶ &lt;a href="https://t.co/TM6mQBMW4S" title="https://t.co/TM6mQBMW4S" target="_blank"&gt;https://t.co/TM6mQBMW4S&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/933708294350364672" data-datetime="2017-11-23T14:46:19+00:00"&gt;November 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; üì∞üêç Speed up your Python programs with a powerful, yet convenient, caching technique called ‚Äúmemoization‚Äù‚ÄîJust posted a mass‚Ä¶&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/933009310493294592" data-datetime="2017-11-21T16:28:48+00:00"&gt;November 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@peterxing:" target="_blank"&gt;@peterxing:&lt;/a&gt; Creating a Chatbot with Deep Learning, Python, and TensorFlow p.1 &lt;a href="https://t.co/v3mX5BXFO6" title="https://t.co/v3mX5BXFO6" target="_blank"&gt;https://t.co/v3mX5BXFO6&lt;/a&gt; via &lt;a href="https://twitter.com/@YouTube" target="_blank"&gt;@YouTube&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/934616785436925952" data-datetime="2017-11-26T02:56:20+00:00"&gt;November 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@aloctavodia:" target="_blank"&gt;@aloctavodia:&lt;/a&gt; Do you use open source software like &lt;a href="https://twitter.com/search/#Pandas," target="_blank"&gt;#Pandas,&lt;/a&gt; &lt;a href="https://twitter.com/search/#Jupyter," target="_blank"&gt;#Jupyter,&lt;/a&gt; &lt;a href="https://twitter.com/search/#NumPy," target="_blank"&gt;#NumPy,&lt;/a&gt; &lt;a href="https://twitter.com/search/#PyMC3" target="_blank"&gt;#PyMC3&lt;/a&gt; and many others sponsored by &lt;a href="https://twitter.com/@NumFOCUS?" target="_blank"&gt;@NumFOCUS?&lt;/a&gt; Help suppor‚Ä¶&lt;/p&gt;‚Äî PyData (@PyData) &lt;a href="https://twitter.com/PyData/status/933091569615364096" data-datetime="2017-11-21T21:55:40+00:00"&gt;November 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Really simple way to write a decay fun... &lt;a href="https://t.co/sTJf4AFEB1" title="https://t.co/sTJf4AFEB1" target="_blank"&gt;https://t.co/sTJf4AFEB1&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/934596480630796288" data-datetime="2017-11-26T01:35:39+00:00"&gt;November 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Creating Serverless Functions with Python and AWS Lambda &lt;a href="https://t.co/DsF529rvCG" title="https://t.co/DsF529rvCG" target="_blank"&gt;https://t.co/DsF529rvCG&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/934489115319504897" data-datetime="2017-11-25T18:29:01+00:00"&gt;November 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Testing Mod... &lt;a href="https://t.co/QolN63RMNT" title="https://t.co/QolN63RMNT" target="_blank"&gt;https://t.co/QolN63RMNT&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://twitter.com/search/#PyTest" target="_blank"&gt;#PyTest&lt;/a&gt; &lt;a href="https://twitter.com/search/#testing" target="_blank"&gt;#testing&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/934609065224806400" data-datetime="2017-11-26T02:25:40+00:00"&gt;November 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dannymrock:" target="_blank"&gt;@dannymrock:&lt;/a&gt; What is the most important programming language to learn in 2017? To get a job: Java To get a well paid job: C++ To get any‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/934247842687807489" data-datetime="2017-11-25T02:30:17+00:00"&gt;November 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@garybernhardt:" target="_blank"&gt;@garybernhardt:&lt;/a&gt; Computers have become so sterile and slow. This is not the cyberpunk future that I signed up for. This is a dystopia whe‚Ä¶&lt;/p&gt;‚Äî Harry Percival (@hjwp) &lt;a href="https://twitter.com/hjwp/status/934437019043934208" data-datetime="2017-11-25T15:02:00+00:00"&gt;November 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;BFS Maze Solver using OpenCV - Python Intermediate Tutorial &lt;a href="https://t.co/lU3KdCKotY" title="https://t.co/lU3KdCKotY" target="_blank"&gt;https://t.co/lU3KdCKotY&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/934617718183137281" data-datetime="2017-11-26T03:00:03+00:00"&gt;November 26, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="classes"></category><category term="PostgreSQL"></category><category term="coding"></category><category term="gifts"></category><category term="Thanksgiving"></category><category term="data science"></category><category term="Bitcoin"></category><category term="data visualisation"></category><category term="memoization"></category><category term="deep learning"></category><category term="chatbot"></category><category term="Tensorflow"></category><category term="AWS Lambda"></category><category term="Django"></category><category term="Pytest"></category><category term="OpenCV"></category></entry><entry><title>Twitter Digest 2017 Week 46</title><link href="https://pybit.es/twitter_digest_201746.html" rel="alternate"></link><published>2017-11-19T20:17:00+01:00</published><updated>2017-11-19T20:17:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-19:/twitter_digest_201746.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This guide on home surveillance and motion detection with &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; OpenCV, and the &lt;a href="https://twitter.com/@Raspberry_Pi" target="_blank"&gt;@Raspberry_Pi&lt;/a&gt; is one of my top-1‚Ä¶ &lt;a href="https://t.co/QfLU3xdqOQ" title="https://t.co/QfLU3xdqOQ" target="_blank"&gt;https://t.co/QfLU3xdqOQ&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/930437236222582785" data-datetime="2017-11-14T14:08:18+00:00"&gt;November 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;We've just launched the &lt;a href="https://twitter.com/@TensorFlow" target="_blank"&gt;@TensorFlow&lt;/a&gt; Speech Recognition Challenge on Kaggle! $25,000 in prizes, including a special‚Ä¶ &lt;a href="https://t.co/MGUl6WjEW9" title="https://t.co/MGUl6WjEW9" target="_blank"&gt;https://t.co/MGUl6WjEW9&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@TensorFlow) &lt;a href="https://twitter.com/TensorFlow/status/930916008403103744" data-datetime="2017-11-15T21:50:46+00:00"&gt;November 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#TrainerTip" target="_blank"&gt;#TrainerTip&lt;/a&gt; : &lt;a href="https://twitter.com/search/#Cython" target="_blank"&gt;#Cython&lt;/a&gt; makes it easy to access C‚Äôs fast looping architecture from within &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#C" target="_blank"&gt;#C&lt;/a&gt; &lt;a href="https://t.co/i8Y5blMd9s" title="https://t.co/i8Y5blMd9s" target="_blank"&gt;https://t.co/i8Y5blMd9s&lt;/a&gt;&lt;/p&gt;‚Äî Enthought Inc. (@enthought) &lt;a href="https://twitter.com/enthought/status/930864274796371968" data-datetime="2017-11-15T18:25:12+00:00"&gt;November 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"A good programmer is someone who always looks both ways before crossing a one-way street." - Doug Linder&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/931280217770942464" data-datetime="2017-11-16T21:58:00+00:00"&gt;November 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks &lt;a href="https://twitter.com/@hackernoon" target="_blank"&gt;@hackernoon&lt;/a&gt; for publishing the third part of my journey with &lt;a href="https://twitter.com/@buxfer," target="_blank"&gt;@buxfer,&lt;/a&gt; &lt;a href="https://twitter.com/search/#Docker," target="_blank"&gt;#Docker,&lt;/a&gt; &lt;a href="https://twitter.com/search/#GoLang," target="_blank"&gt;#GoLang,&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; and &lt;a href="https://twitter.com/search/#MongoDB‚Ä¶" target="_blank"&gt;#MongoDB‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/BqaUx08SKE" title="https://t.co/BqaUx08SKE" target="_blank"&gt;https://t.co/BqaUx08SKE&lt;/a&gt;&lt;/p&gt;‚Äî Vincenzo Ferrari (@__wilky__) &lt;a href="https://twitter.com/__wilky__/status/931221294217138183" data-datetime="2017-11-16T18:03:52+00:00"&gt;November 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyDev of the Week: Bert JW Regeer - &lt;a href="https://t.co/eMeo69OBHJ" title="https://t.co/eMeo69OBHJ" target="_blank"&gt;https://t.co/eMeo69OBHJ&lt;/a&gt; &lt;a href="https://twitter.com/@PylonsProject" target="_blank"&gt;@PylonsProject&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pyramid" target="_blank"&gt;#pyramid&lt;/a&gt;&lt;/p&gt;‚Äî Mike Driscoll (@driscollis) &lt;a href="https://twitter.com/driscollis/status/930080111122108416" data-datetime="2017-11-13T14:29:13+00:00"&gt;November 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Read &lt;a href="https://twitter.com/@scott_lowe's" target="_blank"&gt;@scott_lowe's&lt;/a&gt; latest article - How to Tag &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; Images with Git Commit Information: &lt;a href="https://t.co/QSog3dPeyP" title="https://t.co/QSog3dPeyP" target="_blank"&gt;https://t.co/QSog3dPeyP&lt;/a&gt;&lt;/p&gt;‚Äî Docker (@Docker) &lt;a href="https://twitter.com/Docker/status/931950888423428096" data-datetime="2017-11-18T18:23:01+00:00"&gt;November 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@hainm_comp:" target="_blank"&gt;@hainm_comp:&lt;/a&gt; Finally &lt;a href="https://twitter.com/search/#nglview" target="_blank"&gt;#nglview&lt;/a&gt; has a showcase in &lt;a href="https://twitter.com/@ProjectJupyter" target="_blank"&gt;@ProjectJupyter&lt;/a&gt; website &lt;a href="https://t.co/BxHTcFUsMg" title="https://t.co/BxHTcFUsMg" target="_blank"&gt;https://t.co/BxHTcFUsMg&lt;/a&gt; &lt;a href="https://t.co/ufAXiAyBop" title="https://t.co/ufAXiAyBop" target="_blank"&gt;https://t.co/ufAXiAyBop&lt;/a&gt;&lt;/p&gt;‚Äî Project Jupyter (@ProjectJupyter) &lt;a href="https://twitter.com/ProjectJupyter/status/931193898348810240" data-datetime="2017-11-16T16:15:00+00:00"&gt;November 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Today I added a &lt;a href="https://twitter.com/search/#binder" target="_blank"&gt;#binder&lt;/a&gt; badge to the Python Data Science Handbook. Executable book in one click!‚Ä¶ &lt;a href="https://t.co/nSDfQs9VP9" title="https://t.co/nSDfQs9VP9" target="_blank"&gt;https://t.co/nSDfQs9VP9&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/930188473495011328" data-datetime="2017-11-13T21:39:48+00:00"&gt;November 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Properties such as \p{Alphabetic} can be easier to read than [A-Za-z]. Works better with internationalization as well.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/930465494544633856" data-datetime="2017-11-14T16:00:35+00:00"&gt;November 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;If you have a safari books subscription, you can now read the early release of Flask Web Development, 2nd edition.‚Ä¶ &lt;a href="https://t.co/4yHw3dnOWA" title="https://t.co/4yHw3dnOWA" target="_blank"&gt;https://t.co/4yHw3dnOWA&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/930484516564508672" data-datetime="2017-11-14T17:16:10+00:00"&gt;November 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Build Simple Chat Apps with JavaScript, Node.js and Twilio &lt;a href="https://t.co/9JHRURgMUb" title="https://t.co/9JHRURgMUb" target="_blank"&gt;https://t.co/9JHRURgMUb&lt;/a&gt; via &lt;a href="https://twitter.com/@p_mbanugo" target="_blank"&gt;@p_mbanugo&lt;/a&gt; &lt;a href="https://t.co/a9q9rKgrOM" title="https://t.co/a9q9rKgrOM" target="_blank"&gt;https://t.co/a9q9rKgrOM&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/931651167024803841" data-datetime="2017-11-17T22:32:02+00:00"&gt;November 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dataandme:" target="_blank"&gt;@dataandme:&lt;/a&gt; .&lt;a href="https://twitter.com/@StephdeSilva's" target="_blank"&gt;@StephdeSilva's&lt;/a&gt; tips for getting to know your data also make for pretty good relationship advice... ü§ìüíîüòÇ &lt;a href="https://t.co/IVr3w2‚Ä¶" title="https://t.co/IVr3w2‚Ä¶" target="_blank"&gt;https://t.co/IVr3w2‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Karlijn Willems (@willems_karlijn) &lt;a href="https://twitter.com/willems_karlijn/status/932132838123753472" data-datetime="2017-11-19T06:26:01+00:00"&gt;November 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@hainm_comp:" target="_blank"&gt;@hainm_comp:&lt;/a&gt; Finally &lt;a href="https://twitter.com/search/#nglview" target="_blank"&gt;#nglview&lt;/a&gt; has a showcase in &lt;a href="https://twitter.com/@ProjectJupyter" target="_blank"&gt;@ProjectJupyter&lt;/a&gt; website &lt;a href="https://t.co/BxHTcFUsMg" title="https://t.co/BxHTcFUsMg" target="_blank"&gt;https://t.co/BxHTcFUsMg&lt;/a&gt; &lt;a href="https://t.co/ufAXiAyBop" title="https://t.co/ufAXiAyBop" target="_blank"&gt;https://t.co/ufAXiAyBop&lt;/a&gt;&lt;/p&gt;‚Äî Project Jupyter (@ProjectJupyter) &lt;a href="https://twitter.com/ProjectJupyter/status/931193898348810240" data-datetime="2017-11-16T16:15:00+00:00"&gt;November 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@vorpalsmith:" target="_blank"&gt;@vorpalsmith:&lt;/a&gt; Starting in January 2019, new NumPy releases will be Python 3 only. If you need a bit more time to transition, we'll also‚Ä¶&lt;/p&gt;‚Äî Project Jupyter (@ProjectJupyter) &lt;a href="https://twitter.com/ProjectJupyter/status/930669112577191936" data-datetime="2017-11-15T05:29:42+00:00"&gt;November 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Monitoring Cryptocurrenc... &lt;a href="https://t.co/iQZyHLGvvX" title="https://t.co/iQZyHLGvvX" target="_blank"&gt;https://t.co/iQZyHLGvvX&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/932063858411241472" data-datetime="2017-11-19T01:51:55+00:00"&gt;November 19, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Raspberry Pi"></category><category term="OpenCV"></category><category term="TensorFlow"></category><category term="challenge"></category><category term="Cython"></category><category term="Docker"></category><category term="Jupyter"></category><category term="nglview"></category><category term="data science"></category><category term="regex"></category><category term="Flask"></category><category term="book"></category><category term="Twilio"></category><category term="Node"></category><category term="Javascript"></category><category term="data analysis"></category><category term="NumPy"></category><category term="cryptocurrency"></category></entry><entry><title>Twitter Digest 2017 Week 45</title><link href="https://pybit.es/twitter_digest_201745.html" rel="alternate"></link><published>2017-11-12T12:52:00+01:00</published><updated>2017-11-12T12:52:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-12:/twitter_digest_201745.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Starting big this week! We held our first live Code Challenge! Congratulations David!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PRs do count: David solved our Marvel &lt;a href="https://twitter.com/search/#pychallenge" target="_blank"&gt;#pychallenge&lt;/a&gt; earning a copy of &lt;a href="https://twitter.com/@AlSweigart‚Äôs" target="_blank"&gt;@AlSweigart‚Äôs&lt;/a&gt; Automate the boring stuff. I thi‚Ä¶ &lt;a href="https://t.co/0HlF3jYvKS" title="https://t.co/0HlF3jYvKS" target="_blank"&gt;https://t.co/0HlF3jYvKS&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/929007513076461568" data-datetime="2017-11-10T15:27:05+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;And back to the digest!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Asyncio Event Loops Tutorial &lt;a href="https://t.co/UQSAsf3Q3c" title="https://t.co/UQSAsf3Q3c" target="_blank"&gt;https://t.co/UQSAsf3Q3c&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/929363090713522177" data-datetime="2017-11-11T15:00:02+00:00"&gt;November 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;7 HTTP methods developers should know - and how to test them! &lt;a href="https://t.co/dUsZvUWP56" title="https://t.co/dUsZvUWP56" target="_blank"&gt;https://t.co/dUsZvUWP56&lt;/a&gt; &lt;a href="https://t.co/Q2IqBs0Qsi" title="https://t.co/Q2IqBs0Qsi" target="_blank"&gt;https://t.co/Q2IqBs0Qsi&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/929353777039204354" data-datetime="2017-11-11T14:23:01+00:00"&gt;November 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; How-To: Multi-GPU training with Keras, Python, and deep learning via &lt;a href="https://twitter.com/@pyimagesearch" target="_blank"&gt;@pyimagesearch&lt;/a&gt; &lt;a href="https://t.co/xjZKWPktpF" title="https://t.co/xjZKWPktpF" target="_blank"&gt;https://t.co/xjZKWPktpF&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#kera‚Ä¶" target="_blank"&gt;#kera‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/928356218309087233" data-datetime="2017-11-08T20:19:05+00:00"&gt;November 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;TensorFlow Neural Network Tutorial &lt;a href="https://t.co/xkFFh29Opy" title="https://t.co/xkFFh29Opy" target="_blank"&gt;https://t.co/xkFFh29Opy&lt;/a&gt; by &lt;a href="https://twitter.com/@ScottWRobinson" target="_blank"&gt;@ScottWRobinson&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/928353221533241344" data-datetime="2017-11-08T20:07:10+00:00"&gt;November 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jsatt:" target="_blank"&gt;@jsatt:&lt;/a&gt; I posted another thing about a thing I maintain: &lt;a href="https://t.co/3qqV8dSZNl." title="https://t.co/3qqV8dSZNl." target="_blank"&gt;https://t.co/3qqV8dSZNl.&lt;/a&gt; It's package for cleaner data mapping in &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; It's‚Ä¶&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/929504768124489728" data-datetime="2017-11-12T00:23:00+00:00"&gt;November 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nikitonsky:" target="_blank"&gt;@nikitonsky:&lt;/a&gt; JSON is the only serialization format you‚Äôll ever need (pics by &lt;a href="https://twitter.com/@gritzko)" target="_blank"&gt;@gritzko)&lt;/a&gt; &lt;a href="https://t.co/bS0yGUaz8U" title="https://t.co/bS0yGUaz8U" target="_blank"&gt;https://t.co/bS0yGUaz8U&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/928075842701246464" data-datetime="2017-11-08T01:44:58+00:00"&gt;November 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@MikeTamir:" target="_blank"&gt;@MikeTamir:&lt;/a&gt; Making your First Machine Learning Classifier in Scikit-learn &lt;a href="https://t.co/9aftCtCKSF" title="https://t.co/9aftCtCKSF" target="_blank"&gt;https://t.co/9aftCtCKSF&lt;/a&gt; &lt;a href="https://twitter.com/search/#AI" target="_blank"&gt;#AI&lt;/a&gt; &lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#Da‚Ä¶" target="_blank"&gt;#Da‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/929469235344039936" data-datetime="2017-11-11T22:01:49+00:00"&gt;November 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Enhancing Photos with Python ‚Äì &lt;a href="https://t.co/FtvMTZc8Lq" title="https://t.co/FtvMTZc8Lq" target="_blank"&gt;https://t.co/FtvMTZc8Lq&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/929432058644127744" data-datetime="2017-11-11T19:34:05+00:00"&gt;November 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Last night I presented at the Richmond VA Python meetup / user group. Here's the video recording of my Pythonic Cod‚Ä¶ &lt;a href="https://t.co/zCB63DoXgv" title="https://t.co/zCB63DoXgv" target="_blank"&gt;https://t.co/zCB63DoXgv&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/928744477715501057" data-datetime="2017-11-09T22:01:53+00:00"&gt;November 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The United States mapped by over 1 billion acres of trees and forests. &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; &lt;a href="https://t.co/yUpT1kfhYG" title="https://t.co/yUpT1kfhYG" target="_blank"&gt;https://t.co/yUpT1kfhYG&lt;/a&gt; &lt;a href="https://t.co/7mMVDBlCfm" title="https://t.co/7mMVDBlCfm" target="_blank"&gt;https://t.co/7mMVDBlCfm&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/928663984215076864" data-datetime="2017-11-09T16:42:02+00:00"&gt;November 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Perfect for an &lt;a href="https://twitter.com/search/#HourOfCode" target="_blank"&gt;#HourOfCode&lt;/a&gt; with elementary school students, Switch &amp;amp; Glitch by &lt;a href="https://twitter.com/@TeacherGaming" target="_blank"&gt;@TeacherGaming&lt;/a&gt; lets you play the her‚Ä¶ &lt;a href="https://t.co/zXwBW8gDbH" title="https://t.co/zXwBW8gDbH" target="_blank"&gt;https://t.co/zXwBW8gDbH&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/929434810304512000" data-datetime="2017-11-11T19:45:01+00:00"&gt;November 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Scientific Python lecture notes &lt;a href="https://t.co/5UIkLUIOrl" title="https://t.co/5UIkLUIOrl" target="_blank"&gt;https://t.co/5UIkLUIOrl&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/929112729000075265" data-datetime="2017-11-10T22:25:11+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Machine Learning With Python ‚Äì Introduction &lt;a href="https://t.co/YEqJpwpky5" title="https://t.co/YEqJpwpky5" target="_blank"&gt;https://t.co/YEqJpwpky5&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/928970501837475841" data-datetime="2017-11-10T13:00:01+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Intermediate SQL tutorial for developers &lt;a href="https://t.co/N52XKgQB9c" title="https://t.co/N52XKgQB9c" target="_blank"&gt;https://t.co/N52XKgQB9c&lt;/a&gt; &lt;a href="https://t.co/ZO5U6WJ2Gf" title="https://t.co/ZO5U6WJ2Gf" target="_blank"&gt;https://t.co/ZO5U6WJ2Gf&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/929130081221521409" data-datetime="2017-11-10T23:34:08+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;Totally something we do here, haha!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;When you‚Äôve written the same code 3 times, write a function When you‚Äôve given the same in-person advice 3 times, write a blog post&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/928447584712253440" data-datetime="2017-11-09T02:22:08+00:00"&gt;November 09, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Asyncio"></category><category term="tutorials"></category><category term="Machine Learning"></category><category term="HTTP"></category><category term="SQL"></category><category term="Keras"></category><category term="Deep Learning"></category><category term="Tensorflow"></category><category term="data mapping"></category><category term="JSON"></category><category term="Scitkit"></category><category term="Pillow"></category><category term="data visualisation"></category><category term="SciPy"></category></entry><entry><title>5 Things we Learned Co-hosting a Live Code Challenge Workshop</title><link href="https://pybit.es/alicante-pychallengeday.html" rel="alternate"></link><published>2017-11-11T18:00:00+01:00</published><updated>2017-11-11T18:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-11-11:/alicante-pychallengeday.html</id><summary type="html">&lt;p&gt;Yesterday we hosted &lt;a href="https://pybit.es/codechallenge44.html"&gt;PyChallengeDay&lt;/a&gt; together with &lt;a href="https://twitter.com/python_alc?lang=en"&gt;Python Alicante&lt;/a&gt;. I am sure the folks that joined us stretched their coding skills. And we learned a couple of things too which we will share in this article. Hopefullly it inspires you to host a workshop yourself to grow the awesome Python community.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday we hosted &lt;a href="https://pybit.es/codechallenge44.html"&gt;PyChallengeDay&lt;/a&gt; together with &lt;a href="https://twitter.com/python_alc?lang=en"&gt;Python Alicante&lt;/a&gt;. I am sure the folks that joined us stretched their coding skills. And we learned a couple of things too which we will share in this article. Hopefullly it inspires you to host a workshop yourself to grow the awesome Python community.&lt;/p&gt;
&lt;h2&gt;1. There's nothing like live coding&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python teachers take notice: a live coding workshop offers a unique opportunity to gain valuable insight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So far we have been doing code challenges online. We are getting an increasing amount of PRs and the overall feedback is that people learn more Python. Great!&lt;/p&gt;
&lt;p&gt;However seeing people doing a challenge for the first time - the struggles, the wins, env setups (Python 2!), and applied problem solving - it added a totally different angle. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Segu√≠mos con el reto de programaci√≥n que han preparado los chicos de &lt;a href="https://twitter.com/@python_alc" target="_blank"&gt;@python_alc&lt;/a&gt; junto a &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python‚Ä¶" target="_blank"&gt;#Python‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/I43Aoh2X1V" title="https://t.co/I43Aoh2X1V" target="_blank"&gt;https://t.co/I43Aoh2X1V&lt;/a&gt;&lt;/p&gt;‚Äî SecUA (@sec_ua) &lt;a href="https://twitter.com/sec_ua/status/928944274049204224" data-datetime="2017-11-10T11:15:48+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;We gained some valuable insights which we will use to make our code challenges better. &lt;/p&gt;
&lt;h2&gt;2. Make public speaking less intimidating&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A local workshop offers a more intimate setting to start learning the ropes of sharing your work in public!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although it's a coding workshop, you typically start with a quick intro chat. I had not spoken much in public and here, right off the bat, I was introduced to the group and shared how I got into Python and PyBites. It felt great to share our passion and work and it invigorated me to do this more often. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/@bbelderbos" target="_blank"&gt;@bbelderbos&lt;/a&gt; Nos cuenta c√≥mo pas√≥ de trabajar con Perl a utilizar principalmente &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; y c√≥mo empez√≥ su proyecto p‚Ä¶ &lt;a href="https://t.co/KbjddM0H4R" title="https://t.co/KbjddM0H4R" target="_blank"&gt;https://t.co/KbjddM0H4R&lt;/a&gt;&lt;/p&gt;‚Äî Python Alicante (@python_alc) &lt;a href="https://twitter.com/python_alc/status/928918145322057729" data-datetime="2017-11-10T09:31:58+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;¬°Hemos empezado con el pychallenge day! Es un reto de programaci√≥n en Python junto con &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; y &lt;a href="https://twitter.com/@python_alc" target="_blank"&gt;@python_alc&lt;/a&gt; en el‚Ä¶ &lt;a href="https://t.co/SdIEs4drqJ" title="https://t.co/SdIEs4drqJ" target="_blank"&gt;https://t.co/SdIEs4drqJ&lt;/a&gt;&lt;/p&gt;‚Äî DEEPSUA (@DEEPSUA) &lt;a href="https://twitter.com/DEEPSUA/status/928933283102064640" data-datetime="2017-11-10T10:32:08+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;3. Help building the awesome Python community&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Great relations are built face-to-face over coffee or beers. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Building a community takes a lot of practical work, part of which happens online. In this highly interruptive and online society we loose this aspect from time to time. That's why &lt;a href="https://pybit.es/pycon-2017.html"&gt;I attend PyCons whenever I can&lt;/a&gt;. Live workshops and meetups help building the exemplary Python community.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What time is it? It's coffee time! ‚òïÔ∏èüçµüòå &lt;a href="https://twitter.com/search/#PyCodeChallenge" target="_blank"&gt;#PyCodeChallenge&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/q49eged059" title="https://t.co/q49eged059" target="_blank"&gt;https://t.co/q49eged059&lt;/a&gt;&lt;/p&gt;‚Äî Python Alicante (@python_alc) &lt;a href="https://twitter.com/python_alc/status/928941082175528961" data-datetime="2017-11-10T11:03:07+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;4. An event requires organizing skills&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Organization is sometimes taken for granted but it's the oil on which these kind of events run. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think we learned as much as the participants. &lt;/p&gt;
&lt;p&gt;First the coding: people solved the problem in different ways, fascinating to see. &lt;/p&gt;
&lt;p&gt;The setting: as much as you prepare, some unexpected things always happen (GH account/access, difference csv parsing Python 2 vs 3). A good prep should prevent showstoppers but expect some instant hacking and creativity regardless :)&lt;/p&gt;
&lt;p&gt;The event, although small, required some organization (thanks &lt;a href="https://twitter.com/python_alc?lang=en"&gt;Python Alicante&lt;/a&gt;!): signup form, promo (flyer, Twitter, university), code challenge prep and release timing, GH PR submission process, coffee, classroom, winner price (book), Gitter chatroom. Organization skills are valuable to have and the community will thank you for it.&lt;/p&gt;
&lt;h2&gt;5. Learning from each other in a fun way&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;It's amazing to see how motivated people get if you challenge them! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember: PRs do count! The winner is &lt;a href="https://pybit.es/automate_the_boring_stuff_review.html"&gt;a Python book&lt;/a&gt; richer, I think he will remember how he acquired it by coding :) &lt;/p&gt;
&lt;p&gt;Funny things happen: somebody discovered the csv had Marvel characters already ordered ("huh the tests pass with a unsorted slice?!" ... lol). &lt;/p&gt;
&lt;p&gt;We discussed sorted+lambda vs heapq, new opportunities to write about on our blog.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PRs do count: David solved our Marvel &lt;a href="https://twitter.com/search/#pychallenge" target="_blank"&gt;#pychallenge&lt;/a&gt; earning a copy of &lt;a href="https://twitter.com/@AlSweigart‚Äôs" target="_blank"&gt;@AlSweigart‚Äôs&lt;/a&gt; Automate the boring stuff. I thi‚Ä¶ &lt;a href="https://t.co/0HlF3jYvKS" title="https://t.co/0HlF3jYvKS" target="_blank"&gt;https://t.co/0HlF3jYvKS&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/929007513076461568" data-datetime="2017-11-10T15:27:05+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;There was some heroic hard work done, &lt;em&gt;Marvelic&lt;/em&gt; respect was earned. Even folks that could not complete the challenge got a huge incentive from it to go back and brush up some modules, sharpening the coding saw.&lt;/p&gt;
&lt;h2&gt;Conclusion: hungry for more&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Live workshops offer an effective and fun way to build out our passionate Python community. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;¬° Empieza el reto ! Estamos en &lt;a href="https://twitter.com/@EPSAlicante" target="_blank"&gt;@EPSAlicante&lt;/a&gt; &lt;a href="https://twitter.com/search/#PyCodeChallenge" target="_blank"&gt;#PyCodeChallenge&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/Jg1ELuQKbu" title="https://t.co/Jg1ELuQKbu" target="_blank"&gt;https://t.co/Jg1ELuQKbu&lt;/a&gt;&lt;/p&gt;‚Äî Python Alicante (@python_alc) &lt;a href="https://twitter.com/python_alc/status/928919098754584577" data-datetime="2017-11-10T09:35:46+00:00"&gt;November 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;We will follow up with more workshops, we've broken the ice and we only got started.&lt;/p&gt;
&lt;p&gt;Stay tuned and don't worry if you're not in Alicante because you're more than welcome to join us via Gitter. The more the merrier :)&lt;/p&gt;
&lt;p&gt;And again a big THANKS to &lt;a href="https://twitter.com/python_alc?lang=en"&gt;Python Alicante&lt;/a&gt; for the nice collaboration making this event a success. And for the cool flyer:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tomorrow 10 am CET University of Alicante: &lt;a href="https://twitter.com/search/#PyChallengeDay" target="_blank"&gt;#PyChallengeDay&lt;/a&gt; workshop Join us and &lt;a href="https://twitter.com/@python_alc" target="_blank"&gt;@python_alc&lt;/a&gt; to flex your coding mu‚Ä¶ &lt;a href="https://t.co/M3hdQFHs50" title="https://t.co/M3hdQFHs50" target="_blank"&gt;https://t.co/M3hdQFHs50&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/928565131881172992" data-datetime="2017-11-09T10:09:14+00:00"&gt;November 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="code challenges"></category><category term="community"></category><category term="Python Alicante"></category><category term="live coding"></category><category term="learning"></category><category term="retrospective"></category><category term="talks"></category><category term="Marvel"></category><category term="fun"></category></entry><entry><title>Code Challenge 44 - Marvel Data Analysis (Alicante PyChallengeDay)</title><link href="https://pybit.es/codechallenge44.html" rel="alternate"></link><published>2017-11-10T08:15:00+01:00</published><updated>2017-11-10T08:15:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-10:/codechallenge44.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, this is a very special edition! Today, the 10th of November, we launch our first Live Code Challenge. We partnered up with &lt;a href="https://twitter.com/python_alc"&gt;Python Alicante&lt;/a&gt; and we will be hosting this code challenge with them at the University of Alicante. If you don't happen to live in Alicante but do want to code today 10am-13pm CET you are more than welcome to join &lt;a href="https://gitter.im/pybites/marvel"&gt;this Gitter channel&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, this is a very special edition! Today, the 10th of November, we launch our first Live Code Challenge. We partnered up with &lt;a href="https://twitter.com/python_alc"&gt;Python Alicante&lt;/a&gt; and we will be hosting this code challenge with them at the University of Alicante. If you don't happen to live in Alicante but do want to code today 10am-13pm CET you are more than welcome to join &lt;a href="https://gitter.im/pybites/marvel"&gt;this Gitter channel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="marvel spiderman coffee mug" src="https://pybit.es/images/pcc44-coffee-mug.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We all love Marvel, don't you? So here's the deal: we found a CSV with Marvel data taken from &lt;a href="http://marvel.wikia.com/wiki/Marvel_Database"&gt;this database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are going to have you write some Python to get this data into a usable data structure to answer some questions about the data.&lt;/p&gt;
&lt;h3&gt;Preparation&lt;/h3&gt;
&lt;p&gt;(repo available shortly before start challenge 10/11/2017 10 am CET)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you don't have git installed, please &lt;a href="https://git-scm.com/downloads"&gt;install it now&lt;/a&gt;. Then fork &lt;a href="https://github.com/pybites/marvel_challenge"&gt;our repo&lt;/a&gt; and follow these steps&lt;/p&gt;
&lt;p&gt;After forking the repo make sure you checkout the community branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# https
$ git clone https://github.com/&amp;lt;your_user&amp;gt;/marvel_challenge -b community

# or use SSH
$ git clone git@github.com:&amp;lt;your_user&amp;gt;/marvel_challenge.git -b community
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create your own branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; marvel_challenge
$ git checkout -b PCC44
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;code&gt;marvel.py&lt;/code&gt; in your favorite editor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code your solution (see next section)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify your solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_marvel.py
.....
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;5&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.424s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Submit your solution by pushing your branch to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push origin PCC44
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then browse to your fork and open a PR again &lt;a href="https://github.com/pybites/marvel_challenge"&gt;our repo&lt;/a&gt; -&amp;gt; community branch. No worries we are happy to help you if you get stuck.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Please answer ...&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;marvel.py&lt;/code&gt; has already some stubs, here is what we want you to try:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Parse the &lt;code&gt;marvel-wikia-data.csv&lt;/code&gt; CSV file and load it into a data structure. You probably want a list of dicts or namedtuples, one for each row. Store this in &lt;code&gt;data&lt;/code&gt; which will be in the module's namespace (already done in the template).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the most popular characters based on the number of appearances they made in comics over the years.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the year with most and least new Marvel characters introduced respectively, return a (max_year, min_year) tuple. Expect min/max to be pretty far apart.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What percentage of the comics characters is female? Please give us the percentage rounded to 2 digits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good vs bad characters: return a dictionary of bad vs good vs neutral characters per sex. The keys are &lt;em&gt;Bad Characters&lt;/em&gt;, &lt;em&gt;Good Characters&lt;/em&gt;, &lt;em&gt;Neutral Characters&lt;/em&gt;, the values are integer percentages. Who plays the villain more often, a man or a woman?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Data Viz Bonus&lt;/h3&gt;
&lt;p&gt;OK you know Python inside out, and this was pretty easy. Sounds like you? Please surprise us with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use your favorite Python visualization library and make one or more plots for 2.-5.&lt;/li&gt;
&lt;li&gt;Or try to answer some question you might have about this data set. &lt;/li&gt;
&lt;li&gt;Feel free to use &lt;a href="nbviewer.jupyter.org"&gt;nbviewer&lt;/a&gt; and just PR the link to your notebook. &lt;/li&gt;
&lt;li&gt;You could even write a quick Flask app to wrap your graph, like &lt;a href="https://pybit.es/codechallenge28_review.html"&gt;we did here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here for example we used &lt;a href="https://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt; to plot newly introduced characters per year:&lt;/p&gt;
&lt;p&gt;&lt;img alt="example bokeh plot for bonus" src="https://pybit.es/images/pcc44-bokeh-plot.png"&gt;&lt;/p&gt;
&lt;h2&gt;Win a Python book!&lt;/h2&gt;
&lt;p&gt;The best part, right? You can win a hardcopy of &lt;a href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff&lt;/a&gt; (it's cool, it &lt;a href="https://pybit.es/automate_the_boring_stuff_review.html"&gt;surely helped us&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are 2 conditions though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can only PR once, that's the PR that counts, so make sure you have a working solution before you hit that button.&lt;/li&gt;
&lt;li&gt;Only PRs submitted before 13 CET (10th of Nov) are taken into account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will determine the winner by a simple algorithm: solution * 0.5 + speed * 0.3 + design * 0.2 (does it work / how fast did you PR / PEP8 + code quality)&lt;/p&gt;
&lt;p&gt;&lt;img alt="flyer announcement" src="https://pybit.es/images/pcc44-flyer.jpeg"&gt;&lt;/p&gt;
&lt;h2&gt;Pybites Slack&lt;/h2&gt;
&lt;p&gt;You like these challenges? We have published &lt;a href="https://github.com/pybites/challenges"&gt;quite a few&lt;/a&gt; and we're not planning to stop anytime soon.&lt;/p&gt;
&lt;p&gt;You really like them and plan on PR'ing more in the future? Then consider joining our private Slack channel sending us &lt;a href="mailto:pybitesblog@gmail.com"&gt;an email&lt;/a&gt;. This way you get the unique opportunity to learn from other passionate Pythonistas and share some of your experience.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="marvel"></category><category term="data"></category><category term="data analysis"></category><category term="csv"></category><category term="collections"></category><category term="namedtuple"></category><category term="Counter"></category><category term="Live Challenge"></category><category term="Python Alicante"></category><category term="Bokeh"></category><category term="coffee"></category></entry><entry><title>Code Challenge 43 - Build a Chatbot Using Python</title><link href="https://pybit.es/codechallenge43.html" rel="alternate"></link><published>2017-11-09T09:35:00+01:00</published><updated>2017-11-09T09:35:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-09:/codechallenge43.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, it's incredible to think how quickly bots have grown in popularity. They're everywhere these days and will play an important role how we work and communicate in the near future! It's about time we go our bot on as well!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, it's incredible to think how quickly bots have grown in popularity. They're everywhere these days and will play an important role how we work and communicate in the near future! It's about time we go our bot on as well!&lt;/p&gt;
&lt;p&gt;We even happily buy a book on chatbots for the Pythonista with the most original submission (and no, bots won't vote for it, PyBites humans will!)&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;It's simple. Create your very own bot!&lt;/p&gt;
&lt;p&gt;The bot can do whatever you want. The aim here is to have a functioning bot written in Python. Stretch yourself, wow your colleagues and friends, this is a cool skill to add to your toolkit.&lt;/p&gt;
&lt;p&gt;Here are some ideas to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a Slack bot that automates a boring task: help scheduling your team lunch, or meetings like &lt;a href="https://x.ai"&gt;Amy&lt;/a&gt; does (although we really hope you are on a &lt;a href="http://www.paulgraham.com/makersschedule.html"&gt;maker's schedule&lt;/a&gt;). You can build an interface to have a bot respond to commands, or even learn from conversations. The possibilities are endless. We built &lt;a href="https://pybit.es/slack-karma-bot.html"&gt;a karmabot&lt;/a&gt; and when it goes offline we get anxious :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a Facebook Messenger bot that responds to specific customer/user requests. Or have it auto-post new items of your blog feed to a group or page, watching for reactions or comments. Need inspiration? See Mike Yusko's &lt;a href="https://github.com/MichaelYusko/Bot-Chucky"&gt;Bot-Chucky&lt;/a&gt; which interacts with various other services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A monitoring bot that reports changes in the weather or stock/share prices and posts them to say &lt;a href="https://twitter.com/pybites/status/866346450699001856"&gt;Twitter&lt;/a&gt; - &lt;a href="https://pybit.es/automate-twitter.html"&gt;Twitter bots are pretty easy to build&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think about making a bot for your favorite messenger service: Whatsapp, Telegram, Signal etc. How can you add value to these platforms? Business best practice: &lt;em&gt;doing 5 minute callbacks whenever you get a new lead.&lt;/em&gt; &lt;a href="https://okdork.com/buying-a-business-jonathan-siegel/"&gt;source&lt;/a&gt; - there's your bot!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Those are a few examples, as with any programming task, think about opportunities to &lt;a href="https://pybit.es/automate_the_boring_stuff_review.html"&gt;automate boring stuff&lt;/a&gt;, pain points, where businesses fail and start designing a solution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;If you've conquered bots already, consider adding further functionality to your bot. How about a bot that takes a command and uses another API? Eg: A specific event or command will tell your bot to tweet something.&lt;/p&gt;
&lt;p&gt;Can you leverage AI (artificial intelligence), NLP (natural language processing) and/or ML (machine learning) technologies? &lt;a href="http://www.telegraph.co.uk/technology/2017/08/01/facebook-shuts-robots-invent-language/"&gt;Watch out though&lt;/a&gt; ;)&lt;/p&gt;
&lt;h2&gt;Penalty&lt;/h2&gt;
&lt;p&gt;On that note you will lose points if you create Skynet. Unless of course you also create a T-800 Model Terminator, then it's okay... sort of.&lt;/p&gt;
&lt;h2&gt;Win a copy of "Designing Bots"!&lt;/h2&gt;
&lt;p&gt;We are really excited about this one. Not convinced yet? OK, we will personally send a copy of &lt;a href="http://www.amazon.com/dp/B0723B91XD/?tag=pyb0f-20"&gt;Designing Bots: Creating Conversational Experiences&lt;/a&gt; to the coolest PR (voting to be done by us and our Slack community).&lt;/p&gt;
&lt;p&gt;3 conditions need to be met though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;There must be at least 5 PRs submitted for this challenge (excluding Bob/Julian), otherwise it is not a competition.&lt;/del&gt; - update: nah ... bots are cool, specially in Python + PR'd to PyBites, the more the merrier, but the best submission gets the book, regardless the number of PRs :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It must be your own code which you developed during this challenge, be cool, no shortcuts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The solution must be original and working Python code, so please include install instructions so we can easily test it out.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Submission deadline: 1st of December 23:59:59 CET.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;A few (Slack biased - we just love their API) resources to help you get started if you're really stuck!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyBites&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pybit.es/slack-karma-bot.html"&gt;Building a Karma bot with Python and the Slack API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/simple-chatbot.html"&gt;How to build a simple Slack Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/twitter-monitor-slack-notify.html"&gt;How to Write a Simple Slack Bot to Monitor Your Brand on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/automate-twitter.html"&gt;Automate Tweeting: how to build a Twitter bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/slackapi/Slack-Python-Onboarding-Tutorial"&gt;pythOnBoarding Bot - Building a simple bot using Slack's Events API in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.hartleybrody.com/fb-messenger-bot/"&gt;Facebook Messenger Bot Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/bots.html"&gt;Full Stack Python Bot Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;PyBites Slack&lt;/h2&gt;
&lt;p&gt;You like these challenges? We have published &lt;a href="https://github.com/pybites/challenges"&gt;quite a few&lt;/a&gt; and we're not planning to stop anytime soon.&lt;/p&gt;
&lt;p&gt;You really like them and plan on PR'ing more in the future? Then consider joining our private Slack channel sending us &lt;a href="mailto:pybitesblog@gmail.com"&gt;an email&lt;/a&gt;. This way you get the unique opportunity to learn from other passionate Pythonistas and share some of your experience.&lt;/p&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;You can PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. We will include it in our review post. Our PR template also lets you reflect a bit on your learning and provide some feedback how we can keep our challenges interesting. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="chatbot"></category><category term="bots"></category><category term="Slack"></category><category term="Facebook"></category><category term="Twitter"></category><category term="monitoring"></category><category term="books"></category><category term="contest"></category><category term="ML"></category><category term="NLP"></category><category term="AI"></category></entry><entry><title>Twitter Digest 2017 Week 44</title><link href="https://pybit.es/twitter_digest_201744.html" rel="alternate"></link><published>2017-11-05T12:54:00+01:00</published><updated>2017-11-05T12:54:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-05:/twitter_digest_201744.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;This first tweet could be helpful with &lt;a href="https://pybit.es/codechallenge42.html"&gt;Code Challenge 42&lt;/a&gt;!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;(Don't Fear) The Regex: A Practical Introduction to Regular Expressions { author: &lt;a href="https://twitter.com/@hawkinjs" target="_blank"&gt;@hawkinjs&lt;/a&gt; } &lt;a href="https://t.co/Ife4UqEQrO" title="https://t.co/Ife4UqEQrO" target="_blank"&gt;https://t.co/Ife4UqEQrO&lt;/a&gt;&lt;/p&gt;‚Äî The Practical Dev (@ThePracticalDev) &lt;a href="https://twitter.com/ThePracticalDev/status/926932587515441152" data-datetime="2017-11-04T22:02:05+00:00"&gt;November 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;And a shameless (totally proud!) plug for our new Python Flask course!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;We are very excited to announce our first &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Flask" target="_blank"&gt;#Flask&lt;/a&gt; course on Udemy. Check it out here:‚Ä¶ &lt;a href="https://t.co/r1tdMWmbdL" title="https://t.co/r1tdMWmbdL" target="_blank"&gt;https://t.co/r1tdMWmbdL&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/925695076277374976" data-datetime="2017-11-01T12:04:39+00:00"&gt;November 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Keep your code absolutely simple. Keep looking at your functions and figure out how you simplify further." - John Romero&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/926568192729894912" data-datetime="2017-11-03T21:54:06+00:00"&gt;November 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Going Fast with SQLite and Python &lt;a href="https://t.co/PwstxTpIat" title="https://t.co/PwstxTpIat" target="_blank"&gt;https://t.co/PwstxTpIat&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/926299676906700801" data-datetime="2017-11-03T04:07:07+00:00"&gt;November 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@anirvan:" target="_blank"&gt;@anirvan:&lt;/a&gt; "67 useful tools, libraries and resources for saving your time as a web developer‚Äù &lt;a href="https://t.co/gZTTNO8Tdz" title="https://t.co/gZTTNO8Tdz" target="_blank"&gt;https://t.co/gZTTNO8Tdz&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/925540028935053312" data-datetime="2017-11-01T01:48:33+00:00"&gt;November 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Regex cheat sheet &lt;a href="https://t.co/ebQTTGRN1B" title="https://t.co/ebQTTGRN1B" target="_blank"&gt;https://t.co/ebQTTGRN1B&lt;/a&gt;&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/926101972142477312" data-datetime="2017-11-02T15:01:30+00:00"&gt;November 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ossia:" target="_blank"&gt;@ossia:&lt;/a&gt; Michigan State's architects planted grass - then waited to see where students wore down paths - before paving sidewalks. Design‚Ä¶&lt;/p&gt;‚Äî Alexander Kallaway‚ö°Ô∏è (@ka11away) &lt;a href="https://twitter.com/ka11away/status/926473449832308737" data-datetime="2017-11-03T15:37:38+00:00"&gt;November 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;:set scrolloff=5 # Setup vim so that scrolling within a file will provide 5 lines of preceding context before the cursor.&lt;/p&gt;‚Äî Command Line Magic (@climagic) &lt;a href="https://twitter.com/climagic/status/925785161622605827" data-datetime="2017-11-01T18:02:37+00:00"&gt;November 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks for the motivation &lt;a href="https://twitter.com/search/#Hacktoberfest" target="_blank"&gt;#Hacktoberfest&lt;/a&gt; and the shirt! &lt;a href="https://t.co/XtlTIwMH5I" title="https://t.co/XtlTIwMH5I" target="_blank"&gt;https://t.co/XtlTIwMH5I&lt;/a&gt;&lt;/p&gt;‚Äî Mohhinder Suresh (@mohhinder) &lt;a href="https://twitter.com/mohhinder/status/926569941121282048" data-datetime="2017-11-03T22:01:03+00:00"&gt;November 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyPy: How to make your code 80 times faster &lt;a href="https://t.co/DASRtVYb08" title="https://t.co/DASRtVYb08" target="_blank"&gt;https://t.co/DASRtVYb08&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/925061612637110272" data-datetime="2017-10-30T18:07:29+00:00"&gt;October 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Today‚Äôs tip by &lt;a href="https://twitter.com/@ratneshkush:" target="_blank"&gt;@ratneshkush:&lt;/a&gt; Struggling for PDF generation using &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; Use ReportLab API. &lt;a href="https://t.co/PhbykBykrJ" title="https://t.co/PhbykBykrJ" target="_blank"&gt;https://t.co/PhbykBykrJ&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/926034688585629703" data-datetime="2017-11-02T10:34:09+00:00"&gt;November 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Introducing &lt;a href="https://twitter.com/search/#TwilioQuest:" target="_blank"&gt;#TwilioQuest:&lt;/a&gt; an interactive, self-paced game to learn how to Twilio. &lt;a href="https://t.co/9kc4ZKMxle" title="https://t.co/9kc4ZKMxle" target="_blank"&gt;https://t.co/9kc4ZKMxle&lt;/a&gt; &lt;a href="https://t.co/ELP9zJWZ9x" title="https://t.co/ELP9zJWZ9x" target="_blank"&gt;https://t.co/ELP9zJWZ9x&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/923557349469708288" data-datetime="2017-10-26T14:30:05+00:00"&gt;October 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#DockerCaptain" target="_blank"&gt;#DockerCaptain&lt;/a&gt; &lt;a href="https://twitter.com/@nickjanetakis" target="_blank"&gt;@nickjanetakis&lt;/a&gt; shares Tip 25: Adding Metadata to Your &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; Images with Labels‚Ä¶ &lt;a href="https://t.co/B56kD7OXTk" title="https://t.co/B56kD7OXTk" target="_blank"&gt;https://t.co/B56kD7OXTk&lt;/a&gt;&lt;/p&gt;‚Äî Docker (@Docker) &lt;a href="https://twitter.com/Docker/status/926950946139267077" data-datetime="2017-11-04T23:15:02+00:00"&gt;November 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Dramatically improve your skills with this simplified but more thorough guide on object-oriented programming in P... &lt;a href="https://t.co/h2jAD8IoUL" title="https://t.co/h2jAD8IoUL" target="_blank"&gt;https://t.co/h2jAD8IoUL&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/926056299967778816" data-datetime="2017-11-02T12:00:01+00:00"&gt;November 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;This next one just because I love Stranger Things!&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ericbearden_:" target="_blank"&gt;@ericbearden_:&lt;/a&gt; Stranger Things Stranger Things 2 Strangers and Things 2 Strange 4 Things 5 Things The Strange and the Things: Tokyo‚Ä¶&lt;/p&gt;‚Äî Milton Lenis üêç (@MiltonLn) &lt;a href="https://twitter.com/MiltonLn/status/926816705116082176" data-datetime="2017-11-04T14:21:36+00:00"&gt;November 04, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Twilio"></category><category term="regex"></category><category term="learning"></category><category term="web development"></category><category term="tools"></category><category term="Docker"></category><category term="cheatsheet"></category><category term="design"></category><category term="vim"></category><category term="Hacktoberfest"></category><category term="sqlite"></category><category term="data science"></category><category term="PyPy"></category><category term="ReportLab"></category><category term="PDF"></category><category term="OOP"></category></entry><entry><title>Code Challenge 42 - Mastering Regular Expressions</title><link href="https://pybit.es/codechallenge42.html" rel="alternate"></link><published>2017-11-03T09:30:00+01:00</published><updated>2017-11-03T09:30:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-03:/codechallenge42.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, it's beginning of the month so we're busy selecting some cool code challenges for you to work on to hone your Python skills. Regular Expressions was a long time coming so let's get it out there. We hope we hit a decent intermediate level with this challenge. If you have questions ask us in the comments or join our Slack.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, it's beginning of the month so we're busy selecting some cool code challenges for you to work on to hone your Python skills. Regular Expressions was a long time coming so let's get it out there. We hope we hit a decent intermediate level with this challenge. If you have questions ask us in the comments or join our Slack (see further below).&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Like the &lt;a href="https://pybit.es/pages/challenges.html"&gt;initial challenges&lt;/a&gt; we worked on &lt;a href="https://pybit.es/pytest-book.html"&gt;some pytests&lt;/a&gt; so you can verify your regexes, so the steps would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you don't have pytest installed &lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;make a virtual env&lt;/a&gt; and pip install pytest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;code&gt;test_regex.py&lt;/code&gt; and read the tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;code&gt;regex.py&lt;/code&gt; and check the docstrings. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now it's time to get those regexes in! Start adding them to the functions in &lt;code&gt;regex.py&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can run the tests at any time, when all done and good, they should pass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pytest test_regex.py
...
collected &lt;span class="m"&gt;6&lt;/span&gt; items

test_regex.py ......

&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; passed in &lt;span class="m"&gt;0&lt;/span&gt;.04 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We might give away too much linking to our regex article, but sure: if you're stuck checkout &lt;a href="https://pybit.es/mastering-regex.html"&gt;10 Tips to Get More out of Your Regexes&lt;/a&gt;: we found inspiration there putting this challenge together.&lt;/p&gt;
&lt;p&gt;However you learn the most if you really try it yourself first!&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;Ideally we reach 10 regexes for this challenge so if you want to  contribute 4 more regex exercises, just edit &lt;code&gt;regex.py&lt;/code&gt; and &lt;code&gt;test_regex.py&lt;/code&gt; (yes please do provide tests) and &lt;a href="https://github.com/pybites/challenges"&gt;open a PR&lt;/a&gt;, the challenge folder is &lt;a href="https://github.com/pybites/challenges/tree/master/42"&gt;here&lt;/a&gt; (email or comment the code is fine too).&lt;/p&gt;
&lt;p&gt;By the way, on our &lt;a href="https://pybit.es/tag/regex.html"&gt;regex tag&lt;/a&gt; I saw we featured &lt;a href="https://twitter.com/RegexTip"&gt;RegexTip&lt;/a&gt; quite a bit in our &lt;a href="https://pybit.es/pages/news.html"&gt;weekly Twitter digests&lt;/a&gt;, so maybe that's an interesting account to follow if you want to learn more about Regexes.&lt;/p&gt;
&lt;h2&gt;Slack Channel&lt;/h2&gt;
&lt;p&gt;For a beginner some of our challenges might be overwhelming. Another observation is that the process of doing these challenges is as interesting as the final result.&lt;/p&gt;
&lt;p&gt;We are eager to expand our awesome PyBites community. For this reason we are opening up our private Slack for you to discuss our code challenges and let us know how you're progressing your Python skills. Send us &lt;a href="mailto:pybitesblog@gmail.com"&gt;an email&lt;/a&gt; if you want to join. &lt;/p&gt;
&lt;p&gt;This way you get the unique opportunity to learn from other Pythonistas and share some of your own learning.&lt;/p&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;You can PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. We will include it in our review post. Our PR template also lets you reflect a bit on your learning and provide some feedback how we can keep our challenges interesting. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="regex"></category><category term="regular expressions"></category><category term="findall"></category><category term="parsing"></category><category term="pytest"></category></entry><entry><title>Code Challenge 40 - Daily Python Tip Part 1 - Make a Web App - Review</title><link href="https://pybit.es/codechallenge40_review.html" rel="alternate"></link><published>2017-11-01T23:20:00+01:00</published><updated>2017-11-01T23:20:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-01:/codechallenge40_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge40.html"&gt;Daily Python Tip Part 1 - Make a Web App&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge40.html"&gt;Daily Python Tip Part 1 - Make a Web App&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; used Bottle again: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This was a really cool project where I learned more about various modules. I also got to refactor it pretty well, adding pytests and scoring a 10 on BetterCodeHub. I would probably not have done it without raising the challenge. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The repo is &lt;a href="https://github.com/pybites/pytip"&gt;here&lt;/a&gt; and the app is hosted &lt;a href="https://pytip.herokuapp.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Update 11th of Dec 2017: this app led to a guest post on Real Python - &lt;a href="https://realpython.com/blog/python/building-a-simple-web-app-with-bottle-sqlalchemy-twitter-api/"&gt;check it out here&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dseptem"&gt;dseptem&lt;/a&gt; made a cool app using Apscheduler, Elasticsearch, Flask, and AngularJS! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Easier than expected, but got kinda lazy on the AngularJS part =P. IMPORTANT: You need to have Elasticsearch running on localhost:9200 for this to work!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/pybites/challenges/tree/community/40/dseptem"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="Daily Python Tip"></category><category term="Bottle"></category><category term="Twitter API"></category><category term="Tweepy"></category><category term="pytest"></category><category term="Heroku"></category><category term="BetterCodeHub"></category></entry><entry><title>Code Challenge 39 - Writing Tests With Pytest - Review</title><link href="https://pybit.es/codechallenge39_review.html" rel="alternate"></link><published>2017-11-01T23:10:00+01:00</published><updated>2017-11-01T23:10:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-01:/codechallenge39_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge39.html"&gt;Writing Tests With Pytest&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge39.html"&gt;Writing Tests With Pytest&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;Julian and myself both wrote some tests with pytest for this challenge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/hobojoe1848"&gt;hobojoe1848&lt;/a&gt;: This is the simplest of the simple. It's a single PyTest function to test whether the output of a very simple text conversion script works. My first PyTest script ever! Code is &lt;a href="https://github.com/pybites/challenges/tree/community/39/hobojoe1848"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt;: First time use of pytest for DB tests, used a fixture, was good learning. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/39/bbelderbos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pytest is a great tool and writing good tests is a fundamental skill. Also writing code that needs to be tested changes your design for the better.&lt;/p&gt;
&lt;p&gt;Given the amount on activity on PyBites we only touched the surface though. Luckily Brian Okken's &lt;a href="https://pybit.es/pytest-book.html"&gt;great book&lt;/a&gt; saved and will save us a lot of time learning the ins and outs of pytest. Julian will also do a quick beginner guide ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="pytest"></category><category term="testing"></category><category term="fixtures"></category><category term="pytip"></category></entry><entry><title>Code Challenge 38 - Build Your Own Hacktoberfest Checker With Bottle - Review</title><link href="https://pybit.es/codechallenge38_review.html" rel="alternate"></link><published>2017-11-01T23:00:00+01:00</published><updated>2017-11-01T23:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-01:/codechallenge38_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge38.html"&gt;Build Your Own Hacktoberfest Checker With Bottle&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge38.html"&gt;Build Your Own Hacktoberfest Checker With Bottle&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;We had quite a few submissions, nice!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt;: Martin wrote a simple script to check the status of your Hacktoberfest progress. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/38/clamytoe"&gt;here&lt;/a&gt;. He did it on his iphone using &lt;a href="https://itunes.apple.com/us/app/pythonista-3/id1085978097?mt=8"&gt;Pythonista&lt;/a&gt;, cool!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/kiniadit"&gt;kiniadit&lt;/a&gt; made &lt;code&gt;hkfst.py&lt;/code&gt; with features: anonymous API access, opens localhost, checks PRs for a single username and returns Hacktoberfest progress. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/38/kiniadit"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pweids"&gt;pweids&lt;/a&gt;: This is really hacked together. It's as simple as possible to complete the challenge. No glitz, glam, or stability. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/38/pweids"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt;: Good workout using Bottle, Github API. TODO: write some pytests (mocking the API). Code is &lt;a href="https://github.com/pybites/challenges/tree/community/38/bbelderbos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We hope you persisted through #Hacktoberfest so you get your DigitalOcean's free T-shirt. If you do, send us a selfie :)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="Hacktoberfest"></category><category term="DigitalOcean"></category><category term="Bottle"></category><category term="GitHub"></category><category term="API"></category><category term="Web development"></category></entry><entry><title>Code Challenge 41 - Daily Python Tip Part 2 - Build an API</title><link href="https://pybit.es/codechallenge41.html" rel="alternate"></link><published>2017-11-01T12:20:00+01:00</published><updated>2017-11-01T12:20:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-11-01:/codechallenge41.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, you heard of &lt;a href="https://twitter.com/python_tip"&gt;Daily Python Tip&lt;/a&gt;? It's a Twitter account that posts one python tip per day, run by &lt;a href="https://twitter.com/karlafej"&gt;@karlafej&lt;/a&gt; and &lt;a href="https://twitter.com/simecek"&gt;@simecek&lt;/a&gt;. We partnered up with them and use their awesome collection of tips to build a web app (part 1) and a simple API (part 2).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It's not that I'm so smart, it's just that I stay with problems longer. - A. Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, you heard of &lt;a href="https://twitter.com/python_tip"&gt;Daily Python Tip&lt;/a&gt;? It's a Twitter account that posts one python tip per day, run by &lt;a href="https://twitter.com/karlafej"&gt;@karlafej&lt;/a&gt; and &lt;a href="https://twitter.com/simecek"&gt;@simecek&lt;/a&gt;. We partnered up with them and use their awesome collection of tips to build a web app (part 1) and a simple API (part 2).&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;If you built a web app for &lt;a href="https://pybit.es/codechallenge40.html"&gt;part 1&lt;/a&gt; you could use its data / backend. If not just use the &lt;em&gt;Daily Python Tip&lt;/em&gt;'s backend. We want this challenge to be independent so API lovers are not required to build a web app first.&lt;/p&gt;
&lt;p&gt;The goal is to make a simple API using Flask, Django Rest Framework of another (Python) framework. Something the guys at &lt;em&gt;Daily Python Tip&lt;/em&gt; could actually use!&lt;/p&gt;
&lt;p&gt;HTTP verbs / actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET -&amp;gt; here is &lt;a href="https://t.co/oARrOmrin7"&gt;their google spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST -&amp;gt; here is &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScsHklRH2-uplGYH_vxhtIin-zJS44bXQkAWCH7_N7nUdrGXw/viewform"&gt;their Google form&lt;/a&gt;. "We are consenting adults" so we should prevent duplicates and bad data to be entered so you should add proper validation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no duplicate postings,&lt;/li&gt;
&lt;li&gt;max length of 140 characters (tips gets posted to Twitter),&lt;/li&gt;
&lt;li&gt;discard new tips that are too similar to existing (this might be complex but give it some thought ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you took part 1 and are using your own DB / backend you could also implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PUT (edit) -&amp;gt; for example make the Published boolean editable&lt;/li&gt;
&lt;li&gt;DELETE -&amp;gt; not sure if applicable but could be used to remove bad data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Add Twitter login / authentication to your API so you can implement more actions:&lt;/li&gt;
&lt;li&gt;Only allow POST upon login&lt;/li&gt;
&lt;li&gt;Add your Twitter handle upon POSTing a new tip&lt;/li&gt;
&lt;li&gt;Make a user endpoint with likes, bookmarks, etc&lt;/li&gt;
&lt;li&gt;Be creative ...&lt;/li&gt;
&lt;li&gt;Host it to the cloud (Heroku, PythonAnywhere, ...)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Slack Channel&lt;/h2&gt;
&lt;p&gt;For a beginner some of our challenges might be overwhelming. Another observation is that the process of doing these challenges is as interesting as the final result.&lt;/p&gt;
&lt;p&gt;We are eager to expand our awesome PyBites community. For this reason we are opening up our private Slack for you to discuss our code challenges and let us know how you're progressing your Python skills. Send us &lt;a href="mailto:pybitesblog@gmail.com"&gt;an email&lt;/a&gt; if you want to join. &lt;/p&gt;
&lt;p&gt;This way you get the unique opportunity to learn from other Pythonistas and share some of your own learning.&lt;/p&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;To get credit PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="Daily Python Tip"></category><category term="Django"></category><category term="Flask"></category><category term="Bottle"></category><category term="API"></category></entry><entry><title>Twitter Digest 2017 Week 43</title><link href="https://pybit.es/twitter_digest_201743.html" rel="alternate"></link><published>2017-10-29T19:57:00+01:00</published><updated>2017-10-29T19:57:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-29:/twitter_digest_201743.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@v_vashishta:" target="_blank"&gt;@v_vashishta:&lt;/a&gt; &lt;a href="https://twitter.com/search/#RaspberryPi:" target="_blank"&gt;#RaspberryPi:&lt;/a&gt; Facial landmarks + drowsiness detection with OpenCV and dlib &lt;a href="https://t.co/8vRv1z5ffU" title="https://t.co/8vRv1z5ffU" target="_blank"&gt;https://t.co/8vRv1z5ffU&lt;/a&gt; via &lt;a href="https://twitter.com/@pyimagesearch" target="_blank"&gt;@pyimagesearch&lt;/a&gt; &lt;a href="https://twitter.com/search/#Mac‚Ä¶" target="_blank"&gt;#Mac‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/923560479661936640" data-datetime="2017-10-26T14:42:31+00:00"&gt;October 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;We are starting a series of articles on data structures in Python with the unique solutions of our users. &lt;a href="https://t.co/ngryVXKvTN" title="https://t.co/ngryVXKvTN" target="_blank"&gt;https://t.co/ngryVXKvTN&lt;/a&gt;&lt;/p&gt;‚Äî CheckiO (@PlayCheckiO) &lt;a href="https://twitter.com/PlayCheckiO/status/922886408964071425" data-datetime="2017-10-24T18:04:00+00:00"&gt;October 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;7 shortcuts of a highly effective Sublime Text user &lt;a href="https://t.co/Lres4k8yhH" title="https://t.co/Lres4k8yhH" target="_blank"&gt;https://t.co/Lres4k8yhH&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/922947657378570240" data-datetime="2017-10-24T22:07:23+00:00"&gt;October 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Top 15 Frameworks for &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; Experts &lt;a href="https://twitter.com/search/#KDN" target="_blank"&gt;#KDN&lt;/a&gt; &lt;a href="https://t.co/xwIProHjNF" title="https://t.co/xwIProHjNF" target="_blank"&gt;https://t.co/xwIProHjNF&lt;/a&gt;&lt;/p&gt;‚Äî KDnuggets (@kdnuggets) &lt;a href="https://twitter.com/kdnuggets/status/924410560069980160" data-datetime="2017-10-28T23:00:26+00:00"&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ThePracticalDev:" target="_blank"&gt;@ThePracticalDev:&lt;/a&gt; Test Automation is not Automated Testing { author: &lt;a href="https://twitter.com/@roesslerj" target="_blank"&gt;@roesslerj&lt;/a&gt; } &lt;a href="https://t.co/fOkKrDjoVe" title="https://t.co/fOkKrDjoVe" target="_blank"&gt;https://t.co/fOkKrDjoVe&lt;/a&gt;&lt;/p&gt;‚Äî The Practical Dev (@ThePracticalDev) &lt;a href="https://twitter.com/ThePracticalDev/status/924335958551662598" data-datetime="2017-10-28T18:04:00+00:00"&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hello World! We've just launched the website for DjangoCon Europe 2018. Will you join us on this journey?‚Ä¶ &lt;a href="https://t.co/MTC6IenId3" title="https://t.co/MTC6IenId3" target="_blank"&gt;https://t.co/MTC6IenId3&lt;/a&gt;&lt;/p&gt;‚Äî DjangoCon Europe (@DjangoConEurope) &lt;a href="https://twitter.com/DjangoConEurope/status/922578434492129280" data-datetime="2017-10-23T21:40:14+00:00"&gt;October 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"A primary cause of complexity is that software vendors uncritically adopt almost any feature that users want."- Niklaus Wirth&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/924016355405418496" data-datetime="2017-10-27T20:54:01+00:00"&gt;October 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Deep Residual Networks for Image Classification with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; + NumPy &lt;a href="https://t.co/RYA50yqNYN" title="https://t.co/RYA50yqNYN" target="_blank"&gt;https://t.co/RYA50yqNYN&lt;/a&gt; &lt;a href="https://t.co/a6QY8GWV1h" title="https://t.co/a6QY8GWV1h" target="_blank"&gt;https://t.co/a6QY8GWV1h&lt;/a&gt;&lt;/p&gt;‚Äî KDnuggets (@kdnuggets) &lt;a href="https://twitter.com/kdnuggets/status/924349299797962755" data-datetime="2017-10-28T18:57:01+00:00"&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@SylvainCorlay:" target="_blank"&gt;@SylvainCorlay:&lt;/a&gt; Check out the &lt;a href="https://twitter.com/@ProjectJupyter" target="_blank"&gt;@ProjectJupyter&lt;/a&gt; magic for compiling &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; code with &lt;a href="https://twitter.com/search/#pythran" target="_blank"&gt;#pythran&lt;/a&gt; in a notebook Cell, and the improved perfor‚Ä¶&lt;/p&gt;‚Äî Project Jupyter (@ProjectJupyter) &lt;a href="https://twitter.com/ProjectJupyter/status/922445509494738945" data-datetime="2017-10-23T12:52:02+00:00"&gt;October 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tutorial: 3D Animation With Python and Blender! &lt;a href="https://t.co/4Yvdf4rhCd" title="https://t.co/4Yvdf4rhCd" target="_blank"&gt;https://t.co/4Yvdf4rhCd&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/924427909904789504" data-datetime="2017-10-29T00:09:23+00:00"&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dabeaz:" target="_blank"&gt;@dabeaz:&lt;/a&gt; And in today's Python WTF, remove logging messages via python -O and curly braces: assert { log.debug('Hey'), log.debug(‚Ä¶&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/923970227465019397" data-datetime="2017-10-27T17:50:43+00:00"&gt;October 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TomAugspurger:" target="_blank"&gt;@TomAugspurger:&lt;/a&gt; Pandas 0.21.0 is officially out! Wheels are up on PyPI and conda binaries will be available soon. Release Notes: &lt;a href="https:‚Ä¶" title="https:‚Ä¶" target="_blank"&gt;https:‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/924359039537922048" data-datetime="2017-10-28T19:35:43+00:00"&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h1&gt;selfpromo Ha!&lt;/h1&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;If anybody wants to practice Web App development, &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; hosts a simple challenge on our data. &lt;a href="https://twitter.com/search/#selfpromo" target="_blank"&gt;#selfpromo&lt;/a&gt; &lt;a href="https://t.co/xi2eJrqYnX" title="https://t.co/xi2eJrqYnX" target="_blank"&gt;https://t.co/xi2eJrqYnX&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/923317432587927552" data-datetime="2017-10-25T22:36:44+00:00"&gt;October 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Deepo: a Docker image containing almost all popular deep learning frameworks. [x-post /r/MachineLearning] &lt;a href="https://t.co/JjWxAi33Z1" title="https://t.co/JjWxAi33Z1" target="_blank"&gt;https://t.co/JjWxAi33Z1&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/924063168925708288" data-datetime="2017-10-28T00:00:02+00:00"&gt;October 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@turnoff_us:" target="_blank"&gt;@turnoff_us:&lt;/a&gt; Battle of Programming Languages &lt;a href="https://twitter.com/search/#java" target="_blank"&gt;#java&lt;/a&gt; &lt;a href="https://twitter.com/search/#golang" target="_blank"&gt;#golang&lt;/a&gt; &lt;a href="https://twitter.com/search/#kotlin" target="_blank"&gt;#kotlin&lt;/a&gt; &lt;a href="https://twitter.com/search/#scala" target="_blank"&gt;#scala&lt;/a&gt; &lt;a href="https://twitter.com/search/#comic" target="_blank"&gt;#comic&lt;/a&gt; &lt;a href="https://t.co/rs6Df48LTv" title="https://t.co/rs6Df48LTv" target="_blank"&gt;https://t.co/rs6Df48LTv&lt;/a&gt; &lt;a href="https://t.co/Y5OvhADKZ0" title="https://t.co/Y5OvhADKZ0" target="_blank"&gt;https://t.co/Y5OvhADKZ0&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/924482443008204800" data-datetime="2017-10-29T03:46:05+00:00"&gt;October 29, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="OpenCV"></category><category term="Raspberry Pi"></category><category term="dictionaries"></category><category term="machine learning"></category><category term="NumPy"></category><category term="tests"></category><category term="Django"></category><category term="Jupyter"></category><category term="animation"></category><category term="Blender"></category><category term="Sublime"></category><category term="debugging"></category><category term="Pandas"></category><category term="learning"></category><category term="challenges"></category><category term="Docker"></category><category term="Deepo"></category></entry><entry><title>Bootstrap Your Next Python Project With Cookiecutter</title><link href="https://pybit.es/python-cookiecutter.html" rel="alternate"></link><published>2017-10-25T00:11:00+02:00</published><updated>2017-10-25T00:11:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-10-25:/python-cookiecutter.html</id><summary type="html">&lt;p&gt;I finally did it! I bootstrapped my first project with Cookiecutter. There is a lot to discover but wow this tool can save you a ton of time, making your project more professional.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I finally did it! I bootstrapped my first project with Cookiecutter. There is a lot to discover but wow this tool can save you a ton of time, making your project more professional.&lt;/p&gt;
&lt;p&gt;This is just a quick article to document this nice tool brought to us by the authors of &lt;a href="https://www.amazon.com/dp/0692915729/?tag=pyb0f-20"&gt;Two Scoops of Django&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cookiecutter does one thing and it does it well - Daniel Roy Greenfeld&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First I ran a pip install but I could not find it in my path so I went full force with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install cookiecutter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's on Mac. On Ubuntu you would do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install cookiecutter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As it's a tool I will use to boostrap various projects I think having it outside a virtualenv is justified.&lt;/p&gt;
&lt;h2&gt;How to start&lt;/h2&gt;
&lt;p&gt;The best place to check out is their latest documentation jumping straight to the &lt;a href="https://cookiecutter.readthedocs.io/en/latest/usage.html"&gt;usage section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first I pulled the repo and filled out the &lt;code&gt;cookiecutter.json&lt;/code&gt;, a convenient defaults file for hands off (&lt;code&gt;--no-input&lt;/code&gt;) project creation. &lt;/p&gt;
&lt;p&gt;The interactive option is convenient too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cookiecutter&lt;/span&gt; &lt;span class="nl"&gt;gh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;audreyr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pypackage&lt;/span&gt;
&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Audrey&lt;/span&gt; &lt;span class="n"&gt;Roy&lt;/span&gt; &lt;span class="n"&gt;Greenfeld&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="n"&gt;Belderbos&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;aroy&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;alum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bobbelderbos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;github_username&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;audreyr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bbelderbos&lt;/span&gt;
&lt;span class="n"&gt;project_name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Boilerplate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt; &lt;span class="n"&gt;Hacktoberfest&lt;/span&gt; &lt;span class="n"&gt;Checker&lt;/span&gt;
&lt;span class="n"&gt;project_slug&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pybites_hacktoberfest_checker&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;project_short_description&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Boilerplate&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;boilerplate&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Checking&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;PRs&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Digital&lt;/span&gt; &lt;span class="n"&gt;Ocean&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;Hacktoberfest&lt;/span&gt; &lt;span class="n"&gt;challenge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Also&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;pypi_username&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderbos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;use_pytest&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;use_pypi_deployment_with_travis&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Select&lt;/span&gt; &lt;span class="nl"&gt;command_line_interface&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;
&lt;span class="n"&gt;Choose&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;create_author_file&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Select&lt;/span&gt; &lt;span class="nl"&gt;open_source_license&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;MIT&lt;/span&gt; &lt;span class="n"&gt;license&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BSD&lt;/span&gt; &lt;span class="n"&gt;license&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ISC&lt;/span&gt; &lt;span class="n"&gt;license&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Apache&lt;/span&gt; &lt;span class="n"&gt;Software&lt;/span&gt; &lt;span class="n"&gt;License&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;GNU&lt;/span&gt; &lt;span class="n"&gt;General&lt;/span&gt; &lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="n"&gt;License&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;
&lt;span class="n"&gt;Choose&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I only then realized that there are project based cookiecutters so I picked &lt;a href="https://github.com/avelino/cookiecutter-bottle"&gt;the bottle one&lt;/a&gt;, the micro web-framework I want to use for our &lt;a href="https://pybit.es/codechallenge38.html"&gt;code challenge 38&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It could not be easier: just point to the Github repo. It is more bare bones than cookiecutter-pypackage though:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cookiecutter&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/avelino/cookiecutter-bottle.git&lt;/span&gt;
&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Thiago&lt;/span&gt; &lt;span class="n"&gt;Avelino&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="n"&gt;Belderbos&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thiago&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;avelino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bobbelderbos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;github_username&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;avelino&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bbelderbos&lt;/span&gt;
&lt;span class="n"&gt;project_name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt; &lt;span class="n"&gt;Hacktoberfest&lt;/span&gt; &lt;span class="n"&gt;Checker&lt;/span&gt;
&lt;span class="n"&gt;app_name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mybottleapp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hacktoberfestapp&lt;/span&gt;
&lt;span class="n"&gt;project_short_description&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;cookiecutter&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;creating&lt;/span&gt; &lt;span class="n"&gt;reusable&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt; &lt;span class="n"&gt;projects&lt;/span&gt; &lt;span class="n"&gt;quickly&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Checking&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;PRs&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Digital&lt;/span&gt; &lt;span class="n"&gt;Ocean&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;Hacktoberfest&lt;/span&gt; &lt;span class="n"&gt;challenge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Also&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;Bottle&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you can cd into it, do a git init, make a virtual env and install the requirements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv -p /Users/bbelderb/anaconda/bin/python venv
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;venv&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip install -r requirements.txt
...
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ git init
Initialized empty Git repository in /Users/bbelderb/code/hacktoberfestapp/.git/
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ git status
...

    .gitignore
    README.rst
    hacktoberfestapp/
    manage.py
    requirements.txt
    tests/

&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ git add . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class="s2"&gt;&amp;quot;init commit&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ python manage.py  runserver
...
Listening on http://0.0.0.0:8080/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice:&lt;/p&gt;
&lt;p&gt;&lt;img alt="default Bottle cookiecutter homepage" src="https://pybit.es/images/cookiecutter_bottle.png"&gt;&lt;/p&gt;
&lt;p&gt;And here is the directory structure with some bootstrap code:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bottle bootstrap folder structure and files" src="https://pybit.es/images/bottle_app_boilerplate.png"&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think the main take away is that Cookiecutter takes a lot of worries away regarding setup, folder structure, required files, etc. It might be overkill for some projects, but it does add consistency  across your projects and endorses best practices.&lt;/p&gt;
&lt;p&gt;I only scratched the service. I really would like to try &lt;a href="https://github.com/sloria/cookiecutter-flask"&gt;cookiecutter-flask&lt;/a&gt;, &lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt; and &lt;a href="https://github.com/agconti/cookiecutter-django-rest"&gt;cookiecutter-django-rest&lt;/a&gt; for future projects. Or how to create our own PyBites Cookiecutter? And what about defining pre- and post-generate hooks (Python or shell scripts to run before or after generating a project)? Enough to explore for a follow-up article ...&lt;/p&gt;
&lt;p&gt;Feel free to share what you have used Cookiecutter for in the comments below. &lt;/p&gt;
&lt;p&gt;&lt;img alt="cookiecutter is a nice and clean way to bootstrap a Python project" src="https://pybit.es/images/banners/pb_cookiecutter.png"&gt;&lt;/p&gt;
&lt;h2&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter GH repo&lt;/a&gt;: lists of awesome features that make Cookiecutter a great tool. Scroll down to &lt;a href="https://github.com/audreyr/cookiecutter#a-pantry-full-of-cookiecutters"&gt;&lt;em&gt;A Pantry Full of Cookiecutters&lt;/em&gt;&lt;/a&gt; for &lt;em&gt;a list of cookiecutters (aka Cookiecutter project templates) for you to use or fork&lt;/em&gt;, there are a lot!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cookiecutter.readthedocs.io/en/latest/"&gt;Cookiecutter docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Author's post: &lt;a href="https://www.pydanny.com/cookie-project-templates-made-easy.html"&gt;Cookiecutter: Project Templates Made Easy&lt;/a&gt; introducing the project, including how to create your own cookiecutter templates.&lt;/li&gt;
&lt;li&gt;An &amp;gt; 3 hours in-depth video course by Michael Kennedy: &lt;a href="https://training.talkpython.fm/courses/explore_cookiecutter_course/using-and-mastering-cookiecutter-templates-for-project-creation"&gt;Using and Mastering Cookiecutter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Cookiecutter"></category><category term="setup"></category><category term="testing"></category><category term="packages"></category><category term="modules"></category><category term="Bottle"></category></entry><entry><title>How to Use Pdb to Debug Your Code</title><link href="https://pybit.es/pdb-debugger.html" rel="alternate"></link><published>2017-10-24T13:00:00+02:00</published><updated>2017-10-24T13:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-10-24:/pdb-debugger.html</id><summary type="html">&lt;p&gt;The larger part of our coding time is spent reading and debugging code already written. For this Python's &lt;a href="https://docs.python.org/3.7/library/pdb.html"&gt;pdb&lt;/a&gt; is an unmissable module in your Python toolbox. In this article I show you the most common options and some practical examples.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The larger part of our coding time is spent reading and debugging code already written. For this Python's &lt;a href="https://docs.python.org/3.7/library/pdb.html"&gt;pdb&lt;/a&gt; is an unmissable module in your Python toolbox. In this article I show you the most common options and some practical examples.&lt;/p&gt;
&lt;h2&gt;How to invoke the debugger?&lt;/h2&gt;
&lt;p&gt;You can invoke it as a script which puts you right at the start:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt; &lt;span class="n"&gt;buses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;buses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More commonly you want to break into the debugger from a running program. To do this use this one-liner at the location where you want to start debugging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note that Python 3.7 improves this adding a new built-in function called &lt;code&gt;breakpoint()&lt;/code&gt; - see &lt;a href="https://www.python.org/dev/peps/pep-0553/"&gt;PEP 553&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Common switches&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.7/library/pdb.html#debugger-commands"&gt;There are many&lt;/a&gt;! &lt;/p&gt;
&lt;p&gt;You probably will use only a few though and pdb lets you conveniently use their one letter shortcuts. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stepping through a program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;n&lt;/strong&gt;(ext) -&amp;gt; Continue execution until the next line in the current function is reached or it returns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt;(tep) -&amp;gt; Execute the current line, stop at the first possible occasion (either in a function that is called or on the next line in the current function).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;r&lt;/strong&gt;(eturn) -&amp;gt; Continue execution until the current function returns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;u&lt;/strong&gt;(p) and &lt;strong&gt;d&lt;/strong&gt;(own) -&amp;gt; Move the current frame count (default one) levels up/down in the stack trace (to an older/newer frame).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c&lt;/strong&gt;(ont(inue)) can be useful if you have multiple breakpoints, it continues execution until a next breakpoint is encountered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unt&lt;/strong&gt;(il) [lineno] -&amp;gt; Without argument, continue execution until the line with a number greater than the current one is reached. -&amp;gt; useful to get out of a for loop.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;b&lt;/strong&gt;(reak) [lineno] and &lt;strong&gt;cl&lt;/strong&gt;(ear) to set / clear a break point in the current file (it even accepts a condition).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference between next (n) and step (s) is that step stops inside a called function, while next executes called functions at (nearly) full speed, only stopping at the next line in the current function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Print context&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First of all at the pdb prompt you can type any variables of the program (including builtins like &lt;code&gt;locals()&lt;/code&gt;), or set new variables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt;(ist) -&amp;gt; List source code for the current file. Without arguments, list 11 lines around the current line or continue the previous listing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt;(here) -&amp;gt; Print a stack trace, with the most recent frame at the bottom. An arrow indicates the current frame, which determines the context of most commands. -&amp;gt; handy for web frameworks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bt&lt;/strong&gt; -&amp;gt; Get a stack trace of the functions that have been called so far.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pp&lt;/strong&gt; expression -&amp;gt; Like the p command, except the value of the expression is pretty-printed using the pprint module -&amp;gt; very useful for nested data structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cntrl + d or &lt;strong&gt;q&lt;/strong&gt;(uit) to leave the debugger and stop execution.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;h&lt;/strong&gt;(elp) or ? to list all commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Single letter variables are bad for code readability, but the clash with common pdb shortcuts is another reason to avoid them at all costs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Hello World example&lt;/h2&gt;
&lt;p&gt;OK enough theory let's write some code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;val2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;newval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;newval&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes it's silly and the bug is obvious, but the goal is to show pdb.&lt;/p&gt;
&lt;p&gt;As you see I already set the breakpoint. When I run this code it drops into the debugger. It shows me the next line to be executed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; /Users/bbelderb/code/sum.py(11)&amp;lt;module&amp;gt;()
-&amp;gt; for val in values:
(Pdb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can print variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(Pdb) values
range(1, 11)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Stepping through the for loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;          &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;      &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;      &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can move the breakpoint to the function but as it is little code I just use &lt;strong&gt;s&lt;/strong&gt;(tep):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; /Users/bbelderb/code/sum.py(11)&amp;lt;module&amp;gt;()
-&amp;gt; for val in values:
(Pdb) n
&amp;gt; /Users/bbelderb/code/sum.py(12)&amp;lt;module&amp;gt;()
-&amp;gt; val = sum(val, 1)
(Pdb) s
--Call--
&amp;gt; /Users/bbelderb/code/sum.py(1)sum()
-&amp;gt; def sum(val1, val2):
(Pdb) s
&amp;gt; /Users/bbelderb/code/sum.py(2)sum()
-&amp;gt; val2 = 0
(Pdb) s
&amp;gt; /Users/bbelderb/code/sum.py(3)sum()
-&amp;gt; newval = val1 + val2
(Pdb) val1
3
(Pdb) val2
0
(Pdb) n
&amp;gt; /Users/bbelderb/code/sum.py(4)sum()
-&amp;gt; return newval
(Pdb) newval
3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is obvious that val2 gets explicitly set to 0, but if it was less obvious inspecting the variables might be all you need.&lt;/p&gt;
&lt;h2&gt;Real World example&lt;/h2&gt;
&lt;p&gt;Another example I found &lt;a href="https://stackoverflow.com/q/44680650"&gt;on SO&lt;/a&gt;. I shortened the code a bit to keep it simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getbuses&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://ctabustracker.com/bustime/map/getBusesForRoute.jsp?route=22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rt22.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rt22.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;running_buses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bus&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;idbus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findtext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findtext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;lon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findtext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findtext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;running_buses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idbus&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;running_buses&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_buses&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Running buses on route 22:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;running_buses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bus number: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;- Latitude: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;- Longitude: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;- Direction: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;running_buses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getbuses&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;print_routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_buses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The leads to weird results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bus number: 1906
- Latitude: 41.9041748046875
- Longitude: -87.63142395019531
- Direction: North Bound
Bus number: 1932
- Latitude: 41.968283335367836
- Longitude: South Bound
- Direction: -87.66738806830512
Bus number: 1910
- Latitude: -87.67295837402344
- Longitude: 42.01838684082031
- Direction: North Bound
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is again a pretty simple use case for pdb:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; /Users/bbelderb/code/debug.py(14)getbuses()
-&amp;gt; for bus in doc.findall(&amp;#39;bus&amp;#39;):
(Pdb) n
...
&amp;gt; /Users/bbelderb/code/debug.py(19)getbuses()
-&amp;gt; running_buses[idbus] = {lat, lon, direction}
(Pdb) idbus
1906
(Pdb) lat
41.90836715698242
(Pdb) lon
-87.63148498535156
(Pdb) direction
&amp;#39;North Bound&amp;#39;
(Pdb) n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variables seem correct, but if I print the data structure I see they appear in a different order: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; /Users/bbelderb/code/debug.py(14)getbuses()
-&amp;gt; for bus in doc.findall(&amp;#39;bus&amp;#39;):
(Pdb) running_buses
{1906: {&amp;#39;North Bound&amp;#39;, 41.90836715698242, -87.63148498535156}}
(Pdb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As explained in the SO thread it's because of the use of set instead of a tuple, former does not keep order.&lt;/p&gt;
&lt;p&gt;I realize this example does not show much pdb magic so maybe if we do A. a code challenge where you use it upon your next debugging exercise or B. record a video when we are hunting down a nasty bug ourselves. To be continued ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="learning to debug with pdb is an essential Python developer skill" src="https://pybit.es/images/banners/pb_pdb.png"&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion and resources&lt;/h2&gt;
&lt;p&gt;As you can see this is an essential skill for any developer. Print and unittest can get you far, but moment inevitably comes you have to catch bugs &lt;em&gt;in the act&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For more info check out &lt;a href="https://docs.python.org/3.7/library/pdb.html"&gt;the docs&lt;/a&gt; or Doug Hellmann's &lt;a href="https://pymotw.com/2/pdb/"&gt;PyMOTW series&lt;/a&gt; which has a very extensive coverage of pdb.&lt;/p&gt;
&lt;p&gt;But that might be a lot of reading. You can also get a concise overview watching Clayton Parker's PyCon talk: &lt;a href="https://www.youtube.com/watch?v=P0pIW5tJrRM"&gt;So you think you can PDB?&lt;/a&gt; It shows a lot of good examples and it peaked my interest to try out &lt;a href="https://pypi.python.org/pypi/pdbpp/"&gt;pdb++&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="pdb"></category><category term="debugging"></category><category term="troubleshooting"></category><category term="bugs"></category><category term="modules"></category></entry><entry><title>Code Challenge 40 - Daily Python Tip Part 1 - Make a Web App</title><link href="https://pybit.es/codechallenge40.html" rel="alternate"></link><published>2017-10-24T12:50:00+02:00</published><updated>2017-10-24T12:50:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-24:/codechallenge40.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, you heard of &lt;a href="https://twitter.com/python_tip"&gt;Daily Python Tip&lt;/a&gt;? It's a Twitter account that posts one python tip per day, run by &lt;a href="https://twitter.com/karlafej"&gt;@karlafej&lt;/a&gt; and &lt;a href="https://twitter.com/simecek"&gt;@simecek&lt;/a&gt;. We partnered up with them and use their awesome collection of tips to build a web app (part 1) and a simple API (part 2).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, you heard of &lt;a href="https://twitter.com/python_tip"&gt;Daily Python Tip&lt;/a&gt;? It's a Twitter account that posts one python tip per day, run by &lt;a href="https://twitter.com/karlafej"&gt;@karlafej&lt;/a&gt; and &lt;a href="https://twitter.com/simecek"&gt;@simecek&lt;/a&gt;. We partnered up with them and use their awesome collection of tips to build a web app (part 1) and a simple API (part 2).&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The goal is to make a web app to make it easier to navigate the collection of tips:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose a web framework of your choice. Django, Flask, Bottle, use what you like. Make a new virtualenv and pip install it.&lt;/li&gt;
&lt;li&gt;Make a scheduled job to sync the published tips to a DB from &lt;a href="https://t.co/oARrOmrin7"&gt;their google spreadsheet&lt;/a&gt; or &lt;a href="https://twitter.com/python_tip"&gt;their Twitter&lt;/a&gt; using a wrapper like Tweepy. Note some tweets have media attached, ideally you would retrieve those links as well. So pull the following fields: Timestamp, Python Tip, Link, Who Posted, Published (if &amp;gt; 1 link you probably need a second table with FK)&lt;/li&gt;
&lt;li&gt;The tips don't always have hashtags so it might be hard to 'tag' them. That said you could set up routes like yourapp/numpy that retrieve all tips with that have 'numpy' in their body. This way you could make links on the homepage to common categories.&lt;/li&gt;
&lt;li&gt;We think the best way to navigate them is to have a search box that just does a full text search.&lt;/li&gt;
&lt;li&gt;As there are hundreds of tips you probably want to use pagination or lazy loading when you display them.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Use the Twitter API to retrieve the number of likes and retweets per tip and store those in the DB as well. Show the tips descending on popularity.&lt;/li&gt;
&lt;li&gt;Provide a Twitter login so you can retweet tips to your Twitter account with one click.&lt;/li&gt;
&lt;li&gt;Host it to the cloud (Heroku, PythonAnywhere, ...)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Slack Channel&lt;/h2&gt;
&lt;p&gt;For a beginner some of our challenges might be overwhelming. Another observation is that the process of doing these challenges is as interesting as the final result.&lt;/p&gt;
&lt;p&gt;We are eager to expand our awesome PyBites community. For this reason we are opening up our #codechallenges Slack channel for you to discuss our challenges as you code. Send us &lt;a href="mailto:pybitesblog@gmail.com"&gt;an email&lt;/a&gt; if you want to join.&lt;/p&gt;
&lt;p&gt;This way you get the opportunity to learn from other Pythonistas and share some of your own learning.&lt;/p&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;To get credit PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="Daily Python Tip"></category><category term="Django"></category><category term="Flask"></category><category term="Bottle"></category><category term="Twitter API"></category><category term="Tweepy"></category></entry><entry><title>Twitter Digest 2017 Week 42</title><link href="https://pybit.es/twitter_digest_201742.html" rel="alternate"></link><published>2017-10-22T20:42:00+02:00</published><updated>2017-10-22T20:42:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-22:/twitter_digest_201742.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúHow I used Python to find interesting people to follow on Medium‚Äù by &lt;a href="https://twitter.com/@radu_raicea" target="_blank"&gt;@radu_raicea&lt;/a&gt; &lt;a href="https://t.co/mGZgfDoeaU" title="https://t.co/mGZgfDoeaU" target="_blank"&gt;https://t.co/mGZgfDoeaU&lt;/a&gt; &lt;a href="https://t.co/eCIFQbCAzv" title="https://t.co/eCIFQbCAzv" target="_blank"&gt;https://t.co/eCIFQbCAzv&lt;/a&gt;&lt;/p&gt;‚Äî Denise Esse (@writingsbyesse) &lt;a href="https://twitter.com/writingsbyesse/status/919746471372738560" data-datetime="2017-10-16T02:07:01+00:00"&gt;October 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A brief introduction to Pandas with a focus on one of its most useful features: grouping &lt;a href="https://t.co/JBJC3P5uDT" title="https://t.co/JBJC3P5uDT" target="_blank"&gt;https://t.co/JBJC3P5uDT&lt;/a&gt; by &lt;a href="https://twitter.com/@Intoli" target="_blank"&gt;@Intoli&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/921796983437910016" data-datetime="2017-10-21T17:55:01+00:00"&gt;October 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I just published a short youtube video demonstrating how to fork a github repo and create a simple Pull Request: &lt;a href="https://t.co/8ZlvRH0PfY" title="https://t.co/8ZlvRH0PfY" target="_blank"&gt;https://t.co/8ZlvRH0PfY&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/921041937301258240" data-datetime="2017-10-19T15:54:44+00:00"&gt;October 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@DynamicWebPaige:" target="_blank"&gt;@DynamicWebPaige:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; is a strong runner-up for &lt;a href="https://twitter.com/@GitHub's" target="_blank"&gt;@GitHub's&lt;/a&gt; most popular language, and &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; is most popular topic! src: h‚Ä¶&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/920853947383816193" data-datetime="2017-10-19T03:27:44+00:00"&gt;October 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/RSQiHuUv2y" title="https://t.co/RSQiHuUv2y" target="_blank"&gt;https://t.co/RSQiHuUv2y&lt;/a&gt; Python Graph Gallery: Learn how to visualize data in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/920210222098067457" data-datetime="2017-10-17T08:49:48+00:00"&gt;October 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Today I made tool that generates a baseline flask web application paired with webpack. Figured that some folks mi... &lt;a href="https://t.co/BOUjOuGHAs" title="https://t.co/BOUjOuGHAs" target="_blank"&gt;https://t.co/BOUjOuGHAs&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/921994538129993728" data-datetime="2017-10-22T07:00:02+00:00"&gt;October 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django Tutorial &lt;a href="https://t.co/ud0ruK7hv1" title="https://t.co/ud0ruK7hv1" target="_blank"&gt;https://t.co/ud0ruK7hv1&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/921627259387109376" data-datetime="2017-10-21T06:40:36+00:00"&gt;October 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Serving 1x1 pixels from AWS Lambda endpoints &lt;a href="https://t.co/eia5Vif707" title="https://t.co/eia5Vif707" target="_blank"&gt;https://t.co/eia5Vif707&lt;/a&gt; &lt;a href="https://t.co/sbn0HSzsw8" title="https://t.co/sbn0HSzsw8" target="_blank"&gt;https://t.co/sbn0HSzsw8&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/921867198834139136" data-datetime="2017-10-21T22:34:02+00:00"&gt;October 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;bounter - Efficient Counter that uses a limited (bounded) amount of memory regardless of data size. &lt;a href="https://t.co/6WlYdYftQd" title="https://t.co/6WlYdYftQd" target="_blank"&gt;https://t.co/6WlYdYftQd&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/921583989181308928" data-datetime="2017-10-21T03:48:39+00:00"&gt;October 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The 2017 videos are now available! Check out your favorite talks from &lt;a href="https://t.co/knnV3HtdUM" title="https://t.co/knnV3HtdUM" target="_blank"&gt;https://t.co/knnV3HtdUM&lt;/a&gt;&lt;/p&gt;‚Äî PyGotham (@PyGotham) &lt;a href="https://twitter.com/PyGotham/status/921890691722235909" data-datetime="2017-10-22T00:07:23+00:00"&gt;October 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to understand Django models the simple way &amp;gt;&amp;gt; &lt;a href="https://t.co/0AyjRInfoL" title="https://t.co/0AyjRInfoL" target="_blank"&gt;https://t.co/0AyjRInfoL&lt;/a&gt; by &lt;a href="https://twitter.com/@whyimsoalone" target="_blank"&gt;@whyimsoalone&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/921866321817567232" data-datetime="2017-10-21T22:30:33+00:00"&gt;October 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;10 tips on using Jupyter Notebook &lt;a href="https://t.co/GGTPGupHaZ" title="https://t.co/GGTPGupHaZ" target="_blank"&gt;https://t.co/GGTPGupHaZ&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/920907375703478272" data-datetime="2017-10-19T07:00:02+00:00"&gt;October 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Newsletter: ‚ÄúFree Computer Science Courses!! And This Week‚Äôs Top 15 Tech Stories‚Äù -&lt;a href="https://twitter.com/@DavidSmooke‚Ä¶" target="_blank"&gt;@DavidSmooke‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/OS1mHoQgYE" title="https://t.co/OS1mHoQgYE" target="_blank"&gt;https://t.co/OS1mHoQgYE&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/921088853070319616" data-datetime="2017-10-19T19:01:10+00:00"&gt;October 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A dash is treated literally if it is the first or last character of a character class. Otherwise it will be treated as a range delimiter.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/921028599477567488" data-datetime="2017-10-19T15:01:44+00:00"&gt;October 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@joeneville_:" target="_blank"&gt;@joeneville_:&lt;/a&gt; Message to any colleagues in networking without coding skills: Don't waste any more thought on whether to learn python. Ju‚Ä¶&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/920824940038840320" data-datetime="2017-10-19T01:32:28+00:00"&gt;October 19, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="automation"></category><category term="pandas"></category><category term="GitHub"></category><category term="data visualisation"></category><category term="Flask"></category><category term="Django"></category><category term="tutorial"></category><category term="AWS Lambda"></category><category term="counter"></category><category term="PyGotham"></category><category term="videos"></category><category term="Jupyter"></category><category term="Computer Science"></category><category term="Regex"></category></entry><entry><title>Learning Python Decorators by Example</title><link href="https://pybit.es/decorators-by-example.html" rel="alternate"></link><published>2017-10-20T12:00:00+02:00</published><updated>2017-10-20T12:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-10-20:/decorators-by-example.html</id><summary type="html">&lt;p&gt;Decorators are a sometimes overlooked feature and they might be hard to grasp for beginning Pythonistas. I agree with Aaron Maxwell that mastering them "can massively magnify the positive impact of the code you write", so make sure you add them to your toolkit if not done so already. In this article I explain what they do, why you want to use them and give some practical examples.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Decorators are a sometimes overlooked feature and they might be hard to grasp for beginning Pythonistas. I agree with Aaron Maxwell that mastering them "can massively magnify the positive impact of the code you write", so make sure you add them to your toolkit if not done so already. In this article I explain what they do, why you want to use them and give some practical examples.&lt;/p&gt;
&lt;p&gt;&lt;img alt="decorators are a bit like Russian dolls" src="https://pybit.es/images/banners/pb_decorators.png"&gt;&lt;/p&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A decorator is any callable Python object that is used to modify a function, method or class definition. A decorator is passed the original object being defined and returns a modified object, which is then bound to the name in the definition. - &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;PythonDecorators wiki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GoF's &lt;a href="http://www.amazon.com/dp/0201633612/?tag=pyb0f-20"&gt;Design Patterns&lt;/a&gt; defines a decorator's intent as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Two common use cases are caching and access checks in web frameworks which I will cover later.&lt;/p&gt;
&lt;h2&gt;When to use?&lt;/h2&gt;
&lt;p&gt;If you want to add common behavior to multiple objects think about abstracting it away using decorators. It will make your code more DRY and encapsulated. It is a nice way to abstract away functionality not directly related to the function's main goal. Your team will thank you for having more reusable code.&lt;/p&gt;
&lt;p&gt;Aaron Maxwell wrote a nice article in this context: &lt;a href="https://www.oreilly.com/ideas/5-reasons-you-need-to-learn-to-write-python-decorators"&gt;5 reasons you need to learn to write Python decorators&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Python lets you decorate a function (or class) by the &lt;code&gt;@&lt;/code&gt; symbol followed by the decorator.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@mydecorator
def my_function(args):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this is the same as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def my_function(args):
    ...
my_function = mydecorator(my_function)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The '@' syntactic sugar is more concise and easier to read though.&lt;/p&gt;
&lt;p&gt;Decorators can be stacked and will be run inside out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@second_decorator
@first_decorator
def my_function(args):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be quite confusing so I found a good example &lt;a href="https://stackoverflow.com/a/739665"&gt;on SO&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def makebold(fn):
    def wrapped():
        return &amp;quot;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&amp;quot; + fn() + &amp;quot;&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&amp;quot;
    return wrapped

def makeitalic(fn):
    def wrapped():
        return &amp;quot;&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;&amp;quot; + fn() + &amp;quot;&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&amp;quot;
    return wrapped

@makebold
@makeitalic
def hello():
    return &amp;quot;hello world&amp;quot;

print hello()  ## returns &amp;quot;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;&lt;/span&gt;hello world&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(now you know why I put Russian dolls in the banner)&lt;/p&gt;
&lt;p&gt;What about passing arguments?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/dp/1785886851/?tag=pyb0f-20"&gt;Expert Python&lt;/a&gt; provides a nice commented snippet of the complete pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def mydecorator(function):
    def wrapped(*args, **kwargs):     
        # do some stuff before the original
        # function gets called
        result = function(*args, **kwargs)
        # do some stuff after function call and
        # return the result
        return result
    # return wrapper as a decorated function
    return wrapped
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure to add &lt;a href="https://docs.python.org/3.7/library/functools.html#functools.wraps"&gt;&lt;code&gt;functools.wraps&lt;/code&gt;&lt;/a&gt; decorator so the original name and docstring (metadata) are not lost, specially important when debugging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def mydecorator(function):
    @wraps(function)
    def wrapped(*args, **kwargs):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Some practical examples&lt;/h2&gt;
&lt;p&gt;I went back to our code base and found two examples where we used decorators:&lt;/p&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;For our &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;100 Days of Code&lt;/a&gt; I wrote a class to cache The Movie Database (TMDb) API responses (&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/095"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@store_results
def get_items(self, obj_method):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;decorators.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def store_results(f):
    @wraps(f)
    def wrapped(*args, **kwargs):
        func_name = str(args[1]).lower()
        kind = re.sub(r&amp;#39;.*bound.*?\.(\S+) of.*&amp;#39;, r&amp;#39;\1&amp;#39;, func_name)
        print(kind)
        resp = f(*args, **kwargs)
        _store(kind, resp)
        print(len(resp))
        return resp
    return wrapped
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another caching example can be found &lt;a href="http://flask.pocoo.org/docs/0.12/patterns/viewdecorators/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For caching / memoization you also might want to learn about &lt;a href="https://docs.python.org/3/library/functools.html#functools.lru_cache"&gt;@functools.lru_cache&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again. - &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For Django checkout &lt;a href="https://docs.djangoproject.com/en/1.11/ref/utils/#django.utils.functional.cached_property"&gt;cached_property&lt;/a&gt; demo'd &lt;a href="https://lincolnloop.com/blog/django-patterns-fat-models-and-cached_property/"&gt;here&lt;/a&gt;. What's cool about it is that you can dramatically reduce making database calls improving your site's performance.&lt;/p&gt;
&lt;h3&gt;Access checking&lt;/h3&gt;
&lt;p&gt;In &lt;a href="https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html"&gt;Never Forget A Friend‚Äôs Birthday with Python, Flask and Twilio&lt;/a&gt; I used a decorator to check login (&lt;a href="https://github.com/pybites/bday-app/blob/master/app.py"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def login_required(test):
    &amp;#39;&amp;#39;&amp;#39;From RealPython Flask course&amp;#39;&amp;#39;&amp;#39;
    @wraps(test)
    def wrap(*args, **kwargs):
        if &amp;#39;logged_in&amp;#39; in session:
            return test(*args, **kwargs)
        else:
            flash(&amp;#39;You need to log in first&amp;#39;)
            return redirect(url_for(&amp;#39;login&amp;#39;))
    return wrap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A similar example can be found &lt;a href="http://flask.pocoo.org/docs/0.12/patterns/viewdecorators/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Distinguishing between public and private endpoints just takes one line of extra code. It's a nice way of abstracting away the access implementation so it does not clutter and distract from writing the main Flask code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/login&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def login():
    ...

@app.route(&amp;#39;/&amp;#39;)
@login_required
def index():
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Decorators in the wild&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;See Python's &lt;a href="https://docs.python.org/3/library/functions.html"&gt;Built-in Functions&lt;/a&gt; for some decorators that come with the Python language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@property&lt;/code&gt; we covered &lt;a href="https://pybit.es/property-decorator.html"&gt;here&lt;/a&gt; and it's an awesome decorator.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@staticmethod&lt;/code&gt; and &lt;code&gt;@classmethod&lt;/code&gt; you probably want to know about, they are well explained &lt;a href="https://realpython.com/blog/python/instance-class-and-static-methods-demystified/"&gt;in this Real Python article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Another important one to add to your toolbox is &lt;a href="https://docs.python.org/2/library/contextlib.html"&gt;contextlib.contextmanager&lt;/a&gt; which we used for &lt;a href="https://pybit.es/codechallenge09_review.html"&gt;code challenge #09&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the previous section, right above &lt;code&gt;login_required&lt;/code&gt; was the all too common &lt;code&gt;@app.route&lt;/code&gt; Flask decorator. &lt;a href="https://ains.co/blog/things-which-arent-magic-flask-part-1.html"&gt;This article&lt;/a&gt; explains &lt;em&gt;how Flask makes it possible to write "@app.route()" at the top of the function&lt;/em&gt;. Another interesting discussion about this decorator and Flask's source in general can be found in &lt;a href="http://www.amazon.com/dp/1491933178/?tag=pyb0f-20"&gt;The Hitchhiker's Guide to Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href="http://click.pocoo.org/5/"&gt;Click&lt;/a&gt; package (Flask author) shows another elegant use of decorators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly take notice of &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"&gt;&lt;code&gt;mock.patch&lt;/code&gt;&lt;/a&gt; which I used &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/081/test_whotweeted.py"&gt;here&lt;/a&gt;. It wraps each test method faking (mocking) the &lt;code&gt;get_status&lt;/code&gt; &lt;em&gt;Tweepy&lt;/em&gt; API to not hit the API while testing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Advanced concepts&lt;/h2&gt;
&lt;p&gt;One less obvious aspect of decorators for me was the passing of optional arguments, so I wrote &lt;a href="https://pybit.es/decorator-optional-argument.html"&gt;an article about it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://www.codementor.io/sheena/advanced-use-python-decorators-class-function-du107nxsv"&gt;this article&lt;/a&gt; for more examples of decorators that take arguments and how to decorate classes.&lt;/p&gt;
&lt;h2&gt;Practice!&lt;/h2&gt;
&lt;p&gt;The best way to learn decorators is to roll your own!&lt;/p&gt;
&lt;p&gt;Join &lt;a href="https://pybit.es/codechallenge14.html"&gt;our decorator challenge #14&lt;/a&gt; and PR your result (instructions in the challenge). You can peak at some solutions &lt;a href="https://pybit.es/codechallenge14_review.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;There are many good resources on decorators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The PEP on decorators: &lt;a href="https://www.python.org/dev/peps/pep-0318/"&gt;PEP 318 -- Decorators for Functions and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Real Python's &lt;a href="https://realpython.com/blog/python/primer-on-python-decorators/"&gt;Primer on Python Decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dan Bader's &lt;a href="https://dbader.org/blog/python-decorators"&gt;Python Decorators: A Step-By-Step Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jeff Knupp's &lt;a href="https://jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained/"&gt;Improve Your Python: Decorators Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Start with why: &lt;a href="https://www.oreilly.com/ideas/5-reasons-you-need-to-learn-to-write-python-decorators"&gt;5 reasons you need to learn to write Python decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;As spotted in &lt;a href="https://pybit.es/twitter_digest_201741.html"&gt;our last Twitter Digest&lt;/a&gt;: &lt;a href="https://github.com/hchasestevens/posts/blob/master/notebooks/the-decorators-they-wont-tell-you-about.ipynb#blob_contributors_box"&gt;The decorators they won't tell you about&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="decorators"></category><category term="design patterns"></category><category term="logging"></category><category term="caching"></category><category term="memoization"></category><category term="Flask"></category><category term="Django"></category><category term="properties"></category><category term="classmethod"></category><category term="staticmethod"></category><category term="lru_cache"></category><category term="mock.patch"></category><category term="contextmanager"></category></entry><entry><title>Twitter Digest 2017 Week 41</title><link href="https://pybit.es/twitter_digest_201741.html" rel="alternate"></link><published>2017-10-15T15:51:00+02:00</published><updated>2017-10-15T15:51:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-15:/twitter_digest_201741.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here we go: Two Scoops of Django 1.11 is now available in Kindle and ePub formats &lt;a href="https://t.co/rjCihhvtHL" title="https://t.co/rjCihhvtHL" target="_blank"&gt;https://t.co/rjCihhvtHL&lt;/a&gt; This took a lot of time. Whew.&lt;/p&gt;‚Äî Daniel Roy Greenfeld (@pydanny) &lt;a href="https://twitter.com/pydanny/status/918370189263044609" data-datetime="2017-10-12T06:58:10+00:00"&gt;October 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Introducing &lt;a href="https://twitter.com/@RBrainInc:" target="_blank"&gt;@RBrainInc:&lt;/a&gt; A New &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; Platform with &lt;a href="https://twitter.com/search/#rstats" target="_blank"&gt;#rstats&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#SQL" target="_blank"&gt;#SQL&lt;/a&gt; &lt;a href="https://twitter.com/search/#Jupyter" target="_blank"&gt;#Jupyter&lt;/a&gt; &lt;a href="https://twitter.com/search/#Docker‚Ä¶" target="_blank"&gt;#Docker‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/ZpgQ1RE8mm" title="https://t.co/ZpgQ1RE8mm" target="_blank"&gt;https://t.co/ZpgQ1RE8mm&lt;/a&gt;&lt;/p&gt;‚Äî KDnuggets (@kdnuggets) &lt;a href="https://twitter.com/kdnuggets/status/918188684494737408" data-datetime="2017-10-11T18:56:56+00:00"&gt;October 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;v1 of "Microservices with Docker, Flask, and React" is done! Check it out at &lt;a href="https://t.co/ufX6xiEBYm" title="https://t.co/ufX6xiEBYm" target="_blank"&gt;https://t.co/ufX6xiEBYm&lt;/a&gt; &lt;a href="https://twitter.com/search/#python‚Ä¶" target="_blank"&gt;#python‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/NEVovMunir" title="https://t.co/NEVovMunir" target="_blank"&gt;https://t.co/NEVovMunir&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/918395254679642112" data-datetime="2017-10-12T08:37:46+00:00"&gt;October 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Spotify‚Äôs Discover Weekly: How &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; finds your new music &lt;a href="https://t.co/u4iZm3DVom" title="https://t.co/u4iZm3DVom" target="_blank"&gt;https://t.co/u4iZm3DVom&lt;/a&gt; &lt;a href="https://t.co/VHs2q8IoM0" title="https://t.co/VHs2q8IoM0" target="_blank"&gt;https://t.co/VHs2q8IoM0&lt;/a&gt;&lt;/p&gt;‚Äî KDnuggets (@kdnuggets) &lt;a href="https://twitter.com/kdnuggets/status/918486930513416192" data-datetime="2017-10-12T14:42:03+00:00"&gt;October 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;10 Great Tips to Learn Docker &lt;a href="https://t.co/YvMTsuA5VM" title="https://t.co/YvMTsuA5VM" target="_blank"&gt;https://t.co/YvMTsuA5VM&lt;/a&gt; via &lt;a href="https://twitter.com/@ami" target="_blank"&gt;@ami&lt;/a&gt; &lt;a href="https://twitter.com/search/#tech" target="_blank"&gt;#tech&lt;/a&gt; &lt;a href="https://t.co/mYVU4mmAqf" title="https://t.co/mYVU4mmAqf" target="_blank"&gt;https://t.co/mYVU4mmAqf&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/918085362534244352" data-datetime="2017-10-11T12:06:22+00:00"&gt;October 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New blog post: Implementing User Comments with SQLAlchemy &lt;a href="https://t.co/2BcGBFHONp" title="https://t.co/2BcGBFHONp" target="_blank"&gt;https://t.co/2BcGBFHONp&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/917772598418620416" data-datetime="2017-10-10T15:23:33+00:00"&gt;October 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python decorators they won't tell you about &lt;a href="https://t.co/gXB34287k1" title="https://t.co/gXB34287k1" target="_blank"&gt;https://t.co/gXB34287k1&lt;/a&gt; &lt;a href="https://t.co/sx5YfB4HOq" title="https://t.co/sx5YfB4HOq" target="_blank"&gt;https://t.co/sx5YfB4HOq&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/919251961698021377" data-datetime="2017-10-14T17:22:01+00:00"&gt;October 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Make a slideshow from your &lt;a href="https://twitter.com/search/#Jupyter" target="_blank"&gt;#Jupyter&lt;/a&gt; Notebook: &lt;a href="https://t.co/j2ragxfoUR" title="https://t.co/j2ragxfoUR" target="_blank"&gt;https://t.co/j2ragxfoUR&lt;/a&gt; &lt;a href="https://t.co/n3j6JgFyWy" title="https://t.co/n3j6JgFyWy" target="_blank"&gt;https://t.co/n3j6JgFyWy&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/918913245351514113" data-datetime="2017-10-13T18:56:04+00:00"&gt;October 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;40 Python Data Visualizations (plots, graphs, charts) with code &lt;a href="https://t.co/6wD1KpwMLx" title="https://t.co/6wD1KpwMLx" target="_blank"&gt;https://t.co/6wD1KpwMLx&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/919276629884620800" data-datetime="2017-10-14T19:00:02+00:00"&gt;October 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Ramp &lt;a href="https://t.co/Rlq8ZueDWW" title="https://t.co/Rlq8ZueDWW" target="_blank"&gt;https://t.co/Rlq8ZueDWW&lt;/a&gt; looks like an amazing platform for machine learning competitions. Great work by &lt;a href="https://twitter.com/@balazskegl" target="_blank"&gt;@balazskegl&lt;/a&gt; &lt;a href="https://twitter.com/@agramfort" target="_blank"&gt;@agramfort&lt;/a&gt; et al&lt;/p&gt;‚Äî Andreas Mueller (@amuellerml) &lt;a href="https://twitter.com/amuellerml/status/917654973177106432" data-datetime="2017-10-10T07:36:09+00:00"&gt;October 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@anthonypjshaw:" target="_blank"&gt;@anthonypjshaw:&lt;/a&gt; I just published ‚ÄúIn the future, all information you disclose will become public‚Äù &lt;a href="https://t.co/eP67q9PTwq" title="https://t.co/eP67q9PTwq" target="_blank"&gt;https://t.co/eP67q9PTwq&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/917499467313455104" data-datetime="2017-10-09T21:18:13+00:00"&gt;October 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;K-Means Clustering in Python &lt;a href="https://t.co/lJa9fdEuYP" title="https://t.co/lJa9fdEuYP" target="_blank"&gt;https://t.co/lJa9fdEuYP&lt;/a&gt; &lt;a href="https://twitter.com/search/#algorithm" target="_blank"&gt;#algorithm&lt;/a&gt; &lt;a href="https://twitter.com/search/#k-means" target="_blank"&gt;#k-means&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#clustering" target="_blank"&gt;#clustering&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/918924869923782656" data-datetime="2017-10-13T19:42:16+00:00"&gt;October 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Reasons why Kubernetes is cool &lt;a href="https://t.co/AYj3RJ372Y" title="https://t.co/AYj3RJ372Y" target="_blank"&gt;https://t.co/AYj3RJ372Y&lt;/a&gt; &lt;a href="https://t.co/JKwuGBc3Oz" title="https://t.co/JKwuGBc3Oz" target="_blank"&gt;https://t.co/JKwuGBc3Oz&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/919290220553613312" data-datetime="2017-10-14T19:54:02+00:00"&gt;October 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;qutebrowser - A keyboard-driven, vim-like browser based on PyQt5. &lt;a href="https://t.co/fmMvY5sPWF" title="https://t.co/fmMvY5sPWF" target="_blank"&gt;https://t.co/fmMvY5sPWF&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/918669522915266566" data-datetime="2017-10-13T02:47:36+00:00"&gt;October 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A list of GUI frameworks for Python &lt;a href="https://t.co/inLNxwdJfB" title="https://t.co/inLNxwdJfB" target="_blank"&gt;https://t.co/inLNxwdJfB&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/919031758733168640" data-datetime="2017-10-14T02:47:00+00:00"&gt;October 14, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Django"></category><category term="books"></category><category term="Microservices"></category><category term="Docker"></category><category term="Flask"></category><category term="React"></category><category term="Machine Learning"></category><category term="Spotify"></category><category term="Data Science"></category><category term="SQLAlchemy"></category><category term="Jupyter"></category><category term="Data Visualisation"></category><category term="Ramp"></category><category term="Security"></category><category term="K-Means Clustering"></category><category term="decorators"></category><category term="Kubernetes"></category><category term="PyQt"></category><category term="qutebrowser"></category><category term="GUI"></category></entry><entry><title>Twitter Digest 2017 Week 40</title><link href="https://pybit.es/twitter_digest_201740.html" rel="alternate"></link><published>2017-10-08T15:40:00+02:00</published><updated>2017-10-08T15:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-08:/twitter_digest_201740.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Deep learning on the &lt;a href="https://twitter.com/@Raspberry_Pi" target="_blank"&gt;@Raspberry_Pi&lt;/a&gt; with OpenCV: &lt;a href="https://t.co/3R5kDQ3Inm" title="https://t.co/3R5kDQ3Inm" target="_blank"&gt;https://t.co/3R5kDQ3Inm&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#AI‚Ä¶" target="_blank"&gt;#AI‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/dhOCeyA0IM" title="https://t.co/dhOCeyA0IM" target="_blank"&gt;https://t.co/dhOCeyA0IM&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/914853760886853633" data-datetime="2017-10-02T14:05:08+00:00"&gt;October 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; Zero to One: 5 Awe-Inspiring Demos with Code for Beginners, part 2 &lt;a href="https://twitter.com/search/#KDN" target="_blank"&gt;#KDN&lt;/a&gt; &lt;a href="https://t.co/YDZAC8mClA" title="https://t.co/YDZAC8mClA" target="_blank"&gt;https://t.co/YDZAC8mClA&lt;/a&gt;&lt;/p&gt;‚Äî KDnuggets (@kdnuggets) &lt;a href="https://twitter.com/kdnuggets/status/914520378340446208" data-datetime="2017-10-01T16:00:23+00:00"&gt;October 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn how to program from scratch (Intro) { author: &lt;a href="https://twitter.com/@1selfsolutions" target="_blank"&gt;@1selfsolutions&lt;/a&gt; } &lt;a href="https://t.co/QoHgDpVEi6" title="https://t.co/QoHgDpVEi6" target="_blank"&gt;https://t.co/QoHgDpVEi6&lt;/a&gt;&lt;/p&gt;‚Äî The Practical Dev (@ThePracticalDev) &lt;a href="https://twitter.com/ThePracticalDev/status/916740662485274625" data-datetime="2017-10-07T19:03:00+00:00"&gt;October 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just published my first article on &lt;a href="https://twitter.com/search/#SimpleProgrammer." target="_blank"&gt;#SimpleProgrammer.&lt;/a&gt; Check it out here: &lt;a href="https://t.co/B0GAyIIgiK" title="https://t.co/B0GAyIIgiK" target="_blank"&gt;https://t.co/B0GAyIIgiK&lt;/a&gt;&lt;/p&gt;‚Äî Michael Washburn Jr (@Mike_Washburn) &lt;a href="https://twitter.com/Mike_Washburn/status/916359156495503360" data-datetime="2017-10-06T17:47:02+00:00"&gt;October 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn about advanced &lt;a href="https://twitter.com/search/#Django" target="_blank"&gt;#Django&lt;/a&gt; file handling, including static versus media files, Django storage classes, and more: &lt;a href="https://t.co/mfWZJPemco" title="https://t.co/mfWZJPemco" target="_blank"&gt;https://t.co/mfWZJPemco&lt;/a&gt;&lt;/p&gt;‚Äî Caktus Group (@CaktusGroup) &lt;a href="https://twitter.com/CaktusGroup/status/915193745708060674" data-datetime="2017-10-03T12:36:07+00:00"&gt;October 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Play music with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/ZKNcW1OIsi" title="https://t.co/ZKNcW1OIsi" target="_blank"&gt;https://t.co/ZKNcW1OIsi&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/915497274352046080" data-datetime="2017-10-04T08:42:13+00:00"&gt;October 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Making a Stand Alone Executable from a Python Script using PyInstaller &lt;a href="https://t.co/CojeEX7KUt" title="https://t.co/CojeEX7KUt" target="_blank"&gt;https://t.co/CojeEX7KUt&lt;/a&gt; by &lt;a href="https://twitter.com/@wasi0013" target="_blank"&gt;@wasi0013&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/916364269037301760" data-datetime="2017-10-06T18:07:21+00:00"&gt;October 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hey Pythonistas, have you joined the Python Developers Survey 2017 yet? &lt;a href="https://t.co/JeVTNQVtTS" title="https://t.co/JeVTNQVtTS" target="_blank"&gt;https://t.co/JeVTNQVtTS&lt;/a&gt; &lt;a href="https://t.co/IcmDfn9ov1" title="https://t.co/IcmDfn9ov1" target="_blank"&gt;https://t.co/IcmDfn9ov1&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/916015147595980800" data-datetime="2017-10-05T19:00:04+00:00"&gt;October 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@troyhunt:" target="_blank"&gt;@troyhunt:&lt;/a&gt; Important security alert from &lt;a href="https://twitter.com/@Disqus." target="_blank"&gt;@Disqus.&lt;/a&gt; Not a fun situation, but full credit for that disclosure timeline: &lt;a href="https://t.co/Cz2HGU‚Ä¶" title="https://t.co/Cz2HGU‚Ä¶" target="_blank"&gt;https://t.co/Cz2HGU‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/916565748679610368" data-datetime="2017-10-07T07:27:58+00:00"&gt;October 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@Bitboosters:" target="_blank"&gt;@Bitboosters:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Blockchain:" target="_blank"&gt;#Blockchain:&lt;/a&gt; Understanding The Hype &lt;a href="https://t.co/NxTfiSm4D6" title="https://t.co/NxTfiSm4D6" target="_blank"&gt;https://t.co/NxTfiSm4D6&lt;/a&gt; via &lt;a href="https://twitter.com/@hackernoon" target="_blank"&gt;@hackernoon&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/916766598190440448" data-datetime="2017-10-07T20:46:04+00:00"&gt;October 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just updated my two-factor auth article and example code to Python 3 and latest Flask and other dependencies. &lt;a href="https://t.co/mHeQT7E2Mi" title="https://t.co/mHeQT7E2Mi" target="_blank"&gt;https://t.co/mHeQT7E2Mi&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/914548367157424133" data-datetime="2017-10-01T17:51:36+00:00"&gt;October 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@owainkenway:" target="_blank"&gt;@owainkenway:&lt;/a&gt; Probably controversial but hopefully not libellous: "Why I don't like Jupyter Notebooks" &lt;a href="https://t.co/lR6FYEUrQ4" title="https://t.co/lR6FYEUrQ4" target="_blank"&gt;https://t.co/lR6FYEUrQ4&lt;/a&gt;&lt;/p&gt;‚Äî Project Jupyter (@ProjectJupyter) &lt;a href="https://twitter.com/ProjectJupyter/status/915254069123473408" data-datetime="2017-10-03T16:35:49+00:00"&gt;October 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Google Facets ‚Äì An Open Source Python Tool to Analyze &amp;amp; Visualize your data &lt;a href="https://t.co/P4UfI5mklu" title="https://t.co/P4UfI5mklu" target="_blank"&gt;https://t.co/P4UfI5mklu&lt;/a&gt; by &lt;a href="https://twitter.com/@min2bro" target="_blank"&gt;@min2bro&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/916756828893061120" data-datetime="2017-10-07T20:07:15+00:00"&gt;October 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@gvanrossum:" target="_blank"&gt;@gvanrossum:&lt;/a&gt; Mypy 0.530 is out! Protocols, support for TypedDict, and then some. Read the blog post. &lt;a href="https://t.co/Iazl7jGkyJ" title="https://t.co/Iazl7jGkyJ" target="_blank"&gt;https://t.co/Iazl7jGkyJ&lt;/a&gt;&lt;/p&gt;‚Äî Michael Herman (@MikeHerman) &lt;a href="https://twitter.com/MikeHerman/status/916665223972392963" data-datetime="2017-10-07T14:03:14+00:00"&gt;October 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@CodeWisdom:" target="_blank"&gt;@CodeWisdom:&lt;/a&gt; "You can have the project: Done On Time. Done On Budget. Done Properly - Pick two." - Unknown&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/916393419525599232" data-datetime="2017-10-06T20:03:11+00:00"&gt;October 06, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="deep learning"></category><category term="Raspberry Pi"></category><category term="beginner"></category><category term="tutorial"></category><category term="code quality"></category><category term="Django"></category><category term="music"></category><category term="Jupyter"></category><category term="PyGame"></category><category term="PyInstaller"></category><category term="survey"></category><category term="Disqus"></category><category term="blockchain"></category><category term="Flask"></category><category term="Google Facets"></category><category term="Data Visualisation"></category><category term="MyPy"></category></entry><entry><title>Code Challenge 39 - Writing Tests With Pytest</title><link href="https://pybit.es/codechallenge39.html" rel="alternate"></link><published>2017-10-05T12:10:00+02:00</published><updated>2017-10-05T12:10:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-05:/codechallenge39.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, let's add some more challenges for October. Following &lt;a href="https://pybit.es/pytest-book.html"&gt;our Python testing with pytest book review&lt;/a&gt; we let you write some tests with this awesome framework.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, let's add some more challenges for October. Following &lt;a href="https://pybit.es/pytest-book.html"&gt;our Python testing with pytest book review&lt;/a&gt; we let you write some tests with this awesome framework.&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Here are some options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add tests for one of your repos that lacks tests. You can use &lt;a href="https://pybit.es/codechallenge35.html"&gt;BetterCodeHub&lt;/a&gt; to see how badly a project needs tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use pytest to add tests for &lt;a href="https://pybit.es/simple-flask-api.html"&gt;a simple Flask API&lt;/a&gt;, code &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/app.py"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As mentioned in &lt;a href="https://talkpython.fm/episodes/show/132/contributing-to-open-source"&gt;Talk Python #132: Contributing to open source&lt;/a&gt;, testing and documentation are great ways to contribute to open source. So like option 1. you could add tests to an open source project you like. Not only does this improve your understanding of the code, you also get to give something back, learning pytest as you go. Besides, as stated in &lt;a href="https://pybit.es/codechallenge38.html"&gt;challenge #38&lt;/a&gt;: this  month any PR also counts towards &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any tests will do, the purpose of this challenge is to get your feet wet with pytest. However you probably get the most out of this challenge if you play a bit with &lt;a href="https://docs.pytest.org/en/latest/fixture.html#fixture"&gt;fixtures&lt;/a&gt; and other &lt;a href="https://docs.pytest.org/en/latest/example/index.html"&gt;features/use cases&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;check coverage with the &lt;a href="https://pypi.python.org/pypi/pytest-cov"&gt;pytest-cov&lt;/a&gt; plugin or use &lt;a href="https://pybit.es/codechallenge35.html"&gt;BetterCodeHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;automatically run your newly added tests using a CI service like &lt;a href="https://travis-ci.org/"&gt;Travis&lt;/a&gt; or &lt;a href="https://semaphoreci.com/"&gt;Semaphore&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Credit&lt;/h3&gt;
&lt;p&gt;To get credit PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;About&lt;/h3&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="pytest"></category><category term="testing"></category><category term="unittest"></category><category term="fixtures"></category><category term="BetterCodeHub"></category><category term="pytest-cov"></category><category term="CI"></category><category term="opensource"></category><category term="Hacktoberfest"></category><category term="TalkPython"></category></entry><entry><title>Code Challenge 38 - Build Your Own Hacktoberfest Checker With Bottle</title><link href="https://pybit.es/codechallenge38.html" rel="alternate"></link><published>2017-10-04T11:20:00+02:00</published><updated>2017-10-04T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-04:/codechallenge38.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, Hacktoberfest started. Let's make open source better and track our progress with a little app you will build using the &lt;a href="https://bottlepy.org/docs/dev/"&gt;Bottle web framework&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, Hacktoberfest started. Let's make open source better and track our progress with a little app you will build using the &lt;a href="https://bottlepy.org/docs/dev/"&gt;Bottle web framework&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;It's Hacktoberfest&lt;/h2&gt;
&lt;p&gt;DigitalOcean's &lt;a href="https://hacktoberfest.digitalocean.com"&gt;Hacktoberfest&lt;/a&gt; is a month-long celebration of open source software. You can earn a cool T-shirt making four pull requests to any public repo on GitHub between October 1‚Äì31. &lt;/p&gt;
&lt;p&gt;Potential projects you could contribute to are listed on their site but PRs you make for our code challenges count too!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hacktoberfestchecker.herokuapp.com"&gt;Hacktoberfest Checker&lt;/a&gt; (&lt;a href="https://github.com/jenkoian/hacktoberfest-checker"&gt;code&lt;/a&gt;) is a neat web app to see how close you are to achieving the requirements (4 PRs) for a free t-shirt. It is written &lt;a href="https://github.com/jenkoian/hacktoberfest-checker/blob/master/controllers/index.js"&gt;in JS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We thought it would be a cool challenge to build this with Bottle (optionally adding the JS you'd like):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual env and install Bottle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a form to ask for the user. Optionally add GitHub login to retrieve the user automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieve the PRs via the GitHub API. You can borrow the required query &lt;a href="https://github.com/pybites/hacktoberfest-checker/blob/master/controllers/index.js"&gt;here&lt;/a&gt; (L15). Yes, the date range seems odd but it accounts for various timezones. It was taken from DigitalOcean's 'official' checker (as explained &lt;a href="https://github.com/jenkoian/hacktoberfest-checker/pull/104#issuecomment-333376597"&gt;in this issue&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the PR's and progress as (&lt;em&gt;n out of 4&lt;/em&gt;). You can use &lt;a href="https://github.com/pybites/hacktoberfest-checker/blob/master/controllers/index.js"&gt;these status messages&lt;/a&gt; (L67).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(bonus) allow checking multiple GH handles at once so you can compare progress among fellow developers. It seems you can get this info in a single query - &lt;a href="https://github.com/search?utf8=%E2%9C%93&amp;amp;q=is%3Apr+created%3A2017-09-30T00%3A00%3A00-12%3A00..2017-10-31T23%3A59%3A59-12%3A00+author%3Ahobojoe1848+author%3Abbelderbos"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;To get credit PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;And remember: &lt;strong&gt;any of &lt;a href="https://pybit.es/pages/challenges.html"&gt;our code challenges&lt;/a&gt; you PR this month counts towards the Hacktoberfest goal&lt;/strong&gt;, have fun!&lt;/p&gt;
&lt;h3&gt;About&lt;/h3&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="Hacktoberfest"></category><category term="DigitalOcean"></category><category term="Bottle"></category><category term="GitHub"></category><category term="API"></category><category term="Web development"></category></entry><entry><title>Code Challenge 37 - Automate a Task With Twilio - Review</title><link href="https://pybit.es/codechallenge37_review.html" rel="alternate"></link><published>2017-10-03T11:10:00+02:00</published><updated>2017-10-03T11:10:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-03:/codechallenge37_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge37.html"&gt;Automate a Task With Twilio&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge37.html"&gt;Automate a Task With Twilio&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/hobojoe1848"&gt;hobojoe1848&lt;/a&gt;: This is an application to extend the functionality of my Steam Email Notification program. The application now sends a text with the latest Steam new releases to the list of phone numbers provided. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/37/hobojoe1848"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt;: I skipped this one for now having done &lt;a href="https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html"&gt;Twilio's guest post&lt;/a&gt;, but I will be looking into Twilio's Programmable Video next ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hacktoberfest&lt;/h3&gt;
&lt;p&gt;Make sure you sign up for &lt;a href="https://hacktoberfest.digitalocean.com/sign_up/register"&gt;Hacktoberfest&lt;/a&gt; so each Code Challenge PR you do counts towards earning some cool swag! You can check your progress &lt;a href="https://hacktoberfestchecker.herokuapp.com"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="Twilio"></category><category term="API"></category><category term="apis"></category><category term="sms"></category><category term="notifications"></category><category term="birthdays"></category><category term="automation"></category></entry><entry><title>Code Challenge 36 - Create an AWS Lambda Function - Review</title><link href="https://pybit.es/codechallenge36_review.html" rel="alternate"></link><published>2017-10-03T11:00:00+02:00</published><updated>2017-10-03T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-03:/codechallenge36_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge36.html"&gt;Create an AWS Lambda Function&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge36.html"&gt;Create an AWS Lambda Function&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/mjhea0"&gt;mjhea0&lt;/a&gt;: for this challenge, I created &lt;a href="https://realpython.com/blog/python/code-evaluation-with-aws-lambda-and-api-gateway/"&gt;a tutorial&lt;/a&gt; that details how to use AWS Lambda and API Gateway to create a code evaluation API. &lt;a href="https://realpython.github.io/aws-lambda-code-execute/"&gt;Live demo&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt;: as per Real Python's article I set up my Lambda function to receive payload via API Gateway. The lambda retrieves a PR number (id) via a POST request and retrieves the associated .py files via the GH API. It stores them in /tmp and runs PEP8 against them. If good it returns 'ok', else it shows the violations. &lt;/p&gt;
&lt;p&gt;TODOS: add a webhook for our Challenges repo to run this automatically. It would be nice to run unittests on test_*.py files. You could actually turn this into a simple CI which when done I will write an article about. Project &lt;a href="https://github.com/bbelderbos/first-aws-lambda"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hacktoberfest&lt;/h3&gt;
&lt;p&gt;Make sure you sign up for &lt;a href="https://hacktoberfest.digitalocean.com/sign_up/register"&gt;Hacktoberfest&lt;/a&gt; so each Code Challenge PR you do counts towards earning some cool swag! You can check your progress &lt;a href="https://hacktoberfestchecker.herokuapp.com"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="AWS"></category><category term="lambda"></category><category term="lambda function"></category><category term="guest"></category><category term="automation"></category><category term="microservices"></category></entry><entry><title>Twitter Digest 2017 Week 39</title><link href="https://pybit.es/twitter_digest_201739.html" rel="alternate"></link><published>2017-10-01T16:56:00+02:00</published><updated>2017-10-01T16:56:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-10-01:/twitter_digest_201739.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;HACKTOBERFEST IS ON! Open source time!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Hacktoberfest" target="_blank"&gt;#Hacktoberfest&lt;/a&gt; is back! üçÇ Support Open Source this October and earn a limited edition T-shirt üëï Learn more:‚Ä¶ &lt;a href="https://t.co/Yoi0R28Gc5" title="https://t.co/Yoi0R28Gc5" target="_blank"&gt;https://t.co/Yoi0R28Gc5&lt;/a&gt;&lt;/p&gt;‚Äî DigitalOcean (@digitalocean) &lt;a href="https://twitter.com/digitalocean/status/913137133191401478" data-datetime="2017-09-27T20:23:52+00:00"&gt;September 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@hadleywickham:" target="_blank"&gt;@hadleywickham:&lt;/a&gt; What do you think? &lt;a href="https://t.co/hE0ocUTWYV" title="https://t.co/hE0ocUTWYV" target="_blank"&gt;https://t.co/hE0ocUTWYV&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/914200263002546176" data-datetime="2017-09-30T18:48:22+00:00"&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Test your &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; REST service with the new REST client in the PyCharm EAP &lt;a href="https://t.co/v6PW1OyiqU" title="https://t.co/v6PW1OyiqU" target="_blank"&gt;https://t.co/v6PW1OyiqU&lt;/a&gt; &lt;a href="https://t.co/485KKj90uA" title="https://t.co/485KKj90uA" target="_blank"&gt;https://t.co/485KKj90uA&lt;/a&gt;&lt;/p&gt;‚Äî JetBrains PyCharm (@pycharm) &lt;a href="https://twitter.com/pycharm/status/912285564271022081" data-datetime="2017-09-25T12:00:02+00:00"&gt;September 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Guide to Instagramming with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; for Data Analysis &lt;a href="https://twitter.com/search/#KDN" target="_blank"&gt;#KDN&lt;/a&gt; &lt;a href="https://t.co/XoewiEywmO" title="https://t.co/XoewiEywmO" target="_blank"&gt;https://t.co/XoewiEywmO&lt;/a&gt;&lt;/p&gt;‚Äî KDnuggets (@kdnuggets) &lt;a href="https://twitter.com/kdnuggets/status/914188257205919745" data-datetime="2017-09-30T18:00:39+00:00"&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@twilio:" target="_blank"&gt;@twilio:&lt;/a&gt; Analyzing Messy Data Sentiment with Python and &lt;a href="https://twitter.com/@NLTK_org" target="_blank"&gt;@NLTK_org&lt;/a&gt; &lt;a href="https://t.co/FdIMxeHlue" title="https://t.co/FdIMxeHlue" target="_blank"&gt;https://t.co/FdIMxeHlue&lt;/a&gt; &lt;a href="https://t.co/B302zMxiL3" title="https://t.co/B302zMxiL3" target="_blank"&gt;https://t.co/B302zMxiL3&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/912312577958477826" data-datetime="2017-09-25T13:47:23+00:00"&gt;September 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You can fork your process with os.fork: import os res = os.fork() if res==0: print("I'm child") else: print("I'm parent") &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/912940118230683648" data-datetime="2017-09-27T07:21:00+00:00"&gt;September 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New Theory Cracks Open the Black Box of Deep Learning &lt;a href="https://t.co/ZDMHswaYEX" title="https://t.co/ZDMHswaYEX" target="_blank"&gt;https://t.co/ZDMHswaYEX&lt;/a&gt;&lt;/p&gt;‚Äî Brett Slatkin (@haxor) &lt;a href="https://twitter.com/haxor/status/912189526067470336" data-datetime="2017-09-25T05:38:25+00:00"&gt;September 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;On ep 5 of AI Adventures, &lt;a href="https://twitter.com/@YufengG" target="_blank"&gt;@YufengG&lt;/a&gt; shows how to visualize and debug your &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; model w/ &lt;a href="https://twitter.com/search/#TensorBoard" target="_blank"&gt;#TensorBoard&lt;/a&gt; ‚Üí‚Ä¶ &lt;a href="https://t.co/wKcKRXpP5U" title="https://t.co/wKcKRXpP5U" target="_blank"&gt;https://t.co/wKcKRXpP5U&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@tensorflow) &lt;a href="https://twitter.com/tensorflow/status/912557350074101761" data-datetime="2017-09-26T06:00:01+00:00"&gt;September 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sentiment Analysis of Twitter Tim... &lt;a href="https://t.co/5BM6MRqbuq" title="https://t.co/5BM6MRqbuq" target="_blank"&gt;https://t.co/5BM6MRqbuq&lt;/a&gt; &lt;a href="https://twitter.com/search/#twitter" target="_blank"&gt;#twitter&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/913956537801904128" data-datetime="2017-09-30T02:39:53+00:00"&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Configuring Vim for Python development (via &lt;a href="https://twitter.com/@fullstackpython)" target="_blank"&gt;@fullstackpython)&lt;/a&gt; &lt;a href="https://twitter.com/search/#vim" target="_blank"&gt;#vim&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/E9k9MZdrCh" title="https://t.co/E9k9MZdrCh" target="_blank"&gt;https://t.co/E9k9MZdrCh&lt;/a&gt; &lt;a href="https://t.co/AenbGGo8MC" title="https://t.co/AenbGGo8MC" target="_blank"&gt;https://t.co/AenbGGo8MC&lt;/a&gt;&lt;/p&gt;‚Äî Siddhant Goel (@siddhantgoel) &lt;a href="https://twitter.com/siddhantgoel/status/911561795663466496" data-datetime="2017-09-23T12:04:02+00:00"&gt;September 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;SQLAlchemy, the awesome Python object-relational mapper library &lt;a href="https://t.co/bViXd7b2R0" title="https://t.co/bViXd7b2R0" target="_blank"&gt;https://t.co/bViXd7b2R0&lt;/a&gt; &lt;a href="https://t.co/2EF4D5Gjfd" title="https://t.co/2EF4D5Gjfd" target="_blank"&gt;https://t.co/2EF4D5Gjfd&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/914257053656522752" data-datetime="2017-09-30T22:34:02+00:00"&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@vboykis:" target="_blank"&gt;@vboykis:&lt;/a&gt; I couldn't find a comprehensive guide for how to go from &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; scripts to a packaged project, so I wrote one. üêç &lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/913838288871591940" data-datetime="2017-09-29T18:50:01+00:00"&gt;September 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;There's an official pipenv docker image available now! "kennethreitz/pipenv". Pretty straight-forward: &lt;a href="https://t.co/eaMkalrBrU" title="https://t.co/eaMkalrBrU" target="_blank"&gt;https://t.co/eaMkalrBrU&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz üêç (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/914135907338420224" data-datetime="2017-09-30T14:32:38+00:00"&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Guide to Python Itertools &lt;a href="https://t.co/eqUb8J2yvg" title="https://t.co/eqUb8J2yvg" target="_blank"&gt;https://t.co/eqUb8J2yvg&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/913979442812162048" data-datetime="2017-09-30T04:10:54+00:00"&gt;September 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Beginners guide part 4, covering all &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; auth views &lt;a href="https://t.co/q3UaazoPf6" title="https://t.co/q3UaazoPf6" target="_blank"&gt;https://t.co/q3UaazoPf6&lt;/a&gt;&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/912237500403462145" data-datetime="2017-09-25T08:49:03+00:00"&gt;September 25, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="data science"></category><category term="PyCharm"></category><category term="REST"></category><category term="os"></category><category term="Deep Learning"></category><category term="AI"></category><category term="Machine Learning"></category><category term="TensorFlow"></category><category term="ntlk"></category><category term="vim"></category><category term="SQLAlchemy"></category><category term="packaging"></category><category term="pipenv"></category><category term="itertools"></category><category term="Django"></category><category term="tutorial"></category><category term="GitHub"></category><category term="Hacktoberfest"></category></entry><entry><title>Python Testing With Pytest</title><link href="https://pybit.es/pytest-book.html" rel="alternate"></link><published>2017-09-25T14:53:00+02:00</published><updated>2017-09-25T14:53:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-09-25:/pytest-book.html</id><summary type="html">&lt;p&gt;Review of &lt;a href="https://twitter.com/brianokken"&gt;Brian Okken&lt;/a&gt;'s new &lt;a href="http://www.amazon.com/dp/1680502409/?tag=pyb0f-20"&gt;pytest book&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Review of &lt;a href="https://twitter.com/brianokken"&gt;Brian Okken&lt;/a&gt;'s new &lt;a href="http://www.amazon.com/dp/1680502409/?tag=pyb0f-20"&gt;pytest book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Nice, a book about pytest&lt;/h2&gt;
&lt;p&gt;Writing reliable software requires testing and pytest is a great aid in being more productive at it.&lt;/p&gt;
&lt;p&gt;Brian did a great job exploring this awesome framework. Getting started was easy, yet I was amazed at all the powerful features the framework has to offer like fixtures, a robust plugin system and a large amount of configuration options.&lt;/p&gt;
&lt;p&gt;Let's do some Q &amp;amp; A ...&lt;/p&gt;
&lt;h3&gt;What you might be wondering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: I am a Python developer, is this book for me?&lt;/p&gt;
&lt;p&gt;A: yes, testing is important and pytest makes it easier yet supporting complex testing. If you can use it at work or your open source projects cool, but even if you can't, it's still fascinating to read about this testing framework.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: what's the extra value of the book over the pytest docs?&lt;/p&gt;
&lt;p&gt;A: pytest has great docs! This is a book to read end-to-end though, a more didactic resource as opposed to a reference manual. It makes pytest accessible through a simple &lt;em&gt;Tasks&lt;/em&gt; CRUD/DB app. The code samples are clean (pep8) and easy to follow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: what is the time investment?&lt;/p&gt;
&lt;p&gt;A: The book is short and concise. You can read it in two evenings: evening #1 = ch1-3 - now you can write tests with pytest / evening #2 = ch4-7 - more advanced stuff and integrations. Secondary topics are in the appendices keeping the main text lean.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: what are wins of pytest over the builtin unittest framework?&lt;/p&gt;
&lt;p&gt;A: less verbose (assert vs. self.assertEqual etc.) / classes are not required, rich cli interface, informative test failures, a more convenient way to write setup/teardown functions with fixtures, parameterised tests, better test runner (marker- and name-based test selection).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: what did you learn from this book?&lt;/p&gt;
&lt;p&gt;A: it taught me a lot of what makes pytest great. Take out your notebook because you will learn a lot of practical tips. Fixtures are well explained. Some other cool things: using pdb with pytest, smart test selection with markers / parameterization / cli -k arg (works like grep), builtin fixtures like capsys (capture stdout), cache test results for the next run (session), and integrate with Jenkins CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: why is &lt;em&gt;&lt;a href="https://docs.pytest.org/en/latest/fixture.html"&gt;fixtures&lt;/a&gt;&lt;/em&gt; a killer feature?&lt;/p&gt;
&lt;p&gt;A: to quote the book: "pytest fixtures ... are the reason why many people switch to and stay with pytest. ... one of the great reasons to use fixtures: to focus the test on what you‚Äôre actually testing, not on what you had to do to get ready for the test." and to quote the docs: "pytest fixtures: explicit, modular, scalable".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: does it teach TDD?&lt;/p&gt;
&lt;p&gt;A: no, it would have been nice, but thanks to the book's focus on pytest it covers a lot in relatively few pages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: Does the book go into testing environments / installation/ tools?&lt;/p&gt;
&lt;p&gt;A: yes, in chapter 7 it dicsusses tools like coverage, Jenkins, mock and tox, making it more well rounded / real world. It also quickly demos cookiecutter and explains how to install packages and package your own code. It that sense the book is for all levels of experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="pytest book cover" src="https://pybit.es/images/pytest-book-poster.png"&gt;&lt;/p&gt;
&lt;p&gt;Get it from &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;The Pragmatic Bookshelf&lt;/a&gt; or &lt;a href="http://www.amazon.com/dp/1680502409/?tag=pyb0f-20"&gt;Amazon&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a book you want to own. Testing is important and using pytest you're doing yourself a favor.&lt;/p&gt;
&lt;p&gt;The book is concise and can be read in 2 evenings. I have to yet fully explore pytest's docs but this book is a great teaching resource, using a simple / practical CRUD/DB app to teach pytest.&lt;/p&gt;
&lt;p&gt;The book offers a nice digest of more advanced pytest features and the config/plugins/testing tools sections makes for an optimal use of the framework. Recommended.&lt;/p&gt;
&lt;p&gt;But as with all books, mastering comes with practice. Stay tuned for next week's code challenge #38 where we will let you experiment more with pytest ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="pytest"></category><category term="testing"></category><category term="books"></category><category term="tox"></category><category term="Jenkins"></category><category term="fixtures"></category><category term="unittest"></category><category term="q&amp;a"></category></entry><entry><title>Code Challenge 37 - Automate a Task With Twilio</title><link href="https://pybit.es/codechallenge37.html" rel="alternate"></link><published>2017-09-25T09:00:00+02:00</published><updated>2017-09-25T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-25:/codechallenge37.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, this week we got a really cool challenge for you. Our &lt;a href="https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html"&gt;Never Forget A Friend‚Äôs Birthday with Python, Flask and Twilio article&lt;/a&gt; got released on Twilio's blog and we thought it would be awesome to have you code up the next Twilio app. Join our challenge and if you build something serious you could even pitch it to Twilio!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, this week we got a really cool challenge for you. Our &lt;a href="https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html"&gt;Never Forget A Friend‚Äôs Birthday with Python, Flask and Twilio article&lt;/a&gt; got released on Twilio's blog and we thought it would be awesome to have you code up the next Twilio app. &lt;/p&gt;
&lt;p&gt;Join our challenge and if you build something serious you could even pitch it to Twilio! &lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Here is the deal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sign up for &lt;a href="https://www.twilio.com/try-twilio"&gt;a Twilio account&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not familiar with their APIs and to get a taste check out &lt;a href="https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html"&gt;our guest post&lt;/a&gt; and Twilio's blog for more examples, special mention: &lt;a href="https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html"&gt;Wedding at Scale&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out the &lt;a href="https://www.twilio.com/docs/api/rest"&gt;Twilio REST API&lt;/a&gt; documentation page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now think of a boring task to automate / enhance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code it and delight your friends and colleagues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To get credit PR your work to our Community branch of our &lt;a href="https://github.com/pybites/challenges"&gt;Challenges repo&lt;/a&gt;. See detailed instructions &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are willing to go the extra mile you can even get your work featured on Twilio's blog via their &lt;em&gt;Twilio voices&lt;/em&gt; project, recently &lt;a href="https://pythonbytes.fm/episodes/transcript/38/hacking-classic-nintendo-games-with-python"&gt;featured on Python Bytes podcast&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;About&lt;/h3&gt;
&lt;p&gt;Our goal is to learn and teach you Python through practical exercises. Learning a programming language is way more fun as a community!&lt;/p&gt;
&lt;p&gt;For any feedback, issues or ideas use &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issues&lt;/a&gt;, &lt;a href="https://twitter.com/pybites"&gt;tweet us&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;drop us an email&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="Twilio"></category><category term="API"></category><category term="apis"></category><category term="sms"></category><category term="notifications"></category><category term="birthdays"></category><category term="automation"></category></entry><entry><title>Twitter Digest 2017 Week 38</title><link href="https://pybit.es/twitter_digest_201738.html" rel="alternate"></link><published>2017-09-24T12:34:00+02:00</published><updated>2017-09-24T12:34:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-24:/twitter_digest_201738.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our article went live on Twilio! Woohoo!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Never Forget A Friend‚Äôs Birthday with Python, Flask and Twilio via &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/hp6VpQ8E2M" title="https://t.co/hp6VpQ8E2M" target="_blank"&gt;https://t.co/hp6VpQ8E2M&lt;/a&gt; &lt;a href="https://t.co/1bkrp5pl6W" title="https://t.co/1bkrp5pl6W" target="_blank"&gt;https://t.co/1bkrp5pl6W&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/911364522044264449" data-datetime="2017-09-22T23:00:09+00:00"&gt;September 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;PyCon Spain is live! Follow the streams here:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Los que no hab√©is podido asistir, no os perd√°is el streaming! &lt;a href="https://t.co/vCwp0oLzMI" title="https://t.co/vCwp0oLzMI" target="_blank"&gt;https://t.co/vCwp0oLzMI&lt;/a&gt; &lt;a href="https://twitter.com/search/#PyConES17" target="_blank"&gt;#PyConES17&lt;/a&gt;&lt;/p&gt;‚Äî PyCon Espa√±a (@PyConES) &lt;a href="https://twitter.com/PyConES/status/911272145522712576" data-datetime="2017-09-22T16:53:04+00:00"&gt;September 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;30 Essential &lt;a href="https://twitter.com/search/#DataScience," target="_blank"&gt;#DataScience,&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning," target="_blank"&gt;#MachineLearning,&lt;/a&gt; &lt;a href="https://twitter.com/search/#DeepLearning," target="_blank"&gt;#DeepLearning,&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &amp;amp; R &lt;a href="https://twitter.com/search/#rstats" target="_blank"&gt;#rstats&lt;/a&gt; &lt;a href="https://twitter.com/search/#CheatSheets" target="_blank"&gt;#CheatSheets&lt;/a&gt; &lt;a href="https://t.co/hg9bcpROhP" title="https://t.co/hg9bcpROhP" target="_blank"&gt;https://t.co/hg9bcpROhP&lt;/a&gt; &lt;a href="https://t.co/JYobV7FXx0" title="https://t.co/JYobV7FXx0" target="_blank"&gt;https://t.co/JYobV7FXx0&lt;/a&gt;&lt;/p&gt;‚Äî KDnuggets (@kdnuggets) &lt;a href="https://twitter.com/kdnuggets/status/911257662372941824" data-datetime="2017-09-22T15:55:31+00:00"&gt;September 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@BecomingDataSci:" target="_blank"&gt;@BecomingDataSci:&lt;/a&gt; &lt;a href="https://twitter.com/@GrayAnalyst" target="_blank"&gt;@GrayAnalyst&lt;/a&gt; &lt;a href="https://twitter.com/@dataandme" target="_blank"&gt;@dataandme&lt;/a&gt; Check here for various tutorials I've shared over time! &lt;a href="https://t.co/4Qmwm3pb43" title="https://t.co/4Qmwm3pb43" target="_blank"&gt;https://t.co/4Qmwm3pb43&lt;/a&gt;&lt;/p&gt;‚Äî Data Science Renee (@BecomingDataSci) &lt;a href="https://twitter.com/BecomingDataSci/status/910581672097325063" data-datetime="2017-09-20T19:09:23+00:00"&gt;September 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;When to make a Git Commit { author: &lt;a href="https://twitter.com/@gonedark" target="_blank"&gt;@gonedark&lt;/a&gt; } &lt;a href="https://t.co/mgeyZY0wuA" title="https://t.co/mgeyZY0wuA" target="_blank"&gt;https://t.co/mgeyZY0wuA&lt;/a&gt;&lt;/p&gt;‚Äî The Practical Dev (@ThePracticalDev) &lt;a href="https://twitter.com/ThePracticalDev/status/911705736463441920" data-datetime="2017-09-23T21:36:00+00:00"&gt;September 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@unixstickers:" target="_blank"&gt;@unixstickers:&lt;/a&gt; Python rocks üêçü§òüòÄ &lt;a href="https://t.co/9TmL39M91D" title="https://t.co/9TmL39M91D" target="_blank"&gt;https://t.co/9TmL39M91D&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/911782374349737984" data-datetime="2017-09-24T02:40:32+00:00"&gt;September 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You have homework: It's &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; &lt;a href="https://twitter.com/search/#130:" target="_blank"&gt;#130:&lt;/a&gt; 10 books Python developers should be reading with &lt;a href="https://twitter.com/@tkoola‚Ä¶" target="_blank"&gt;@tkoola‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/iwZo0eYnQ8" title="https://t.co/iwZo0eYnQ8" target="_blank"&gt;https://t.co/iwZo0eYnQ8&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/910234636957208578" data-datetime="2017-09-19T20:10:23+00:00"&gt;September 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pythonbytes:" target="_blank"&gt;@pythonbytes:&lt;/a&gt; *pip install malicious-code* and other news from this wild Python week! It's &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; &lt;a href="https://twitter.com/search/#44" target="_blank"&gt;#44&lt;/a&gt; &lt;a href="https://t.co/FphLwqDmqw" title="https://t.co/FphLwqDmqw" target="_blank"&gt;https://t.co/FphLwqDmqw&lt;/a&gt; cc &lt;a href="https://twitter.com/@‚Ä¶" target="_blank"&gt;@‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/910587772485869568" data-datetime="2017-09-20T19:33:37+00:00"&gt;September 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Neat &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; project: Turn any video game into a sandbox environment for AI research.‚Ä¶ &lt;a href="https://t.co/AgMMqtlj5G" title="https://t.co/AgMMqtlj5G" target="_blank"&gt;https://t.co/AgMMqtlj5G&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/911564705419980801" data-datetime="2017-09-23T12:15:36+00:00"&gt;September 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;To celebrate my 100,000'th follower :-) a new list: Python security announcements. First post: PyPI typosquatting. &lt;a href="https://t.co/fiDOCFdhGF" title="https://t.co/fiDOCFdhGF" target="_blank"&gt;https://t.co/fiDOCFdhGF&lt;/a&gt;&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/911312965680357376" data-datetime="2017-09-22T19:35:17+00:00"&gt;September 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cool tutorial on writing a spell-checking algorithm in Python using a trie data structure: &lt;a href="https://t.co/8hlymIc4Xf" title="https://t.co/8hlymIc4Xf" target="_blank"&gt;https://t.co/8hlymIc4Xf&lt;/a&gt; by &lt;a href="https://twitter.com/@james_routley" target="_blank"&gt;@james_routley&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/911650122659966977" data-datetime="2017-09-23T17:55:01+00:00"&gt;September 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My pre-configured &lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; + &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Amazon AWS AMI is now publicly available for you to use:‚Ä¶ &lt;a href="https://t.co/IfQKrBOt9I" title="https://t.co/IfQKrBOt9I" target="_blank"&gt;https://t.co/IfQKrBOt9I&lt;/a&gt;&lt;/p&gt;‚Äî Adrian Rosebrock (@PyImageSearch) &lt;a href="https://twitter.com/PyImageSearch/status/910505422888603648" data-datetime="2017-09-20T14:06:23+00:00"&gt;September 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Adding %(filename)s and %(lineno)d to the logging format makes it easier to see where log messages came from.&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/910269635848577024" data-datetime="2017-09-19T22:29:27+00:00"&gt;September 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@reuvenmlerner:" target="_blank"&gt;@reuvenmlerner:&lt;/a&gt; My favorite terrible &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; error message &lt;a href="https://t.co/uOjfwg7LYm" title="https://t.co/uOjfwg7LYm" target="_blank"&gt;https://t.co/uOjfwg7LYm&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/911406268753022977" data-datetime="2017-09-23T01:46:02+00:00"&gt;September 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"The fastest algorithm can frequently be replaced by one that is almost as fast and much easier to understand." - Douglas W. Jones&lt;/p&gt;‚Äî Programming Wisdom (@CodeWisdom) &lt;a href="https://twitter.com/CodeWisdom/status/911355199339614209" data-datetime="2017-09-22T22:23:06+00:00"&gt;September 22, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Flask"></category><category term="Twilio"></category><category term="videos"></category><category term="learning"></category><category term="cheat sheets"></category><category term="Data Science"></category><category term="tutorials"></category><category term="Git"></category><category term="books"></category><category term="podcast"></category><category term="Machine Learning"></category><category term="security"></category><category term="AWS"></category><category term="logging"></category></entry><entry><title>Twitter Digest 2017 Week 37</title><link href="https://pybit.es/twitter_digest_201737.html" rel="alternate"></link><published>2017-09-17T19:24:00+02:00</published><updated>2017-09-17T19:24:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-17:/twitter_digest_201737.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New on PyBites: How to learn &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Read about Julian + Bob's Python journey in Special Post &lt;a href="https://twitter.com/search/#200:‚Ä¶" target="_blank"&gt;#200:‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/K7yO6XbUE2" title="https://t.co/K7yO6XbUE2" target="_blank"&gt;https://t.co/K7yO6XbUE2&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/909091779424788480" data-datetime="2017-09-16T16:29:04+00:00"&gt;September 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Create custom &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; visualizations with &lt;a href="https://twitter.com/search/#TensorBoard's" target="_blank"&gt;#TensorBoard's&lt;/a&gt; new API ‚Üí &lt;a href="https://t.co/jADddxyH7Q" title="https://t.co/jADddxyH7Q" target="_blank"&gt;https://t.co/jADddxyH7Q&lt;/a&gt; &lt;a href="https://t.co/dWO1NHZiE1" title="https://t.co/dWO1NHZiE1" target="_blank"&gt;https://t.co/dWO1NHZiE1&lt;/a&gt;&lt;/p&gt;‚Äî TensorFlow (@tensorflow) &lt;a href="https://twitter.com/tensorflow/status/907710445758435328" data-datetime="2017-09-12T21:00:09+00:00"&gt;September 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;If you or your friend prefer Facebook to Twitter, you can now find all our tips on this FB page: &lt;a href="https://t.co/sCu8dvzVkd" title="https://t.co/sCu8dvzVkd" target="_blank"&gt;https://t.co/sCu8dvzVkd&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/909099472486932481" data-datetime="2017-09-16T16:59:39+00:00"&gt;September 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;future-fstrings: f-strings in Python &amp;lt; 3.6! Can't say I fully understand the encoding magic that makes this work... &lt;a href="https://t.co/JDSlYMqyGh" title="https://t.co/JDSlYMqyGh" target="_blank"&gt;https://t.co/JDSlYMqyGh&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/907639609760260096" data-datetime="2017-09-12T16:18:40+00:00"&gt;September 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This article is an intro into the basic asynchronous Python &lt;a href="https://t.co/1VtRs6LoA9" title="https://t.co/1VtRs6LoA9" target="_blank"&gt;https://t.co/1VtRs6LoA9&lt;/a&gt;&lt;/p&gt;‚Äî CheckiO (@PlayCheckiO) &lt;a href="https://twitter.com/PlayCheckiO/status/907666172723777538" data-datetime="2017-09-12T18:04:13+00:00"&gt;September 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The second part is out :D &lt;a href="https://t.co/EeKY2dCfui" title="https://t.co/EeKY2dCfui" target="_blank"&gt;https://t.co/EeKY2dCfui&lt;/a&gt;&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/907112545210847233" data-datetime="2017-09-11T05:24:18+00:00"&gt;September 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My advice on learning Python: Don't set out to "learn Python". Choose a problem you're interested in and learn to solve it with Python.&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/906901174728536066" data-datetime="2017-09-10T15:24:24+00:00"&gt;September 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sublime Text 3.0 is out! - &lt;a href="https://t.co/giZPGPwu9L" title="https://t.co/giZPGPwu9L" target="_blank"&gt;https://t.co/giZPGPwu9L&lt;/a&gt;&lt;/p&gt;‚Äî Sublime HQ (@sublimehq) &lt;a href="https://twitter.com/sublimehq/status/907956818994851840" data-datetime="2017-09-13T13:19:09+00:00"&gt;September 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@powertofly:" target="_blank"&gt;@powertofly:&lt;/a&gt; How to get your data back with Python web scraping. &lt;a href="https://t.co/FNBIyxIJB7" title="https://t.co/FNBIyxIJB7" target="_blank"&gt;https://t.co/FNBIyxIJB7&lt;/a&gt; via Lauren Glass &lt;a href="https://twitter.com/@hackernoon" target="_blank"&gt;@hackernoon&lt;/a&gt; &lt;a href="https://t.co/JuuI1‚Ä¶" title="https://t.co/JuuI1‚Ä¶" target="_blank"&gt;https://t.co/JuuI1‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/908645750958997504" data-datetime="2017-09-15T10:56:43+00:00"&gt;September 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;ripgrep is faster than {grep, ag, git grep, ucg, pt, sift} &lt;a href="https://t.co/iCa1YF3XAv" title="https://t.co/iCa1YF3XAv" target="_blank"&gt;https://t.co/iCa1YF3XAv&lt;/a&gt;&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/907982660940820480" data-datetime="2017-09-13T15:01:50+00:00"&gt;September 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What's in your Pocket? Visualize your reading list with a little help from &lt;a href="https://twitter.com/@lesleyclovesyou" target="_blank"&gt;@lesleyclovesyou&lt;/a&gt; and Python.‚Ä¶ &lt;a href="https://t.co/ViLoSkYTEL" title="https://t.co/ViLoSkYTEL" target="_blank"&gt;https://t.co/ViLoSkYTEL&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/908676824519118849" data-datetime="2017-09-15T13:00:12+00:00"&gt;September 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Equality vs Identity: &amp;gt;&amp;gt;&amp;gt; a = ["x", "y"] &amp;gt;&amp;gt;&amp;gt; b = a &amp;gt;&amp;gt;&amp;gt; c = ["x", "y"] &amp;gt;&amp;gt;&amp;gt; a == b == c True &amp;gt;&amp;gt;&amp;gt; a is b True &amp;gt;&amp;gt;&amp;gt; a is c False &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/908356538435125248" data-datetime="2017-09-14T15:47:29+00:00"&gt;September 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Using Data Science to solve the Chinese Postman Problem on a hiking challenge with the NetworkX library in &lt;a href="https://twitter.com/search/#Python!‚Ä¶" target="_blank"&gt;#Python!‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/15h0QSg5IG" title="https://t.co/15h0QSg5IG" target="_blank"&gt;https://t.co/15h0QSg5IG&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/907583913916354561" data-datetime="2017-09-12T12:37:21+00:00"&gt;September 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;FREE BOOK! Download it now!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Functional Programming in Python &lt;a href="https://t.co/Yr8nxgJX1Y" title="https://t.co/Yr8nxgJX1Y" target="_blank"&gt;https://t.co/Yr8nxgJX1Y&lt;/a&gt; by &lt;a href="https://twitter.com/@oreillymedia" target="_blank"&gt;@oreillymedia&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/908663590906773504" data-datetime="2017-09-15T12:07:36+00:00"&gt;September 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;WOOHOO!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ChristianHeimes:" target="_blank"&gt;@ChristianHeimes:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python's" target="_blank"&gt;#Python's&lt;/a&gt; master branch has reached 100,000 commits! &lt;a href="https://t.co/qyNHGSRK2U" title="https://t.co/qyNHGSRK2U" target="_blank"&gt;https://t.co/qyNHGSRK2U&lt;/a&gt; &lt;a href="https://t.co/kmWeL0Yy8n" title="https://t.co/kmWeL0Yy8n" target="_blank"&gt;https://t.co/kmWeL0Yy8n&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/908762027107147777" data-datetime="2017-09-15T18:38:45+00:00"&gt;September 15, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="learning"></category><category term="Tensorflow"></category><category term="fstrings"></category><category term="Asynchronous Python"></category><category term="Django"></category><category term="tutorials"></category><category term="Sublime Text"></category><category term="web scraping"></category><category term="regex"></category><category term="Data Visualisation"></category><category term="NetworkX"></category></entry><entry><title>How to Learn Python</title><link href="https://pybit.es/special-learning-python.html" rel="alternate"></link><published>2017-09-16T18:00:00+02:00</published><updated>2017-09-16T18:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-16:/special-learning-python.html</id><summary type="html">&lt;p&gt;Python is a mature language, easy to learn and &lt;a href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/"&gt;here to stay&lt;/a&gt;. But where to start? We see a lot of new Pythonistas posting questions like: &lt;em&gt;How to learn Python?&lt;/em&gt;, &lt;em&gt;Where do I start?&lt;/em&gt;, &lt;em&gt;What approach to take?&lt;/em&gt;. We were there once too. Now with 9 months of PyBites and 200 articles under our belt, we share how we learned Python.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;My advice on learning Python: Don't set out to "learn Python". Choose a problem you're interested in and learn to solve it with Python. - &lt;a href="https://twitter.com/jakevdp/status/906901174728536066"&gt;Jake VanderPlas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python is a mature language, easy to learn and &lt;a href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/"&gt;here to stay&lt;/a&gt;. But where to start?&lt;/p&gt;
&lt;p&gt;We see a lot of new Pythonistas posting questions like: &lt;em&gt;How do I learn Python?&lt;/em&gt;, &lt;em&gt;Where do I start?&lt;/em&gt;, &lt;em&gt;What approach should I take?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We were there once too. Now with 9 months of PyBites and 200 articles under our belt, we share how we learned Python.&lt;/p&gt;
&lt;p&gt;Special thanks to Derek Siver‚Äôs &lt;a href="https://sivers.org/learn-js"&gt;How to learn JS&lt;/a&gt; which planted the seed for this &lt;em&gt;Post #200 Special&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Julian's Story&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Creating PyBites has been an amazing experience and has resulted in me learning more Python than I could have imagined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My Python journey started a lot later than Bob‚Äôs, thus the large experience gap between the two of us. Over the past year however, my skills have improved significantly. These are the resources and methodologies I used to try and close the gap:&lt;/p&gt;
&lt;h3&gt;Learn by Doing&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pybit.es/learn-by-doing"&gt;Learn by Doing&lt;/a&gt;. I needed a better way to track the amount of money I was earning while working overtime to make sure I was being paid correctly by my ex-employer.&lt;/p&gt;
&lt;p&gt;Finding something to make for &lt;em&gt;yourself&lt;/em&gt; is by far the most effective way to learn Python. As Jake VanderPlas tweeted there is no better way to learn the language than to find a problem you like to solve. Also: "necessity is the mother of invention". This simple concept will ensure you remain motivated to see the project through to completion.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff&lt;/a&gt; (ATBS) by Al Sweigart. This is the book that got me off the ground. It‚Äôs a wonderful starting point to get you solving your first coding problem. I kept this book open the entire time I coded my Overtime Tracker app. Some techniques may be a little dated now (camelCase) but the foundations ring true and are still applicable.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt; and &lt;a href="http://www.amazon.com/dp/1491919531/?tag=pyb0f-20"&gt;Head First Python&lt;/a&gt;: ATBS is a great starting point but that‚Äôs about it. To get to the meatier and more complex parts of Python I started reading through both FP and HFP. I didn‚Äôt read them cover to cover. Rather, I read through what interested me at the time. They are resources, not novels. Skip to what you need. It keeps it interesting and stops it getting boring. THEORY is covered in other books. These books are amazing references so I still keep them handy.&lt;/p&gt;
&lt;p&gt;Related: &lt;a href="https://pybit.es/python-resources.html"&gt;From beginner to pro: Python books, videos and resources&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;100 Days of Code&lt;/h3&gt;
&lt;p&gt;Take &lt;a href="https://github.com/Kallaway/100-days-of-code"&gt;this challenge&lt;/a&gt;. It doesn‚Äôt matter how far along you are, just do it and log it. It‚Äôll be tough and it‚Äôll be frustrating so try and plan to do it in a ‚Äúquieter‚Äù quarter of the year. If no quarter is quiet then suck it up and just do it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make yourself accountable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Coding for 100 days straight is an incredibly satisfying experience. We did it. We loved it and we hated it. The outcome however, was the same for both of us. &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;We learned an absolute shitload over the 100 days and we‚Äôre better off for it&lt;/a&gt;!&lt;/p&gt;
&lt;h3&gt;Explore Other People's Code&lt;/h3&gt;
&lt;p&gt;Browse &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;: This admittedly came about thanks to the 100 days of code challenge. I needed ideas. Head to PyPI and just browse. Expand the categories, look through the packages and soak in the incredible problems people are solving with Python! Do this seriously and you &lt;em&gt;will&lt;/em&gt; find inspiration. Same for open source projects on GitHub.&lt;/p&gt;
&lt;p&gt;I‚Äôve found wonderful packages that have helped me solve problems both professionally and personally. Immerse yourself in a package that interests you and use it to make something cool. An example of the random awesomeness: I found a package to interface with my TV!&lt;/p&gt;
&lt;h3&gt;Learn a Web Framework&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Flask Mega-Tutorial&lt;/a&gt; by Miguel Grinberg: I wanted nothing more than to turn my CLI based scripts into beautiful web apps. This Flask tutorial was my enabler. I‚Äôm now an unashamed Flask addict and have created web interfaces for even the most mundane processes.&lt;/p&gt;
&lt;p&gt;I can say without a shred of doubt that learning Flask pushed me harder than anything else before it. It was tough but it was and continues to be oh so satisfying!&lt;/p&gt;
&lt;p&gt;If you are going the web development route you might also want to checkout &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Actively Share&lt;/h3&gt;
&lt;p&gt;Write a Blog and use GitHub: There‚Äôs nothing quite like teaching, writing or sharing to cement coding concepts. Having to formulate your learning into meaningful and comprehensible explanations is a wonderful way to learn! This applies to anything, not just Python!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seeing what you accomplish in the form of a blog, site or repo is soothing for the soul. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It‚Äôs held me accountable and kept me motivated. Similarly sharing my code on GitHub encourages me not to cut corners and to keep my code as clean as possible (you never know who‚Äôs watching right?!).&lt;/p&gt;
&lt;h3&gt;Code Challenges&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pybit.es/pages/challenges.html"&gt;Code Challenges&lt;/a&gt;: not as shameless a plug as it seems (maybe a little ...): &lt;strong&gt;Challenge yourself!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was horrified when we eventually created a challenge around APIs. I didn‚Äôt even know what API meant! The challenge pushed me to learn and create something new.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code challenges are there to get you out of your comfort zone and doing things you‚Äôve never considered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It didn‚Äôt matter how simple or complex the end product was, all that mattered was that I‚Äôd challenged myself with a new concept and had fun along the way. These are definitely an understated learning tool.&lt;/p&gt;
&lt;h2&gt;Bob's Story&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting PyBites and actively organizing and solving code challenges have made a major contribution to my Python learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am squarely behind Julian's recommendations! Here are some key things I learned during my Python journey:&lt;/p&gt;
&lt;h3&gt;Build Stuff and Share it&lt;/h3&gt;
&lt;p&gt;Before PyBites I already had &lt;a href="https://bobbelderbos.com/archive"&gt;my own blog&lt;/a&gt; with a build-to-learn approach. The practice is what counts.&lt;/p&gt;
&lt;p&gt;As Julian mentioned #100DaysOfCode pushed us and we learned a lot. We kept the habit by doing new &lt;a href="https://pybit.es/pages/projects.html"&gt;100 Days Projects&lt;/a&gt; since.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you code something every day or week and share it with the community I would be surprised if opportunity is not coming your way over time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;PR it or it didn't happen&lt;/em&gt; somebody said at work. Spot on! You can code in your cave but unless you share it, the world won't notice, can't try it and feedback, hence no opportunity to grow.&lt;/p&gt;
&lt;h3&gt;Automate Stuff at Work&lt;/h3&gt;
&lt;p&gt;I was fortunate to grasp a big opportunity at work that changed my career. I built a tool to automatically parse log files of X86 servers. It saved the support staff 1000's of hours.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this digital age where software is eating the world (Andreessen Horowitz), there are opportunities everywhere to hone your coding skills.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I started the work in PHP and shell scripting then moved to Perl, got in a maintenance mess, then luckily discovered Python. I never looked back. I am happy it went this way: I even more appreciate Python's elegance and conciseness now. Seeing a Python solution having an impact on business is very rewarding.&lt;/p&gt;
&lt;p&gt;It also led to my next big assignment: automate diagnostics of x86 hardware support calls, a framework I got to build in vanilla Python. You can read the full story &lt;a href="https://blogs.oracle.com/jobsatoracle/bob-belderbos-career-success-story:-leveraging-your-brand-and-network-to-achieve-career-aspirations"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Sharpen the Saw&lt;/h3&gt;
&lt;p&gt;Although this gave me plenty of practice, it was not till the following phase that I really got better at Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start a community effort. PyBites is not only a blog to learn and teach Python, via our challenges, social media and conferences, we actively engage with the wider community. Python happens to have an awesome community, leverage it!&lt;/p&gt;
&lt;p&gt;In Special &lt;a href="https://pybit.es/special-building-pybites.html"&gt;Post #100&lt;/a&gt; we described how our blog came about. It created greater depth, understanding and context for us. The exciting (and sometimes overwhelming) part is that there is always more to learn.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In that regard keep practicing and studying:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Practice: the code challenges enforce us to keep producing code + solutions. Although a serious time investment the reward is huge: better skill development, building up a portfolio, community collaborations, and utilities we can use. This is the most rewarding and fun part for us and even more so when other developers submit their solutions for inclusion in our review post.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Study: this sounds obvious but books and tutorial consumption can get on the back burner easily. It's paramount though: &lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt;, &lt;a href="http://amzn.to/2lxIB18"&gt;Python cookbook&lt;/a&gt;, &lt;a href="https://training.talkpython.fm/"&gt;Mike Kennedy's courses&lt;/a&gt;, &lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;, &lt;a href="https://dbader.org/"&gt;Dan Bader&lt;/a&gt;, these resources taught me more and better Python. Set some time aside each week to consume these and other great resources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work as a developer / for a dev team: being self-taught this obviously did not happen day 1, but you can certainly grow into it. Specially when accumulating your personal portfolio and network.&lt;/p&gt;
&lt;p&gt;I cannot recommend this goal highly enough. Work with more experienced software developers. Look at people that are further in their programming careers. What did they do to get there? No better exposure to be part of a dev team, go through code reviews and design discussions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You will be amazed how much you will learn joining a dev team. How much it can stretch you. Remember: growth happens outside your comfort zone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write Guest Posts. Related to previous point: higher standards. Writing for quality blogs you are held to their standards. I learned a lot writing posts for &lt;a href="https://pybonacci.es/2016/07/11/analizando-datos-sobre-el-brexit-con-pandas/"&gt;Pybonacci&lt;/a&gt;, &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;Dan Bader&lt;/a&gt;, &lt;a href="https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html"&gt;Twilio&lt;/a&gt; and &lt;a href="https://realpython.com/blog/python/building-a-simple-web-app-with-bottle-sqlalchemy-twitter-api/"&gt;Real Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="pybites is everywhere" src="https://pybit.es/images/coffee.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Software Books&lt;/h3&gt;
&lt;p&gt;To become a good Python developer understanding and following &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;the Zen of Python&lt;/a&gt; you already adopt a lot of good practices.&lt;/p&gt;
&lt;p&gt;Yet, some wider orientation pays off so I recommend reading books like &lt;a href="http://amzn.to/2nhxa1d"&gt;Clean Code&lt;/a&gt;, &lt;a href="http://www.amazon.com/dp/0735619670/?tag=pyb0f-20"&gt;Code Complete&lt;/a&gt;, &lt;a href="http://www.amazon.com/dp/1491953527/?tag=pyb0f-20"&gt;Building Maintainable Software&lt;/a&gt;, &lt;a href="http://www.amazon.com/dp/0201485672/?tag=pyb0f-20"&gt;Refactoring&lt;/a&gt;. And books on OOP, testing, design patterns and software architecture. A lot of the core principles are language agnostic so it does not matter these books teach in another language than Python.&lt;/p&gt;
&lt;h2&gt;Final words&lt;/h2&gt;
&lt;p&gt;We hope this article gave you some pointers and inspiration to get started with or delve deeper into your Python journey.&lt;/p&gt;
&lt;p&gt;If you have additional tips or advice or want to share your Python story, use the comments below.&lt;/p&gt;
&lt;p&gt;You can also &lt;a href="mailto:pybitesblog@gmail.com"&gt;email us&lt;/a&gt; if you have any suggestions or feedback.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="story"></category><category term="books"></category><category term="resources"></category><category term="special"></category><category term="learn-by-doing"></category><category term="inspiration"></category><category term="pybites"></category><category term="blogging"></category><category term="GitHub"></category><category term="Flask"></category><category term="100DaysOfCode"></category><category term="automation"></category><category term="career"></category><category term="development"></category><category term="pythonistas"></category><category term="freeCodeCamp"></category><category term="howto"></category><category term="zen"></category><category term="software"></category><category term="code quality"></category><category term="programming"></category></entry><entry><title>Code Challenge 36 - Create an AWS Lambda Function</title><link href="https://pybit.es/codechallenge36.html" rel="alternate"></link><published>2017-09-12T11:30:00+02:00</published><updated>2017-09-12T11:30:00+02:00</updated><author><name>Michael Herman</name></author><id>tag:pybit.es,2017-09-12:/codechallenge36.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We are delighted to have Michael Herman (&lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;) back to deliver this week's challenge. Prepare to learn some useful new skills and above all have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We are delighted to have Michael Herman (&lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;) back to deliver this week's challenge. Prepare to learn some useful new skills and above all have fun!&lt;/p&gt;
&lt;p&gt;Enter Michael.&lt;/p&gt;
&lt;h2&gt;AWS Lambda&lt;/h2&gt;
&lt;p&gt;Amazon Web Services (AWS) Lambda is an on-demand compute service that allows you to run code in response to events or HTTP requests. In other words, you can run scripts and apps without having to provision or manage servers in an infinitely-scalable environment where you pay only for usage.&lt;/p&gt;
&lt;p&gt;As of writing, Lambda supports code written in JavaScript (Node.js), Python, Java, and C#.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;Create an AWS Lambda function that is triggered by an event and then performs an action.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Event&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Image added to S3&lt;/td&gt;
&lt;td&gt;Image is processed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP Request via API Gateway&lt;/td&gt;
&lt;td&gt;HTTP Response&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Log file added to Cloudwatch&lt;/td&gt;
&lt;td&gt;Analyze the log&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scheduled event&lt;/td&gt;
&lt;td&gt;Backing up files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scheduled event&lt;/td&gt;
&lt;td&gt;Synchronization of files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more, check out the  &lt;a href="http://docs.aws.amazon.com/lambda/latest/dg/use-cases.html"&gt;Examples of How to Use AWS Lambda&lt;/a&gt; guide.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.aws.amazon.com/lambda/latest/dg/getting-started.html"&gt;Getting Started with AWS Lambda &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/blog/aws-lambda-python-3-6.html"&gt;How to Create Your First Python 3.6 AWS Lambda Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/aws-lambda.html"&gt;AWS Lambda - Full Stack Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.giantflyingsaucer.com/blog/?p=5730"&gt;Build a Python Microservice with Amazon Web Services Lambda &amp;amp; API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/adaplo/introduction-to-aws-lambda-with-python"&gt;Introduction to AWS Lambda with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get credit!&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our start-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#michaelherman"&gt;Michael&lt;/a&gt; &lt;/p&gt;</content><category term="codechallenges"></category><category term="AWS"></category><category term="lambda"></category><category term="lambda function"></category><category term="guest"></category><category term="automation"></category><category term="microservices"></category></entry><entry><title>PyBites Module of the Week: Openpyxl - Automate Excel!</title><link href="https://pybit.es/python-openpyxl.html" rel="alternate"></link><published>2017-09-12T10:50:00+02:00</published><updated>2017-09-12T10:50:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-09-12:/python-openpyxl.html</id><summary type="html">&lt;p&gt;You probably remember your first script. I remember the joy of discovering how I could let the machine automate something for me. It still gets me excited everyday. I played a bit with openpyxl yesterday. I used it to hack an Excel game for which I first used a macro. Not particularly useful but a nice exploration of this module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;You probably remember your first script. I remember the joy of discovering how I could let the machine automate something for me. It still gets me excited everyday. I played a bit with openpyxl yesterday. I used it to hack an Excel game for which I first used a macro. Not particularly useful but a nice exploration of this module.&lt;/p&gt;
&lt;h2&gt;Hack the Game&lt;/h2&gt;
&lt;p&gt;I wondered how easy it was to redo an Excel (VBA) macro in Python. So I used one of my my first scripts to hack &lt;a href="http://juegosexcel.com/foro/viewtopic.php?t=6396"&gt;this Excel game&lt;/a&gt;. More info &lt;a href="https://bobbelderbos.com/2016/02/fired-up-about-programming/"&gt;here&lt;/a&gt; including a story how I got into programming.&lt;/p&gt;
&lt;p&gt;My first shot at it was &lt;a href="http://www.lexicon.net/sjmachin/xlrd.html"&gt;xlrd&lt;/a&gt; because the game was in &lt;code&gt;xls&lt;/code&gt; but it got messy. Not giving in easily, I asked Julian to save it to &lt;code&gt;xlsx&lt;/code&gt; because I don't have MS Excel (thanks buddy). &lt;/p&gt;
&lt;p&gt;Attacking the problem with &lt;a href="https://openpyxl.readthedocs.io/en/default/"&gt;openpyxl&lt;/a&gt; was a much greater experience. You can find the code &lt;a href="https://gist.github.com/pybites/e1c04368fd1bc994c6f2e3ef89e90dd4"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;What was fun and beyond the initial Macro solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apart from the 'save to xlsx' dependency it does not rely on macros, Python is more portable. It took me also far less time, even taking out the advantage of having more experience now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As far as I know with Macros you have the same issue of the game creator hiding the answers, I was surprised that in Python I could just get the answers from the formulas that were visible querying the cells with conditional formatting. &lt;/p&gt;
&lt;p&gt;In that regard you might not even need Python as I could also get the answers out of the spreadsheet using unix' &lt;code&gt;strings&lt;/code&gt; + data cleaning. See here the cities in the right (zig zag) order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ strings ciudades.xls &lt;span class="p"&gt;|&lt;/span&gt;grep -n -B10 -A300 AVILA &lt;span class="p"&gt;|&lt;/span&gt; grep -B1 CORR &lt;span class="p"&gt;|&lt;/span&gt; egrep -v &lt;span class="s1"&gt;&amp;#39;CORR|CASI|^\-\-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;sed &lt;span class="s1"&gt;&amp;#39;s/.*[-:]//g&amp;#39;&lt;/span&gt;
SANTANDER
AVILA
MURCIA
BADAJOZ
BILBAO
SEVILLA
...
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Point being for as much as we love Python don't forget the power of Unix shell scripting for quick and one-off things!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As often concluded here: don't reinvent the wheel, often you can &lt;a href="https://pypi.python.org/pypi"&gt;use a module&lt;/a&gt;. In this case the openpyxl module makes querying, updating and saving the workbook a breeze.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The regex in &lt;code&gt;SOLUTION_FORMULA&lt;/code&gt; was pretty useful to extract the destination cell and answer (city). Regexes are useful if you don't overdo them. We have &lt;a href="https://pybit.es/mastering-regex.html"&gt;this resource&lt;/a&gt; if you want to learn more about them. We will also dedicate &lt;a href="https://pybit.es/pages/challenges.html"&gt;a code challenge&lt;/a&gt; to regexes &lt;a href="https://github.com/pybites/challenges/issues/96"&gt;at some point&lt;/a&gt; so you can practice them ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another favorite of mine are &lt;a href="https://docs.python.org/3.6/library/collections.html#collections.namedtuple"&gt;namedtuples&lt;/a&gt; which &lt;a href="https://pybit.es/beautiful-python.html"&gt;make your code more readable&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Lessons learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When using Python to work with Excel sheets it's probably best to go with the newer &lt;code&gt;xlsx&lt;/code&gt; format so you can use openpyxl.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not all code exercises have to be useful per se. Apart from this article, with this exercise I got to practice just enough to feel confident doing more useful stuff with Excel + Python when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For some things you actually don't need Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For me automating stuff has been (and still is) one of the best and most fun ways to learn coding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Call out to Finance / Excel folks&lt;/h2&gt;
&lt;p&gt;Let's do a challenge around this one! I logged &lt;a href="https://github.com/pybites/challenges/issues/104"&gt;an issue&lt;/a&gt;. If you have cool ideas what we can automate with Excel + Openpyxl update the issue. Thanks.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="excel"></category><category term="games"></category><category term="first script"></category><category term="vba"></category><category term="automation"></category><category term="openpyxl"></category><category term="hacking"></category><category term="unix"></category></entry><entry><title>Code Challenge 35 - Improve Your Python Code With BetterCodeHub - Review</title><link href="https://pybit.es/codechallenge35_review.html" rel="alternate"></link><published>2017-09-11T14:00:00+02:00</published><updated>2017-09-11T14:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-11:/codechallenge35_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge35.html"&gt;Improve Your Python Code With BetterCodeHub&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge35.html"&gt;Improve Your Python Code With BetterCodeHub&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/hobojoe1848"&gt;hobojoe1848&lt;/a&gt; submitted his &lt;a href="https://github.com/hobojoe1848/generic-emailer"&gt;Generic Emailer Script&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;This is a simple script I wrote to automate sending emails from my Gmail account. It‚Äôs generic such that I use it in various different programs. When I had BCH analyse the repo I received a score of 7, meaning it failed 3 points. The most obvious to me was the ‚ÄúWrite Short Units of Code‚Äù test:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Better Code Hub Score of 7" src="https://pybit.es/images/emailer-bch-7.png"&gt;&lt;/p&gt;
&lt;p&gt;The original script that resulted in this score is &lt;a href="https://github.com/hobojoe1848/generic-emailer/blob/master/generic_emailer.old"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tackling this issue had me refactor the entire script after which, BCH gave me a pass and my score jumped to 8:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Better Code Hub Score of 8" src="https://pybit.es/images/emailer-bch-8.png"&gt;&lt;/p&gt;
&lt;p&gt;What a great tool! I‚Äôm a big fan of BCH after this!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; ran BCH on his small &lt;a href="https://github.com/pybites/codetips"&gt;codetips&lt;/a&gt; Django REST Framework submission &lt;a href="https://pybit.es/codechallenge34_review.html"&gt;of last week&lt;/a&gt;: wow I was amazed to see it got a 9 right off the bat. DRF / Django lets you write quality code! &lt;/p&gt;
&lt;p&gt;I did have to ignore the settings file adding a &lt;code&gt;.bettercodehub.yml&lt;/code&gt; file to get to a 10. I also opened another issue to add tests (as the project is &amp;lt; 200 LOC BCH did not complain yet):&lt;/p&gt;
&lt;p&gt;&lt;img alt="codetips final score" src="https://pybit.es/images/bch-codetips.png"&gt;&lt;/p&gt;
&lt;p&gt;I also refactored Julian's &lt;a href="https://github.com/hobojoe1848/timezone-list/pull/4"&gt;timezone-list project&lt;/a&gt; improving the already nice score of 8 to a 10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Before:
    &lt;img alt="tzlist begin score" src="https://pybit.es/images/bch-tzlist-before.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seperating tz conversion into own module, separate from Flask app:
    &lt;img alt="tzlist comp balance" src="https://pybit.es/images/bch-tzlist-change1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added some unittests:
    &lt;img alt="tzlist tests" src="https://pybit.es/images/bch-tzlist-change2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Final score:
    &lt;img alt="tzlist final score" src="https://pybit.es/images/bch-tzlist-after.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also like BCH: it makes you think about your code and improve it. The tool has a nice design and performs well. I also like the GitHub workflow we learned during this challenge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you did some work for this challenge, PR it or message us with the details and we'll include it here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;As there is no deadline to these challenges, we will update here when we get more cool submissions for this challenge ... &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding!&lt;/p&gt;
&lt;p&gt;Stay tuned for our next challenge ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="bettercodehub"></category><category term="SIG"></category><category term="refactoring"></category><category term="code quality"></category><category term="clean code"></category><category term="software development"></category><category term="tools"></category><category term="platform"></category></entry><entry><title>Twitter Digest 2017 Week 36</title><link href="https://pybit.es/twitter_digest_201736.html" rel="alternate"></link><published>2017-09-10T12:42:00+02:00</published><updated>2017-09-10T12:42:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-10:/twitter_digest_201736.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New blog post: "The Incredible Growth of Python" &lt;a href="https://t.co/S9opr5E107" title="https://t.co/S9opr5E107" target="_blank"&gt;https://t.co/S9opr5E107&lt;/a&gt; &lt;a href="https://t.co/GsEqmEyk2v" title="https://t.co/GsEqmEyk2v" target="_blank"&gt;https://t.co/GsEqmEyk2v&lt;/a&gt;&lt;/p&gt;‚Äî David Robinson (@drob) &lt;a href="https://twitter.com/drob/status/905476230832693248" data-datetime="2017-09-06T17:02:11+00:00"&gt;September 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dtunkelang:" target="_blank"&gt;@dtunkelang:&lt;/a&gt; 10 Things Everyone Should Know About Machine Learning &lt;a href="https://t.co/wCd1sLNBQa" title="https://t.co/wCd1sLNBQa" target="_blank"&gt;https://t.co/wCd1sLNBQa&lt;/a&gt;&lt;/p&gt;‚Äî Data Science Renee (@BecomingDataSci) &lt;a href="https://twitter.com/BecomingDataSci/status/905456140145893378" data-datetime="2017-09-06T15:42:21+00:00"&gt;September 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My Favorite Git Helpers { author: &lt;a href="https://twitter.com/@Andrew565" target="_blank"&gt;@Andrew565&lt;/a&gt; } &lt;a href="https://t.co/3bb8xdxIRY" title="https://t.co/3bb8xdxIRY" target="_blank"&gt;https://t.co/3bb8xdxIRY&lt;/a&gt;&lt;/p&gt;‚Äî The Practical Dev (@ThePracticalDev) &lt;a href="https://twitter.com/ThePracticalDev/status/906578952105414657" data-datetime="2017-09-09T18:04:00+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hone your &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; skills with the latest &lt;a href="https://twitter.com/@Humble" target="_blank"&gt;@Humble&lt;/a&gt; Book Bundle - supporting &lt;a href="https://twitter.com/@codeforamerica" target="_blank"&gt;@codeforamerica&lt;/a&gt; &lt;a href="https://t.co/VvF55Vs9Cq" title="https://t.co/VvF55Vs9Cq" target="_blank"&gt;https://t.co/VvF55Vs9Cq&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#RLang" target="_blank"&gt;#RLang&lt;/a&gt;&lt;/p&gt;‚Äî O'Reilly Media (@OReillyMedia) &lt;a href="https://twitter.com/OReillyMedia/status/906520114396368898" data-datetime="2017-09-09T14:10:12+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Bots are here to stay. Here are 4 reasons why. &lt;a href="https://t.co/HBgCZgIZ7H" title="https://t.co/HBgCZgIZ7H" target="_blank"&gt;https://t.co/HBgCZgIZ7H&lt;/a&gt; via &lt;a href="https://twitter.com/@ami" target="_blank"&gt;@ami&lt;/a&gt; &lt;a href="https://twitter.com/search/#tech" target="_blank"&gt;#tech&lt;/a&gt; &lt;a href="https://t.co/Zc5Ucvo9er" title="https://t.co/Zc5Ucvo9er" target="_blank"&gt;https://t.co/Zc5Ucvo9er&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/906623865350225920" data-datetime="2017-09-09T21:02:28+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@AlistairDove:" target="_blank"&gt;@AlistairDove:&lt;/a&gt; Agreed! Thanks to all the scientists out there gathering the data &amp;amp; running complex models and data viz, a vital part of‚Ä¶&lt;/p&gt;‚Äî Data Science Renee (@BecomingDataSci) &lt;a href="https://twitter.com/BecomingDataSci/status/906548049975156737" data-datetime="2017-09-09T16:01:12+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@diogoaguiam:" target="_blank"&gt;@diogoaguiam:&lt;/a&gt; This jupyter data analysis playlist by &lt;a href="https://twitter.com/@jakevdp" target="_blank"&gt;@jakevdp&lt;/a&gt; is the clearest intro to so many tools I have seen in a long time!! &lt;a href="https:‚Ä¶" title="https:‚Ä¶" target="_blank"&gt;https:‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/905489337407512576" data-datetime="2017-09-06T17:54:15+00:00"&gt;September 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python REST API with Flask &lt;a href="https://t.co/NriK8BRdlR" title="https://t.co/NriK8BRdlR" target="_blank"&gt;https://t.co/NriK8BRdlR&lt;/a&gt; by &lt;a href="https://twitter.com/@sourcedexter" target="_blank"&gt;@sourcedexter&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/906368328708395008" data-datetime="2017-09-09T04:07:03+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Pandas_profiling generates profile reports from &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; dataframe objects. &lt;a href="https://t.co/fquXHLyiLD" title="https://t.co/fquXHLyiLD" target="_blank"&gt;https://t.co/fquXHLyiLD&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/E076G91OCn" title="https://t.co/E076G91OCn" target="_blank"&gt;https://t.co/E076G91OCn&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/904625971013222400" data-datetime="2017-09-04T08:43:33+00:00"&gt;September 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Slack CLI for productive developers &lt;a href="https://t.co/msgaeAn9G2" title="https://t.co/msgaeAn9G2" target="_blank"&gt;https://t.co/msgaeAn9G2&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/906532650793418753" data-datetime="2017-09-09T15:00:01+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;pinclone: A pinterest clone for Django practice &lt;a href="https://t.co/DEsEwOiESc" title="https://t.co/DEsEwOiESc" target="_blank"&gt;https://t.co/DEsEwOiESc&lt;/a&gt; &lt;a href="https://twitter.com/search/#is_project" target="_blank"&gt;#is_project&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/906631774544916480" data-datetime="2017-09-09T21:33:54+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Beginner's Guide to Getting Started with Python &amp;amp; Django &lt;a href="https://t.co/gDUmdpm5T5" title="https://t.co/gDUmdpm5T5" target="_blank"&gt;https://t.co/gDUmdpm5T5&lt;/a&gt; &lt;a href="https://t.co/mx2n7NXJgQ" title="https://t.co/mx2n7NXJgQ" target="_blank"&gt;https://t.co/mx2n7NXJgQ&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/905197353648488452" data-datetime="2017-09-05T22:34:01+00:00"&gt;September 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Pipenv screencast, for the uninitiated &lt;a href="https://t.co/Z6kNOSIrgm" title="https://t.co/Z6kNOSIrgm" target="_blank"&gt;https://t.co/Z6kNOSIrgm&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz üêç (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/906611556330471430" data-datetime="2017-09-09T20:13:33+00:00"&gt;September 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learning &lt;a href="https://twitter.com/search/#Django?" target="_blank"&gt;#Django?&lt;/a&gt; Ready to laugh while learning from &lt;a href="https://twitter.com/@HelloMelanieC's" target="_blank"&gt;@HelloMelanieC's&lt;/a&gt; Django mistakes? Watch this: &lt;a href="https://t.co/4roDG3iMcR" title="https://t.co/4roDG3iMcR" target="_blank"&gt;https://t.co/4roDG3iMcR&lt;/a&gt; &lt;a href="https://twitter.com/search/#djangocon" target="_blank"&gt;#djangocon&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/905532112341803015" data-datetime="2017-09-06T20:44:14+00:00"&gt;September 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Need to cat a file, but want a little something extra? lolcat! &lt;a href="https://t.co/O3uQhVVh5l" title="https://t.co/O3uQhVVh5l" target="_blank"&gt;https://t.co/O3uQhVVh5l&lt;/a&gt; &lt;a href="https://t.co/IuPwbYU5f9" title="https://t.co/IuPwbYU5f9" target="_blank"&gt;https://t.co/IuPwbYU5f9&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/905864961443946497" data-datetime="2017-09-07T18:46:51+00:00"&gt;September 07, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Machine Learning"></category><category term="Data Visualisation"></category><category term="Git"></category><category term="Data Science"></category><category term="Books"></category><category term="Bots"></category><category term="Jupyter"></category><category term="Flask"></category><category term="REST"></category><category term="CLI"></category><category term="Pandas"></category><category term="Slack"></category><category term="Django"></category><category term="pinclone"></category><category term="Pipenv"></category></entry><entry><title>Code Challenge 34 - Build a Simple API With Django REST Framework - Review</title><link href="https://pybit.es/codechallenge34_review.html" rel="alternate"></link><published>2017-09-08T16:30:00+02:00</published><updated>2017-09-08T16:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-08:/codechallenge34_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge34.html"&gt;Build a Simple API With Django REST Framework&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge34.html"&gt;Build a Simple API With Django REST Framework&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;Submissions are merged to our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;Community branch&lt;/a&gt; -&amp;gt; &lt;a href="https://github.com/pybites/challenges/tree/community/34"&gt;Challenge 34 subdir&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; submitted &lt;a href="https://github.com/pybites/challenges/tree/community/34/bbelderbos"&gt;codetips&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple API to add coding tips, inspired by @python_tip and following DRF's awesome tutorial (part 1 - 4) - https://github.com/pybites/codetips&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you did some DRF work for this challenge PR it and we'll include it here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;As there is no deadline to these challenges, we will update here when we get more cool submissions for this challenge ... &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding!&lt;/p&gt;
&lt;p&gt;Stay tuned for our next challenge ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category><category term="APIs"></category><category term="Django REST Framework"></category><category term="DRF"></category><category term="codetips"></category><category term="pytip"></category></entry><entry><title>Hiding BCC Recipients in Python MIME Emails</title><link href="https://pybit.es/python-MIME-bcc.html" rel="alternate"></link><published>2017-09-06T18:53:00+02:00</published><updated>2017-09-06T18:53:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-09-06:/python-MIME-bcc.html</id><summary type="html">&lt;p&gt;How to actually hide the BCC recipients when sending an email with Python MIME.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few of the programs I‚Äôve created rely on an automated emailer script to notify myself and others of updates. The script uses Python MIME submodules. An issue I‚Äôve been having to date has been keeping the recipient email addresses anonymous.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you‚Äôre not familiar with Python MIME for sending emails, I‚Äôd suggest you start with my two earlier articles: &lt;a href="https://pybit.es/python-smtplib.html"&gt;Send emails with Python smtlib&lt;/a&gt; and &lt;a href="https://pybit.es/python-MIME.html"&gt;Send Advanced Emails with Python MIME Submodules&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Problem - BCC&lt;/h2&gt;
&lt;p&gt;When sending emails where I‚Äôm happy for all email addresses to be visible to recipients (such as to myself and Bob), the code looks like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from_addr = &amp;#39;pybitesblog@gmail.com&amp;#39;
to_addr = [&amp;#39;bob@rocks.com&amp;#39;, &amp;#39;julian_is@awesome.com&amp;#39;]
msg = MIMEMultipart()
msg[&amp;#39;From&amp;#39;] = from_addr
msg[&amp;#39;To&amp;#39;] = &amp;quot;, &amp;quot;.join(to_addr)
msg[&amp;#39;Subject&amp;#39;] = &amp;#39;Test Automation Email&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the header information code. When the email sends, both Bob and I will be able to see one another on the email.&lt;/p&gt;
&lt;p&gt;After some reading and searching online, my understanding was that to make the recipients anonymous, I could use the BCC field as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from_addr = &amp;#39;pybitesblog@gmail.com&amp;#39;
to_addr = ‚Äòpybitesblog@gmail.com‚Äô
recipients = [&amp;#39;bob@rocks.com&amp;#39;, &amp;#39;julian_is@awesome.com&amp;#39;]
msg = MIMEMultipart()
msg[&amp;#39;From&amp;#39;] = from_addr
msg[&amp;#39;To&amp;#39;] = to_addr
msg[&amp;#39;Bcc&amp;#39;] = &amp;quot;, &amp;quot;.join(recipients)
msg[&amp;#39;Subject&amp;#39;] = &amp;#39;Test Automation Email&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the differences. I‚Äôve set the &lt;code&gt;To&lt;/code&gt; address to be the same as the &lt;code&gt;from_addr&lt;/code&gt; and created a new item &lt;code&gt;['Bcc']&lt;/code&gt; which then joins the emails listed in &lt;code&gt;recipients&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This code actually works. The problem is that I don't get the expected functionality of BCC (recipients aren‚Äôt listed). That is, Bob can see that I was BCC‚Äôd on the email and vice versa! In the email he receives, the header actually shows ‚Äúbcc‚Äù and shows my email address, completely defeating the purpose!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Further research was required. As I‚Äôve mentioned, we‚Äôre building the header information of the email when we use the &lt;code&gt;msg['To']&lt;/code&gt; and other options for MIME.&lt;/p&gt;
&lt;p&gt;It turns out anything you put in the header is, by design, visible to the recipient. Any email address I assign to `msg['Bcc']‚Äô is again, by design, supposed to be visible to all recipients.&lt;/p&gt;
&lt;p&gt;The workaround I‚Äôve found that works for me is to completely omit my list of recipients from the MIME header information altogether and instead include it in the &lt;code&gt;sendmail()&lt;/code&gt; function.
The current sendmail parameters are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.sendmail(from_addr, to_addr, text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the workaround it‚Äôs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from_addr = &amp;#39;pybitesblog@gmail.com&amp;#39;
to_addr = ‚Äòpybitesblog@gmail.com‚Äô
recipients = [&amp;#39;bob@rocks.com&amp;#39;, &amp;#39;julian_is@awesome.com&amp;#39;]

msg = MIMEMultipart()
msg[&amp;#39;From&amp;#39;] = from_addr
msg[&amp;#39;To&amp;#39;] = to_addr
msg[&amp;#39;Subject&amp;#39;] = &amp;#39;Test Automation Email&amp;#39;

smtp_server.sendmail(from_addr, [to_addr] + recipients, text)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note: You can find the full emailer script in &lt;a href="https://pybit.es/python-MIME.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea is that the only information &lt;strong&gt;visible to the recipient&lt;/strong&gt; when they receive the email is the information we populate MIME &lt;code&gt;msg&lt;/code&gt; with.&lt;/p&gt;
&lt;p&gt;The information in sendmail is not visible to recipients so any addresses we decide to tack on to the ‚ÄúTo‚Äù argument of sendmail remain hidden.&lt;/p&gt;
&lt;p&gt;And THAT is the behaviour I wanted all along!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="email"></category><category term="automation"></category><category term="MIME"></category><category term="bcc"></category></entry><entry><title>Code Challenge 35 - Improve Your Python Code With BetterCodeHub</title><link href="https://pybit.es/codechallenge35.html" rel="alternate"></link><published>2017-09-05T09:15:00+02:00</published><updated>2017-09-05T09:15:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-05:/codechallenge35.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python programming! Last week we wrote an article on &lt;a href="https://pybit.es/bettercodehub.html"&gt;improving the quality of your code with Better Code Hub&lt;/a&gt;. This week we let you refactor a Python project.  You can even win awards thanks to &lt;a href="https://www.sig.eu"&gt;SIG&lt;/a&gt; who is sponsoring this challenge!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python programming! Last week we wrote an article on &lt;a href="https://pybit.es/bettercodehub.html"&gt;improving the quality of your code with Better Code Hub&lt;/a&gt;. This week we let you refactor a Python project. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can even win awards thanks to &lt;a href="https://www.sig.eu"&gt;SIG&lt;/a&gt; who is sponsoring this challenge!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Update: initially we had you pick and improve one of your repos or forks. &lt;a href="https://www.sig.eu"&gt;SIG&lt;/a&gt; provided us with a more interesting approach though: &lt;a href="https://opensourcespringcleaning.github.io"&gt;SpringCleaning&lt;/a&gt; which template we adopted for this challenge. Check out the instructions below. We will use label &lt;em&gt;PyBitesChallenge35&lt;/em&gt; and only accept &lt;strong&gt;Python related projects&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;As a maintainer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(If not already done) Enable issues in the repository‚Äôs settings page on GitHub.&lt;/li&gt;
&lt;li&gt;Create a 'PyBitesChallenge35' - label &lt;a href="https://help.github.com/articles/creating-and-editing-labels-for-issues-and-pull-requests/"&gt;Here‚Äôs how&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create issues based on the proposed prioritized refactoring candidates from &lt;a href="https://bettercodehub.com"&gt;Better Code Hub&lt;/a&gt; and attach the &lt;em&gt;PyBitesChallenge35&lt;/em&gt; label to them. Here is an example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="add the PyBitesChallenge35 label to your GitHub issue" src="https://pybit.es/images/pcc35-add-label.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To enable Better Code Hub to run on every Push and Pull Request, click the ‚öô &amp;nbsp;&amp;nbsp;icon and toggle the "Push &amp;amp; Pull request analysis" switch. This will activate the webhook.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;As a contributor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Search on Github for &lt;a href="https://github.com/issues?utf8=%E2%9C%93&amp;amp;q=label%3APyBitesChallenge35+"&gt;issues with the &lt;em&gt;PyBitesChallenge35&lt;/em&gt; label&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fork, refactor and create a Pull Request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Want to see a sample Better Code Hub report?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Head over to &lt;a href="https://bettercodehub.com"&gt;bettercodehub.com&lt;/a&gt; and login with your GitHub account. You'll then see your repos, and you can start an analysis clicking the ‚ñ∂Ô∏è &amp;nbsp;&amp;nbsp;button. It will analyze the default branch. Or checkout &lt;a href="https://pybit.es/bettercodehub.html"&gt;our article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What‚Äôs the reward for participation?&lt;/h2&gt;
&lt;p&gt;If you participate in this initiative you get rewarded with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first 25 contributors that get one Pybites Code Challenge Pull Request accepted will get a free month of Better Code Hub PRO.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first 10 contributors that get two Pybites Code Challenge Pull Requests accepted will get a hard copy of &lt;a href="http://shop.oreilly.com/product/0636920049555.do"&gt;&lt;em&gt;Building Maintainable Software&lt;/em&gt; (O‚ÄôReilly)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you‚Äôre a maintainer, you get a cleaner code base and new contributors to extend your repository. üòä &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BetterCodeHub: &lt;a href="https://bettercodehub.com"&gt;tool&lt;/a&gt; | &lt;a href="https://bettercodehub.com/docs/faq"&gt;faq&lt;/a&gt; | &lt;a href="https://bettercodehub.com/docs/configuration-manual"&gt;config manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read what it is, how it works and a Python refactoring example: &lt;a href="https://pybit.es/bettercodehub.html"&gt;Improve the Quality of Your Code with Better Code Hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt; or &lt;a href="http://pybit.es/pages/about.html"&gt;reach out&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;Our goal is to learn more Python which is way cooler as a community. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob, Julian and the folks @ SIG&lt;/p&gt;</content><category term="bettercodehub"></category><category term="SIG"></category><category term="refactoring"></category><category term="code quality"></category><category term="clean code"></category><category term="software development"></category><category term="tools"></category><category term="platform"></category></entry><entry><title>Twitter digest 2017 week 35</title><link href="https://pybit.es/twitter_digest_201735.html" rel="alternate"></link><published>2017-09-03T19:36:00+02:00</published><updated>2017-09-03T19:36:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-09-03:/twitter_digest_201735.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Getting started with Celery and RabbitMQ &lt;a href="https://t.co/BbA2Oiikag" title="https://t.co/BbA2Oiikag" target="_blank"&gt;https://t.co/BbA2Oiikag&lt;/a&gt; &lt;a href="https://t.co/w2XFAy0Krq" title="https://t.co/w2XFAy0Krq" target="_blank"&gt;https://t.co/w2XFAy0Krq&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/902257987133345792" data-datetime="2017-08-28T19:54:01+00:00"&gt;August 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ubuntu:" target="_blank"&gt;@ubuntu:&lt;/a&gt; Snapping a &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; application. &lt;a href="https://t.co/iv3128jC9l" title="https://t.co/iv3128jC9l" target="_blank"&gt;https://t.co/iv3128jC9l&lt;/a&gt; &lt;a href="https://t.co/hHpblCR4Ds" title="https://t.co/hHpblCR4Ds" target="_blank"&gt;https://t.co/hHpblCR4Ds&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/904070954334134272" data-datetime="2017-09-02T19:58:06+00:00"&gt;September 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Easier &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; PR review &lt;a href="https://t.co/X5EsQ9jATE" title="https://t.co/X5EsQ9jATE" target="_blank"&gt;https://t.co/X5EsQ9jATE&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/903919942134882304" data-datetime="2017-09-02T09:58:02+00:00"&gt;September 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn how to build an API with &lt;a href="https://twitter.com/@djangoproject" target="_blank"&gt;@djangoproject&lt;/a&gt; and &lt;a href="https://twitter.com/@restframework" target="_blank"&gt;@restframework&lt;/a&gt; &lt;a href="https://t.co/mGLRcAvOxB" title="https://t.co/mGLRcAvOxB" target="_blank"&gt;https://t.co/mGLRcAvOxB&lt;/a&gt;&lt;/p&gt;‚Äî Michael Washburn Jr (@Mike_Washburn) &lt;a href="https://twitter.com/Mike_Washburn/status/902498171917565952" data-datetime="2017-08-29T11:48:26+00:00"&gt;August 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kennethreitz:" target="_blank"&gt;@kennethreitz:&lt;/a&gt; Pipenv will soon be the officially recommended packaging tool on &lt;a href="https://t.co/Drf9YHbL7W!" title="https://t.co/Drf9YHbL7W!" target="_blank"&gt;https://t.co/Drf9YHbL7W!&lt;/a&gt; ‚ú®üç∞‚ú®&lt;/p&gt;‚Äî Weekly Python Chat (@PythonChat) &lt;a href="https://twitter.com/PythonChat/status/903759637358501888" data-datetime="2017-09-01T23:21:03+00:00"&gt;September 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check out &lt;a href="https://twitter.com/search/#Docker‚Äôs" target="_blank"&gt;#Docker‚Äôs&lt;/a&gt; voting app on &lt;a href="https://twitter.com/search/#Swarm," target="_blank"&gt;#Swarm,&lt;/a&gt; &lt;a href="https://twitter.com/search/#Kubernetes" target="_blank"&gt;#Kubernetes&lt;/a&gt; and &lt;a href="https://twitter.com/search/#Nomad" target="_blank"&gt;#Nomad&lt;/a&gt; via &lt;a href="https://twitter.com/@lucjuggery" target="_blank"&gt;@lucjuggery&lt;/a&gt; &lt;a href="https://t.co/Q8kSYR3vgB" title="https://t.co/Q8kSYR3vgB" target="_blank"&gt;https://t.co/Q8kSYR3vgB&lt;/a&gt;&lt;/p&gt;‚Äî Docker (@Docker) &lt;a href="https://twitter.com/Docker/status/904214881003606021" data-datetime="2017-09-03T05:30:01+00:00"&gt;September 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pyquantnews:" target="_blank"&gt;@pyquantnews:&lt;/a&gt; Building a Bullet Graph in Python &lt;a href="https://t.co/N1FClVm0bc" title="https://t.co/N1FClVm0bc" target="_blank"&gt;https://t.co/N1FClVm0bc&lt;/a&gt; | &lt;a href="https://t.co/DCk0dfwUJD" title="https://t.co/DCk0dfwUJD" target="_blank"&gt;https://t.co/DCk0dfwUJD&lt;/a&gt; &lt;a href="https://twitter.com/search/#datascience" target="_blank"&gt;#datascience&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/903799850784796672" data-datetime="2017-09-02T02:00:50+00:00"&gt;September 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyFiddle: a free lightweight Python IDE to run and share Python scripts with some nifty features &lt;a href="https://t.co/cSrY85x7aS" title="https://t.co/cSrY85x7aS" target="_blank"&gt;https://t.co/cSrY85x7aS&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/903618452698619904" data-datetime="2017-09-01T14:00:02+00:00"&gt;September 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@anthonypjshaw:" target="_blank"&gt;@anthonypjshaw:&lt;/a&gt; Oh so my big &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; news is that I'm developing my first &lt;a href="https://twitter.com/@pluralsight" target="_blank"&gt;@pluralsight&lt;/a&gt; course: "Migrating Python 2 to Python 3" üéâ &lt;a href="https:‚Ä¶" title="https:‚Ä¶" target="_blank"&gt;https:‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/902506416849567744" data-datetime="2017-08-29T12:21:12+00:00"&gt;August 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The video for my 2017 &lt;a href="https://twitter.com/@py_bay" target="_blank"&gt;@py_bay&lt;/a&gt; keynote is up: &lt;a href="https://t.co/95IMpkQVSI" title="https://t.co/95IMpkQVSI" target="_blank"&gt;https://t.co/95IMpkQVSI&lt;/a&gt; Topic: All about concurrency in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; Slides: &lt;a href="https://t.co/PN6APXgsbb" title="https://t.co/PN6APXgsbb" target="_blank"&gt;https://t.co/PN6APXgsbb&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/903140753685098496" data-datetime="2017-08-31T06:21:49+00:00"&gt;August 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pybites:" target="_blank"&gt;@pybites:&lt;/a&gt; Import &lt;a href="https://twitter.com/search/#Python:" target="_blank"&gt;#Python:&lt;/a&gt; News This Week - EuroSciPy Videos are out, Reducing Python's startup time, Predicting algo .. &lt;a href="https://t.co/afL‚Ä¶" title="https://t.co/afL‚Ä¶" target="_blank"&gt;https://t.co/afL‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/903971118826094593" data-datetime="2017-09-02T13:21:24+00:00"&gt;September 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;These first graders aren't just learning to code, they're the start to breaking down accessibility barriers in tech! &lt;a href="https://t.co/yzxyXPdUTF" title="https://t.co/yzxyXPdUTF" target="_blank"&gt;https://t.co/yzxyXPdUTF&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/902559499470331904" data-datetime="2017-08-29T15:52:08+00:00"&gt;August 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;If x is an array of integers, y = x.astype(float) is a copy of x with elements converted to floating point.&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/903368081136857088" data-datetime="2017-08-31T21:25:08+00:00"&gt;August 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;wtfPython - A collection of subtle and tricky Python examples &lt;a href="https://t.co/eDu7hrkKjy" title="https://t.co/eDu7hrkKjy" target="_blank"&gt;https://t.co/eDu7hrkKjy&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/903417528327819266" data-datetime="2017-09-01T00:41:38+00:00"&gt;September 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Exactly!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@curi0usJack:" target="_blank"&gt;@curi0usJack:&lt;/a&gt; The &lt;a href="https://twitter.com/search/#1" target="_blank"&gt;#1&lt;/a&gt; question I get is "How did you learn to do this?"  Curiosity + Failure + Google + Friends + Failure + Stack Overflo‚Ä¶&lt;/p&gt;‚Äî Kenneth Love (@kennethlove) &lt;a href="https://twitter.com/kennethlove/status/904188056655208448" data-datetime="2017-09-03T03:43:26+00:00"&gt;September 03, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Celery"></category><category term="RabbitMQ"></category><category term="tutorial"></category><category term="Ubuntu"></category><category term="snap"></category><category term="GitHub"></category><category term="API"></category><category term="Django"></category><category term="REST"></category><category term="Pipenv"></category><category term="Docker"></category><category term="Swarm"></category><category term="Kubernetes"></category><category term="Nomad"></category><category term="data science"></category><category term="PyFiddle"></category><category term="IDE"></category><category term="courses"></category><category term="concurrency"></category><category term="wtfPython"></category><category term="examples"></category></entry><entry><title>Improve the Quality of Your Code with Better Code Hub</title><link href="https://pybit.es/bettercodehub.html" rel="alternate"></link><published>2017-08-30T18:30:00+02:00</published><updated>2017-08-30T18:30:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-08-30:/bettercodehub.html</id><summary type="html">&lt;p&gt;So you pushed your code to GitHub and deployed v1, congrats! But how maintainable is your code really? Do you have tests? Is your code modular? Are your methods short and concise? What if you could hit a button and a tool conveniently checks this for you? Free and integrated with GitHub? Enter &lt;a href="https://bettercodehub.com"&gt;Better Code Hub&lt;/a&gt; from &lt;a href="https://www.sig.eu/"&gt;Software Improvement Group&lt;/a&gt; ...&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Better Code Hub guides you in writing Better Code. - &lt;a href="https://bettercodehub.com/"&gt;BCH Homepage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So you pushed your code to GitHub and deployed v1, congrats! But how maintainable is your code really? Do you have tests? Is your code modular? Are your methods short and concise? What if you could hit a button and a tool conveniently checks this for you? Free and integrated with GitHub? Enter &lt;a href="https://bettercodehub.com"&gt;Better Code Hub&lt;/a&gt; from &lt;a href="https://www.sig.eu/"&gt;Software Improvement Group&lt;/a&gt; ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Better Code Homepage" src="https://pybit.es/images/sig-bch-1.png"&gt;&lt;/p&gt;
&lt;h2&gt;What is Better Code Hub?&lt;/h2&gt;
&lt;p&gt;You can read a nice introduction about the tool on their blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/bettercode/higher-grades-for-better-code-23183648f793"&gt;Higher Grades for Better Code&lt;/a&gt; which defines the tool as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This newly-built software platform enables users to check the compliancy of software systems with the 10 guidelines for Maintainability introduced in the Building Maintainable Software book.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And: &lt;a href="https://medium.com/bettercode/better-code-hub-70f261a86fc7"&gt;Better Code Hub - An ambitious yet achievable Definition of Done for Code Quality&lt;/a&gt;. This is a nice read to learn about the motivation behind the platform: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First of all as &lt;a href="https://a16z.com/2016/08/20/why-software-is-eating-the-world/"&gt;Marc Andreessen famously said&lt;/a&gt;: &lt;em&gt;Software is eating the world&lt;/em&gt;: every industry gets disrupted by software hence each company will become a software company.&lt;/li&gt;
&lt;li&gt;Secondly GitHub has become the &lt;em&gt;biggest collaborative developer platform&lt;/em&gt; with over 10 million repositories!&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This triggered us to create the Better Code Hub, an online service that puts 15 years of code quality knowledge at the disposal of all GitHub developers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It supports 16 programming languages, can run upon each Push or PR (master and branches), and shows refactoring candidates with their impact. Last but not least: Better Code Hub provides software teams a Definition of Done, in their words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If Better Code Hub compliance is achieved, you know you‚Äôre performing like the top teams in the industry. This is because the compliance thresholds are derived from a large industry and open-source benchmark that is calibrated yearly in our software laboratory to capture the state-of-the art in software engineering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BCH has a nice design and a "zero set-up time": just login with your GitHub account and it shows your public repos you can analyze: &lt;/p&gt;
&lt;p&gt;&lt;img alt="My Github Repositories" src="https://pybit.es/images/sig-bch-2.png"&gt;&lt;/p&gt;
&lt;p&gt;At this point you can run the Analyze (play) button and SIG's tool checks the quality of you code.&lt;/p&gt;
&lt;h2&gt;What does it check?&lt;/h2&gt;
&lt;p&gt;BCH will check your code against their 10 guidelines for maintainable software:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write Short Units of Code - &lt;em&gt;Short units are easier to understand.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Write Simple Units of Code - &lt;em&gt;Simple units are easier to test.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Write Code Once - &lt;em&gt;Duplicated code means duplicated bugs and duplicating changes.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Keep Unit Interfaces Small - &lt;em&gt;Units with small interfaces are easier to reuse.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Separate Concerns in Modules - &lt;em&gt;Modules with a single responsibility are easier to change.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Couple Architecture Components Loosely - &lt;em&gt;Independent components can be maintained in isolation.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Keep Architecture Components Balanced - &lt;em&gt;A balanced architecture makes it easier to find your way.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Keep Your Codebase Small - &lt;em&gt;A small codebase requires less effort to maintain.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Automate Tests - &lt;em&gt;Automated tests are repeatable, and help to prevent bugs.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Write Clean Code - &lt;em&gt;‚ÄúLeave the campground cleaner than you found it.‚Äù&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These guidelines are based on an impressive body of experience:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compliance to guidelines is derived from the Software Improvement Group's &lt;a href="https://www.sig.eu/files/en/090_Deriving_Metric_Thresholds_from_Benchmark_Data.pdf"&gt;industry benchmark&lt;/a&gt; which consists of over 8 billion lines of code in more than 180 different technologies.  SIG analyzes around 15 million lines of code every week. - &lt;a href="https://bettercodehub.com/"&gt;Better Code Hub Homepage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For more info I highly recommend &lt;a href="http://www.amazon.com/dp/1491953527/?tag=pyb0f-20"&gt;their book&lt;/a&gt;. They have a certification program which I described &lt;a href="https://bobbelderbos.com/2016/07/certified-software-quality/"&gt;here&lt;/a&gt; and I made this &lt;a href="https://bobbelderbos.com/2016/03/building-maintainable-software/"&gt;summary of the guidelines&lt;/a&gt; when I was studying for the exam. &lt;/p&gt;
&lt;p&gt;Although we are a Python blog we wanted to discuss the tool here, because as &lt;a href="https://twitter.com/_ericelliott/status/893264008438046720"&gt;Eric Elliott's tweeted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Frameworks and APIs change fast. Software design principles are evergreen. Learn principles that translate across language barriers. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily Python (and its community) endorses a lot of good practices (&lt;code&gt;import this&lt;/code&gt; folks!)&lt;/p&gt;
&lt;p&gt;And we used it for a recent Code Challenge ...&lt;/p&gt;
&lt;h2&gt;A practical example&lt;/h2&gt;
&lt;p&gt;I used the tool recently for our &lt;a href="https://pybit.es/codechallenge30.html"&gt;Code Challenge 30 - The Art of Refactoring: Improve Your Code&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;At first I wanted to work on an old un-Pythonic script. Problem was: it would have been easy and some scripts are better dead and buried. So I thought: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let's do something real, something that we use and has to be mainained! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hence I decided to use this challenge to refactor our &lt;a href="https://github.com/pybites/karmabot"&gt;Karmabot&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Heck, why not make it more robust now?! (Zen of Python: &lt;em&gt;Now is better than never.&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It scored a meager 6 on &lt;a href="https://bettercodehub.com"&gt;Better Code Hub&lt;/a&gt;, hence it could use some work ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="sig score before" src="https://pybit.es/images/sig-score-before.png"&gt;&lt;/p&gt;
&lt;h3&gt;The refactoring process&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First I added unittests to have a regression suite.&lt;/p&gt;
&lt;p&gt;Dealing with an external API (Slack) made this a challenge on its own, but luckily &lt;a href="https://realpython.com/blog/python/testing-third-party-apis-with-mocks/"&gt;this awesome RealPython article&lt;/a&gt; made it relatively easy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then I clicked BCH's Analysis button on the repo. Its guidance and rich UI made it a joyful experience. I refactored more than I anticipated making the solution leaner and better maintainable (although not as granular commit history &lt;a href="https://github.com/pybites/karmabot/commits/master"&gt;here&lt;/a&gt; for reference).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Examples of what BCH caught:&lt;/h3&gt;
&lt;p&gt;No tests!&lt;/p&gt;
&lt;p&gt;&lt;img alt="no tests" src="https://pybit.es/images/testcov-before.png"&gt;&lt;/p&gt;
&lt;p&gt;OK that's better, now we can actually start refactoring!&lt;/p&gt;
&lt;p&gt;&lt;img alt="now with tests" src="https://pybit.es/images/testcov-after.png"&gt;&lt;/p&gt;
&lt;p&gt;Tackling complexity: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Better Code Homepage" src="https://pybit.es/images/sig-bch-flag1.png"&gt;&lt;/p&gt;
&lt;p&gt;Various issues here: number of branch points, 3 method (interface) params and violation of the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;&lt;em&gt;Single responsibility principle&lt;/em&gt;&lt;/a&gt;. This example led to various refactorings even &lt;a href="https://github.com/pybites/karmabot/blob/master/bot/karma.py"&gt;changing part of the karma module into a class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although not the final result, BCH made the refactoring progress very visual:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Better Code Homepage" src="https://pybit.es/images/sig-bch-flag2.png"&gt;&lt;/p&gt;
&lt;p&gt;When I thought I was done BCH still pointed out I should "Couple Architecture Components Loosely". It turned out &lt;code&gt;main.py&lt;/code&gt; and &lt;code&gt;karma.py&lt;/code&gt; were too entangled:&lt;/p&gt;
&lt;p&gt;&lt;img alt="sig score after" src="https://pybit.es/images/sig-graphs.png"&gt;&lt;/p&gt;
&lt;p&gt;Moving &lt;code&gt;_process_karma_changes&lt;/code&gt; from &lt;code&gt;main.py&lt;/code&gt; to &lt;code&gt;karma.py&lt;/code&gt; solved this. &lt;/p&gt;
&lt;p&gt;&lt;img alt="code in the wrong module" src="https://pybit.es/images/sig-bch-balance-comps.png"&gt;&lt;/p&gt;
&lt;p&gt;It felt like everything fell into place, probably due to earlier refactorings. This was one of those &lt;em&gt;aha moments&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And the final result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="sig score after" src="https://pybit.es/images/sig-score-after.png"&gt;&lt;/p&gt;
&lt;p&gt;Lastly SIG made a nice badge you can add to your Project's README:&lt;/p&gt;
&lt;p&gt;&lt;img alt="sig badge" src="https://pybit.es/images/sig-badge.png"&gt;&lt;/p&gt;
&lt;h2&gt;Try it out!&lt;/h2&gt;
&lt;p&gt;Some code to refactor? Or starting a brand new project? Try this tool out and let us know what you think in the comments below. &lt;/p&gt;
&lt;p&gt;You can follow / reach out to them &lt;a href="https://twitter.com/bettercodehub"&gt;on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For above mentioned and other interesting articles check out &lt;a href="https://medium.com/bettercode"&gt;their Medium page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And above all keep learning and growing. Writing quality code is hard and takes a lot of practice (&lt;a href="https://twitter.com/pybites/status/902556188860194816"&gt;I am no expert, I am the student&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;A final word of thanks. I feel fortunate to be able to learn from SIG's body of experience and knowledge and their new platform that brings their SW quality guidelines to the greater community. Great job SIG!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="bettercodehub"></category><category term="SIG"></category><category term="refactoring"></category><category term="code quality"></category><category term="clean code"></category><category term="software development"></category><category term="tools"></category><category term="platform"></category></entry><entry><title>Code Challenge 34 - Build a Simple API With Django REST Framework</title><link href="https://pybit.es/codechallenge34.html" rel="alternate"></link><published>2017-08-29T14:45:00+02:00</published><updated>2017-08-29T14:45:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-29:/codechallenge34.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python programming! We love Django (#100DaysOfDjango) and Web APIs. &lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt; combines the two. "Now is better than never." - let's jump right in and let's use this week's code challenge to build a simple API. In this article some ideas what we can build and links to resources to get started. Have fun and don't forget to share (PR) your work, we can learn a lot from each other. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python programming! We love Django (#100DaysOfDjango) and Web APIs. &lt;a href="http://www.django-rest-framework.org/"&gt;Django REST framework&lt;/a&gt; combines the two. "Now is better than never." - let's jump right in and let's use this week's code challenge to build a simple API. In this article some ideas what we can build and links to resources to get started. Have fun and don't forget to share (PR) your work, we can learn a lot from each other. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Building something is the best way to learn a new technology. We hope you find a longtime need for which DRF is a good fit. If you lack inspiration though here are some ideas:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remember we did the &lt;a href="https://pybit.es/codechallenge08.html"&gt;House Inventory Tracker Challenge&lt;/a&gt;? We ended up building a &lt;a href="https://pybit.es/simple-flask-api.html"&gt;simple API with Flask&lt;/a&gt; for that one. Maybe you want to give this a spin in DRF?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another candidate we found in &lt;a href="https://pybit.es/pages/challenges.html"&gt;our challenge collection&lt;/a&gt;: &lt;a href="https://pybit.es/codechallenge23.html"&gt;Challenge Estimated Time API&lt;/a&gt;. Could be another one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some time ago we wrote an article / app: &lt;a href="https://pybit.es/flask-api-part2.html"&gt;Simple API Part 2 - Building a Deep Work Logger with Flask, Slack and Google Docs&lt;/a&gt;. What if you use this concept with DRF instead of Google Docs?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actually the Django app ideas we gave you for &lt;a href="https://pybit.es/codechallenge33.html"&gt;last week's Django challenge&lt;/a&gt; could be used to build APIs as well. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A TODO list is cliche but could be a useful exercise to get the basics down. &lt;a href="https://medium.com/@ktruong008/building-an-api-with-django-rest-framework-and-class-based-views-75b369b30396"&gt;Here&lt;/a&gt; is an article that might be helpful. Or check out &lt;a href="https://michaelwashburnjr.com/building-webapp-tutorial-part-2/"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again, if you have better ideas or needs go for it! The goal is to build something using Django REST Framework. Surprise us and the community in your PR submissions :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus points:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add good test coverage.&lt;/li&gt;
&lt;li&gt;Get authentication right.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/deploy-flask-heroku.html"&gt;Deploy your work to Heroku&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Build a tool the PyBites community can actually use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.django-rest-framework.org/"&gt;Django REST Framework home&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="http://www.django-rest-framework.org/tutorial/quickstart/"&gt;quickstart guide&lt;/a&gt; is the fastest way to get up and running, and building APIs with REST framework.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Real Python has great coverage on the topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/blog/python/django-rest-framework-quick-start/"&gt;Django Rest Framework - an Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/blog/python/django-rest-framework-class-based-views/"&gt;Django Rest Framework - Class Based Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/blog/python/test-driven-development-of-a-django-restful-api/"&gt;Test Driven Development of a Django RESTful API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some nice tutorials on Medium:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@djstein/modern-django-part-2-rest-apis-apps-and-django-rest-framework-ea0cac5ab104"&gt;Modern Django‚Ää‚Äî‚ÄäPart 2: REST APIs, Apps, and Django REST Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@ktruong008/building-an-api-with-django-rest-framework-and-class-based-views-75b369b30396"&gt;Building an API with Django REST Framework and Class-Based Views&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One more tutorial that just came out: &lt;a href="https://michaelwashburnjr.com/building-webapp-tutorial-part-3/"&gt;Building a Web App From the Ground Up: Django Rest Framework API Development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extra background: Talk Python had creator Tom Christie recently on: &lt;a href="https://talkpython.fm/episodes/show/125/django-rest-framework-and-a-new-api-star-is-born"&gt;Episode #125: Django REST framework and a new API star is born&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get credit!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Take notice&lt;/strong&gt;: the coolest working apps get a place under the &lt;strong&gt;#100DaysOfDjango&lt;/strong&gt; project on &lt;a href="https://pybit.es/pages/projects.html"&gt;our projects page&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our start-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt; or &lt;a href="http://pybit.es/pages/about.html"&gt;reach out&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category><category term="APIs"></category><category term="Django REST Framework"></category><category term="DRF"></category><category term="deepwork"></category></entry><entry><title>Code Challenge 33 - Build a Django Tracker, Weather or Review App - Review</title><link href="https://pybit.es/codechallenge33_review.html" rel="alternate"></link><published>2017-08-28T10:23:00+02:00</published><updated>2017-08-28T10:23:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-28:/codechallenge33_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge33.html"&gt;Build a Django Tracker, Weather or Review App&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge33.html"&gt;Build a Django Tracker, Weather or Review App&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;Submissions are merged to our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;Community branch&lt;/a&gt; -&amp;gt; &lt;a href="https://github.com/pybites/challenges/tree/community/33"&gt;Challenge 33 subdir&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; submitted &lt;a href="https://github.com/pybites/challenges/tree/community/33/bbelderbos"&gt;pbreadinglist&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I started porting &lt;a href="http://fbreadinglist.com/"&gt;fbreadinglist&lt;/a&gt; PHP/MySQL app to Python/Django/Heroku/Postgres. I migrated the autocomplete, added &lt;a href="https://v4-alpha.getbootstrap.com/"&gt;bootstrap&lt;/a&gt; (responsive design) and used &lt;a href="https://simpleisbetterthancomplex.com/tutorial/2016/10/24/how-to-add-social-login-to-django.html"&gt;Simpleisbetterthancomplex' nice starter code&lt;/a&gt; to add social login. Now I need to add user's book queues/reviews. App so far is on Heroku: &lt;a href="https://pbreadinglist.herokuapp.com/"&gt;pbreadinglist.herokuapp.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you did some Django work for this challenge PR it and we'll include it here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;As there is no deadline to these challenges, we will update here when we get more cool submissions for this challenge ... &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding!&lt;/p&gt;
&lt;p&gt;Stay tuned for our next challenge tomorrow ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category><category term="projects"></category><category term="100DaysOfCode"></category><category term="Heroku"></category><category term="books"></category><category term="pbreadinglist"></category><category term="bootstrap"></category><category term="autocomplete"></category></entry><entry><title>Twitter digest 2017 week 34</title><link href="https://pybit.es/twitter_digest_201734.html" rel="alternate"></link><published>2017-08-27T20:34:00+02:00</published><updated>2017-08-27T20:34:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-27:/twitter_digest_201734.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A big milestone for us! Thanks to all of our followers!!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyBites reached 1K followers - thx all Pythonistas/devs/enthusiasts! (wordcloud via &lt;a href="https://twitter.com/@python_tip's" target="_blank"&gt;@python_tip's&lt;/a&gt; recipe‚Ä¶ &lt;a href="https://t.co/2uROoa7tcl" title="https://t.co/2uROoa7tcl" target="_blank"&gt;https://t.co/2uROoa7tcl&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/899924327994470400" data-datetime="2017-08-22T09:20:54+00:00"&gt;August 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New blog post: Serverless Deployment of Python APIs &lt;a href="https://t.co/iIYIQ02J17" title="https://t.co/iIYIQ02J17" target="_blank"&gt;https://t.co/iIYIQ02J17&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/900410541536968705" data-datetime="2017-08-23T17:32:56+00:00"&gt;August 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;(?i) makes a regular expression case-insensitive. Example: (?i)abc is the same as [aA][bB][cC].&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/900734879402524674" data-datetime="2017-08-24T15:01:44+00:00"&gt;August 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Missing &lt;a href="https://twitter.com/search/#JupyterCon?" target="_blank"&gt;#JupyterCon?&lt;/a&gt; Check out our treasury of &lt;a href="https://twitter.com/@ProjectJupyter" target="_blank"&gt;@ProjectJupyter&lt;/a&gt; talks on Youtube. &lt;a href="https://t.co/klwcUuAyLD" title="https://t.co/klwcUuAyLD" target="_blank"&gt;https://t.co/klwcUuAyLD&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter‚Ä¶" target="_blank"&gt;#jupyter‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/YKVkAHaMKK" title="https://t.co/YKVkAHaMKK" target="_blank"&gt;https://t.co/YKVkAHaMKK&lt;/a&gt;&lt;/p&gt;‚Äî PyData (@PyData) &lt;a href="https://twitter.com/PyData/status/901125802863058944" data-datetime="2017-08-25T16:55:08+00:00"&gt;August 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Monitoring Road Traffic with OpenCV &lt;a href="https://t.co/HAFBnQm5rm" title="https://t.co/HAFBnQm5rm" target="_blank"&gt;https://t.co/HAFBnQm5rm&lt;/a&gt; by &lt;a href="https://twitter.com/@AndrewCarterUK" target="_blank"&gt;@AndrewCarterUK&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/901143913380982784" data-datetime="2017-08-25T18:07:06+00:00"&gt;August 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PyData:" target="_blank"&gt;@PyData:&lt;/a&gt; Now that the &lt;a href="https://twitter.com/search/#eclipse" target="_blank"&gt;#eclipse&lt;/a&gt; is over, run your photos thru some &lt;a href="https://twitter.com/search/#python!" target="_blank"&gt;#python!&lt;/a&gt; "Compare Photos of the Solar Eclipse using Python" &lt;a href="https://t.‚Ä¶" title="https://t.‚Ä¶" target="_blank"&gt;https://t.‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/901100489705627649" data-datetime="2017-08-25T15:14:33+00:00"&gt;August 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check if two words are anagrams: from collections import Counter def is_anagram(s1, s2): return Counter(s1) == Counter(s2) &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/899552663439802368" data-datetime="2017-08-21T08:44:02+00:00"&gt;August 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A large list of interesting open source projects in Python. Only active and interesting projects! &lt;a href="https://t.co/jrgLRg9yZR" title="https://t.co/jrgLRg9yZR" target="_blank"&gt;https://t.co/jrgLRg9yZR&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/900387159814934528" data-datetime="2017-08-23T16:00:01+00:00"&gt;August 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nayafia:" target="_blank"&gt;@nayafia:&lt;/a&gt; We just released a bunch of survey data about open source communities: &lt;a href="https://t.co/zDSsFyaDfW" title="https://t.co/zDSsFyaDfW" target="_blank"&gt;https://t.co/zDSsFyaDfW&lt;/a&gt;&lt;/p&gt;‚Äî Andreas Mueller (@amuellerml) &lt;a href="https://twitter.com/amuellerml/status/901099117904089088" data-datetime="2017-08-25T15:09:05+00:00"&gt;August 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hope you're enjoying my recent course: MongoDB for Python for Developers &lt;a href="https://t.co/I0L2mM3aPI" title="https://t.co/I0L2mM3aPI" target="_blank"&gt;https://t.co/I0L2mM3aPI&lt;/a&gt; &lt;a href="https://t.co/WO3Sxww0PH" title="https://t.co/WO3Sxww0PH" target="_blank"&gt;https://t.co/WO3Sxww0PH&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/900974645192667136" data-datetime="2017-08-25T06:54:29+00:00"&gt;August 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How-T... &lt;a href="https://t.co/U7MSaQGdOw" title="https://t.co/U7MSaQGdOw" target="_blank"&gt;https://t.co/U7MSaQGdOw&lt;/a&gt; &lt;a href="https://twitter.com/search/#set" target="_blank"&gt;#set&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#project" target="_blank"&gt;#project&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/901563307374526464" data-datetime="2017-08-26T21:53:37+00:00"&gt;August 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Analyzing cryptocurrency markets like Bitcoin using &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/XezXPnplWf" title="https://t.co/XezXPnplWf" target="_blank"&gt;https://t.co/XezXPnplWf&lt;/a&gt; &lt;a href="https://t.co/tzGO2I2kFU" title="https://t.co/tzGO2I2kFU" target="_blank"&gt;https://t.co/tzGO2I2kFU&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/899622874687918080" data-datetime="2017-08-21T13:23:02+00:00"&gt;August 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A hidden figure no more, happy 99th birthday Katherine Johnson. Thank you for inspiring us to the moon &amp;amp; beyond! üåõüöÄ &lt;a href="https://t.co/CtsbxfdEdG" title="https://t.co/CtsbxfdEdG" target="_blank"&gt;https://t.co/CtsbxfdEdG&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/901502341714595840" data-datetime="2017-08-26T17:51:22+00:00"&gt;August 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üéßüêç&amp;nbsp;Awesome and funny podcast interview with CPython core dev &lt;a href="https://twitter.com/@mariatta:" target="_blank"&gt;@mariatta:&lt;/a&gt; &lt;a href="https://t.co/XPWDPHmZ7e" title="https://t.co/XPWDPHmZ7e" target="_blank"&gt;https://t.co/XPWDPHmZ7e&lt;/a&gt; (cc &lt;a href="https://twitter.com/@castaliopod)" target="_blank"&gt;@castaliopod)&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/900963012340703233" data-datetime="2017-08-25T06:08:15+00:00"&gt;August 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;HA!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@secretGeek:" target="_blank"&gt;@secretGeek:&lt;/a&gt; Tabs and spaces have different semantic meanings. Spaces mean "I am indenting this code" while tabs mean "I am a monster".&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/900484231163523074" data-datetime="2017-08-23T22:25:45+00:00"&gt;August 23, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="pybites"></category><category term="APIs"></category><category term="regex"></category><category term="Jupyter"></category><category term="OpenCV"></category><category term="Pillow"></category><category term="SunPy"></category><category term="collections"></category><category term="open source"></category><category term="training"></category><category term="learning"></category><category term="CSV"></category><category term="Data Analysis"></category><category term="Python"></category><category term="Podcast"></category><category term="Spacing"></category></entry><entry><title>Code Challenge 33 - Build a Django Tracker, Weather or Review App</title><link href="https://pybit.es/codechallenge33.html" rel="alternate"></link><published>2017-08-22T13:00:00+02:00</published><updated>2017-08-22T13:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-22:/codechallenge33.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python programming. To keep it &lt;a href="https://pybit.es/tag/100daysofdjango.html"&gt;#100DaysOfDjango&lt;/a&gt;, this week we let you get some more practice with this awesome web framework. Last time we had an open Django challenge, for this one we have you choose between 3 specific apps.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python programming. To keep it &lt;a href="https://pybit.es/tag/100daysofdjango.html"&gt;#100DaysOfDjango&lt;/a&gt;, this week we let you get some more practice with this awesome web framework. Last time we had an open Django challenge, for this one we have you choose between 3 specific apps. &lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;h3&gt;Basic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build an app to keep track of something:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pomodori (25 min segments) of reading, walking, deep work, etc. &lt;/li&gt;
&lt;li&gt;Overtime (&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/089/app.py"&gt;Flask example&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;BMI (&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/056/app.py"&gt;Flask example&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One requirement: data needs to be stored in a DB and be editable (basic CRUD).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Don't be shy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Convert PyBites' &lt;a href="http://weathercompare.herokuapp.com/"&gt;Weather Compare App&lt;/a&gt; (&lt;a href="https://pybit.es/flask-simple-weather-app.html"&gt;article&lt;/a&gt;) into a Django app and enhance it with the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep a log of cities queried. &lt;/li&gt;
&lt;li&gt;Have a user &lt;a href="https://github.com/pybites/django-registration"&gt;signup&lt;/a&gt; asking for the geo and show (and email) the daily weather.&lt;/li&gt;
&lt;li&gt;Show historic weather info, maybe you could even integrate plots &lt;a href="https://pybit.es/codechallenge28.html"&gt;like we did with Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Die hard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a books or movie review app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Long time ago I (Bob) created &lt;a href="http://fbreadinglist.com/"&gt;fbreadinglist&lt;/a&gt; and &lt;a href="http://sharemovi.es/"&gt;sharemovi.es&lt;/a&gt;. Both PHP and far from perfect, but good candidates to learn Django. You do need a bit of front-end skills to pull this off however, but who doesn't these days, right? ;)&lt;/li&gt;
&lt;li&gt;The FB login is optional, if you want to try it out check out &lt;a href="https://simpleisbetterthancomplex.com/tutorial/2016/10/24/how-to-add-social-login-to-django.html"&gt;this article&lt;/a&gt;. Otherwise you could use &lt;a href="https://django-registration.readthedocs.io/en/2.2/"&gt;django-registration&lt;/a&gt;, see our &lt;a href="https://pybit.es/django-registration-app.html"&gt;step-by-step guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Books and movie review apps are just not your thing? Sure, we understand. What about something cooler? Our second option for the main course is &lt;em&gt;a code review tool for PyBites&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Django app where one can submit code challenge solutions.&lt;/li&gt;
&lt;li&gt;Have different roles: participants (can submit code), reviewer (can review code), admin (can promote users to reviewer and assign code reviews).&lt;/li&gt;
&lt;li&gt;Github API integration would be really cool, but don't let that distract you. This is about Django.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus:&lt;/h3&gt;
&lt;p&gt;Share your great work with the world &lt;a href="https://devcenter.heroku.com/articles/deploying-python"&gt;deploying it to Heroku&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Get credit!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Take notice&lt;/strong&gt;: the coolest working apps get a place under the &lt;strong&gt;#100DaysOfDjango&lt;/strong&gt; project on &lt;a href="https://pybit.es/pages/projects.html"&gt;our projects page&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our start-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt; or &lt;a href="http://pybit.es/pages/about.html"&gt;reach out&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category><category term="tracker"></category><category term="review"></category><category term="weather"></category><category term="apps"></category><category term="projects"></category><category term="100DaysOfCode"></category><category term="Heroku"></category></entry><entry><title>Code Challenge 32 - Test a Simple Django App With Selenium - Review</title><link href="https://pybit.es/codechallenge32_review.html" rel="alternate"></link><published>2017-08-21T12:30:00+02:00</published><updated>2017-08-21T12:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-21:/codechallenge32_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge32.html"&gt;Test a Simple Django App With Selenium&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge32.html"&gt;Test a Simple Django App With Selenium&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;Submissions are merged to our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;Community branch&lt;/a&gt; -&amp;gt; &lt;a href="https://github.com/pybites/challenges/tree/community/32"&gt;Challenge 32 subdir&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; submitted &lt;a href="https://github.com/pybites/challenges/blob/community/32/bbelderbos/test_pybites_pyplanet.py"&gt;test_pybites_pyplanet.py&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This was fun. Having the exact steps and screenshots helped to write the tests. I looked up various sections of the documentation. Although there is more to explore, this did cover the basics well. Good workout.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Bob) I also used Selenium to automatically generate banner images, see &lt;a href="https://pybit.es/selenium-requests-automation.html"&gt;yesterday's article&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;As there is no deadline to these challenges, we will update here when we get more cool submissions for this challenge ... &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding!&lt;/p&gt;
&lt;p&gt;Stay tuned for our next challenge tomorrow ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category><category term="Selenium"></category><category term="Testing"></category></entry><entry><title>Fully Automate Login and Banner Generation with Selenium, Requests and Click</title><link href="https://pybit.es/selenium-requests-automation.html" rel="alternate"></link><published>2017-08-20T17:00:00+02:00</published><updated>2017-08-20T17:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-08-20:/selenium-requests-automation.html</id><summary type="html">&lt;p&gt;In part 3 of the &lt;em&gt;PyBites Banner Generator&lt;/em&gt; article series I show you how to automatically generate a banner with &lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests&lt;/a&gt; and &lt;a href="http://selenium-python.readthedocs.io/index.html"&gt;Selenium&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In part 3 of the &lt;em&gt;PyBites Banner Generator&lt;/em&gt; article series I show you how to automatically generate a banner with &lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests&lt;/a&gt; and &lt;a href="http://selenium-python.readthedocs.io/index.html"&gt;Selenium&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For both scripts I used &lt;a href="http://click.pocoo.org/5/"&gt;Click&lt;/a&gt; to build the CLI interface.&lt;/p&gt;
&lt;p&gt;The code for this tutorial is &lt;a href="https://github.com/pybites/form-automation-fun"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Requests&lt;/h2&gt;
&lt;p&gt;Julian showed us some time ago &lt;a href="https://pybit.es/requests-session.html"&gt;How to Use Python Requests on a Page Behind a Login&lt;/a&gt;. It showed how we could POST to a webpage, pretty cool. I took this concept and wrote &lt;a href="https://pybites-banners.herokuapp.com"&gt;a quick interactive script&lt;/a&gt; to POST to the &lt;a href="https://pybites-banners.herokuapp.com/"&gt;PyBites Banner Generator form&lt;/a&gt; and retrieve the generated banner: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Posting to a page is easy, use requests' &lt;code&gt;Session&lt;/code&gt; object passing it headers and a payload dict with user data (POST parameters):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;session = requests.Session()
request = session.post(BANNER_APP, headers=HEADERS, data=payload)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As detailed  &lt;a href="https://pybit.es/pillow-banner-flask.html"&gt;in part 2&lt;/a&gt; the Flask app returns the generated png image upon form submission. With the POST request we are effectively submitting the form so the repsonse object holds the banner image. To retrieve it just write the &lt;code&gt;request.content&lt;/code&gt; to a file. As the image is binary don't forget to use &lt;code&gt;wb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(outfile, &amp;#39;wb&amp;#39;) as f:
    f.write(request.content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's all there is to it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Requests + Selenium == selenium-requests&lt;/h2&gt;
&lt;p&gt;Having achieved that I wanted to get a private PyBites banner. As detailed &lt;a href="https://pybit.es/pillow-banner-flask.html"&gt;in part 2&lt;/a&gt; to use PyBites logos we need to login (this is one of our 'live' tools).&lt;/p&gt;
&lt;p&gt;Although you can perfectly use requests to login to your site as well, I wanted to try Selenium for this version. After all we use this module for &lt;a href="https://pybit.es/codechallenge32.html"&gt;this week's code challenge&lt;/a&gt;. To use requests in Selenium there is a nice package called &lt;a href="https://pypi.python.org/pypi/selenium-requests/"&gt;selenium-requests&lt;/a&gt; that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extends Selenium WebDriver classes to include the request function from the Requests library, while doing all the needed cookie and request headers handling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
&lt;p&gt;It was friendly to use, see the code &lt;a href="https://github.com/pybites/form-automation-fun/blob/master/private_banner.py"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Some notes, also on how I used &lt;code&gt;click&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;click&lt;/code&gt; is your friend to build robust CLI interfaces. For example the username and password can be retrieved from ENV variables with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@click.option(&amp;#39;-u&amp;#39;, &amp;#39;--username&amp;#39;, envvar=&amp;#39;USERNAME&amp;#39;)
@click.option(&amp;#39;-p&amp;#39;, &amp;#39;--password&amp;#39;, envvar=&amp;#39;PASSWORD&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Want a choice list? No problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@click.option(&amp;#39;-l&amp;#39;, &amp;#39;--logo&amp;#39;, type=click.Choice(PYBITES_PILLARS))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or a boolean field? Add this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@click.option(&amp;#39;-b/-nb&amp;#39;, &amp;#39;--background/--no-background&amp;#39;,
            default=False, prompt=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We wrap these user inputs (payload) in a data dict and we login to the site with a helper method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver = login(username, password)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To enter data and submit just find the element for which Selenium &lt;a href="http://selenium-python.readthedocs.io/locating-elements.html"&gt;has quite a few helper methods&lt;/a&gt; and use &lt;code&gt;send_keys&lt;/code&gt;, then click the Login button (xpath only needed because the lack of HTML id/name attributes):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username_field = driver.find_element_by_name(&amp;#39;username&amp;#39;)
username_field.send_keys(username)
password_field = driver.find_element_by_name(&amp;#39;password&amp;#39;)
password_field.send_keys(password)
# TODO: need html id/name on button
btn_xpath = &amp;quot;//button[contains(@class, &amp;#39;pure-button-primary&amp;#39;)]&amp;quot;
login_btn = driver.find_element_by_xpath(btn_xpath)
login_btn.click()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this login click the driver keeps this logged in state in its session.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As selenium-requests uses Requests under the hood, the POST request and response handling is identical to the first script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;request = driver.request(&amp;#39;POST&amp;#39;, BANNER_APP, data=data)

...

with open(outfile, &amp;#39;wb&amp;#39;) as f:
    f.write(request.content)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally note that I am using the headless (no browser) &lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;. If you use &lt;a href="https://github.com/pybites/form-automation-fun"&gt;the code&lt;/a&gt; for your own site behind login you might need to install it separately.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's try it&lt;/h2&gt;
&lt;p&gt;This is Click's out-of-the-box niceness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python private_banner.py  --help
Usage: private_banner.py &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt;

Options:
-n, --name TEXT
-l, --logo &lt;span class="o"&gt;[&lt;/span&gt;news&lt;span class="p"&gt;|&lt;/span&gt;challenge&lt;span class="p"&gt;|&lt;/span&gt;special&lt;span class="p"&gt;|&lt;/span&gt;article&lt;span class="o"&gt;]&lt;/span&gt;
-i, --image TEXT
-t, --text TEXT
-b, --background / -nb, --no-background
-o, --outfile TEXT
-u, --username TEXT
-p, --password TEXT
--help                          Show this message and exit.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that I set username and password in my env: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="p"&gt;|&lt;/span&gt;egrep &lt;span class="s1"&gt;&amp;#39;USERNAME|PASSWORD&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;...
&lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's create a banner for this article: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python private_banner.py -n selenium-requests &lt;span class="se"&gt;\&lt;/span&gt;
-l article -i https://pbs.twimg.com/media/C7bRQMoXUAEqTbI.jpg &lt;span class="se"&gt;\&lt;/span&gt;
-t &lt;span class="s1"&gt;&amp;#39;Fully Automate Login and Banner Generation with Selenium, Requests and Click&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-b -o selenium-requests-banner.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And voil√†:&lt;/p&gt;
&lt;p&gt;&lt;img alt="resulting banner from command line" src="https://pybit.es/images/selenium-requests-banner.png"&gt;&lt;/p&gt;
&lt;p&gt;Going to the GUI we see that the image persisted in the DB:&lt;/p&gt;
&lt;p&gt;&lt;img alt="resulting banner from command line" src="https://pybit.es/images/pybites-banner-persisted-db.png"&gt;&lt;/p&gt;
&lt;p&gt;Now imagine using this script to automatically generate 100 banners from a csv file, wouldn't that be cool?&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;h3&gt;PyBites Banner Generator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can read more about the Pillow code &lt;a href="https://pybit.es/pillow-banner-image.html"&gt;in Part 1 of this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can read more about the Flask app &lt;a href="https://pybit.es/pillow-banner-flask.html"&gt;in part 2&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Awesome Modules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check them out if not done already: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://selenium-python.readthedocs.io/index.html"&gt;Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://click.pocoo.org/5/"&gt;Click&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They are excellent additions to your Python toolkit!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Selenium"></category><category term="Requests"></category><category term="selenium-requests"></category><category term="Click"></category><category term="Pillow"></category><category term="automation"></category><category term="scraping"></category><category term="tools"></category><category term="PyBites Banner Generator"></category><category term="images"></category></entry><entry><title>Twitter digest 2017 week 33</title><link href="https://pybit.es/twitter_digest_201733.html" rel="alternate"></link><published>2017-08-20T15:55:00+02:00</published><updated>2017-08-20T15:55:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-20:/twitter_digest_201733.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pydanny:" target="_blank"&gt;@pydanny:&lt;/a&gt; Awesome article by &lt;a href="https://twitter.com/@LincolnLoop" target="_blank"&gt;@LincolnLoop&lt;/a&gt; on cached_property decorator that includes a link to a module I maintain: &lt;a href="https://t.co/5mTwQKb‚Ä¶" title="https://t.co/5mTwQKb‚Ä¶" target="_blank"&gt;https://t.co/5mTwQKb‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Vitor Freitas (@vitorfs) &lt;a href="https://twitter.com/vitorfs/status/898407984031608832" data-datetime="2017-08-18T04:55:29+00:00"&gt;August 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; Tip &lt;a href="https://twitter.com/search/#16:" target="_blank"&gt;#16:&lt;/a&gt; Redirect a Container's File Onto Your Docker Host via &lt;a href="https://twitter.com/@nickjanetakis" target="_blank"&gt;@nickjanetakis&lt;/a&gt; &lt;a href="https://t.co/j939XPgTIQ" title="https://t.co/j939XPgTIQ" target="_blank"&gt;https://t.co/j939XPgTIQ&lt;/a&gt;&lt;/p&gt;‚Äî Docker (@Docker) &lt;a href="https://twitter.com/Docker/status/898960259963904001" data-datetime="2017-08-19T17:30:02+00:00"&gt;August 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@fchollet:" target="_blank"&gt;@fchollet:&lt;/a&gt; A Python DL lib with support for dynamic computation graphs &amp;amp; official backing from a large tech co? Sony's Nnabla: &lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Sebastian Raschka (@rasbt) &lt;a href="https://twitter.com/rasbt/status/899050798763528192" data-datetime="2017-08-19T23:29:48+00:00"&gt;August 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyTorch or TensorFlow? Wrote up some of my thoughts on the question - &lt;a href="https://t.co/PzWYZ0rces" title="https://t.co/PzWYZ0rces" target="_blank"&gt;https://t.co/PzWYZ0rces&lt;/a&gt;&lt;/p&gt;‚Äî Awni Hannun (@awnihannun) &lt;a href="https://twitter.com/awnihannun/status/898341423862251522" data-datetime="2017-08-18T00:31:00+00:00"&gt;August 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Theory (via &lt;a href="https://twitter.com/@phildini):" target="_blank"&gt;@phildini):&lt;/a&gt; Is Slack in a Toga-wrapped webview faster than a native Electron app? Result: Yes, it is. &lt;a href="https://t.co/dUEGvSa76I" title="https://t.co/dUEGvSa76I" target="_blank"&gt;https://t.co/dUEGvSa76I&lt;/a&gt;&lt;/p&gt;‚Äî BeeWare (@PyBeeWare) &lt;a href="https://twitter.com/PyBeeWare/status/897952002709233664" data-datetime="2017-08-16T22:43:35+00:00"&gt;August 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonHub:" target="_blank"&gt;@PythonHub:&lt;/a&gt; IPython magic to profile and view your Python code as a heat map &lt;a href="https://t.co/yCEi1PtIAR" title="https://t.co/yCEi1PtIAR" target="_blank"&gt;https://t.co/yCEi1PtIAR&lt;/a&gt;&lt;/p&gt;‚Äî Luciano Ramalho ‚òÇ (@ramalhoorg) &lt;a href="https://twitter.com/ramalhoorg/status/898760514871803904" data-datetime="2017-08-19T04:16:19+00:00"&gt;August 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;elinks -dump &lt;a href="https://t.co/FfH8nmk7pB" title="https://t.co/FfH8nmk7pB" target="_blank"&gt;https://t.co/FfH8nmk7pB&lt;/a&gt; | awk -F: '/Math question:/{print $2}' | bc # Solve the basic arithmetic CAPTCHA &lt;a href="https://twitter.com/search/#WeakInfoSec" target="_blank"&gt;#WeakInfoSec&lt;/a&gt;&lt;/p&gt;‚Äî Command Line Magic (@climagic) &lt;a href="https://twitter.com/climagic/status/897818390831738881" data-datetime="2017-08-16T13:52:39+00:00"&gt;August 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Was one of your older commits a big mistake? Just revert it! &lt;a href="https://twitter.com/search/#NewInPyCharm" target="_blank"&gt;#NewInPyCharm&lt;/a&gt; &lt;a href="https://t.co/Og8TedEAnA" title="https://t.co/Og8TedEAnA" target="_blank"&gt;https://t.co/Og8TedEAnA&lt;/a&gt; &lt;a href="https://t.co/pFm8zKtdIt" title="https://t.co/pFm8zKtdIt" target="_blank"&gt;https://t.co/pFm8zKtdIt&lt;/a&gt;&lt;/p&gt;‚Äî JetBrains PyCharm (@pycharm) &lt;a href="https://twitter.com/pycharm/status/898634866320953344" data-datetime="2017-08-18T19:57:02+00:00"&gt;August 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;In Jupyter Notebook, use Shift+Tab to show a tooltip with arguments of function/class and docstring. &lt;a href="https://t.co/taZQXHWOxE" title="https://t.co/taZQXHWOxE" target="_blank"&gt;https://t.co/taZQXHWOxE&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/897728384976928768" data-datetime="2017-08-16T07:55:00+00:00"&gt;August 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;IPython's %bookmark command lets you name directories. Bookmarks automatically persist between sessions.&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/898566467133820928" data-datetime="2017-08-18T15:25:14+00:00"&gt;August 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Comprehensive guide to contributing to python &lt;a href="https://t.co/PLjsU7UnO5" title="https://t.co/PLjsU7UnO5" target="_blank"&gt;https://t.co/PLjsU7UnO5&lt;/a&gt;&lt;/p&gt;‚Äî Get Python (@getpy) &lt;a href="https://twitter.com/getpy/status/898438715286011905" data-datetime="2017-08-18T06:57:36+00:00"&gt;August 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Interactive &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt; comparing word usage in sacred texts. &lt;a href="https://twitter.com/search/#religion" target="_blank"&gt;#religion&lt;/a&gt; &lt;a href="https://t.co/uRqhnqgTn2" title="https://t.co/uRqhnqgTn2" target="_blank"&gt;https://t.co/uRqhnqgTn2&lt;/a&gt; &lt;a href="https://t.co/Em4SwptJIF" title="https://t.co/Em4SwptJIF" target="_blank"&gt;https://t.co/Em4SwptJIF&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/898596486832771073" data-datetime="2017-08-18T17:24:32+00:00"&gt;August 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pycoders:" target="_blank"&gt;@pycoders:&lt;/a&gt; A Python API to develop chatbot on Facebook Messenger Platform - &lt;a href="https://t.co/PiFG0K6hqa" title="https://t.co/PiFG0K6hqa" target="_blank"&gt;https://t.co/PiFG0K6hqa&lt;/a&gt; &lt;a href="https://t.co/dY81gIZod4" title="https://t.co/dY81gIZod4" target="_blank"&gt;https://t.co/dY81gIZod4&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/898964506906214400" data-datetime="2017-08-19T17:46:55+00:00"&gt;August 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Large data with Pandas: tips for reducing memory usage by up to 90% &lt;a href="https://t.co/PkViT9BYz7" title="https://t.co/PkViT9BYz7" target="_blank"&gt;https://t.co/PkViT9BYz7&lt;/a&gt; by &lt;a href="https://twitter.com/@dataquestio" target="_blank"&gt;@dataquestio&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/898375650519678976" data-datetime="2017-08-18T02:47:00+00:00"&gt;August 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;mistletoe - A fast, extensible Markdown parser in pure Python. &lt;a href="https://t.co/oXyVYQH97M" title="https://t.co/oXyVYQH97M" target="_blank"&gt;https://t.co/oXyVYQH97M&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/897830713113939969" data-datetime="2017-08-16T14:41:37+00:00"&gt;August 16, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Django"></category><category term="Docker"></category><category term="NNabla"></category><category term="PyTorch"></category><category term="TensorFlow"></category><category term="PyBeeWare"></category><category term="IPython"></category><category term="CLI"></category><category term="PyCharm"></category><category term="Jupyter"></category><category term="Data Visualisation"></category><category term="chatbot"></category><category term="Facebook"></category><category term="API"></category><category term="Pandas"></category><category term="Markdown"></category><category term="Mistletoe"></category></entry><entry><title>Making a Banner Generator With Pillow and Flask</title><link href="https://pybit.es/pillow-banner-flask.html" rel="alternate"></link><published>2017-08-19T13:00:00+02:00</published><updated>2017-08-19T13:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-08-19:/pillow-banner-flask.html</id><summary type="html">&lt;p&gt;In this article I will take &lt;a href="https://pybit.es/pillow-banner-image.html"&gt;last week's banner.py Pillow script&lt;/a&gt; and integrate it into a Flask app.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article I will take &lt;a href="https://pybit.es/pillow-banner-image.html"&gt;last week's banner.py Pillow script&lt;/a&gt; and integrate it into a Flask app.&lt;/p&gt;
&lt;p&gt;I ended up creating our &lt;em&gt;PyBites Banner Generator&lt;/em&gt;. Want to try it? The app is &lt;a href="https://pybites-banners.herokuapp.com/"&gt;on Heroku&lt;/a&gt;. Want to fork it? For example to use it with your own brand logos? The code is on &lt;a href="https://github.com/pybites/pillow-flask"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Give your banner a name, a background URL and text. We use PyBites logos upon login. Logged out state has a Python logo but I probably make this a free field so you can input any URL. Leaving "Use Second Image as Background" unchecked aligns the second image to the right:&lt;/p&gt;
&lt;p&gt;&lt;img alt="home logged out" src="https://pybit.es/images/pyb-banner-generator1.png"&gt;&lt;/p&gt;
&lt;p&gt;This results in:&lt;/p&gt;
&lt;p&gt;&lt;img alt="logged out banner" src="https://pybit.es/images/pyb-banner-generator2.png"&gt;&lt;/p&gt;
&lt;p&gt;Upon login it also caches the form input parameters to easily recreate the banners:&lt;/p&gt;
&lt;p&gt;&lt;img alt="home logged in" src="https://pybit.es/images/pyb-banner-generator3.png"&gt;&lt;/p&gt;
&lt;p&gt;Logged it uses PyBites logos. Here is the same banner logged in:&lt;/p&gt;
&lt;p&gt;&lt;img alt="banner with pybites article logo" src="https://pybit.es/images/pyb-banner-generator4.png"&gt;&lt;/p&gt;
&lt;p&gt;And the banner's form data can be retrieved again by clicking its name in the right "Cached Banners" list.&lt;/p&gt;
&lt;p&gt;Let's make a Twitter digest banner. Ticking "Use Second Image as Background" turns it into background image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="another banner with background" src="https://pybit.es/images/pyb-banner-generator5.png"&gt;&lt;/p&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="banner of pybites twitter digest" src="https://pybit.es/images/pyb-banner-generator6.png"&gt;&lt;/p&gt;
&lt;h2&gt;What's under the hood?&lt;/h2&gt;
&lt;p&gt;Here are the pieces that make up this app:&lt;/p&gt;
&lt;h3&gt;Pillow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pybit.es/pillow-banner-image.html"&gt;Last week's article&lt;/a&gt; detailed the Pillow script &lt;code&gt;banner.py&lt;/code&gt; which is in &lt;a href="https://github.com/pybites/pillow-flask/tree/master/banner"&gt;the banner package&lt;/a&gt;. The &lt;code&gt;generate_banner&lt;/code&gt; takes a &lt;code&gt;img_banner&lt;/code&gt; named tuple, instantiates a &lt;code&gt;Banner&lt;/code&gt; object, and creates and saves the image. &lt;/p&gt;
&lt;p&gt;Since last time I added a &lt;code&gt;add_background&lt;/code&gt; method which you saw in the 3rd example above. I also made &lt;code&gt;add_text&lt;/code&gt; smarter about aligning text: if background is ticked it uses the extra free space to the right and if the text is less than 2 lines long (using Python's &lt;a href="https://docs.python.org/3.6/library/textwrap.html"&gt;textwrap&lt;/a&gt;), it adds more top padding to it.&lt;/p&gt;
&lt;h3&gt;Flask-WTF&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://flask-wtf.readthedocs.io/en/stable/"&gt;Flask-WTF&lt;/a&gt; integrates Flask and WTForms making working with forms a joy. &lt;/p&gt;
&lt;p&gt;In &lt;a href="https://github.com/pybites/pillow-flask/blob/master/forms.py"&gt;forms.py&lt;/a&gt; I subclass wtforms's Form class, read in the logos for the dropdown and add some validations using wtform's &lt;code&gt;validators&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The form is diplayed in &lt;code&gt;imageform.html&lt;/code&gt; and &lt;code&gt;_formhelpers.html&lt;/code&gt; in the &lt;a href="https://github.com/pybites/pillow-flask/tree/master/templates"&gt;templates dir&lt;/a&gt; which I copied from &lt;a href="http://flask.pocoo.org/docs/0.12/patterns/wtforms/"&gt;this wtforms pattern&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Flask-SQLAlchemy&lt;/h3&gt;
&lt;p&gt;We have covered &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt; &lt;a href="https://pybit.es/tag/flask-sqlalchemy.html"&gt;before&lt;/a&gt;. I use it here to store the image parameters in a DB when logged in. Why not the images? Heroku has an &lt;a href="https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem"&gt;ephemeral filesystem&lt;/a&gt; so they would be lost after a dyno restart (which happens often because I am using the &lt;em&gt;hobby&lt;/em&gt; version now). For this same reason Heroku provides &lt;a href="https://devcenter.heroku.com/articles/sqlite3"&gt;production grade PostgreSQL databases as a service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The SQLAlchemy model code is in &lt;a href="https://github.com/pybites/pillow-flask/blob/master/model.py"&gt;model.py&lt;/a&gt; including code under main to recreate the DB. Obviously I need to look at a tool like &lt;a href="https://realpython.com/blog/python/flask-by-example-part-2-postgres-sqlalchemy-and-alembic/"&gt;Alembic&lt;/a&gt; to properly handle future DB migrations.&lt;/p&gt;
&lt;h3&gt;Flask&lt;/h3&gt;
&lt;p&gt;The core logic is in &lt;a href="https://github.com/pybites/pillow-flask/blob/master/app.py"&gt;app.py&lt;/a&gt;. It started simple with &lt;a href="https://github.com/pybites/pillow-flask/commit/be189a730488c5b7ce9e99ee2990c75fb274421b#diff-3f41e546893dc64b71aaacad12cad815"&gt;57 lOC&lt;/a&gt;, growing to 139 LOC as of this writing. Not bad considering that it does form handling, image generation, caching and handling a simple login session.&lt;/p&gt;
&lt;p&gt;Some interesting things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;login_required&lt;/code&gt; decorator (RealPython's Flask material). This login implementation simply verifies against env variables and keeps state in &lt;a href="https://pybit.es/flask-sessions.html"&gt;Flask's session&lt;/a&gt;. For multiple users you really would use a User model and a plugin like &lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask-Login&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_store_banner&lt;/code&gt; shows how easy it is to interface with SQLAlchemy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;_get_form&lt;/code&gt; helper swaps out the default logos (currently just one Python logo) with PyBites logos when logged in. Flask-WTF made this effortless.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;index&lt;/code&gt; route is still a bit too long. This would be a good candidate for &lt;a href="https://pybit.es/codechallenge30.html"&gt;refactoring&lt;/a&gt;. It retrieves cached image objects (basically the corresponding form inputs) from the DB and generates the banner upon POST request, displaying it in the browser. &lt;/p&gt;
&lt;p&gt;The way to send a banner to the browser is via Flask's &lt;code&gt;send_file&lt;/code&gt;. This was a bit tricky. Although I set &lt;code&gt;cache_timeout=1&lt;/code&gt; the browser would stubbornly show previous banners, probably due to its own caching policy. I ended up giving the output file name a unique string with &lt;code&gt;str(time.time())&lt;/code&gt;, so the browser sees it as a brand new file each time. Tricking the browser for fun and profit ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Form and cached banners are passed to the &lt;code&gt;imageform.html&lt;/code&gt; template for rendering. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use of logging and namedtuples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;h3&gt;Code Challenge&lt;/h3&gt;
&lt;p&gt;This project was part of &lt;a href="https://pybit.es/codechallenge31.html"&gt;Code Challenge 31 - Image Manipulation With Pillow&lt;/a&gt; - if you want to play with Pillow and potentially Flask and Heroku, follow the instructions there and start coding and PR your code to &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. I hope this article inspired you to give it a try yourself.&lt;/p&gt;
&lt;h3&gt;Flask vs Django&lt;/h3&gt;
&lt;p&gt;Yeah I know what you are thinking: "But it's 100 days of Django, why not a Django app?" Glad you asked. For this case I think Flask was the right choice. Julian shared some more thoughts about when to use one or the other, you can check it out &lt;a href="https://pybit.es/learning-flask-django.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Further reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can read more about the Pillow code &lt;a href="https://pybit.es/pillow-banner-image.html"&gt;in Part 1 of this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can read more how to automatically generate banners with Requests and Selenium &lt;a href="https://pybit.es/selenium-requests-automation.html"&gt;in part 3&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you take the challenge and want to deploy your app to Heroku, check out Julian's &lt;a href="https://pybit.es/deploy-flask-heroku.html"&gt;nice tutorial on the subject&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Want to learn more Flask? Check out our Flask &lt;a href="https://pybit.es/category/flask.html"&gt;category&lt;/a&gt; or &lt;a href="https://pybit.es/tag/flask.html"&gt;tag&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Pillow"></category><category term="Flask"></category><category term="Heroku"></category><category term="Flask-WTF"></category><category term="Flask-SQLAlchemy"></category><category term="challenges"></category><category term="PyBites Banner Generator"></category><category term="images"></category></entry><entry><title>Learning Flask v Learning Django</title><link href="https://pybit.es/learning-flask-django.html" rel="alternate"></link><published>2017-08-16T13:00:00+02:00</published><updated>2017-08-16T13:00:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-08-16:/learning-flask-django.html</id><summary type="html">&lt;p&gt;An article on my experience learning Flask and Django.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I‚Äôve been on a web framework kick lately with learning Flask. Now, for our latest project around learning Django I‚Äôve had to slow down with Flask and pick up Django.&lt;/p&gt;
&lt;p&gt;Surprisingly (or not surprisingly in my case), it‚Äôs been a bit of a struggle!&lt;/p&gt;
&lt;p&gt;Below are 4 things I‚Äôve noticed so far. Hopefully this helps set some expectations for anyone looking to start down this road as well.&lt;/p&gt;
&lt;h2&gt;1. Starting Out&lt;/h2&gt;
&lt;p&gt;The Django Documentation is pretty well written and fleshed out. Not much is left to the imagination which is what you want when learning something new.&lt;/p&gt;
&lt;p&gt;There‚Äôs an intentional and well thought out &lt;a href="https://docs.djangoproject.com/en/1.11/intro/tutorial01/"&gt;tutorial&lt;/a&gt; for creating your first Django app. This should be your first stop as it‚Äôs quite thorough. It seriously made me feel like Django was a polished and professional product.&lt;/p&gt;
&lt;p&gt;Flask on the other hand feels just like reading the documentation for any third party Python module. The &lt;a href="http://flask.pocoo.org/docs/0.12/tutorial/introduction/"&gt;Flaskr Tutorial&lt;/a&gt; is pretty cool, don‚Äôt get me wrong. I just find the Django tutorial to be way more polished.&lt;/p&gt;
&lt;p&gt;Both tutorials and documentation guides assume familiarity with Python and databases though. If you‚Äôre completely new to this stuff, you‚Äôll most certainly need to do some additional reading.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;2. The Road to Hello World&lt;/h2&gt;
&lt;p&gt;Things start to get complicated when it comes to creating your first web app (Hello World!). I found Flask to be &lt;em&gt;way&lt;/em&gt; easier than Django.&lt;/p&gt;
&lt;p&gt;Flask makes you start from scratch. It reminded me of typing up my first site back in the day. A completely blank canvas, nothing but notepad (don‚Äôt judge!) and code.
It may sound out of place in this day and age but it really helped me learn the framework more effectively.&lt;/p&gt;
&lt;p&gt;At a minimum there‚Äôs one file required to run your first app. 5 lines and you‚Äôre done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It‚Äôs easily explainable and understandable. As you add code to it, it‚Äôs easy to see what effect the code changes you‚Äôre making are having. It‚Äôs raw coding and I love it. This is also why Flask is a micro framework.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Django on the other hand‚Ä¶ I had no idea what the heck was going on from the start. Right off the bat, you know that it‚Äôs a feature packed, scalable framework.&lt;/p&gt;
&lt;p&gt;It‚Äôs not as simple as creating a single file and running it. You need to do some setting up!&lt;/p&gt;
&lt;p&gt;The first thing is to create a project using the command &lt;code&gt;django-admin startproject &amp;lt;sitename&amp;gt;&lt;/code&gt;. This will create the following folder structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As soon as I saw this I knew things weren‚Äôt going to be as simple as with Flask.&lt;/p&gt;
&lt;p&gt;Hello World takes some time to get around to. Rather than waste your time writing it out here I‚Äôll direct you instead to this &lt;a href="http://dfpp.readthedocs.io/en/latest/chapter_01.html"&gt;guide&lt;/a&gt;. Needless to say, it‚Äôs not as straightforward as I would have liked!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;3. Batteries Included&lt;/h2&gt;
&lt;p&gt;Flask is barebones. Other than a web server, it really doesn‚Äôt include a lot. Rather, it has a heap of &lt;a href="http://flask.pocoo.org/extensions/"&gt;Extensions&lt;/a&gt; you can install to provide additional functionality. It‚Äôs sometimes frustrating that some of these aren‚Äôt included by default but as Flask is a micro framework I can understand.&lt;/p&gt;
&lt;p&gt;Django however comes with Batteries included (Bob‚Äôs favourite way of describing it!). By default you have a bunch of apps installed ready for you to use with your own app. Here‚Äôs an excerpt from the &lt;code&gt;settings.py&lt;/code&gt; file that gets created when you generate your site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALLED_APPS = [
    &amp;#39;django.contrib.admin&amp;#39;,
    &amp;#39;django.contrib.auth&amp;#39;,
    &amp;#39;django.contrib.contenttypes&amp;#39;,
    &amp;#39;django.contrib.sessions&amp;#39;,
    &amp;#39;django.contrib.messages&amp;#39;,
    &amp;#39;django.contrib.staticfiles&amp;#39;,
]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Super useful! In fact, we used &lt;code&gt;django.contrib.auth&lt;/code&gt; (an authentication system) for our &lt;a href="https://github.com/pybites/django-registration"&gt;PyBites Django Notifier App&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;4. The Right Framework for the Right Job&lt;/h2&gt;
&lt;p&gt;Compared with Flask I‚Äôve barely scratched the surface of Django. I do however see why it‚Äôs so incredibly popular.&lt;/p&gt;
&lt;p&gt;Django is jam packed with functionality and from the start is built to scale, regardless of how big or small your application is.&lt;/p&gt;
&lt;p&gt;Unfortunately, this is actually the main detractor from using it for me. The setup involved is off-putting when all I want to do is write up a quick and dirty web app.&lt;/p&gt;
&lt;p&gt;That‚Äôs where Flask comes into its own. I can have an idea and have it running as a web app in minutes.&lt;/p&gt;
&lt;p&gt;It looks like it comes down to choosing the right framework for the right job. When it comes to building larger, scalable apps, I can see why Django is the preferred choice. Heck, I don‚Äôt even want to imagine how much harder it would have been to write our &lt;a href="https://github.com/pybites/django-registration"&gt;Notifier App&lt;/a&gt; in Flask!&lt;/p&gt;
&lt;p&gt;For now I think I‚Äôll stick with Flask for quick and dirty apps and Django for larger, intricate and complex apps.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As we like to say here at PyBites: &lt;a href="https://pybit.es/learn-by-doing.html"&gt;Learn by Doing&lt;/a&gt;! Even though it‚Äôs probably overkill, I‚Äôm going to create a small app in Django. I might actually take a Flask app and see how easy it is to run it in Django, there‚Äôs an idea!&lt;/p&gt;
&lt;p&gt;I digress. Learning Flask and learning Django are two totally different experiences. I think it‚Äôs important to set your expectations before you jump in. They‚Äôll both require existing Python knowledge and they both have their learning curves.&lt;/p&gt;
&lt;p&gt;Flask starts off slow and ramps up the difficulty as you move to build more advanced apps whereas Django starts off complex and seems to plateau (or at least I hope it does!). Either way, unless you‚Äôre a seasoned pro, there will be a time investment!&lt;/p&gt;
&lt;p&gt;I‚Äôm probably being a bit harsh on Django though. I‚Äôm sure with enough practice I‚Äôll be able to whip up apps with it in no time!&lt;/p&gt;
&lt;p&gt;The only way to learn them though is to:&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Django"></category><category term="100DaysOfDjango"></category><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="learning"></category></entry><entry><title>Code Challenge 32 - Test a Simple Django App With Selenium</title><link href="https://pybit.es/codechallenge32.html" rel="alternate"></link><published>2017-08-15T13:00:00+02:00</published><updated>2017-08-15T13:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-15:/codechallenge32.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python goodness. As &lt;a href="https://github.com/pybites/challenges/issues/91"&gt;anticipated&lt;/a&gt; this week we dedicate a challenge to Selenium testing. We think this is a cool skill to add to your web dev + testing repertoire.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python goodness. As &lt;a href="https://github.com/pybites/challenges/issues/91"&gt;anticipated&lt;/a&gt; this week we dedicate a challenge to Selenium testing. We think this is a cool skill to add to your web dev + testing repertoire.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;Our first intuition was to let you pull a Django app, but this might lead to config confusion. So let's test &lt;a href="https://pybit.es/learning-django.html"&gt;our first Django app&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The &lt;a href="http://pyplanet.herokuapp.com/"&gt;main page&lt;/a&gt; is actually our &lt;a href="https://pybit.es/tag/100daysofdjango.html"&gt;100DaysOfDjango home&lt;/a&gt; where we want to add more apps over time.&lt;/p&gt;
&lt;p&gt;We ask you to help PyBites dev to deliver tests for this app using Selenium:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to the &lt;a href="http://pyplanet.herokuapp.com/"&gt;http://pyplanet.herokuapp.com/&lt;/a&gt;. The header should say &lt;em&gt;PyBites 100 Days of Django&lt;/em&gt;. The navbar has Login and Home links. The first link in the &lt;code&gt;main&lt;/code&gt; div is &lt;em&gt;PyPlanet Article Sharer App&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="test the home page" src="https://pybit.es/images/selenium-challenge1.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &lt;em&gt;PyPlanet Article Sharer App&lt;/em&gt; link and test the page contains a &lt;code&gt;table&lt;/code&gt; with a &lt;code&gt;th&lt;/code&gt; (table header) containing the word &lt;em&gt;Title&lt;/em&gt;. This app watches the PyPlanet feed so the titles change every day so that is hard test. What we can test though is if the table contains 100 entries (&lt;code&gt;tr&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img alt="home page" src="https://pybit.es/images/selenium-challenge2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to an article and check there is only a &lt;em&gt;Go back&lt;/em&gt; button (logged out view). Check if the header link at the top is the same as the link you clicked on, in this example: &lt;em&gt;Martin Fitzpatrick: KropBot: Multiplayer Internet-controlled robot&lt;/em&gt;. The &lt;em&gt;Go back&lt;/em&gt; should redirect back to &lt;a href="http://pyplanet.herokuapp.com/pyplanet/"&gt;the app's home page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="home page" src="https://pybit.es/images/selenium-challenge3.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Selenium click &lt;em&gt;Login&lt;/em&gt; and login with user: guest / password: changeme - then click the blue &lt;em&gt;Login&lt;/em&gt; button:&lt;/p&gt;
&lt;p&gt;&lt;img alt="home page" src="https://pybit.es/images/selenium-challenge4.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check you are redirected back to &lt;a href="http://pyplanet.herokuapp.com/"&gt;100Days home&lt;/a&gt; and if navigation contains &lt;em&gt;Welcome back, guest!&lt;/em&gt; and Logout and Home links:&lt;/p&gt;
&lt;p&gt;&lt;img alt="home page" src="https://pybit.es/images/selenium-challenge5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Going back to the article link (3.), check that you now have a &lt;em&gt;Tweet this&lt;/em&gt; button alongside the &lt;em&gt;Go back&lt;/em&gt; button. Optionally you can check the link of the &lt;em&gt;Tweet this&lt;/em&gt; button (extra check: PyBites entries have &lt;em&gt;New PyBites Article&lt;/em&gt; prepended).&lt;/p&gt;
&lt;p&gt;&lt;img alt="home page" src="https://pybit.es/images/selenium-challenge6.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally logout with Selenium and check for &lt;em&gt;See you!&lt;/em&gt; and &lt;em&gt;You have been successfully logged out.&lt;/em&gt;, &lt;em&gt;logout&lt;/em&gt; in the URL, and navbar links are Login and Home again:&lt;/p&gt;
&lt;p&gt;&lt;img alt="home page" src="https://pybit.es/images/selenium-challenge7.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the way, if you don't like this app or want to test a Flask app (or other web framework), be our guest. Just mention it in your PR submission.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;If you like to test even more you need superuser rights. As we use this app ourselves we only provide a guest login at this point. Nobody stops you though from &lt;a href="https://github.com/pybites/pyplanet-django"&gt;cloning the repo&lt;/a&gt; and get it working locally. &lt;/p&gt;
&lt;p&gt;Apart from extra Django setup practice, doing so can can additionally test:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a Django superuser and use it to login to the app. Click the &lt;em&gt;Mark Skipped&lt;/em&gt; button on an article and check if it marks the entry as orange back at the main app page/table view. Going back to the same article, the button is deactivated and the button text changed to &lt;em&gt;Already skipped&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(still logged in) click the &lt;em&gt;Mark Shared&lt;/em&gt; button on another article and check if it marks the entry green back at the main app page/table view. Going back to the same article, the button is deactivated and the button text changed to &lt;em&gt;Already shared&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For both 1. and 2. the blue &lt;em&gt;Tweet this&lt;/em&gt; button should have disappeared.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again &lt;a href="https://pybit.es/learning-django.html"&gt;here&lt;/a&gt; is how the app looks with superuser rights.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://selenium-python.readthedocs.io/"&gt;Selenium with Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/"&gt;Headless Selenium Testing With Python and PhantomJS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.obeythetestinggoat.com/"&gt;Test-Driven Development With Python aka Obey the Testing Goat!&lt;/a&gt; - &lt;a href="http://www.obeythetestinggoat.com/book/chapter_01.html"&gt;chapter 1&lt;/a&gt; kicks off with a Selenium functional test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.miguelgrinberg.com/post/using-headless-chrome-with-selenium"&gt;Using Headless Chrome with Selenium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get credit!&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt; or &lt;a href="http://pybit.es/pages/about.html"&gt;reach out&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category><category term="Selenium"></category><category term="Testing"></category></entry><entry><title>Code Challenge 31 - Image Manipulation With Pillow - Review</title><link href="https://pybit.es/codechallenge31_review.html" rel="alternate"></link><published>2017-08-14T11:00:00+02:00</published><updated>2017-08-14T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-14:/codechallenge31_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge31.html"&gt;Image Manipulation With Pillow&lt;/a&gt; code challenge. Some nice submissions to share ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge31.html"&gt;Image Manipulation With Pillow&lt;/a&gt; code challenge. Some nice submissions to share ...&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;Submissions are merged to our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;Community branch&lt;/a&gt; -&amp;gt; &lt;a href="https://github.com/pybites/challenges/tree/community/31"&gt;Challenge 31 subdir&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; created &lt;em&gt;PyBites Banner Generator&lt;/em&gt; to create quick but nice banners for PyBites pillars Articles / Challenges / News / Special:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using Gimp to make banners manually is cumbersome to say the least. Why not semi-automate it? Now it takes seconds to make a PyBites banner and I got enough material out of it to write two articles on Pillow and Flask. You can checkout the first one &lt;a href="https://pybit.es/pillow-banner-image.html"&gt;here&lt;/a&gt;, the second one will come out somewhere this week ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the &lt;a href="https://github.com/pybites/challenges/blob/community/31/bbelderbos/README.md"&gt;README&lt;/a&gt; for full details and examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; created &lt;em&gt;Thumbler&lt;/em&gt; - a proof of concept script that extracts faces as thumbnails from an image:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I started out wanting to use some sort of machine learning to detect faces in images, but I got sick and had to settle for a quick OpenCV implementation. At first I was going to try and group the extracted faces into their own folder, but since I ran out of time, I just grouped them by image.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Awesome work. See the &lt;a href="https://github.com/pybites/challenges/blob/community/31/clamytoe/README.md"&gt;README&lt;/a&gt; for full details and examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;As there is no deadline to these challenges, we will update here when we get more cool submissions for this challenge ... &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding!&lt;/p&gt;
&lt;p&gt;Stay tuned for our next challenge tomorrow ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="images"></category><category term="Pillow"></category><category term="Flask"></category><category term="newquote"></category><category term="utilities"></category><category term="OpenCV"></category><category term="Anaconda"></category><category term="conda"></category><category term="face recognition"></category><category term="Thumbler"></category><category term="thumbnails"></category></entry><entry><title>Twitter digest 2017 week 32</title><link href="https://pybit.es/twitter_digest_201732.html" rel="alternate"></link><published>2017-08-13T19:20:00+02:00</published><updated>2017-08-13T19:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-13:/twitter_digest_201732.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check out this collection of tutorials for learning how to use &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; with various tools. Contributions welcome!‚Ä¶ &lt;a href="https://t.co/FAPTcaVKRP" title="https://t.co/FAPTcaVKRP" target="_blank"&gt;https://t.co/FAPTcaVKRP&lt;/a&gt;&lt;/p&gt;‚Äî Docker (@Docker) &lt;a href="https://twitter.com/Docker/status/896295205556682752" data-datetime="2017-08-12T09:00:04+00:00"&gt;August 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Brief History of Women in Computing &lt;a href="https://t.co/sD7izE4ZNP" title="https://t.co/sD7izE4ZNP" target="_blank"&gt;https://t.co/sD7izE4ZNP&lt;/a&gt; via &lt;a href="https://twitter.com/@ami" target="_blank"&gt;@ami&lt;/a&gt; &lt;a href="https://twitter.com/search/#tech" target="_blank"&gt;#tech&lt;/a&gt; &lt;a href="https://t.co/LUJhf9EhsO" title="https://t.co/LUJhf9EhsO" target="_blank"&gt;https://t.co/LUJhf9EhsO&lt;/a&gt;&lt;/p&gt;‚Äî Hacker Noon (@hackernoon) &lt;a href="https://twitter.com/hackernoon/status/896308223011155968" data-datetime="2017-08-12T09:51:47+00:00"&gt;August 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Don't confuse \1 with $1. \1 is used inside a regex; $1 (in Perl) is used outside the regex after a match.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/894936623405830144" data-datetime="2017-08-08T15:01:32+00:00"&gt;August 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I should add that if there are any topics you think I should add to the 2nd edition of the Flask book, there's stil‚Ä¶ &lt;a href="https://t.co/ONnpK47wIZ" title="https://t.co/ONnpK47wIZ" target="_blank"&gt;https://t.co/ONnpK47wIZ&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/895363211997855744" data-datetime="2017-08-09T19:16:39+00:00"&gt;August 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@hainm_comp:" target="_blank"&gt;@hainm_comp:&lt;/a&gt; yeah, we can use &lt;a href="https://twitter.com/search/#nglview" target="_blank"&gt;#nglview&lt;/a&gt; to draw a lovely cat. (made by &lt;a href="https://twitter.com/@asrmoin)." target="_blank"&gt;@asrmoin).&lt;/a&gt; &lt;a href="https://t.co/H1B5zTFV2C" title="https://t.co/H1B5zTFV2C" target="_blank"&gt;https://t.co/H1B5zTFV2C&lt;/a&gt;&lt;/p&gt;‚Äî Karla Fejfarov√° (@karlafej) &lt;a href="https://twitter.com/karlafej/status/894529564231307264" data-datetime="2017-08-07T12:04:02+00:00"&gt;August 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dataelixir:" target="_blank"&gt;@dataelixir:&lt;/a&gt; SQL Tutorial: How To Write Better Queries via &lt;a href="https://twitter.com/@DataCamp" target="_blank"&gt;@DataCamp&lt;/a&gt; &lt;a href="https://t.co/5k8SOX2Deg" title="https://t.co/5k8SOX2Deg" target="_blank"&gt;https://t.co/5k8SOX2Deg&lt;/a&gt; &lt;a href="https://twitter.com/search/#sql" target="_blank"&gt;#sql&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt;&lt;/p&gt;‚Äî Karlijn Willems (@willems_karlijn) &lt;a href="https://twitter.com/willems_karlijn/status/896421860652572677" data-datetime="2017-08-12T17:23:20+00:00"&gt;August 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A simple web scraper to get baseball game scores in python &lt;a href="https://t.co/7MiBirgT2N" title="https://t.co/7MiBirgT2N" target="_blank"&gt;https://t.co/7MiBirgT2N&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/896070480087531520" data-datetime="2017-08-11T18:07:05+00:00"&gt;August 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@wincent:" target="_blank"&gt;@wincent:&lt;/a&gt; Neat new GitHub feature. &lt;a href="https://t.co/wU5i4BSO00" title="https://t.co/wU5i4BSO00" target="_blank"&gt;https://t.co/wU5i4BSO00&lt;/a&gt;&lt;/p&gt;‚Äî Michael Herman (@MikeHerman) &lt;a href="https://twitter.com/MikeHerman/status/896449537945944064" data-datetime="2017-08-12T19:13:19+00:00"&gt;August 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tips for handling larger (non-big) data with Pandas &amp;lt; &lt;a href="https://twitter.com/@dataquestio" target="_blank"&gt;@dataquestio&lt;/a&gt; &lt;a href="https://t.co/7y0xVdZqWC" title="https://t.co/7y0xVdZqWC" target="_blank"&gt;https://t.co/7y0xVdZqWC&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/895898934987505664" data-datetime="2017-08-11T06:45:25+00:00"&gt;August 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Visualize ‚Äúmissingness‚Äù of data in your &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; dataframes with missingno. &lt;a href="https://t.co/P8Oxzl82vP" title="https://t.co/P8Oxzl82vP" target="_blank"&gt;https://t.co/P8Oxzl82vP&lt;/a&gt; &lt;a href="https://t.co/yWBUFG8ikT" title="https://t.co/yWBUFG8ikT" target="_blank"&gt;https://t.co/yWBUFG8ikT&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/895915187626233856" data-datetime="2017-08-11T07:50:00+00:00"&gt;August 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to write a container daemon in &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; My &lt;a href="https://twitter.com/search/#pyconau" target="_blank"&gt;#pyconau&lt;/a&gt; talk &lt;a href="https://t.co/VtG4ZaMIjC" title="https://t.co/VtG4ZaMIjC" target="_blank"&gt;https://t.co/VtG4ZaMIjC&lt;/a&gt; &lt;a href="https://twitter.com/search/#docker" target="_blank"&gt;#docker&lt;/a&gt; &lt;a href="https://twitter.com/search/#potatohead" target="_blank"&gt;#potatohead&lt;/a&gt; &lt;a href="https://t.co/sGoGGCTtpM" title="https://t.co/sGoGGCTtpM" target="_blank"&gt;https://t.co/sGoGGCTtpM&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/894007303392776192" data-datetime="2017-08-06T01:28:45+00:00"&gt;August 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Predicting Stock Prices in 50 line... &lt;a href="https://t.co/bA7X34Iw6F" title="https://t.co/bA7X34Iw6F" target="_blank"&gt;https://t.co/bA7X34Iw6F&lt;/a&gt; &lt;a href="https://twitter.com/search/#graph" target="_blank"&gt;#graph&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/895983203403550721" data-datetime="2017-08-11T12:20:16+00:00"&gt;August 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;BeeWare: very cool open source projects for working with Python applications &lt;a href="https://t.co/hbaxKL6Uop" title="https://t.co/hbaxKL6Uop" target="_blank"&gt;https://t.co/hbaxKL6Uop&lt;/a&gt; &lt;a href="https://t.co/HEC5bo3eBG" title="https://t.co/HEC5bo3eBG" target="_blank"&gt;https://t.co/HEC5bo3eBG&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/896097402204995584" data-datetime="2017-08-11T19:54:04+00:00"&gt;August 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Episode 38, Hacking Classic Nintendo Games with Python &lt;a href="https://t.co/JxLZIVZtFD" title="https://t.co/JxLZIVZtFD" target="_blank"&gt;https://t.co/JxLZIVZtFD&lt;/a&gt; is out. Thanks &lt;a href="https://twitter.com/@brian" target="_blank"&gt;@brian&lt;/a&gt; and &lt;a href="https://twitter.com/@mattmakai" target="_blank"&gt;@mattmakai&lt;/a&gt;&lt;/p&gt;‚Äî Python Bytes Podcast (@pythonbytes) &lt;a href="https://twitter.com/pythonbytes/status/895348481065455619" data-datetime="2017-08-09T18:18:07+00:00"&gt;August 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nixcraft:" target="_blank"&gt;@nixcraft:&lt;/a&gt; Bashing the Bash ‚Äî Replacing Shell Scripts with Python &lt;a href="https://twitter.com/search/#unix" target="_blank"&gt;#unix&lt;/a&gt; &lt;a href="https://twitter.com/search/#linux" target="_blank"&gt;#linux&lt;/a&gt; &lt;a href="https://twitter.com/search/#sysadmin" target="_blank"&gt;#sysadmin&lt;/a&gt; &lt;a href="https://t.co/2YECr8gDO4" title="https://t.co/2YECr8gDO4" target="_blank"&gt;https://t.co/2YECr8gDO4&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/896453207450198016" data-datetime="2017-08-12T19:27:54+00:00"&gt;August 12, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Docker"></category><category term="women"></category><category term="history"></category><category term="regex"></category><category term="Flask"></category><category term="IPython"></category><category term="SQL"></category><category term="webscraping"></category><category term="GitHub"></category><category term="Pandas"></category><category term="PyConAU"></category><category term="data science"></category><category term="BeeWare"></category><category term="hacking"></category><category term="Bash"></category><category term="scripting"></category></entry><entry><title>Using Pillow to Create Nice Banners For Your Site</title><link href="https://pybit.es/pillow-banner-image.html" rel="alternate"></link><published>2017-08-11T14:00:00+02:00</published><updated>2017-08-11T14:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-08-11:/pillow-banner-image.html</id><summary type="html">&lt;p&gt;Running your site or business good chance you A. use promo material like banners and B. you make them manually with Photoshop, Gimp or what not. And yes for anything beyond the basics you probably need those programs. But what if you like to keep it simple and want to semi-automate things? Just an image and text on canvas? Enter &lt;a href="https://python-pillow.org/"&gt;Pillow&lt;/a&gt; - &lt;em&gt;The friendly PIL fork&lt;/em&gt;, which makes this pretty easy. Come explore some of its capabilities with me in this article.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Running your site or business good chance you A. use promo material like banners and B. you make them manually with Photoshop, Gimp or what not. And yes for anything beyond the basics you probably need those programs. But what if you like to keep it simple and want to semi-automate things? Just an image and text on canvas? Enter &lt;a href="https://python-pillow.org/"&gt;Pillow&lt;/a&gt; - &lt;em&gt;The friendly PIL fork&lt;/em&gt;, which makes this pretty easy. Come explore some of its capabilities with me in this article.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Python Imaging Library adds image processing capabilities to your Python interpreter. - &lt;a href="http://pillow.readthedocs.io/en/4.2.x/handbook/overview.html"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this article we will use Pillow to create a simple promo banner for PyBites Code Challenges, starting with this week - how applicable! - &lt;a href="https://pybit.es/codechallenge31.html"&gt;#31 - Image Manipulation With Pillow&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;By the way if you like to practice this stuff yourself, you should really join this week's challenge :)&lt;/p&gt;
&lt;p&gt;We will position 2 images on a canvas adding a title using a nice font. In part 2 I will wrap a Flask app around it so you can use it in the browser.&lt;/p&gt;
&lt;p&gt;The complete code for this article is &lt;a href="https://github.com/pybites/blog_code/tree/master/pillow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;First let's create a virtual env and install Pillow&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 -m venv venv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip install Pillow
..
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip freeze &amp;gt; requirements.txt
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ mkdir banner &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ touch __init__.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's get the images we will use for our banner.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ mkdir assets &amp;amp;&amp;amp; cd _
(venv) $ curl https://pybit.es/theme/img/page{-challenges.png} -o &amp;quot;pybites#1&amp;quot;
(venv) $ curl https://pbs.twimg.com/profile_images/510760404411109380/wDGjWJxk.png -o pillow-logo.png
(venv) $ cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;#1&lt;/code&gt; tells curl to use the string I wrapped in &lt;code&gt;{}&lt;/code&gt; for output filename:&lt;/p&gt;
&lt;h2&gt;Step 1. - create a canvas and put our challenges logo on it:&lt;/h2&gt;
&lt;p&gt;Let's write some code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: we just write it in a procedural way to get something working. We will refactor it in step 4.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;banner.py&lt;/code&gt; and add the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageDraw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageFont&lt;/span&gt;

&lt;span class="n"&gt;ASSET_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;assets&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PB_CHALLENGE_IMG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASSET_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pybites-challenges.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PILLOW_IMG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASSET_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pillow-logo.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_CANVAS_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_TOP_MARGIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;WHITE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RGB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_CANVAS_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WHITE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pb_logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PB_CHALLENGE_IMG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pb_logo_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_TOP_MARGIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pb_logo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pb_logo_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pb_logo_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pb_logo_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pb_logo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;

&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;out.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We do our imports and set up some constants. &lt;code&gt;os.path.join&lt;/code&gt; is always best practice to join directories and filenames to make it compatible across different operating systems.&lt;/p&gt;
&lt;p&gt;We create a new canvas with &lt;code&gt;Image.new&lt;/code&gt; stating the dimensions and background color. We put (&lt;code&gt;image.paste&lt;/code&gt;) the Pybites challenges logo at an offset of left=0, top=15. And we store the image's width use height in variables for later use.&lt;/p&gt;
&lt;p&gt;We save the image to a file which confirms this worked:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pillow-step1.png" class="border" src="https://pybit.es/images/pillow-step1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step 2. - add a second image&lt;/h2&gt;
&lt;p&gt;The second image is the Pillow logo. But the original is 442‚ÄÜ√ó‚ÄÜ442. Let's resize it. One way is to calculate it, &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/074/text_on_image.py"&gt;like I did last time&lt;/a&gt;. Another way is using the &lt;code&gt;thumbnail&lt;/code&gt; method as I found &lt;a href="https://stackoverflow.com/questions/2232742/does-python-pil-resize-maintain-the-aspect-ratio"&gt;on this SO thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The offset of this second image gets calculated so it should still work if one day I decide to change the canvas or Pybites logo image sizes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...

second_img = Image.open(PILLOW_IMG)
second_img.thumbnail(pb_logo.size, Image.ANTIALIAS)

offset_second_img = (DEFAULT_WIDTH - pb_logo_width, DEFAULT_TOP_MARGIN)
image.paste(second_img, offset_second_img)

...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Image.ANTIALIAS&lt;/code&gt; is a a high-quality downsampling filter which is recommended unless speed is much more important than quality.&lt;/p&gt;
&lt;p&gt;Offsets in Pillow are (left, top). For top I use the same 15px. For width I want to align the second image to the right. To accomplish this I substract the image width (same as first image after resizing) from the total canvas width: 600px - 120px = 480px. This results in:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pillow-step2.png" class="border" src="https://pybit.es/images/pillow-step2.png"&gt;&lt;/p&gt;
&lt;p&gt;Again we will clean this up later. At this stage I want to get something working, then make it reusable.&lt;/p&gt;
&lt;h2&gt;Step 3. - add some text&lt;/h2&gt;
&lt;p&gt;Here we need &lt;code&gt;ImageDraw&lt;/code&gt; and &lt;code&gt;ImageFont&lt;/code&gt; we already imported.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImageFont.truetype&lt;/code&gt; lets you work with nice fonts so let's get a &lt;a href="https://en.wikipedia.org/wiki/TrueType"&gt;TrueType&lt;/a&gt; file. &lt;/p&gt;
&lt;p&gt;I used &lt;a href="https://www.fontsquirrel.com/"&gt;Font Squirrel&lt;/a&gt; and downloaded &lt;a href="https://www.fontsquirrel.com/fonts/list/find_fonts?q%5Bterm%5D=ubuntu&amp;amp;q%5Bsearch_check%5D=Y"&gt;Ubuntu&lt;/a&gt; and &lt;a href="https://www.fontsquirrel.com/fonts/source-sans-pro?q%5Bterm%5D=source+sans+pro&amp;amp;q%5Bsearch_check%5D=Y"&gt;Source Sans Pro&lt;/a&gt; (latter we use on our blog). I included both in the &lt;code&gt;assets&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Add this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
BLACK = (0, 0, 0)
TEXT_FONT_TYPE = os.path.join(ASSET_DIR, &amp;#39;SourceSansPro-Regular.otf&amp;#39;)
TEXT_SIZE = 24
TEXT_PADDING_HOR = 20
TEXT_PADDING_VERT = 40
IMG_TEXT = &amp;#39;Code Challenge 31:\nImage Manipulation With Pillow&amp;#39;

...

draw = ImageDraw.Draw(image)
font = ImageFont.truetype(TEXT_FONT_TYPE, TEXT_SIZE)
offset_text = (pb_logo_width + TEXT_PADDING_HOR, TEXT_PADDING_VERT)
draw.text(offset_text, IMG_TEXT, BLACK, font=font)
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We insert the text 40px from the top and 140px left (120px PyBites logo = first image width + 20px right padding) resulting in:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pillow-step3.png" class="border" src="https://pybit.es/images/pillow-step3.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step 4. - make it reusable&lt;/h2&gt;
&lt;p&gt;I did some refactorings to make it easier to maintain / extend. See &lt;a href="https://github.com/pybites/blog_code/blob/master/pillow/banner/banner.py"&gt;on Github&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Few things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I added a simple CLI interface (just &lt;code&gt;sys.argv&lt;/code&gt;, use &lt;code&gt;argparse&lt;/code&gt; or &lt;code&gt;click&lt;/code&gt; if you need more inputs). You can now run it like: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ python banner.py
Usage: banner.py img1 img2 text
(venv) $ python banner.py assets/pybites-challenges.png assets/pillow-logo.png $&amp;#39;Code Challenge 31:\nImage Manipulation With Pillow&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the required bash &lt;code&gt;$''&lt;/code&gt; syntax, otherwise the &lt;code&gt;\n&lt;/code&gt; won't be interpreted as a newline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I use a class which makes this cleaner / easier to extend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I calculated the &lt;code&gt;DEFAULT_TOP_MARGIN&lt;/code&gt; = 150px height, image1 = 120px = 30px / 2 = 15px for top margin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I use &lt;em&gt;named tuples&lt;/em&gt; which you should &lt;a href="https://docs.python.org/3/library/collections.html"&gt;lookup&lt;/a&gt; if you're not familiar with them yet. One interesting use case is the reduction in function parameters for &lt;code&gt;add_text&lt;/code&gt;: using a named tuple object it reduces the interface from 5 to 1 argument (see also the &lt;a href="https://www.refactoring.com/catalog/introduceParameterObject.html"&gt;Introduce Parameter Object refactoring&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I added the &lt;code&gt;self.image_coords&lt;/code&gt; list to keep track of images being added to calculate where the text should go (right edge of most left image).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Now it's time to let the user interact with it via a simple (Flask) web app.&lt;/p&gt;
&lt;p&gt;I will be doing that as part of &lt;a href="https://pybit.es/codechallenge31.html"&gt;this week's code challenge&lt;/a&gt; and will follow up with a part 2 article. Stay tuned ...&lt;/p&gt;
&lt;p&gt;Pillow makes image manipulation easy and fun again. I hope this inspires you to try it out for yourself ...&lt;/p&gt;
&lt;p&gt;Update 20/08/2017: check out &lt;a href="https://pybit.es/pillow-banner-flask.html"&gt;part 2&lt;/a&gt; where I wrap this script into a Flask app. In &lt;a href="https://pybit.es/selenium-requests-automation.html"&gt;part 3&lt;/a&gt; I automate banner generation with Requests and Selenium.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Pillow"></category><category term="images"></category><category term="utilities"></category><category term="pybites"></category><category term="curl"></category><category term="refactoring"></category><category term="challenges"></category><category term="PyBites Banner Generator"></category></entry><entry><title>Code Challenge 31 - Image Manipulation With Pillow</title><link href="https://pybit.es/codechallenge31.html" rel="alternate"></link><published>2017-08-08T13:28:00+02:00</published><updated>2017-08-08T13:28:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-08:/codechallenge31.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding. Let's shift gears a little bit: this week we have you choose an image manipulation task using &lt;a href="https://python-pillow.org/"&gt;Pillow&lt;/a&gt;, "the friendly PIL (Python Imaging Library) fork". Have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Life is about facing new challenges - Kostya Tszyu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding. Let's shift gears a little bit: this week we have you choose an image manipulation task using &lt;a href="https://python-pillow.org/"&gt;Pillow&lt;/a&gt;, "the friendly PIL (Python Imaging Library) fork". Have fun!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;Create a new virtual env&lt;/a&gt;, &lt;code&gt;pip install Pillow&lt;/code&gt; and use the module for one of the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a tool to create thumbnails of a set of images.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Instagram like filters on a bunch of images.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make promo banners for your brand or cause using Pillow: basically put your logo, a nice background and text on a canvas and save to file. &lt;a href="https://twitter.com/pybites/status/853560501854515200"&gt;Example&lt;/a&gt; made with Gimp, what about generating something similar with Pillow?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similar as last one: make a birthday ecard generator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a watermark to an image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feel free to do something else if that inspires you more, as long as you use Pillow!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Wrap the utility up in a little Flask app with interactive input/select boxes, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://projects.bobbelderbos.com/featured_image/"&gt;Featured Image Creator&lt;/a&gt; was a PHP/JS/CSS project I (Bob) did some time ago. Maybe you can build something similar using Flask (JS) for user interaction and Pillow to generate the image upon form submit?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a thumbnail generator you could have a (multi) image upload button which batch resizes them and shows them in the browser or generates a zipfile for download.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What about the (birthday) ecard generator: let the user choose between a set of images, enter a text and show the generated card in the browser with download link.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Etc ... combining user interaction (web app) and Pillow you can build some cool stuff. The possibilities are endless, surprise us ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy your solution to Heroku to show it to the world (and mention the URL in your PR).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://python-pillow.org/"&gt;Pillow homepage&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pillow.readthedocs.io/en/4.2.x/"&gt;Pillow docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.pythonforbeginners.com/gui/how-to-use-pillow"&gt;How to use Pillow, a fork of PIL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.blog.pythonlibrary.org/2016/10/07/an-intro-to-the-python-imaging-library-pillow/"&gt;An Intro to the Python Imaging Library / Pillow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://automatetheboringstuff.com/chapter17/"&gt;ATBS - Chapter 17 ‚Äì Manipulating Images&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/074"&gt;100 DaysOfCode - day 74: Using Pillow to add text and opacity to an image = your own cards&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pybit.es/deploy-flask-heroku.html"&gt;Step-by-Step Guide on Deploying a Simple Flask App to Heroku&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt; or &lt;a href="http://pybit.es/pages/about.html"&gt;reach out&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="images"></category><category term="Pillow"></category><category term="Flask"></category><category term="newquote"></category><category term="utilities"></category></entry><entry><title>Code Challenge 30 - The Art of Refactoring: Improve Your Code - Review</title><link href="https://pybit.es/codechallenge30_review.html" rel="alternate"></link><published>2017-08-07T11:00:00+02:00</published><updated>2017-08-07T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-07:/codechallenge30_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge30.html"&gt;The Art of Refactoring: Improve Your Code&lt;/a&gt; code challenge. We're excited to have done 30 challenges so far and it feels like we only got started. Prepare for more to come!&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge30.html"&gt;The Art of Refactoring: Improve Your Code&lt;/a&gt; code challenge. We're excited to have done 30 challenges so far and it feels like we only got started. Prepare for more to come!&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;Submissions are merged to &lt;a href="https://github.com/pybites/challenges/tree/community/30"&gt;this dir&lt;/a&gt; on our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;community branch&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; refactored PyBites' Slack Karma Bot:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This was a great challenge for me to A. put unittest mocking into practice, refactoring code for a Slack bot and B. try out SIG's &lt;a href="https://bettercodehub.com/"&gt;BetterCodeHub&lt;/a&gt; to lead my refactorings. This worked out pretty well. See the readme for more details. I will do a follow-up article as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the &lt;a href="https://github.com/pybites/challenges/blob/community/30/bbelderbos/README.md"&gt;README&lt;/a&gt; for full details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/hobojoe1848"&gt;hobojoe1848&lt;/a&gt; refactored his very first script:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The very first script I wrote! A "Troubleshooting Wheel of Fortune" to print out random troubleshooting steps to help myself and my team (jokingly) troubleshoot hardware faults. Terribly lame but a trip down memory lane!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the &lt;a href="https://github.com/pybites/challenges/blob/community/30/hobojoe1848/README.md"&gt;README&lt;/a&gt; for full details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/mjhea0"&gt;mjhea0&lt;/a&gt; refactored a Flask route handler:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For this challenge I decided to refactor a Flask route handler because of this &lt;a href="https://github.com/realpython/flask-jwt-auth/issues/9"&gt;issue&lt;/a&gt; that was added to the &lt;a href="https://github.com/realpython/flask-jwt-auth"&gt;Flask JWT Auth project&lt;/a&gt;. Since this project is the example app built for the &lt;a href="https://realpython.com/blog/python/token-based-authentication-with-flask/"&gt;Token-Based Authentication With Flask&lt;/a&gt; blog post, I had to update the blog post as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the &lt;a href="https://github.com/pybites/challenges/blob/community/30/mjhea0/README.md"&gt;README&lt;/a&gt; for full details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;As there is no deadline to these challenges, we will update here when you submit any other cool refactorings ... &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding!&lt;/p&gt;
&lt;p&gt;Stay tuned for our next challenge tomorrow ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="refactoring"></category><category term="code review"></category><category term="testing"></category><category term="bestpractices"></category><category term="cleancode"></category><category term="bettercodehub"></category><category term="Sig"></category><category term="Flask"></category><category term="authentication"></category><category term="my first script"></category></entry><entry><title>Twitter digest 2017 week 31</title><link href="https://pybit.es/twitter_digest_201731.html" rel="alternate"></link><published>2017-08-06T19:30:00+02:00</published><updated>2017-08-06T19:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-06:/twitter_digest_201731.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here's a tech project for this weekend. Improve your &lt;a href="https://twitter.com/search/#Docker" target="_blank"&gt;#Docker&lt;/a&gt; developer skills with the PWD digital classroom‚Ä¶ &lt;a href="https://t.co/FZ4DQUSRPE" title="https://t.co/FZ4DQUSRPE" target="_blank"&gt;https://t.co/FZ4DQUSRPE&lt;/a&gt;&lt;/p&gt;‚Äî Docker (@Docker) &lt;a href="https://twitter.com/Docker/status/893834241204666368" data-datetime="2017-08-05T14:01:04+00:00"&gt;August 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I've been playing with Selenium and the new headless mode in Chrome. I like it! &lt;a href="https://t.co/xmEz89Z9js" title="https://t.co/xmEz89Z9js" target="_blank"&gt;https://t.co/xmEz89Z9js&lt;/a&gt;&lt;/p&gt;‚Äî Miguel Grinberg (@miguelgrinberg) &lt;a href="https://twitter.com/miguelgrinberg/status/892441877932265473" data-datetime="2017-08-01T17:48:19+00:00"&gt;August 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;You can include comments inside a regex with (?# ... ). For example, /the\s+(?# One or more spaces)end&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/892399915304972289" data-datetime="2017-08-01T15:01:34+00:00"&gt;August 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build SMS to email forwarding without a server using Node.js, &lt;a href="https://twitter.com/@SendGrid" target="_blank"&gt;@SendGrid&lt;/a&gt; and Twilio Functions.‚Ä¶ &lt;a href="https://t.co/xU8YdvBoB8" title="https://t.co/xU8YdvBoB8" target="_blank"&gt;https://t.co/xU8YdvBoB8&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/892153658208604161" data-datetime="2017-07-31T22:43:02+00:00"&gt;July 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;df -lk | awk '/^\//{ SUM += $3 } END { print SUM/2**20 " GiB" }' # Print out the total local disk space you are using. Thanks &lt;a href="https://twitter.com/@inc002" target="_blank"&gt;@inc002&lt;/a&gt;&lt;/p&gt;‚Äî Command Line Magic (@climagic) &lt;a href="https://twitter.com/climagic/status/893497473293062145" data-datetime="2017-08-04T15:42:52+00:00"&gt;August 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Have we mentioned lately that our AV team is magnificent? The &lt;a href="https://twitter.com/search/#pyconau" target="_blank"&gt;#pyconau&lt;/a&gt; AV team is magnificent. &lt;a href="https://t.co/iSQemUQm9Q" title="https://t.co/iSQemUQm9Q" target="_blank"&gt;https://t.co/iSQemUQm9Q&lt;/a&gt;&lt;/p&gt;‚Äî PyCon Australia (@pyconau) &lt;a href="https://twitter.com/pyconau/status/893629827340685312" data-datetime="2017-08-05T00:28:48+00:00"&gt;August 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why Astronomers Love Python And Why You Should Too &lt;a href="https://t.co/X3OktT1U2U" title="https://t.co/X3OktT1U2U" target="_blank"&gt;https://t.co/X3OktT1U2U&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/893141186621222913" data-datetime="2017-08-03T16:07:07+00:00"&gt;August 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@towo:" target="_blank"&gt;@towo:&lt;/a&gt; git debugging flowchart &lt;a href="http://t.co/WFGPDefaKy" title="http://t.co/WFGPDefaKy" target="_blank"&gt;http://t.co/WFGPDefaKy&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/893523225006702592" data-datetime="2017-08-04T17:25:12+00:00"&gt;August 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Your friendly monthly reminder to avoid apply in Pandas &amp;lt; &lt;a href="https://t.co/3BuGfbG4Vl" title="https://t.co/3BuGfbG4Vl" target="_blank"&gt;https://t.co/3BuGfbG4Vl&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/893318300968509440" data-datetime="2017-08-04T03:50:54+00:00"&gt;August 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;%%HTML magic renders &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; notebook cell as HTML, so you can embed an image or other media:‚Ä¶ &lt;a href="https://t.co/CwB5vcYUo1" title="https://t.co/CwB5vcYUo1" target="_blank"&gt;https://t.co/CwB5vcYUo1&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/892671812160684032" data-datetime="2017-08-02T09:01:59+00:00"&gt;August 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to write a container daemon in &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; My &lt;a href="https://twitter.com/search/#pyconau" target="_blank"&gt;#pyconau&lt;/a&gt; talk &lt;a href="https://t.co/VtG4ZaMIjC" title="https://t.co/VtG4ZaMIjC" target="_blank"&gt;https://t.co/VtG4ZaMIjC&lt;/a&gt; &lt;a href="https://twitter.com/search/#docker" target="_blank"&gt;#docker&lt;/a&gt; &lt;a href="https://twitter.com/search/#potatohead" target="_blank"&gt;#potatohead&lt;/a&gt; &lt;a href="https://t.co/sGoGGCTtpM" title="https://t.co/sGoGGCTtpM" target="_blank"&gt;https://t.co/sGoGGCTtpM&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/894007303392776192" data-datetime="2017-08-06T01:28:45+00:00"&gt;August 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A tool for code quality I've been working on the past 1,5 years (Better Code Hub) has been added to the GitHub Mark‚Ä¶ &lt;a href="https://t.co/c09daKsTEJ" title="https://t.co/c09daKsTEJ" target="_blank"&gt;https://t.co/c09daKsTEJ&lt;/a&gt;&lt;/p&gt;‚Äî Rob van der Leek (@robvanderleek) &lt;a href="https://twitter.com/robvanderleek/status/892683617427750912" data-datetime="2017-08-02T09:48:54+00:00"&gt;August 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;animated gif of copy-pasting your way into a comprehension &lt;a href="https://twitter.com/search/#pyconau" target="_blank"&gt;#pyconau&lt;/a&gt; &lt;a href="https://t.co/ljVsqWMNYH" title="https://t.co/ljVsqWMNYH" target="_blank"&gt;https://t.co/ljVsqWMNYH&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/893653384355397632" data-datetime="2017-08-05T02:02:24+00:00"&gt;August 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An overview of Nginx as a web server and reverse proxy for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; web apps &lt;a href="https://t.co/60VeeFZXoq" title="https://t.co/60VeeFZXoq" target="_blank"&gt;https://t.co/60VeeFZXoq&lt;/a&gt; &lt;a href="https://t.co/9NA9GN2TBy" title="https://t.co/9NA9GN2TBy" target="_blank"&gt;https://t.co/9NA9GN2TBy&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/893884827891642373" data-datetime="2017-08-05T17:22:05+00:00"&gt;August 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;For us GoT Fans out there! Best montage ever!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sam cleaning the Citadel (GoT) for 10 hours with Python &lt;a href="https://t.co/6xI8FwtXOw" title="https://t.co/6xI8FwtXOw" target="_blank"&gt;https://t.co/6xI8FwtXOw&lt;/a&gt; &lt;a href="https://twitter.com/search/#video" target="_blank"&gt;#video&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/893171976642023425" data-datetime="2017-08-03T18:09:28+00:00"&gt;August 03, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="coding"></category><category term="Docker"></category><category term="Selenium"></category><category term="Chrome"></category><category term="regex"></category><category term="NodeJS"></category><category term="Twilio"></category><category term="Sendgrid"></category><category term="CLI"></category><category term="PyConAU"></category><category term="astronomy"></category><category term="git"></category><category term="pandas"></category><category term="Jupyter"></category><category term="comprehension"></category><category term="nginx"></category><category term="video"></category><category term="Game of Thrones"></category></entry><entry><title>A Step by Step Guide to Implementing and Deploying Two-Phase Registration in Django</title><link href="https://pybit.es/django-registration-app.html" rel="alternate"></link><published>2017-08-05T01:00:00+02:00</published><updated>2017-08-05T01:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-08-05:/django-registration-app.html</id><summary type="html">&lt;p&gt;Two-phase registration, consisting of initial signup followed by a confirmation/activation email is a common piece for any web app. In this article I will guide you through setting this up in Django using the &lt;a href="https://django-registration.readthedocs.io/en/2.2/"&gt;Django-registration plugin&lt;/a&gt; and Gmail for messaging. Then I show you how to deploy the app to Heroku.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two-phase registration, consisting of initial signup followed by a confirmation/activation email is a common piece for any web app. In this article I will guide you through setting this up in Django using the &lt;a href="https://django-registration.readthedocs.io/en/2.2/"&gt;Django-registration plugin&lt;/a&gt; and Gmail for messaging. Then I show you how to deploy the app to Heroku.&lt;/p&gt;
&lt;p&gt;I built the first iteration for &lt;a href="https://pybit.es/codechallenge29_review.html"&gt;Code Challenge 29 - Create a Simple Django App&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I created a Django registration / login system using django-registration and gmail. ... What's cool about it is that I can re-use this code for other new projects where this functionality is often required. I will do an article this week detailing some of the challenges I had to get this working ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, here we go ...&lt;/p&gt;
&lt;h2&gt;The plan&lt;/h2&gt;
&lt;p&gt;This serves as the tutorial I wanted to have when I got started. You will probably save time too, because I ran into various issues which I ironed out in the steps below.&lt;/p&gt;
&lt;p&gt;An earlier iteration is &lt;a href="https://github.com/pybites/django-registration"&gt;on Github&lt;/a&gt;, but I will build it again from scratch so we can see it step-by-step and Julian can test it out for himself (thanks buddy!)&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;First we create a virtual env and install Django, &lt;a href="https://django-registration.readthedocs.io/en/2.2/index.html"&gt;Django-registration&lt;/a&gt; and the other plugins we will use. If you want to use SQLite you can leave psycopg2 out. If you want to follow along now is a good time to fire up your terminal!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir registration &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
$ python3 -m venv venv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip install django django-registration dj-database-url gunicorn psycopg2
...

&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip freeze
dj-database-url&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.4.2
&lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11.4
django-registration&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2
&lt;span class="nv"&gt;gunicorn&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;.7.1
&lt;span class="nv"&gt;psycopg2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.3
&lt;span class="nv"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's create our Django project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ django-admin.py startproject register
# (cannot use dir name &amp;#39;registration&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I talk about project toplevel or root dir I mean this outer register directory. It's where &lt;code&gt;manage.py&lt;/code&gt; lives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ ls register/
manage.py    register
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If I talk about the main app I mean this directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ ls register/register/
__init__.py    settings.py    urls.py        wsgi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's where Django's config or &lt;code&gt;settings.py&lt;/code&gt; lives and it's the main app we use to set up main view, urls and template. There won't be much coding though because Django-registration abstracts a lot away for us. Most effort will go into setup and configuration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the way, the Django directory / file structure can be quite confusing when you are getting started. Maybe good to wrap this in another short article and/or touch upon it when we'll look at Cookiecutter Django ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Sanity check&lt;/h2&gt;
&lt;p&gt;You should be able to run Django now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; register
$ python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Navigate to &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt; - you should see Django's &lt;em&gt;It worked!&lt;/em&gt; page. It also says &lt;em&gt;You have 13 unapplied migration(s).&lt;/em&gt; - we get to that later in the Migration section.&lt;/p&gt;
&lt;p&gt;If you want to use Postgres like me now is a good time to create the database. If you want to use SQLite you can skip this step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ psql
bbelderb=# create database notifications;
bbelderb=# \c notifications
You are now connected to database &amp;quot;notifications&amp;quot; as user &amp;quot;bbelderb&amp;quot;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We call it notifications because &lt;/p&gt;
&lt;h2&gt;Messaging&lt;/h2&gt;
&lt;p&gt;I will use Gmail here but you could also use a service like Heroku's &lt;a href="https://devcenter.heroku.com/articles/sendgrid"&gt;SendGrid&lt;/a&gt;. This is probably better in the long run because to have Gmail working on Heroku you have to relinquish security:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;you have to enable &lt;a href="https://www.google.com/settings/security/lesssecureapps"&gt;this setting&lt;/a&gt; to allow emailing from someplace other than gmail;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;that worked for localhost, for Heroku though I had to &lt;a href="http://www.google.com/accounts/DisplayUnlockCaptcha"&gt;DisplayUnlockCaptcha&lt;/a&gt; when I started mailing (testing first signup). See &lt;a href="https://stackoverflow.com/questions/18124878/netsmtpauthenticationerror-when-sending-email-from-rails-app-on-staging-envir"&gt;here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I recommend you create a separate gmail account if you go this route.&lt;/p&gt;
&lt;h2&gt;Environment variables&lt;/h2&gt;
&lt;p&gt;We need some env variables. I set those in this virtual env so they are bound to this app (Zen: &lt;em&gt;namespaces are a honking great idea&lt;/em&gt;, right?):&lt;/p&gt;
&lt;p&gt;At the end of &lt;em&gt;venv/bin/activate&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export SECRET_KEY=some_large_random_string  -&amp;gt; get it from Django&amp;#39;s settings.py or generate one yourself
export DJANGO_ENV=&amp;#39;local&amp;#39;
export GMAIL_SMTP_USER=&amp;#39;new_gmail_account&amp;#39;
export GMAIL_SMTP_PASSWORD=&amp;#39;gmail_pw_of_this_account&amp;#39;
export DB_NAME=&amp;#39;notifications&amp;#39;
export DB_USER=&amp;#39;pbcl&amp;#39;
export DB_PW=&amp;#39;your_password&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to use SQLite you can omit the &lt;code&gt;DB_*&lt;/code&gt; variables.&lt;/p&gt;
&lt;p&gt;Make sure you re-activate your venv so these variables become active:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ deactivate
$ source venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Last command is convenient to have in your .bashrc (assuming you always have your virtual env in your project folder naming it &lt;em&gt;venv&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias ae=&amp;#39;source venv/bin/activate&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configuring Django&lt;/h2&gt;
&lt;p&gt;Let's set up Django's configuration that lives at &lt;code&gt;register/register/settings.py&lt;/code&gt; (from venv dir). Some of this is early encapsulation and required/recommended config for later deployment to Heroku. Please bare with me.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Locate the &lt;code&gt;SECRET_KEY&lt;/code&gt; variable, delete it and add your own, also let Django know in what environment we are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SECRET_KEY = os.getenv(&amp;#39;SECRET_KEY&amp;#39;)
DJANGO_ENV = os.getenv(&amp;#39;DJANGO_ENV&amp;#39;, &amp;#39;production&amp;#39;).lower()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now using the newly Django env variable let's delete the &lt;code&gt;DEBUG&lt;/code&gt; variable and set it based on env with the snippet below. We will use Heroku later to deploy the app so let's add that to &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; (and limit the catch-all &lt;code&gt;*&lt;/code&gt; to local env only):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if DJANGO_ENV == &amp;#39;local&amp;#39;:
    DEBUG = True
    ALLOWED_HOSTS = [&amp;#39;*&amp;#39;]
else:
    DEBUG = False
    ALLOWED_HOSTS = [&amp;#39;.herokuapp.com&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Making these two changes addresses the two 'SECURITY WARNING' comments in &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the django-registration no additions are needed to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; and &lt;code&gt;MIDDLEWARE&lt;/code&gt;, that all works out-of-the-box with Django-registration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Templates directories: update the DIRS list in &lt;code&gt;TEMPLATES&lt;/code&gt; so Django knows where to look for templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
TEMPLATES = [
    ...
    &amp;#39;DIRS&amp;#39;: [
        os.path.join(BASE_DIR, &amp;#39;templates&amp;#39;),
        os.path.join(BASE_DIR, &amp;#39;register&amp;#39;, &amp;#39;templates&amp;#39;),
  ],
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will create the actual directories on the file system when we're done with &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database config: we load in the env variables for our local use. For production (Heroku) we use &lt;code&gt;dj_database_url&lt;/code&gt;. This is for A. Postgres, for SQLite use B.:&lt;/p&gt;
&lt;p&gt;A. Postgres&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB_USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB_PW&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DB_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;DJANGO_ENV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dj_database_url&lt;/span&gt;
    &lt;span class="n"&gt;db_from_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dj_database_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn_max_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_from_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;B. SQLite = default setting changing the name of the DB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATABASES = {
    &amp;#39;default&amp;#39;: {
        &amp;#39;ENGINE&amp;#39;: &amp;#39;django.db.backends.sqlite3&amp;#39;,
        &amp;#39;NAME&amp;#39;: os.path.join(BASE_DIR, &amp;#39;notifications.sqlite3&amp;#39;),
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static files are still confusing at times for me but this is &lt;a href="https://devcenter.heroku.com/articles/django-assets"&gt;the recommended setting for Heroku&lt;/a&gt; that worked for me. Put it at the end of &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATIC_ROOT = os.path.join(PROJECT_ROOT, &amp;#39;staticfiles&amp;#39;)
STATIC_URL = &amp;#39;/static/&amp;#39;

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, &amp;#39;static&amp;#39;),
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Three more settings to go ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the Django-registration setting to limit activation of accounts from the validation email to 7 days:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ACCOUNT_ACTIVATION_DAYS = 7
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the email config, assuming you're using Gmail like me:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EMAIL_HOST = &amp;#39;smtp.gmail.com&amp;#39;
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv(&amp;#39;GMAIL_SMTP_USER&amp;#39;)
EMAIL_HOST_PASSWORD = os.getenv(&amp;#39;GMAIL_SMTP_PASSWORD&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note we need port 587 for gmail, see &lt;a href="https://stackoverflow.com/questions/2894802/send-activate-email-with-django-registration"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And lastly with &lt;code&gt;DEBUG&lt;/code&gt; set to False in Production (Heroku), if anything blows up we only see a useless 500 error. I &lt;a href="https://chrxr.com/django-error-logging-configuration-heroku/"&gt;found this setting&lt;/a&gt; which sends errors to Heroku's log. You can then easily debug anything pulling the remote logs with Heroku CLI's &lt;code&gt;heroku log&lt;/code&gt; command. Add this snippet to &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LOGGING = {
    &amp;#39;version&amp;#39;: 1,
    &amp;#39;disable_existing_loggers&amp;#39;: False,
    &amp;#39;handlers&amp;#39;: {
        &amp;#39;console&amp;#39;: {
            &amp;#39;class&amp;#39;: &amp;#39;logging.StreamHandler&amp;#39;,
        },
    },
    &amp;#39;loggers&amp;#39;: {
        &amp;#39;django&amp;#39;: {
            &amp;#39;handlers&amp;#39;: [&amp;#39;console&amp;#39;],
            &amp;#39;level&amp;#39;: os.getenv(&amp;#39;DJANGO_LOG_LEVEL&amp;#39;, &amp;#39;ERROR&amp;#39;),
        },
    },
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you're lost at this point the complete settings file is &lt;a href="https://github.com/pybites/django-registration/blob/master/register/settings.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember that we updated &lt;code&gt;TEMPLATES&lt;/code&gt; settings under 4.? Let's create these directories. They will hold static and template files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†just to make sure:
(venv) $ pwd
./registration/register

(venv) $ mkdir templates
(venv) $ mkdir register/templates
(venv) $ mkdir register/static
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am making two templates directories to use template inheritance: the upper templates dir will host a base.html we will extend from and the templates associated with the Django-registration plugin we will download in a bit.&lt;/p&gt;
&lt;h2&gt;DB migration&lt;/h2&gt;
&lt;p&gt;As we saw before when we started Django's webserver the data was not yet loaded in. Let's do that now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate
Operations to perform:
    Apply all migrations: admin, auth, contenttypes, sessions
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's also create a superuser to be able to manage users that sign up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py createsuperuser
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Base template and static files&lt;/h2&gt;
&lt;p&gt;Create a &lt;code&gt;base.html&lt;/code&gt; inside ./registration/register/templates/ with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;PyBites Django-registration Tutorial&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/pure/1.0.0/pure-min.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://fonts.googleapis.com/css?family=Open+Sans&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;style.css&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;user.is_authenticated&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                Hey &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.username&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;, &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth_logout&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;?next=/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;logout&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                Hello guest,  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth_login&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;login (register)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to add your own CSS styles on top of Purecss create a &lt;code&gt;style.css&lt;/code&gt; inside the register/static/ folder.&lt;/p&gt;
&lt;p&gt;Here is a bare minimum to use Google fonts and align the login div:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nt"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;register&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;css&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Open Sans&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;login&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Django-registration templates&lt;/h2&gt;
&lt;p&gt;Unfortunately the required templates are not included in Django-registration when pip installing it. What I ended up doing was grabbing them from &lt;a href="https://github.com/macdhuibh/django-registration-templates"&gt;django-registration-templates&lt;/a&gt;. However I made some wording and styling (&lt;a href="https://purecss.io"&gt;purecss&lt;/a&gt;) changes to them and one template - &lt;em&gt;password_reset_email.txt&lt;/em&gt; - was missing from that set, which caused the password reset page to crash. So grab my copy instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# you should be here:
(venv) $ pwd
./registration/register

# grab them from the GH repo in case I make further changes:
(venv) $ git clone https://github.com/pybites/django-registration ~/Downloads/registration-templates
...

(venv) $ cp -r  ~/Downloads/registration-templates/templates/registration templates/
(venv) $ ls templates/
base.html    registration
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Write some Django code&lt;/h2&gt;
&lt;p&gt;OK with all this setup in place (sorry) let's actually write some code. The good news is that Django-registration requires very little of it.&lt;/p&gt;
&lt;h2&gt;URL routing&lt;/h2&gt;
&lt;p&gt;cd into the main app (./registration/register/register):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ cd register/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace the content of &lt;code&gt;urls.py&lt;/code&gt; with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.static&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^accounts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;registration.backends.hmac.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^static/(?P&amp;lt;path&amp;gt;.*)$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;document_root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The accounts regex entry is required for the Django-registration plugin (we're using the recommended &lt;a href="https://django-registration.readthedocs.io/en/2.2/hmac.html#hmac-workflow"&gt;two-phase or hmac-workflow&lt;/a&gt;). The admin route is to manage the signed up users via Django's builtin admin.&lt;/p&gt;
&lt;p&gt;I needed the last &lt;code&gt;if not&lt;/code&gt; block to get static files working on Heroku, see &lt;a href="https://docs.djangoproject.com/en/1.11/ref/views/#django.views.static.serve"&gt;here&lt;/a&gt; and &lt;a href="https://matthewphiong.com/managing-django-static-files-on-heroku"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next time I probably consider using a service like &lt;a href="https://devcenter.heroku.com/articles/django-assets#whitenoise"&gt;Whitenoise&lt;/a&gt; which should make this easier.&lt;/p&gt;
&lt;h3&gt;Homepage&lt;/h3&gt;
&lt;p&gt;Let's add a simple index view to greet the guest or logged in user and provide a link to sign up. Still in the register/ main app, create a file called &lt;code&gt;views.py&lt;/code&gt; and add the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It points to an HTML template called &lt;code&gt;index.html&lt;/code&gt;. Let's create this next. Still inside the inner &lt;em&gt;register&lt;/em&gt; app folder, create this file inside register/templates/:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;user.is_authenticated&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Dear &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.username&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;, glad to have you here!&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You will receive an email for each new PyBites Code Challenge.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;We will tweak this page to include more notification settings ...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You can &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;registration_register&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;sign up here&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; to get a notification email for each new challenge&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we extend the base.html template in the root templates folder. The &lt;code&gt;TEMPLATES&lt;/code&gt; -&amp;gt; &lt;code&gt;DIR&lt;/code&gt; list we updated earlier in &lt;code&gt;settings.py&lt;/code&gt; makes this magically work. We check if the user is authenticated and message/link accordingly.&lt;/p&gt;
&lt;p&gt;Let's collect static files into &lt;code&gt;STATIC_ROOT&lt;/code&gt; using &lt;a href="https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/#collectstatic"&gt;collectstatic&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ cd ..
(venv) $ python manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And run the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="runserver app index template" src="https://pybit.es/images/django-reg-helloworld.png"&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;em&gt;sign up here&lt;/em&gt; link, you should see a sign up form. One thing that does not seem right is the validation messages being visible all the time. I will fix and post here ...&lt;/p&gt;
&lt;p&gt;&lt;img alt="sign up form" src="https://pybit.es/images/django-reg-reg-form.png"&gt;&lt;/p&gt;
&lt;p&gt;Enter your username, email and password and click Submit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="register, email will be send" src="https://pybit.es/images/django-reg-reg-link-follow.png"&gt;&lt;/p&gt;
&lt;p&gt;If all is setup correctly (env vars, gmail prep) You should get an email:&lt;/p&gt;
&lt;p&gt;&lt;img alt="confirmation link" src="https://pybit.es/images/django-reg-email.png"&gt;&lt;/p&gt;
&lt;p&gt;Click on the link and your account should be activated:&lt;/p&gt;
&lt;p&gt;&lt;img alt="runserver app index template" src="https://pybit.es/images/django-reg-reg-link-follow.png"&gt;&lt;/p&gt;
&lt;p&gt;You can now login and you should see the logged in page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="registed and activated account" src="https://pybit.es/images/django-reg-registered-and-activated.png"&gt;&lt;/p&gt;
&lt;p&gt;TODO: have the user be logged automatically upon activation of account.&lt;/p&gt;
&lt;h2&gt;Commit to version control&lt;/h2&gt;
&lt;p&gt;Normally I would be make granular commits as we go but I wanted to focus on Django.&lt;/p&gt;
&lt;p&gt;First of all init a repo - inside the register/ root folder (where &lt;code&gt;manage.py&lt;/code&gt; lives):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure we don't commit irrelevant files by adding a &lt;code&gt;.gitignore&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ cat .gitignore
**pyc
**swp
**__pycache__
register/staticfiles/
*sqlite3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(last line is if you use a SQLite DB)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ git add .
(venv) $ git commit -m &amp;quot;init commit&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deploy to Heroku&lt;/h2&gt;
&lt;p&gt;Now let's get our shiny app to the cloud. After all we did a lot of config in advance so it should be pretty easy now:&lt;/p&gt;
&lt;h3&gt;Heroku login&lt;/h3&gt;
&lt;p&gt;Install &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt; and login.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ heroku login
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you are in register/ where &lt;code&gt;manage.py&lt;/code&gt; lives. This is important because I had issues where I had Heroku look for &lt;code&gt;wsgi.py&lt;/code&gt; under register/register and it would not work. So make sure you get this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ ls register/wsgi.py
register/wsgi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following required files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ echo &amp;quot;python-3.6.2&amp;quot; &amp;gt; runtime.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice, Heroku uses Python 3.6!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ echo  &amp;quot;release: python manage.py migrate&amp;quot; &amp;gt; Procfile
(venv) $ echo &amp;quot;web: gunicorn register.wsgi:application --log-file -&amp;quot; &amp;gt;&amp;gt; Procfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line is not required but adds migration as extra step to each Heroku build, useful.&lt;/p&gt;
&lt;p&gt;And finally let Heroku know what dependencies we need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Commit these 3 files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ git add .
(venv) $ git commit -m &amp;quot;added heroku config files&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can test the site locally. If doing so store your env variables in &lt;code&gt;.env&lt;/code&gt; (and make sure to exclude that file from version control!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ heroku local web
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Crreate the app with a unique enough name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ heroku apps:create bobregistration
Creating ‚¨¢ bobregistration... done
https://bobregistration.herokuapp.com/ | https://git.heroku.com/bobregistration.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The git remote should be added automatically, if not run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ git remote add heroku https://git.heroku.com/bobregistration.git

(venv) $ git remote -v
heroku    https://git.heroku.com/bobregistration.git (fetch)
heroku    https://git.heroku.com/bobregistration.git (push)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to use a Postgres DB provision it now, see &lt;a href="https://devcenter.heroku.com/articles/heroku-postgresql"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ heroku addons:create heroku-postgresql:hobby-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Heroku automatically sets the &lt;code&gt;DATABASE_URL&lt;/code&gt; env variable for you. The &lt;code&gt;dj_database_url&lt;/code&gt; plugin we pip installed and configured in &lt;code&gt;settings.py&lt;/code&gt; takes care of the rest. This makes the &lt;code&gt;DB_ *&lt;/code&gt; variables only for local use. You can see your Heroku databases &lt;a href="https://data.heroku.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally let's set the other env variables via Heroku CLI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ heroku config:set SECRET_KEY=&amp;#39;some_large_random_string&amp;#39;
(venv) $ heroku config:set DJANGO_ENV=&amp;#39;production&amp;#39;
(venv) $ heroku config:set GMAIL_SMTP_USER=&amp;#39;new_gmail_account&amp;#39;
(venv) $ heroku config:set GMAIL_SMTP_PASSWORD=&amp;#39;gmail_pw_of_this_account&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With all this in place deploying to Heroku is very easy: just &lt;code&gt;git push&lt;/code&gt; - awesome!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Counting&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Writing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;16.95&lt;/span&gt; &lt;span class="n"&gt;KiB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="nl"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.6.2&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Successfully&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt; &lt;span class="n"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.11.4&lt;/span&gt; &lt;span class="n"&gt;dj&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.4.2&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;registration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.2&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;19.7.1&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.7.3&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2017.2&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;collectstatic&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;noinput&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;copied&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build_1f0fe577269a9c44ab8bdaa75f241a79&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;register&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;staticfiles&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Discovering&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Procfile&lt;/span&gt; &lt;span class="n"&gt;declares&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;50.6&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Launching&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;!&lt;/span&gt;     &lt;span class="n"&gt;Release&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="nl"&gt;declared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="n"&gt;succeeds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Released&lt;/span&gt; &lt;span class="n"&gt;v9&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//bobregistration.herokuapp.com/ deployed to Heroku&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verifying&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operations&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nl"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;Apply&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nl"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contenttypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sessions&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="nl"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Waiting&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/bobregistration.git&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And voil√†: the app now runs in the cloud. I will delete it after this tutorial, check out &lt;a href="http://pybites-notifier.herokuapp.com/"&gt;this version&lt;/a&gt; if you want to try it or subscribe to weekly PyBites Code Challenge notifications. Or better yet: host your own!&lt;/p&gt;
&lt;p&gt;To add the superuser to the remote DB you can use Heroku's shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ heroku run python manage.py createsuperuser
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;In Closing&lt;/h2&gt;
&lt;p&gt;Wow, this was a lot to absorb but I wanted to get it out there. Although Django-registration makes it very easy to get two-phase registration going, getting to an end-to-end solution required some effort. Sorting out registration and authentication though is a major part of any modern app so I am glad we got this one down. It's also easy to copy this project and build the other pieces around it. &lt;/p&gt;
&lt;p&gt;I hope you found this tutorial useful. If you have any feedback or inputs use the comments below.&lt;/p&gt;
&lt;p&gt;Julian (aka Flask addict), you have to give it to Django (plugins) that this is pretty slick stuff, no? I hope you learned a bite of Django too.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Django"></category><category term="100DaysOfDjango"></category><category term="Django-registration"></category><category term="Gmail"></category><category term="Postgres"></category><category term="SQLite"></category><category term="registration"></category><category term="tutorial"></category><category term="guide"></category><category term="virtualenv"></category><category term="learning"></category></entry><entry><title>Code Challenge 30 - The Art of Refactoring: Improve Your Code</title><link href="https://pybit.es/codechallenge30.html" rel="alternate"></link><published>2017-08-01T09:00:00+02:00</published><updated>2017-08-01T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-08-01:/codechallenge30.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding. Wow challenge 30 already! This week we let you hone your refactoring skills. Learn, code, PR submit (don't be shy) and above all have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding. Wow challenge 30 already! This week we let you hone your refactoring skills. Learn, code, PR submit (don't be shy) and above all have fun!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;The challenge is pretty simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Go through you code and identify something you think can be improved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write some tests to verify it does the right thing. This could be with Pytest, unittest or &lt;a href="https://github.com/pybites/blog_code/commit/ce498d71e0316b2ecf7c4c9884fb988ba3a32c5d"&gt;just adding a simple assert&lt;/a&gt;, just have a safeguard in place before starting to touch the code. Version control is your other friend here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate over various small improvements, running the tests after each step to verify nothing breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When done submit a PR for our weekly review - this week we will be extra picky on PEP8 compliance! ;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; somebody asked for scripts to refactor. Excellent point. As refactoring is such an important skill we will do a part II sometime soon where we will give you a couple of PyBites scripts to refactor!&lt;/p&gt;
&lt;h2&gt;Need help?&lt;/h2&gt;
&lt;p&gt;Here are some resources you could use:&lt;/p&gt;
&lt;h3&gt;PyBites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pybit.es/refactoring.html"&gt;The Importance of Refactoring Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/python-packaging.html"&gt;From Script to Project - Packaging Your Code in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/challenge_pilot_codereview.html"&gt;Code Challenge Pilot - code review&lt;/a&gt; (our code challenges actually started out with this refactoring post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/py-mistakes.html"&gt;Learning from Python mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/pep8.html"&gt;5 min guide to PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/error_handling.html"&gt;Errors should never pass silently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/beautiful-python.html"&gt;Beautiful, idiomatic Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Worth checking out!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A nice article we caught in last week's Import Python newsletter: &lt;a href="http://blog.thedigitalcatonline.com/blog/2017/07/21/refactoring-with-test-in-python-a-practical-example/#.WX5Ptq2B3eT"&gt;Refactoring with tests in Python: a practical example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2016 Brett Slatkin talk: &lt;a href="https://youtu.be/D_6ybDcU5gc"&gt;Refactoring Python: Why and how to restructure your code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dive Into Python 3 - &lt;a href="http://www.diveintopython3.net/refactoring.html"&gt;Chapter 10 - Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Martin Fowler's &lt;a href="http://www.amazon.com/dp/0201485672/?tag=pyb0f-20"&gt;Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Uncle Bob's &lt;a href="http://www.amazon.com/dp/0132350882/?tag=pyb0f-20"&gt;Clean Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sig's &lt;a href="http://www.amazon.com/dp/1491953527/?tag=pyb0f-20"&gt;Building Maintainable Software&lt;/a&gt; (Bob's summary/ review &lt;a href="https://bobbelderbos.com/2016/03/building-maintainable-software/"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A classic: &lt;a href="http://www.amazon.com/dp/0201633612/?tag=pyb0f-20"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sig's &lt;a href="https://bettercodehub.com"&gt;Better Code Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python-rope/rope"&gt;rope, a python refactoring library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt; or &lt;a href="http://pybit.es/pages/about.html"&gt;reach out&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="refactoring"></category><category term="code review"></category><category term="testing"></category><category term="packaging"></category><category term="bestpractices"></category><category term="pythonic"></category><category term="pep8"></category><category term="cleancode"></category></entry><entry><title>Code Challenge 29 - Create a Simple Django App - Review</title><link href="https://pybit.es/codechallenge29_review.html" rel="alternate"></link><published>2017-07-31T12:00:00+02:00</published><updated>2017-07-31T12:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-31:/codechallenge29_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge29.html"&gt;Create a Simple Django App&lt;/a&gt; code challenge. The Django fever continues ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge29.html"&gt;Create a Simple Django App&lt;/a&gt; code challenge. The Django fever continues ...&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;Submissions are merged to &lt;a href="https://github.com/pybites/challenges/tree/community/29"&gt;this dir&lt;/a&gt; on our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;community branch&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; created &lt;em&gt;Django Registration App&lt;/em&gt; - from the PR:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I created a Django registration / login system using django-registration and gmail. I used purecss and django-crispy-forms for styling. I deployed it &lt;a href="http://pybites-notifier.herokuapp.com/"&gt;to Heroku&lt;/a&gt;. What's cool about it is that I can re-use this code for other new projects where this functionality is often required. I will do an article this week detailing some of the challenges I had to get this working ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So you can now be notified by email of each new challenge &lt;a href="http://pybites-notifier.herokuapp.com/"&gt;here&lt;/a&gt;. Note this is just the subscription management part, the notifier we built for &lt;a href="https://pybit.es/codechallenge27_review.html"&gt;Praw code challenge 27&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/asutosh97"&gt;asutosh97&lt;/a&gt; practiced Django by building the intro tutorial's polls app. Indeed a good way to get started (the Django docs are great!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As there is no deadline to these challenges, we will update here when you submit any other cool Django apps for this challenge ... Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding!&lt;/p&gt;
&lt;h3&gt;Next Challenge&lt;/h3&gt;
&lt;p&gt;A couple of weeks ago Julian wrote &lt;a href="https://pybit.es/refactoring.html"&gt;a nice article on refactoring&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Refactoring is an essential skill in the developer's toolbox. Stay tuned for our new challenge tomorrow where we have you go find ugly/dark/wtf parts of your code to turn it into beautiful Python. See you tomorrow!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category><category term="Heroku"></category><category term="registration"></category><category term="postgres"></category><category term="deployment"></category><category term="purecss"></category><category term="crispy forms"></category><category term="notifications"></category></entry><entry><title>Twitter digest 2017 week 30</title><link href="https://pybit.es/twitter_digest_201730.html" rel="alternate"></link><published>2017-07-30T15:02:00+02:00</published><updated>2017-07-30T15:02:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-30:/twitter_digest_201730.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;QuTiP : Quantum Toolbox in Python &lt;a href="https://t.co/03dA8C408P" title="https://t.co/03dA8C408P" target="_blank"&gt;https://t.co/03dA8C408P&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/891029060599631872" data-datetime="2017-07-28T20:14:17+00:00"&gt;July 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python 3.5.4rc1 and Python 3.4.7rc1 are now available for download: &lt;a href="https://t.co/kuyWMvXY6N" title="https://t.co/kuyWMvXY6N" target="_blank"&gt;https://t.co/kuyWMvXY6N&lt;/a&gt;&lt;/p&gt;‚Äî Python Software (@ThePSF) &lt;a href="https://twitter.com/ThePSF/status/891418063412834307" data-datetime="2017-07-29T22:00:02+00:00"&gt;July 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Facial Recognition API for Python and the Command Line &amp;gt;&amp;gt; &lt;a href="https://t.co/q7MBUKb19v" title="https://t.co/q7MBUKb19v" target="_blank"&gt;https://t.co/q7MBUKb19v&lt;/a&gt; by &lt;a href="https://twitter.com/@ageitgey" target="_blank"&gt;@ageitgey&lt;/a&gt; &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/891342727060770816" data-datetime="2017-07-29T17:00:41+00:00"&gt;July 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; How to use VIM as a Python IDE &lt;a href="https://t.co/yCkd6JiIyN" title="https://t.co/yCkd6JiIyN" target="_blank"&gt;https://t.co/yCkd6JiIyN&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/891304738247127040" data-datetime="2017-07-29T14:29:43+00:00"&gt;July 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Ready to automate that smart home? Tune into &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; 122: Home Assistant: Pythonic Home Automation‚Ä¶ &lt;a href="https://t.co/JpGfM4VVf6" title="https://t.co/JpGfM4VVf6" target="_blank"&gt;https://t.co/JpGfM4VVf6&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/890455417524035584" data-datetime="2017-07-27T06:14:50+00:00"&gt;July 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thonny ‚Äì A Python IDE for Beginners (This could be a neat IDLE replacement) &lt;a href="https://t.co/jpBjMz8JAG" title="https://t.co/jpBjMz8JAG" target="_blank"&gt;https://t.co/jpBjMz8JAG&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/890765505258192896" data-datetime="2017-07-28T02:47:00+00:00"&gt;July 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Extract links from a webpage &lt;a href="https://t.co/sgxY6dDoKW" title="https://t.co/sgxY6dDoKW" target="_blank"&gt;https://t.co/sgxY6dDoKW&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/891466298802176001" data-datetime="2017-07-30T01:11:42+00:00"&gt;July 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@AmirRachum:" target="_blank"&gt;@AmirRachum:&lt;/a&gt; Python Entry Points Explained - Now with 100% More Snek! &lt;a href="https://t.co/JyMjVFhjL9" title="https://t.co/JyMjVFhjL9" target="_blank"&gt;https://t.co/JyMjVFhjL9&lt;/a&gt;&lt;/p&gt;‚Äî Brian Okken (@brianokken) &lt;a href="https://twitter.com/brianokken/status/890933418644520960" data-datetime="2017-07-28T13:54:14+00:00"&gt;July 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@KirkDBorne:" target="_blank"&gt;@KirkDBorne:&lt;/a&gt; Explore data on Programming Languages popularity / average salary: &lt;a href="https://t.co/EE9ZEw1Ois" title="https://t.co/EE9ZEw1Ois" target="_blank"&gt;https://t.co/EE9ZEw1Ois&lt;/a&gt; &lt;a href="https://twitter.com/search/#SQL" target="_blank"&gt;#SQL&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; + more by &lt;a href="https://twitter.com/@JobsQuer‚Ä¶" target="_blank"&gt;@JobsQuer‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/891329233166901248" data-datetime="2017-07-29T16:07:03+00:00"&gt;July 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;General Tips for Web Scraping with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/NCpuE9Nh1u" title="https://t.co/NCpuE9Nh1u" target="_blank"&gt;https://t.co/NCpuE9Nh1u&lt;/a&gt; &lt;a href="https://t.co/yOgqR68jfi" title="https://t.co/yOgqR68jfi" target="_blank"&gt;https://t.co/yOgqR68jfi&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/890947971566551040" data-datetime="2017-07-28T14:52:04+00:00"&gt;July 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Styling &lt;a href="https://twitter.com/@BokehPlots" target="_blank"&gt;@BokehPlots&lt;/a&gt; visualizations &lt;a href="https://t.co/R07PgQtr5Z" title="https://t.co/R07PgQtr5Z" target="_blank"&gt;https://t.co/R07PgQtr5Z&lt;/a&gt; &lt;a href="https://t.co/bOlq0ttiur" title="https://t.co/bOlq0ttiur" target="_blank"&gt;https://t.co/bOlq0ttiur&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/891245923367604224" data-datetime="2017-07-29T10:36:01+00:00"&gt;July 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;ivy - A minimalist static website generator built in Python. &lt;a href="https://t.co/j1ugi9vYmO" title="https://t.co/j1ugi9vYmO" target="_blank"&gt;https://t.co/j1ugi9vYmO&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/890986865867857920" data-datetime="2017-07-28T17:26:37+00:00"&gt;July 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Write data into csv file: import csv with open("test.csv", "w") as f: wr = csv.writer(f) for line in data: wr.writerow(line)&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/890481887663210496" data-datetime="2017-07-27T08:00:01+00:00"&gt;July 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why 'd = {}' is faster than 'd = dict()' &lt;a href="https://t.co/c0M6VXGdyi" title="https://t.co/c0M6VXGdyi" target="_blank"&gt;https://t.co/c0M6VXGdyi&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/890815894644903940" data-datetime="2017-07-28T06:07:14+00:00"&gt;July 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This adorable fox was created by an 8-year-old on Code Studio. Make your own critter today too! &lt;a href="https://t.co/yc6dcXUqN3" title="https://t.co/yc6dcXUqN3" target="_blank"&gt;https://t.co/yc6dcXUqN3&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/889832607839469570" data-datetime="2017-07-25T13:00:00+00:00"&gt;July 25, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="coding"></category><category term="QuTIP"></category><category term="facial recognition"></category><category term="vim"></category><category term="IDE"></category><category term="Thonny"></category><category term="automation"></category><category term="urllib"></category><category term="packaging"></category><category term="data science"></category><category term="jobs"></category><category term="webscraping"></category><category term="Bokeh"></category><category term="csv"></category></entry><entry><title>PyBites Module of the Week - Pexpect</title><link href="https://pybit.es/pexpect.html" rel="alternate"></link><published>2017-07-27T21:31:00+02:00</published><updated>2017-07-27T21:31:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-07-27:/pexpect.html</id><summary type="html">&lt;p&gt;A brief overview of the pexpect module&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week I discovered the &lt;a href="https://pexpect.readthedocs.io/en/stable/index.html"&gt;Pexpect&lt;/a&gt; module. Where have you been all my life?!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is Pexpect?&lt;/h2&gt;
&lt;p&gt;Pexpect is a cool automation module. Its main function is to automate interactive processes that provide predictable output. Think apps like telnet, ssh, git and so forth.
We automate these by telling pexpect what to expect from the application and then what to send back.&lt;/p&gt;
&lt;p&gt;Pexpect essentially takes your place as a human and starts interacting with the application on your behalf!&lt;/p&gt;
&lt;p&gt;The easiest way to explain this is to show you.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Key Functionality&lt;/h2&gt;
&lt;p&gt;There are two main uses for Pexpect that I‚Äôll touch on in this article: &lt;code&gt;spawn&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;The Spawn Class&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pexpect.spawn()&lt;/code&gt; is used to start your application off. The parameter you pass to it is the command you as a human overlord would type into your OS CLI. Eg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pexpect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="mf"&gt;@192.168.1.1&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using this example, pexpect will kick off an ssh connection the host. We then have to tell pexpect what to &lt;em&gt;expect&lt;/em&gt; back.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pexpect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="mf"&gt;@10.1.1.10&lt;/span&gt;&lt;span class="err"&gt;\‚Äô&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see that I‚Äôm literally telling pexpect what &lt;em&gt;it&lt;/em&gt; should see when it initiates the first ssh command. I want pexpect to log into this box for me so I‚Äôll need it to pass on my password (never hardcode your password into a script!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pexpect.sendline(‚Äòpassword‚Äô)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pexpect has just submitted my password which results in the ssh connection being successful. I then go back and forth over and over until it‚Äôs accomplished the task.&lt;/p&gt;
&lt;p&gt;It‚Äôs quite a manual process and seems a bit ‚Äúhacky‚Äù but it‚Äôs totally cool!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;The Run Function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; function is a little less exciting. It does what its name implies, run‚Äôs a command.&lt;/p&gt;
&lt;p&gt;It‚Äôll return the output of said command (if any).&lt;/p&gt;
&lt;p&gt;It‚Äôs useful for things like kicking off a process or just starting or stopping a service. Pretty much anything that doesn‚Äôt really need the depth of the spawn class. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pexpect&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;dhcp&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Standalone this isn‚Äôt mind blowing given we have &lt;code&gt;os.system&lt;/code&gt; and even crontab but I love having multiple options when writing a script!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;As a one off, I wrote this script to ssh into my home NAS and manually kick off my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/033"&gt;drink water reminder emailer&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pexpect&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pexpect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh user@192.1.1.0‚Äô)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user@10.1.1.10&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;s password:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;# &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd /opt/development/drink_water &amp;amp;&amp;amp; /usr/bin/python3 water_reminder.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;# &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="err"&gt;!‚Äô&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I‚Äôve put some quick &lt;code&gt;sleep&lt;/code&gt;s in just to pause the script to allow time for the previous command to return.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note the inclusion of the shell prompt &lt;code&gt;#&lt;/code&gt; itself. This is actually necessary and indicates the return of the previous command.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While some of these use cases are definitely solvable using other functions and modules I‚Äôm still impressed by the possibilities of Pexpect. It‚Äôs quite flexible given I‚Äôm able to code in the return expectation.&lt;/p&gt;
&lt;p&gt;I could have &lt;code&gt;if&lt;/code&gt; statements to account for different kinds of return values (true or false etc). If the &lt;code&gt;expect&lt;/code&gt; is different to what I‚Äôm‚Ä¶ expecting (ha!), then I‚Äôd re-run the previous command or just exit with a fail. Lot‚Äôs of interesting things to try!&lt;/p&gt;
&lt;p&gt;And yes, I know, a lot of this has already been solved by cron. I love cron so I won‚Äôt argue with you. I will say that not everything is an OS with cron. Start thinking home automation and suddenly Pexpect seems a little more usable!&lt;/p&gt;
&lt;p&gt;Do you use Pexpect for anything cool? Let me know! I‚Äôm thinking this would be good fun to use with my Raspberry Pi!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="code"></category><category term="pybites"></category><category term="pexpect"></category><category term="automation"></category></entry><entry><title>Code Challenge 29 - Create a Simple Django App</title><link href="https://pybit.es/codechallenge29.html" rel="alternate"></link><published>2017-07-25T09:00:00+02:00</published><updated>2017-07-25T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-25:/codechallenge29.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We are 2 weeks into learning Django (&lt;a href="https://pybit.es/pages/projects.html"&gt;our second 100 Days project&lt;/a&gt;) so we thought it's about time to dedicate a code challenge to it. So this week is all about coding (and deploying) a Django app. Have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We are 2 weeks into learning Django (&lt;a href="https://pybit.es/pages/projects.html"&gt;our second 100 Days project&lt;/a&gt;) so we thought it's about time to dedicate a code challenge to it. So this week is all about coding (and deploying) a Django app. Have fun!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;Similar to &lt;a href="https://pybit.es/codechallenge15.html"&gt;our first Flask challenge&lt;/a&gt; we ask you to build a simple app with the following requirements:&lt;/p&gt;
&lt;h3&gt;Basic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data gets stored and queried using &lt;a href="https://docs.djangoproject.com/en/1.11/topics/db/"&gt;Django's ORM&lt;/a&gt; (which uses SQLite by default, but feel free to use another DB).&lt;/li&gt;
&lt;li&gt;Separate content from presentation, however Django should enforce that as it follows the &lt;a href="https://djangobook.com/model-view-controller-design-pattern/"&gt;MVC pattern&lt;/a&gt; (or more correctly: the &lt;a href="https://docs.djangoproject.com/en/1.11/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names"&gt;MTV pattern&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Don't be shy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data can be added, edited and deleted (CRUD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Die hard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add a login. Note that Django comes with batteries included so you might be able to leverage the existing User model (&lt;code&gt;from django.contrib.auth.models import User&lt;/code&gt;) - &lt;a href="https://simpleisbetterthancomplex.com/tutorial/2016/06/27/how-to-use-djangos-built-in-login-system.html"&gt;this article&lt;/a&gt; might be helpful. &lt;/li&gt;
&lt;li&gt;If you want to go overboard, add a registration system: signup form + confirmation link validation email + password reset function. &lt;a href="https://simpleisbetterthancomplex.com"&gt;Simpleisbetterthancomplex.com&lt;/a&gt; has tutorials on this too. Or maybe you can leverage &lt;a href="https://django-registration.readthedocs.io/en/2.2/"&gt;a plugin&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deploy your app to &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;, &lt;a href="https://www.pythonanywhere.com"&gt;Python Anywhere&lt;/a&gt; or a service of your choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/"&gt;Django docs&lt;/a&gt; - Django has high quality documentation, use it :)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/intro/tutorial01/"&gt;Writing your first Django app (polls) tutorials&lt;/a&gt; - we found these helpful getting started.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/django.html"&gt;Full Stack Python Django reference page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybit.es/learning-django.html"&gt;First Steps Learning Django: PyPlanet Article Sharer App&lt;/a&gt; - article how we built our first app.&lt;/li&gt;
&lt;li&gt;For deployment use the provider's latest docs. Last week we learned some &lt;a href="https://pybit.es/deploy-flask-heroku.html"&gt;Heroku&lt;/a&gt; and &lt;a href="https://pybit.es/django-python-anywhere.html"&gt;Python Anywhere&lt;/a&gt; ourselves.&lt;/li&gt;
&lt;li&gt;Books: &lt;a href="https://www.amazon.com/dp/0321985079/?tag=pyb0f-20"&gt;Django Unleashed&lt;/a&gt; / &lt;a href="https://djangobook.com"&gt;The Django Book&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt; or &lt;a href="http://pybit.es/pages/about.html"&gt;reach out&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Django"></category><category term="100DaysOfDjango"></category></entry><entry><title>Code Challenge 28 - Integrate a Bokeh Chart Into Flask - Review</title><link href="https://pybit.es/codechallenge28_review.html" rel="alternate"></link><published>2017-07-24T14:00:00+02:00</published><updated>2017-07-24T14:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-24:/codechallenge28_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge28.html"&gt;Integrate a Bokeh Chart Into Flask&lt;/a&gt; code challenge. We got some really nice submissions to share ...&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge28.html"&gt;Integrate a Bokeh Chart Into Flask&lt;/a&gt; code challenge. We received some really nice submissions which we‚Äôll share here.&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/mjhea0"&gt;mjhea0&lt;/a&gt; went all out and wrote an app that displays the historical exchange rates for Bitcoin from numerous cryptocurrencies. The code is &lt;a href="https://github.com/pybites/challenges/tree/community/28/mjhea0"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mike's plot" src="https://pybit.es/images/bokeh-mjhea0.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; used some Anaconda with Python to display Dallas weather data from 1973 - 2016. Simple, awesome and seriously cool! (Pun intended!). The code is &lt;a href="https://github.com/pybites/challenges/tree/community/28/clamytoe"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="clamytoe's plot" src="https://pybit.es/images/bokeh-clamytoe.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/shibasisp"&gt;shibasisp&lt;/a&gt; and &lt;a href="https://github.com/asutosh97"&gt;asutosh97&lt;/a&gt; wrote an incredible app that compares life expectancy, population or income of two countries. It does it on the fly as you select the two countries which rocks! Their code is &lt;a href="https://github.com/pybites/challenges/tree/community/28/shibasisp"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/pybites/challenges/tree/community/28/asutosh97"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="shibasisp's plot" src="https://pybit.es/images/bokeh-shibasisp.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; made a word count plot of our blog. Using &lt;a href="https://github.com/realpython/flask-bokeh-example/blob/master/tutorial.md"&gt;Real Python's starter code&lt;/a&gt; was very helpful. I do want to build something more interactive using &lt;a href="https://github.com/pybites/challenges/tree/master/13"&gt;the movie data set provided for PCC13&lt;/a&gt;, also to practice deployment to Heroku. Bokeh is a really nice tool I definitely will use again for future visualization jobs Code is &lt;a href="https://github.com/pybites/challenges/tree/community/28/bbelderbos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bbelderbos' plot" src="https://pybit.es/images/bokeh-bbelderbos.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;We are 2 weeks into learning Django (&lt;a href="https://pybit.es/pages/projects.html"&gt;our second 100 Days project&lt;/a&gt;) so it's about time to dedicate a code challenge to it, no? Stay tuned ... starting tomorrow you can get your hands dirty with Django!&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. We can always update our review posts with new PRs.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="Bokeh"></category><category term="Flask"></category><category term="RealPython"></category><category term="guest"></category><category term="data"></category><category term="visualization"></category><category term="Heroku"></category></entry><entry><title>Deploying a Django App to PythonAnywhere</title><link href="https://pybit.es/django-python-anywhere.html" rel="alternate"></link><published>2017-07-23T23:59:00+02:00</published><updated>2017-07-23T23:59:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-07-23:/django-python-anywhere.html</id><summary type="html">&lt;p&gt;After Julian's great article &lt;a href="https://pybit.es/deploy-flask-heroku.html"&gt;on deploying a Flask app to Heroku&lt;/a&gt;, let's look at how we can deploy a Django app to &lt;a href="https://www.pythonanywhere.com"&gt;PythonAnywhere&lt;/a&gt; (PA).&lt;/p&gt;</summary><content type="html">&lt;p&gt;After Julian's great article &lt;a href="https://pybit.es/deploy-flask-heroku.html"&gt;on deploying a Flask app to Heroku&lt;/a&gt;, let's look at how we can deploy a Django app to &lt;a href="https://www.pythonanywhere.com"&gt;PythonAnywhere&lt;/a&gt; (PA). In this article I share a few things I learned deployed our &lt;a href="https://pybit.es/learning-django.html"&gt;first Django app&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Good docs + nice interface&lt;/h3&gt;
&lt;p&gt;One of my first tries was the &lt;a href="https://blog.pythonanywhere.com/155/"&gt;API / helper script&lt;/a&gt;, but unfortunately it did not make it to the end. Yet the &lt;a href="https://help.pythonanywhere.com/pages/DeployExistingDjangoProject/"&gt;Deploying an existing Django project on PythonAnywhere&lt;/a&gt; using the Manual option worked great for me:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pa choose manual option" src="https://pybit.es/images/pa-maual-option.png"&gt;&lt;/p&gt;
&lt;p&gt;Our first Django app &lt;a href="http://pybites.pythonanywhere.com/pyplanet/"&gt;is online&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pa site online" src="https://pybit.es/images/pa-online.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;22nd of Jan 2018 update&lt;/strong&gt;: we ended up hosting this &lt;a href="http://pyplanet.herokuapp.com/pyplanet"&gt;on Heroku&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really like the infrastructure of browser consoles and intuitive GUIs. Also config files like &lt;code&gt;wsgi.py&lt;/code&gt; were clearly commented so setting it up was quick and almost painless.&lt;/p&gt;
&lt;h3&gt;Git + venv&lt;/h3&gt;
&lt;p&gt;Important steps of the deployment steps are git pulling your code and creating a virtual env, this worked very well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pa supports git and venv" src="https://pybit.es/images/pa-git-venv.png"&gt;&lt;/p&gt;
&lt;p&gt;After this step I could just do a &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; to pull down Django and feedparser.&lt;/p&gt;
&lt;p&gt;Now when I make changes to my app I can just do a &lt;code&gt;git pull&lt;/code&gt; in the repo dir and restart the app in the browser. It just takes seconds :)&lt;/p&gt;
&lt;h3&gt;Scheduled tasks ... OK time to upgrade&lt;/h3&gt;
&lt;p&gt;Our app pulls in new articles from Planet Python as explained &lt;a href="https://pybit.es/learning-django.html"&gt;here&lt;/a&gt;. Planet was not on &lt;a href="https://www.pythonanywhere.com/whitelist/"&gt;PA's whitelist&lt;/a&gt; and I wanted this task to be run every hour (instead of once a day). At this point I had to upgrade from Free to the &lt;em&gt;Hacker tier&lt;/em&gt;. This has additional benefits, check out &lt;a href="https://www.pythonanywhere.com/pricing/"&gt;pricing&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Similar to other providers, at PA you pay for what you need/ consume. You can add apps on the fly. I'd hoped to get a small PostgreSQL DB with Hacker's tier, but that requires further upgrading ...&lt;/p&gt;
&lt;p&gt;The interface to set up a scheduled task is nice and easy:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pa scheduled tasks" src="https://pybit.es/images/pa-scheduled-task.png"&gt;&lt;/p&gt;
&lt;p&gt;Notice that I activate the venv in the command because it needs to load env variables.&lt;/p&gt;
&lt;h3&gt;Less obvious&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I had to add our PA domain &lt;em&gt;pybites.pythonanywhere.com&lt;/em&gt; to &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; (Django settings).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django encapsulation. As detailed in &lt;a href="https://medium.com/@ayarshabeer/django-best-practice-settings-file-for-multiple-environments-6d71c6966ee2"&gt;this excellent article&lt;/a&gt; you want to hide your SECRET_KEY, DB credentials, etc from version control. I also followed the settings best practices described in the article. So make sure you do some work upfront. Make sure you check &lt;a href="https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/"&gt;Django's checklist&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Env variables. You need to set them &lt;a href="https://help.pythonanywhere.com/pages/environment-variables-for-web-apps/"&gt;in 2 places&lt;/a&gt;. As the help doc admits this is not ideal. At the virtual env level it only seemed to work adding them to the &lt;em&gt;activate&lt;/em&gt; script, not &lt;em&gt;postactivate&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://help.pythonanywhere.com/pages/DjangoStaticFiles"&gt;Handling static files&lt;/a&gt; was a bit of a pain. I ended up &lt;a href="https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/#collectstatic"&gt;using collectstatic&lt;/a&gt; to get them all in one place:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) 12:27 ~/pybites-django/pybites (master)$ python manage.py collectstatic
62 static files copied to ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And in the web GUI config I set:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pa static files solution" src="https://pybit.es/images/pa-static-files.png"&gt;&lt;/p&gt;
&lt;p&gt;Not sure if this is the best solution because I need to rerun this when static files change ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Multiple apps&lt;/h3&gt;
&lt;p&gt;As the Hacker tier gives me one app I made &lt;a href="https://github.com/pybites/pybites-django"&gt;this container project / repo&lt;/a&gt; to host multiple apps in. It's a nice exercise in Django's architecture of one project -&amp;gt; multiple apps that can be moved around. As said, PA's pricing structure is pretty flexible, so we can always add apps if necessary.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So far I am happy with PA. In spite of some minor issues it is easy to deploy a Django app and it performs well. The help docs are well written. &lt;/p&gt;
&lt;p&gt;They are also quite proactive: there was a file server issue last weekend which they updated via Twitter. And they just &lt;a href="http://blog.pythonanywhere.com/156/"&gt;posted a full post mortem&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;It was easy to reach out to support and I got a quick response. I also like the short email tutorial updates. &lt;/p&gt;
&lt;p&gt;I will compare with Heroku pricing for PostgreSQL because adding one bumps the monthly price up from 5 to 12 USD (at this time of writing). Or I go with their default MySQL which is free.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Django"></category><category term="100DaysOfDjango"></category><category term="PythonAnywhere"></category><category term="Security"></category><category term="cloud"></category><category term="deployment"></category></entry><entry><title>Twitter digest 2017 week 29</title><link href="https://pybit.es/twitter_digest_201729.html" rel="alternate"></link><published>2017-07-23T11:43:00+02:00</published><updated>2017-07-23T11:43:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-23:/twitter_digest_201729.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Parentheses and | denote options. Example: /(red|green|blue) truck/ matches 'red truck' or 'green truck' or 'blue truck'.&lt;/p&gt;‚Äî Regular Expression (@RegexTip) &lt;a href="https://twitter.com/RegexTip/status/887688889116356609" data-datetime="2017-07-19T15:01:38+00:00"&gt;July 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's our birthday! Django Girls is 3 today üéâü§£ü¶Ñüç∞üåàüëçüçæüç© Celebrate with us and post a pic of yourself with the‚Ä¶ &lt;a href="https://t.co/nTJQzhiojy" title="https://t.co/nTJQzhiojy" target="_blank"&gt;https://t.co/nTJQzhiojy&lt;/a&gt;&lt;/p&gt;‚Äî Django Girls (@djangogirls) &lt;a href="https://twitter.com/djangogirls/status/888262260765843457" data-datetime="2017-07-21T05:00:00+00:00"&gt;July 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@LegoNASAWomen:" target="_blank"&gt;@LegoNASAWomen:&lt;/a&gt; On July 20, 1969 &lt;a href="https://twitter.com/search/#Apollo11" target="_blank"&gt;#Apollo11&lt;/a&gt; landed men on the moon. Here's to Margaret Hamilton, the programmer who led the coding team t‚Ä¶&lt;/p&gt;‚Äî Luciano Ramalho ‚òÇ (@ramalhoorg) &lt;a href="https://twitter.com/ramalhoorg/status/888586654541205504" data-datetime="2017-07-22T02:29:02+00:00"&gt;July 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;We love Python üíõ &lt;a href="https://t.co/1qz8kdrwwm" title="https://t.co/1qz8kdrwwm" target="_blank"&gt;https://t.co/1qz8kdrwwm&lt;/a&gt;&lt;/p&gt;‚Äî K√°tia Nakamura (@KatiaNakamura) &lt;a href="https://twitter.com/KatiaNakamura/status/888425156363898881" data-datetime="2017-07-21T15:47:18+00:00"&gt;July 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; try this game out! It's so well made! :) I love the sounds and the look! &lt;a href="https://t.co/jVlrXm87vN" title="https://t.co/jVlrXm87vN" target="_blank"&gt;https://t.co/jVlrXm87vN&lt;/a&gt;&lt;/p&gt;‚Äî Alexander Kallaway (@ka11away) &lt;a href="https://twitter.com/ka11away/status/888589953948672004" data-datetime="2017-07-22T02:42:08+00:00"&gt;July 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Machine and Deep Learning in Python: What You Need to Know &lt;a href="https://t.co/hjpy0W4hrD" title="https://t.co/hjpy0W4hrD" target="_blank"&gt;https://t.co/hjpy0W4hrD&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/888007432156307457" data-datetime="2017-07-20T12:07:24+00:00"&gt;July 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;OK, this is ‚Äúgenius‚Äù :) other languages‚Äô print syntax in Python: anyprint &lt;a href="https://t.co/1STk577E4y" title="https://t.co/1STk577E4y" target="_blank"&gt;https://t.co/1STk577E4y&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/887635926196903936" data-datetime="2017-07-19T11:31:10+00:00"&gt;July 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Useful: &lt;a href="https://twitter.com/search/#Django" target="_blank"&gt;#Django&lt;/a&gt; Best Practice: Settings file for multiple environments by &lt;a href="https://twitter.com/@ayarshabeer" target="_blank"&gt;@ayarshabeer&lt;/a&gt; &lt;a href="https://t.co/Fi3xlDSZlW" title="https://t.co/Fi3xlDSZlW" target="_blank"&gt;https://t.co/Fi3xlDSZlW&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/888527949766557696" data-datetime="2017-07-21T22:35:45+00:00"&gt;July 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì£ I wrote a new blog post... it's been a while üòÖ Use line breaks to help readers experience code as you intended üí° &lt;a href="https://t.co/IMBKBT4ndf" title="https://t.co/IMBKBT4ndf" target="_blank"&gt;https://t.co/IMBKBT4ndf&lt;/a&gt;&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/888484568331956224" data-datetime="2017-07-21T19:43:22+00:00"&gt;July 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PyGuyCharles:" target="_blank"&gt;@PyGuyCharles:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; News: New Asynchronous version of &lt;a href="https://twitter.com/search/#Flask" target="_blank"&gt;#Flask&lt;/a&gt; called Quart is up to twice as fast. Uses Python3's Asyncio. &lt;a href="https://t.‚Ä¶" title="https://t.‚Ä¶" target="_blank"&gt;https://t.‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/888997158447235072" data-datetime="2017-07-23T05:40:13+00:00"&gt;July 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;a = "roses" b = "red" '{a} are {b}'.format(%%locals()) &lt;a href="https://twitter.com/search/#python3.6" target="_blank"&gt;#python3.6&lt;/a&gt; f'{a} are {b}' 'roses are red' For more, see &lt;a href="https://t.co/sLvaHdXTQL" title="https://t.co/sLvaHdXTQL" target="_blank"&gt;https://t.co/sLvaHdXTQL&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/887242145261899777" data-datetime="2017-07-18T09:26:26+00:00"&gt;July 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The rise of Python for Embedded Systems &lt;a href="https://t.co/V7IGEBzk5y" title="https://t.co/V7IGEBzk5y" target="_blank"&gt;https://t.co/V7IGEBzk5y&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/888005573861683201" data-datetime="2017-07-20T12:00:01+00:00"&gt;July 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Parsing in Python: all the tools and libraries you can use &lt;a href="https://t.co/4g1NtlGA62" title="https://t.co/4g1NtlGA62" target="_blank"&gt;https://t.co/4g1NtlGA62&lt;/a&gt; by &lt;a href="https://twitter.com/@ftomasse" target="_blank"&gt;@ftomasse&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/887765806267813888" data-datetime="2017-07-19T20:07:16+00:00"&gt;July 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;First Python Notebook - Learn Pandas &lt;a href="https://t.co/Uu8jqHNIOa" title="https://t.co/Uu8jqHNIOa" target="_blank"&gt;https://t.co/Uu8jqHNIOa&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#course" target="_blank"&gt;#course&lt;/a&gt; &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/888638126729461760" data-datetime="2017-07-22T05:53:34+00:00"&gt;July 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
I‚Äôm a HUGE Marvel fan so seeing @mariatta in the credits is so exciting. Reading the comments on this tweet led to the finding of &lt;a href="http://dgovil.com/blog/2016/11/30/python-for-feature-film/"&gt;this article from Nov 2016 on Python in Feature Films&lt;/a&gt;. An interesting read!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üòÖ From &lt;a href="https://twitter.com/search/#SpiderManHomecoming" target="_blank"&gt;#SpiderManHomecoming&lt;/a&gt; &lt;a href="https://twitter.com/search/#LameClaimToFame" target="_blank"&gt;#LameClaimToFame&lt;/a&gt; &lt;a href="https://t.co/B8qq8QYB5H" title="https://t.co/B8qq8QYB5H" target="_blank"&gt;https://t.co/B8qq8QYB5H&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/888212242214211585" data-datetime="2017-07-21T01:41:15+00:00"&gt;July 21, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="regex"></category><category term="Django"></category><category term="code"></category><category term="NASA"></category><category term="Machine Learning"></category><category term="tools"></category><category term="anyprint"></category><category term="Flask"></category><category term="Asyncio"></category><category term="Quart"></category><category term="IoT"></category><category term="Pandas"></category><category term="Jupyter"></category></entry><entry><title>Step-by-Step Guide on Deploying a Simple Flask App to Heroku</title><link href="https://pybit.es/deploy-flask-heroku.html" rel="alternate"></link><published>2017-07-21T21:57:00+02:00</published><updated>2017-07-21T21:57:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-07-21:/deploy-flask-heroku.html</id><summary type="html">&lt;p&gt;A step-by-step guide on deploying a simple flask app to Heroku.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Something I‚Äôve always wanted to do since I first started working in IT was make my own application and have it running on the internet/intranet somewhere. It took years (procrastination yo!) but this week I finally made it happen! &lt;a href="https://timezone-printer.herokuapp.com/"&gt;I deployed my first app to Heroku&lt;/a&gt;! (Note, not exactly mobile friendly - yet!).&lt;/p&gt;
&lt;p&gt;In hindsight the process was simple but there were definitely some gotchas. The Heroku documentation, while well written and detailed, makes some assumptions &lt;em&gt;and&lt;/em&gt; is based on a Django app.&lt;/p&gt;
&lt;p&gt;Enter this Flask tutorial!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Step by Step&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;
1. The first thing you have to do is &lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#set-up"&gt;download and install the Heroku CLI for your OS&lt;/a&gt;. I won‚Äôt cover this here as it‚Äôs extremely straightforward and the documentation is great.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
2. Log into your Heroku account using the CLI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku login
Enter your Heroku credentials:
Email: pybites_rocks@fakemail.com
Password: **********
Logged in as pybites_rocks@fakemail.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
3. Initialise the directory with your app in it as a git repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../flaskapps/timezone_printer
$ git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
4. We need to install &lt;code&gt;gunicorn&lt;/code&gt;. This is a Python web server for UNIX based OS‚Äôs. It's required to have it in your code venv in order to launch the Flask app on Heroku. Initialise the virtualenv in your dir and install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;flaskapps/timezone_printer$ source venv/bin/activate
(venv)flaskapps/timezone_printer$ pip install gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you‚Äôre not sure what a virtualenv is, &lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;check out our article&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;
5. Next, if you haven't done so already, create your requirements.txt file. Heroku relies on the &lt;code&gt;requirements.txt&lt;/code&gt; file to exist in order to deploy your app. When you deploy Heroku uses pip and requirements.txt to install everything required to run your app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
6. Use the normal git commands to add and commit the code (note, repo has not been synced with Heroku yet):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;Initial push of timezone printer flask app code to Heroku&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
7. Now we actually create your app instance on the Heroku servers. This is where you specify the app name. I‚Äôm calling mine &lt;code&gt;timezone-printer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku create timezone-printer
Creating timezone-printer... &lt;span class="k"&gt;done&lt;/span&gt;
https://timezone-printer.herokuapp.com/ &lt;span class="p"&gt;|&lt;/span&gt; https://git.heroku.com/timezone-printer.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
8. You can now start pushing your code to the app you've just created. To confirm you're pushing to the correct remote app repo run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote -v
git remote -v
heroku  https://git.heroku.com/timezone-printer.git &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
heroku  https://git.heroku.com/timezone-printer.git &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This information comes from the git config file. If I &lt;code&gt;cd&lt;/code&gt; into my other directory that houses the code for a different Heroku app, I could run the &lt;code&gt;git remote -v&lt;/code&gt; command and the output would change. Eg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../BMI_calc
$ git remote -v
heroku  https://git.heroku.com/pybites-bmi.git &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
heroku  https://git.heroku.com/pybites-bmi.git &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
9. Let's push the timezone-printer code to Heroku. This push not only pushes the code but also installs all dependencies using the &lt;code&gt;requirements.txt&lt;/code&gt; file we created in step 4. Ignore the message regarding the Procfile. I'll get to that in the next step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Counting&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1783&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1736&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1736&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Writing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1783&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1783&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;10.13&lt;/span&gt; &lt;span class="n"&gt;MiB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;353.00&lt;/span&gt; &lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="mi"&gt;1783&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;161&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="nl"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;!&lt;/span&gt;     &lt;span class="nl"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Procfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;tells&lt;/span&gt; &lt;span class="n"&gt;Heroku&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;!&lt;/span&gt;     &lt;span class="n"&gt;Learn&lt;/span&gt; &lt;span class="nl"&gt;more&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//devcenter.heroku.com/articles/procfile&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.6.2&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Successfully&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.12.2&lt;/span&gt; &lt;span class="n"&gt;Jinja2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.9.6&lt;/span&gt; &lt;span class="n"&gt;MarkupSafe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="n"&gt;Werkzeug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.12.2&lt;/span&gt; &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;6.7&lt;/span&gt; &lt;span class="n"&gt;itsdangerous&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.24&lt;/span&gt; &lt;span class="n"&gt;pendulum&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2.3&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dateutil&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.6.0&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2017.2&lt;/span&gt; &lt;span class="n"&gt;pytzdata&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2017.2&lt;/span&gt; &lt;span class="n"&gt;six&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.10.0&lt;/span&gt; &lt;span class="n"&gt;tzlocal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Discovering&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Procfile&lt;/span&gt; &lt;span class="n"&gt;declares&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;68.9&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Launching&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Released&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//timezone-printer.herokuapp.com/ deployed to Heroku&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verifying&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/timezone-printer.git&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
10. Yay! The code is deployed on Heroku! It won't work, but it's deployed! Why won't it work? Well, think of it this way. Your code &lt;em&gt;exists&lt;/em&gt; on the Heroku servers but Heroku has no idea what to do with it.&lt;/p&gt;
&lt;p&gt;This is where the Procfile comes in. The Procfile will be the command Heroku runs to initiate your code. It'd be like you running &lt;code&gt;python app.py&lt;/code&gt; or other. Create a file in the root directory of your app and enter the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim Procfile
web: gunicorn app:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Substitute the first "app" in the above code with the name of the script you want to execute. The Python script that launches my Flask app is called &lt;code&gt;app.py&lt;/code&gt; thus the Procfile contains app:app. If the script was titled &lt;code&gt;tz_lister.py&lt;/code&gt; the Procfile would read: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="n"&gt;tz_lister&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
11. While you don't &lt;em&gt;need&lt;/em&gt; to, you can specify which version of Python to run. At the time of writing, by default Heroku uses Python 3.6.2. If you need another version you can specify which one to use by creating a &lt;code&gt;runtime.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim runtime.txt
python-3.6.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
12. Now we can git add, commit and push the code to Heroku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;Added Procfile and runtime.txt files&amp;quot;&lt;/span&gt;
$ git push heroku master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that the push doesn't just push the changes but it also results in a rebuild. The requirements.txt file is checked once more and so forth. You should also notice the Profile error is no longer apparent.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
13. With all of our files in place, it's time to spin up the app!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku ps:scale &lt;span class="nv"&gt;web&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
Scaling dynos... &lt;span class="k"&gt;done&lt;/span&gt;, now running web at &lt;span class="m"&gt;1&lt;/span&gt;:Free
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're on the free tier of Heroku you can only have a limited amount of apps running at a time so keep that in mind.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
14. Bam! The app should be up and running! You can use the Heroku cli to launch the app in your default browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku open
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Handy Tips&lt;/h2&gt;
&lt;p&gt;A couple of tips and learning points from my experience running my Flask app on Heroku.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
1. You can check the logs of your Heroku app using &lt;code&gt;heroku logs&lt;/code&gt;. If you want a live view of the logs then run &lt;code&gt;heroku logs --tail&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
2. Check to see if you have any other Heroku dynos running with &lt;code&gt;heroku ps&lt;/code&gt;. It'll also tell you how many hours you have left of your quota. Handy if you're on the free tier!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
3. If you find an error in your logs relating to the IP address being in use, it may be the Flask app code itself. I found that in one of my older Flask apps I hadn't included the below line of code which resulted in Heroku failing to launch the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:
    app.run()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was one of &lt;strong&gt;the most satisfying&lt;/strong&gt; things I‚Äôve ever done within the realms of programming. I can‚Äôt stress how great it feels to see my own app up on the Internet.&lt;/p&gt;
&lt;p&gt;I actually added a second app just to confirm not all of my work formats terribly on mobile. Check it out &lt;a href="https://pybites-bmi.herokuapp.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given it‚Äôs completely free and simple to do, I strongly urge everyone to give it a go. Not only is it a great morale/motivation boost but it‚Äôs something to add to your portfolio.&lt;/p&gt;
&lt;p&gt;I‚Äôm ticking this one off the bucket list!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="sessions"></category><category term="learning"></category><category term="code"></category><category term="Heroku"></category></entry><entry><title>Code Challenge 28 - Integrate a Bokeh Chart Into Flask</title><link href="https://pybit.es/codechallenge28.html" rel="alternate"></link><published>2017-07-18T09:37:00+02:00</published><updated>2017-07-18T09:37:00+02:00</updated><author><name>Michael Herman</name></author><id>tag:pybit.es,2017-07-18:/codechallenge28.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We are delighted to have Michael Herman (&lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;) deliver this week's challenge. Prepare to learn some useful new skills and above all have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We are delighted to have Michael Herman (&lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;) deliver this week's challenge. Prepare to learn some useful new skills and above all have fun!&lt;/p&gt;
&lt;p&gt;Enter Michael.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;Create a Flask app that displays a basic data visualization with &lt;a href="http://bokeh.pydata.org"&gt;Bokeh&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you're feeling up to it, deploy the app to &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Need some data to work with?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/086"&gt;Simple Twitter Archive Digest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/caesar0301/awesome-public-datasets"&gt;Awesome Public Datasets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://catalog.data.gov/dataset?res_format=CSV"&gt;Data.gov - Datasets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But you can use any data set. The goal is to use Bokeh inside Flask.&lt;/p&gt;
&lt;h3&gt;Suggested workflow&lt;/h3&gt;
&lt;p&gt;This challenge includes a number of moving pieces, so make sure to break it down into smaller steps. &lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a basic Flask app&lt;/li&gt;
&lt;li&gt;Manually test the app locally&lt;/li&gt;
&lt;li&gt;Create a data visualization with Bokeh&lt;/li&gt;
&lt;li&gt;Integrate the Bokeh chart with the Flask app&lt;/li&gt;
&lt;li&gt;Manually test the app again locally&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want more practice, burn it all down and start over again. Continue doing this until you feel comfortable with the workflow.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;Share your awesome visualization with the world:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set up Heroku and deploy&lt;/li&gt;
&lt;li&gt;Manually test the app on Heroku&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/realpython/flask-bokeh-example/blob/master/tutorial.md"&gt;Flask + Bokeh Basics&lt;/a&gt; - simple tutorial that shows you how to embed a bar chart into a Flask app&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/docs/user_guide.html#userguide"&gt;Bokeh User Guide&lt;/a&gt; / &lt;a href="http://flask.pocoo.org/docs/0.12/"&gt;Flask docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://progblog.io/How-to-deploy-a-Flask-App-to-Heroku/"&gt;How to deploy a Flask App to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;this INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;PyBites' challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to PyBites' community branch via Pull Request. PR submissions will be featured in next week's challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#michaelherman"&gt;Michael&lt;/a&gt; &lt;/p&gt;</content><category term="codechallenges"></category><category term="Bokeh"></category><category term="Flask"></category><category term="RealPython"></category><category term="guest"></category><category term="data"></category><category term="visualization"></category><category term="Heroku"></category></entry><entry><title>Code Challenge 27 - PRAW: The Python Reddit API Wrapper - Review</title><link href="https://pybit.es/codechallenge27_review.html" rel="alternate"></link><published>2017-07-18T09:36:00+02:00</published><updated>2017-07-18T09:36:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-18:/codechallenge27_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge27.html"&gt;PRAW: The Python Reddit API Wrapper&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge27.html"&gt;PRAW: The Python Reddit API Wrapper&lt;/a&gt; code challenge. We had some really cool submissions so let's dive straight in:&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/hobojoe1848"&gt;hobojoe1848&lt;/a&gt;, being a Flask addict, created a simple Flask app (screenshot in repo). The app displays the "hottest" posts for some of his favourite subreddits. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/27/hobojoe1848"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; created a script to autopost each new PyBites challenge to /r/learnpython. It already auto-posted &lt;a href="https://redd.it/6nzdd5"&gt;this week's new challenge&lt;/a&gt;. It also sends out a notification html email to a list of community members. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/27/bbelderbos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/shibasisp"&gt;shibasisp&lt;/a&gt; created a script to pull the challenges listed on r/dailyprogrammer and sort them by difficulty (Easy, Medium and Hard). Just pip install it and you're on your way! Code is &lt;a href="https://github.com/pybites/challenges/tree/community/27/shibasisp/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/asutosh97"&gt;asutosh97&lt;/a&gt; created two scripts! The first returns the top ten news items on reddit and the second lists out challenges from r/dailyprogrammer, sorted by Easy, Medium or Hard. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/27/asutosh97"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;This week we have Michael Herman (&lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;) delivering a nice challenge around Bokeh and Flask, check it out &lt;a href="https://pybit.es/codechallenge28.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. We can always update our review posts with new PRs.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="reddit"></category><category term="API"></category><category term="PRAW"></category><category term="dailyprogrammer"></category><category term="post"></category><category term="submission"></category><category term="learnpython"></category></entry><entry><title>First Steps Learning Django: PyPlanet Article Sharer App</title><link href="https://pybit.es/learning-django.html" rel="alternate"></link><published>2017-07-17T13:00:00+02:00</published><updated>2017-07-17T13:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-07-17:/learning-django.html</id><summary type="html">&lt;p&gt;In this post I share my first steps exploring Django. I created &lt;a href="https://github.com/pybites/pyplanet-django"&gt;PyPlanet Article Sharer Django App&lt;/a&gt; to make it easier for us to share new &lt;a href="http://planetpython.org"&gt;Planet Python feed&lt;/a&gt; articles. It loads in new articles and generates tweet links. It lets us mark each entry as Shared or Skipped. I am sure this will facilitate our &lt;a href="https://twitter.com/pybites"&gt;Twitter activity&lt;/a&gt; and &lt;a href="https://pybit.es/pages/news.html"&gt;News Digests&lt;/a&gt;. This is our first project of our &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;100 days of Django&lt;/a&gt; and our very first Django app overall!&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post I share my first steps exploring Django. I created &lt;a href="https://github.com/pybites/pyplanet-django"&gt;PyPlanet Article Sharer Django App&lt;/a&gt; to make it easier for us to share new &lt;a href="http://planetpython.org"&gt;Planet Python feed&lt;/a&gt; articles. It loads in new articles and generates tweet links. It lets us mark each entry as Shared or Skipped. I am sure this will facilitate our &lt;a href="https://twitter.com/pybites"&gt;Twitter activity&lt;/a&gt; and &lt;a href="https://pybit.es/pages/news.html"&gt;News Digests&lt;/a&gt;. This is our first project of our &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;100 days of Django&lt;/a&gt; and our very first Django app overall!&lt;/p&gt;
&lt;h2&gt;The app&lt;/h2&gt;
&lt;p&gt;Homepage:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pyplanet-django1.png" src="https://pybit.es/images/pyplanet-django1.png"&gt;&lt;/p&gt;
&lt;p&gt;Click on an article and click "Mark Skipped":&lt;/p&gt;
&lt;p&gt;&lt;img alt="pyplanet-django2.png" src="https://pybit.es/images/pyplanet-django2.png"&gt;&lt;/p&gt;
&lt;p&gt;Redirects back to index and shows (CSS) article marked as skipped:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pyplanet-django3.png" src="https://pybit.es/images/pyplanet-django3.png"&gt;&lt;/p&gt;
&lt;p&gt;Another article:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pyplanet-django4.png" src="https://pybit.es/images/pyplanet-django4.png"&gt;&lt;/p&gt;
&lt;p&gt;Tweet it and mark it complete (still 2 steps):&lt;/p&gt;
&lt;p&gt;&lt;img alt="pyplanet-django5.png" src="https://pybit.es/images/pyplanet-django5.png"&gt;&lt;/p&gt;
&lt;p&gt;Index now shows a skipped and a shared article:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pyplanet-django6.png" src="https://pybit.es/images/pyplanet-django6.png"&gt;&lt;/p&gt;
&lt;h2&gt;Try it yourself&lt;/h2&gt;
&lt;p&gt;I made a &lt;a href="https://github.com/pybites/pyplanet-django"&gt;README&lt;/a&gt; with instructions to run this project yourself.&lt;/p&gt;
&lt;p&gt;As stated in the README some things still need to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deploy to Heroku or PythonAnywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;importfeed&lt;/code&gt; command to a daily cronjob.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add user authentication and tracking who (Julian / myself) edits what. I did already manage to setup a ForeignKey relation to the existing (admin) User table - Django comes with batteries included.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Would be nice: integrate Twitter API so green "Mark Shared" button can be made redundant (could not find callback in Twitter's intent link, so Tweet + "Mark complete" are two steps now). Of course this requires the app to be behind a login.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Although this is a relatively simple app it touches on a lot of Django aspects: DB, ORM, migrations, views, templates, url routes, even a &lt;a href="https://docs.djangoproject.com/en/dev/howto/custom-management-commands/"&gt;custom django-admin command&lt;/a&gt; I wrote to import the feed (&lt;code&gt;importfeed&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learning Django can be daunting, there are a lot of moving parts. So I strongly recommend to build something small and simple first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The directory structure and projects vs apps might be confusing at first, but it starts to make more sense as you go. It makes for flexible and extensible projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My first impression overall is that Django has a robust and elegant design. OK I am not going into Django vs Flask, each has its own use cases. So far I like them both (and Julian loves Flask so I better watch out ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I learned my first baby steps &lt;a href="https://docs.djangoproject.com/en/1.11/intro/"&gt;reading the famous create-a-poll tutorials&lt;/a&gt;. I referred back to them while writing the app. This worked pretty well for me. The Django docs are excellent: complete, concise, using dev best practices, written by developers for developers. And up2date (!) which eliminates a lot of potential issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I ended up reading quite a bit on my phone thanks to the &lt;a href="https://media.readthedocs.org/epub/django/1.11.x/django.epub"&gt;well-formatted epub&lt;/a&gt;. Don't read the entire thing (it would take you weeks if not months), however I did some early exploration on the models (ORM), migrations and QuerySets (how to query the DB) sections, which was quite useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As we said in &lt;a href="https://pybit.es/python-resources.html"&gt;our Python resources article&lt;/a&gt; best is to iterate through practice and reading: &lt;em&gt;Read some more, try new things you learn in your code. Repeat.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last but not least it was not easy at first. I got stuck a couple of times and luckily there was Stackoverflow (&lt;a href="https://stackoverflow.com/questions/24013531/django-model-using-auth-group-as-a-foreignkey"&gt;here&lt;/a&gt; and &lt;a href="https://stackoverflow.com/questions/33086444/django-1-8-migrate-is-not-creating-tables"&gt;here&lt;/a&gt;, and a bunch of other issues I ran into).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having some Flask and web development experience under my belt did help a lot understand Django's structure and workflow better. So any Flask you do before jumping on Django will be beneficial. It feels like learning Italian after Spanish.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting this out there and understanding the overall Django workflow and how the pieces fit together was extremely satisfying. It created momentum to keep going extending this app and build a more complex app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My next app will be a complete rewrite of &lt;a href="http://fbreadinglist.com/"&gt;fbreadinglist&lt;/a&gt; aka &lt;em&gt;nuke PHP and FB API for good and make an attractive and maintainable reading app your friends will thank you for&lt;/em&gt; - luckily we have Django now :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In spite of having the docs close-by at all times, from a didactic standpoint I did start reading a Django book cover-to-cover: &lt;a href="https://www.amazon.com/dp/0321985079/?tag=pyb0f-20"&gt;Django Unleashed&lt;/a&gt;. I hope 1.8 (book) vs 1.11 (latest) won't get me into trouble, but if so that could be good learning too. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another book I often hear mentioned as one of the best in the field is: &lt;a href="https://www.amazon.com/dp/0692915729/?tag=pyb0f-20"&gt;Two Scoops of Django&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want team training check out Trey Hunner's &lt;a href="http://truthful.technology"&gt;Truthful Technology&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will probably write a dedicated resources post when we get further into &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;our 100 Days of Django&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;Comments, questions, ideas are welcome. Use the comments below or reach out &lt;a href="https://twitter.com/pybites"&gt;via Twitter&lt;/a&gt; or &lt;a href="mailto:pybitesblog@gmail.com"&gt;email&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Django"></category><category term="100DaysOfDjango"></category><category term="Planet Python"></category><category term="Twitter"></category><category term="tutorials"></category><category term="resources"></category></entry><entry><title>Twitter digest 2017 week 28</title><link href="https://pybit.es/twitter_digest_201728.html" rel="alternate"></link><published>2017-07-16T16:23:00+02:00</published><updated>2017-07-16T16:23:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-16:/twitter_digest_201728.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We were mentioned on the Python Bytes Podcast! Woohoo!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks &lt;a href="https://twitter.com/@mkennedy" target="_blank"&gt;@mkennedy&lt;/a&gt; and &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt; for your nice feedback on our &lt;a href="https://twitter.com/search/#100DaysOfCode," target="_blank"&gt;#100DaysOfCode,&lt;/a&gt; motivates us even more. &lt;a href="https://t.co/GzLgyyM8Sg" title="https://t.co/GzLgyyM8Sg" target="_blank"&gt;https://t.co/GzLgyyM8Sg&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/885975114701058048" data-datetime="2017-07-14T21:31:42+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build 9 Projects in Python and PostgreSQL &lt;a href="https://t.co/x8UzjLgAOQ" title="https://t.co/x8UzjLgAOQ" target="_blank"&gt;https://t.co/x8UzjLgAOQ&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/886269128851509249" data-datetime="2017-07-15T17:00:01+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Use the pathlib module to recursively search for files &amp;gt;&amp;gt;&amp;gt; from pathlib import Path &amp;gt;&amp;gt;&amp;gt; Path('.').glob('**/*.py') &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/884353407380852736" data-datetime="2017-07-10T10:07:37+00:00"&gt;July 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PylonsProject:" target="_blank"&gt;@PylonsProject:&lt;/a&gt; Pyramid 1.9.1 released &lt;a href="https://t.co/8AjKhXHTQS" title="https://t.co/8AjKhXHTQS" target="_blank"&gt;https://t.co/8AjKhXHTQS&lt;/a&gt; PyPI &lt;a href="https://t.co/vmTWv5w4f5" title="https://t.co/vmTWv5w4f5" target="_blank"&gt;https://t.co/vmTWv5w4f5&lt;/a&gt; Changes &lt;a href="https://t.co/yhgpUJYSWA" title="https://t.co/yhgpUJYSWA" target="_blank"&gt;https://t.co/yhgpUJYSWA&lt;/a&gt; Issues htt‚Ä¶&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/886242830682791936" data-datetime="2017-07-15T15:15:31+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Performance comparison of Python / pandas / numpy &lt;a href="https://t.co/OKzIVE0QQf" title="https://t.co/OKzIVE0QQf" target="_blank"&gt;https://t.co/OKzIVE0QQf&lt;/a&gt; &lt;a href="https://t.co/f8ej9cLOCG" title="https://t.co/f8ej9cLOCG" target="_blank"&gt;https://t.co/f8ej9cLOCG&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/886274666574336000" data-datetime="2017-07-15T17:22:01+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;100 Python books, categorized and ranked &lt;a href="https://t.co/izZPRELAGk" title="https://t.co/izZPRELAGk" target="_blank"&gt;https://t.co/izZPRELAGk&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/885906745738113024" data-datetime="2017-07-14T17:00:02+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúFAT Python : the next chapter in Python optimization‚Äù by &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; &lt;a href="https://t.co/4ydZ8AAzC3" title="https://t.co/4ydZ8AAzC3" target="_blank"&gt;https://t.co/4ydZ8AAzC3&lt;/a&gt;&lt;/p&gt;‚Äî Bob Belderbos (@bbelderbos) &lt;a href="https://twitter.com/bbelderbos/status/885981931296501763" data-datetime="2017-07-14T21:58:47+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Really cool tutorial (video): "It is ridiculously easy to generate any audio signal using Python"‚Ä¶ &lt;a href="https://t.co/VpOn3eH7Rk" title="https://t.co/VpOn3eH7Rk" target="_blank"&gt;https://t.co/VpOn3eH7Rk&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/886353190123442178" data-datetime="2017-07-15T22:34:02+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üêçüì∫ A Python Shorthand for Swapping Two Variables &lt;a href="https://t.co/6A8dFVgMg0" title="https://t.co/6A8dFVgMg0" target="_blank"&gt;https://t.co/6A8dFVgMg0&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/884967298708254721" data-datetime="2017-07-12T02:47:00+00:00"&gt;July 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;O'Reilly interview with Aaron Maxwell on powerfully programming in Python: &lt;a href="https://t.co/AnwwJjJ5D2" title="https://t.co/AnwwJjJ5D2" target="_blank"&gt;https://t.co/AnwwJjJ5D2&lt;/a&gt; &lt;a href="https://twitter.com/search/#PowerfulPython" target="_blank"&gt;#PowerfulPython&lt;/a&gt;&lt;/p&gt;‚Äî Powerful Python (@powerfulpython) &lt;a href="https://twitter.com/powerfulpython/status/885550868937850880" data-datetime="2017-07-13T17:25:54+00:00"&gt;July 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ncoghlan_dev:" target="_blank"&gt;@ncoghlan_dev:&lt;/a&gt; I personally had a trouble-free upgrade to the F26 beta last week, and now the official release is also here: &lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/885138419206176772" data-datetime="2017-07-12T14:06:58+00:00"&gt;July 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python packaging tip: MANIFEST.in puts things in the tarball; setup.py installs things from the tarball. You need to update both.&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/885904120082812928" data-datetime="2017-07-14T16:49:36+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Deep Learning with Python and Keras &lt;a href="https://t.co/IEFnKIyNJe" title="https://t.co/IEFnKIyNJe" target="_blank"&gt;https://t.co/IEFnKIyNJe&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/885017685586841601" data-datetime="2017-07-12T06:07:13+00:00"&gt;July 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Make sure your next NBA related discussion is a slam dunk thanks to Python, Flask, and &lt;a href="https://twitter.com/@openpyxl" target="_blank"&gt;@openpyxl&lt;/a&gt; üèÄ‚Ä¶ &lt;a href="https://t.co/2ctuxhkrLE" title="https://t.co/2ctuxhkrLE" target="_blank"&gt;https://t.co/2ctuxhkrLE&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/885906759994531841" data-datetime="2017-07-14T17:00:05+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
Ha!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jdeisenberg:" target="_blank"&gt;@jdeisenberg:&lt;/a&gt; Book idea: "Programming for People Whose Programs Don't Need to Scale to Millions of Users or Billions of Transactions per‚Ä¶&lt;/p&gt;‚Äî Michael Herman (@MikeHerman) &lt;a href="https://twitter.com/MikeHerman/status/886326591747366912" data-datetime="2017-07-15T20:48:21+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="pybites"></category><category term="PostgreSQL"></category><category term="books"></category><category term="resources"></category><category term="pathlib"></category><category term="Pyramid"></category><category term="FAT"></category><category term="audio"></category><category term="machine learning"></category><category term="pandas"></category><category term="numpy"></category><category term="tricks"></category><category term="interview"></category><category term="Fedora"></category><category term="packaging"></category><category term="deep learning"></category><category term="Keras"></category><category term="Flask"></category><category term="Openpyxl"></category></entry><entry><title>The Importance of Refactoring Code</title><link href="https://pybit.es/refactoring.html" rel="alternate"></link><published>2017-07-13T19:02:00+02:00</published><updated>2017-07-13T19:02:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-07-13:/refactoring.html</id><summary type="html">&lt;p&gt;In this quick post I discuss why refactoring code is one of the most important parts of the learning process.&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the completion of our &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;100 Days of Code Challenge&lt;/a&gt;, this week I found myself with a bit more free time than usual. I decided to look back on some of my older code and‚Ä¶ wow. Refactoring time!&lt;/p&gt;
&lt;h2&gt;Refactoring?!&lt;/h2&gt;
&lt;p&gt;I remember when Bob first used the term. It brought back bad memories of maths!&lt;/p&gt;
&lt;p&gt;Refactoring code is the process of making amendments, changes or improvements to your existing code. The end program or application will still operate in the same way, it‚Äôs just that the underlying code will be cleaner, leaner or faster.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Why Bother?&lt;/h2&gt;
&lt;p&gt;There are many reasons why this is useful, some of which I‚Äôve experienced myself lately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Most importantly, it makes you feel good!! Seriously, how good does it feel to look back at code you wrote just 6 months ago and think to yourself, ‚ÄúWhat the heck was I thinking?!‚Äù. Seeing the improvement in your coding ability is so important to keeping you on the coding path. If you don‚Äôt see an improvement, you won‚Äôt be motivated to keep learning!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your code becomes more refined. Check out the examples below. Refactoring just one line of code can make your code more elegant and professional. Also, it doesn‚Äôt hurt to have a lower line count!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your projects will grow. I had an extremely simple CLI based app I wrote a year ago that I believed was ‚Äúfinished‚Äù. After revisiting and refactoring the code, I started to see how I could add further functionality to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactoring code is an invaluable skill. If you critique and improve your own code enough then you‚Äôll be comfortable and savvy enough to refactor code written by your peers and the wider community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You‚Äôll tend to stop making the same ‚Äúmistakes‚Äù in your current, new code. By going back and refactoring your older code you‚Äôll catch on to any unPythonic tendencies you may have, like the ones below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, I believe doing so can help to build relationships! Refactoring code is one of the ways Bob and I maintain our friendship. We share any non-proprietary code that we write with one another so the other can refactor and provide input. If you can get this sort of thing happening with your peers at work or in the community you‚Äôll be better off for it!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Refactoring Examples&lt;/h2&gt;
&lt;p&gt;Okay finally, here we go! Here are some specific lines of the code I revisited and refactored this week. Don‚Äôt judge me!&lt;/p&gt;
&lt;h3&gt;Unnecessary Code in a for Loop&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i in range(len(durations)):
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found code where I was using &lt;code&gt;range&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; to get the limit of my &lt;code&gt;for&lt;/code&gt; loop. It‚Äôs a simple one but something I was used to doing with C type programming. Thanks to Python‚Äôs awesomeness, I changed it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i in durations:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;String Formatting Woes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(&amp;#39;The course takes &amp;#39; + str(total_hours) + &amp;#39; hours to complete.&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ouch! Again, a simple fix and most definitely a remnant from having learned other languages. Refactored!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(‚ÄòThe course takes {} hours to complete‚Äô.format(total_hours))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;camelCasing&lt;/h3&gt;
&lt;p&gt;I found a heap of variables and functions written in camel case. &lt;em&gt;shudder&lt;/em&gt;. They‚Äôll no longer be a problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quotesListDoc
userInput
quotesList
currentTime
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Manually opening and closing&lt;/h3&gt;
&lt;p&gt;While not particularly terrible, I found it was much more Pythonic to use a &lt;code&gt;with&lt;/code&gt; statement to handle the opening and closing of a text file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quotesListDoc = open(‚Äúlist.txt&amp;quot;, &amp;quot;a&amp;quot;)
quotesListDoc.write(&amp;#39;\n&amp;#39; + time.strftime(&amp;quot;%c&amp;quot;) + &amp;#39;\n&amp;#39;)
    for i in range(len(KIDQUOTES)):
        quotesListDoc.write(KIDQUOTES[i] + &amp;#39;\n&amp;#39;)
quotesListDoc.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I‚Äôll just refactor the whole damn thing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(‚Äòlist.txt‚Äô, ‚Äòa‚Äô) as quotes_doc:
    quotes_doc.write(‚Äò\n‚Äô + time.strftime(‚Äú%c‚Äù) + ‚Äò\n‚Äô)
    for i in quotes:
        quotes_doc.write(quotes[i] + ‚Äò\n‚Äô)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Including print in input()&lt;/h3&gt;
&lt;p&gt;I had a nasty habit of using print() to write my question or statement when I was asking for input().&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(&amp;#39;Hit Y to continue or N to add another issue. Y/N&amp;#39;)
userInput = input()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Refactor!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user_input = input(‚ÄòHit Y to continue or N to add another issue. Y/N: ‚Äò)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While most definitely simplistic, the examples above demonstrate how important refactoring is. When I first wrote these snippets, I was using the best way I thought possible.&lt;/p&gt;
&lt;p&gt;I just didn‚Äôt know any better.&lt;/p&gt;
&lt;p&gt;Having gone back and refactored it I‚Äôm absolutely stoked to see how far I‚Äôve come! Not only does the code look better but I‚Äôm also able to see where I can make future improvements.&lt;/p&gt;
&lt;p&gt;The code for writing quotes to a text file. A text file? An sqlite db would be way cooler! Realisations like this make me happy and more motivated than ever to continue learning.&lt;/p&gt;
&lt;p&gt;Now go look at some of your earlier code and see what you can refactor!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="beginner"></category><category term="learning"></category><category term="examples"></category><category term="code"></category><category term="refactoring"></category></entry><entry><title>Code Challenge 27 - PRAW: The Python Reddit API Wrapper</title><link href="https://pybit.es/codechallenge27.html" rel="alternate"></link><published>2017-07-11T11:00:00+02:00</published><updated>2017-07-11T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-11:/codechallenge27.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Love or hate Reddit, it has a lot of good data to work with. This week we have you write an app of your choice using the Reddit API. Have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Love or hate Reddit, it has a lot of good data to work with. This week we have you write an app of your choice using the Reddit API. Have fun!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;First of all thanks &lt;a href="https://github.com/shibasisp"&gt;shibasisp&lt;/a&gt; for raising &lt;a href="https://github.com/pybites/challenges/issues/42"&gt;the issue&lt;/a&gt;. We like the 2 examples you provided so we post them here: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A program that would fetch one challenge from easy, one from Intermediate and one hard from r/dailyprogrammer and shows it in the console. (PyBites: definitely something we could use!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A program that would fetch 10 (or so) news items from r/news and sort them in decreasing order of upvotes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;More ideas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fetch a user's history, &lt;a href="http://alan-wright.com/programming/tutorial/python/2014/03/09/praw-tutorial/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build a Reddit Bot, &lt;a href="http://pythonforengineers.com/build-a-reddit-bot-part-1/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do some data analysis, for example: build word clouds, &lt;a href="http://www.randalolson.com/2013/03/01/fun-with-the-python-reddit-api-wrapper-and-word-clouds/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You could even do a bit of sentiment analysis of a comment thread using something like &lt;a href="https://pybit.es/codechallenge07_review.html"&gt;textblob&lt;/a&gt; or the &lt;a href="http://www.nltk.org"&gt;Natural Language Toolkit&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But these are just examples. Feel free to build anything. The goal is to sharpen your coding skills. If you scratch your own itch even better (last week's &lt;a href="https://pybit.es/codechallenge26_review.html"&gt;Pomodori Tracker&lt;/a&gt; for example is something we use on a daily basis now).&lt;/p&gt;
&lt;h3&gt;Further resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://praw.readthedocs.io/en/latest/"&gt;PRAW docs&lt;/a&gt; - probably your number one goto. The easiest way to get PRAW running is to &lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;create a virtual env&lt;/a&gt; and do a &lt;code&gt;pip install praw&lt;/code&gt; and follow the docs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/reddit/reddit/wiki/API"&gt;Reddit API resources page&lt;/a&gt; - info on OAuth / API limits / links to other wrapper modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Please share&lt;/h3&gt;
&lt;p&gt;While you're at it, if you like this challenge upvote it &lt;a href="https://redd.it/6ml3hv"&gt;on Reddit&lt;/a&gt; or retweet it on &lt;a href="https://twitter.com/pybites/status/884702973795987458"&gt;Twitter&lt;/a&gt;. The more people coding with us == more possible PR submissions for our review == the more we all learn from this!&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="reddit"></category><category term="API"></category><category term="PRAW"></category><category term="news"></category><category term="dailyprogrammer"></category><category term="data"></category><category term="data analysis"></category><category term="textblob"></category><category term="bot"></category><category term="word clouds"></category><category term="nltk"></category></entry><entry><title>Code Challenge 26 - Create a Simple Python GUI - Review</title><link href="https://pybit.es/codechallenge26_review.html" rel="alternate"></link><published>2017-07-10T11:30:00+02:00</published><updated>2017-07-10T11:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-10:/codechallenge26_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge26.html"&gt;Create a Simple Python GUI&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge26.html"&gt;Create a Simple Python GUI&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; made a &lt;em&gt;Reading Progress Pomodori Tracker GUI&lt;/em&gt; inspired by the article: &lt;a href="https://kimschlesinger.com/blog/read-more.html"&gt;How to Read More&lt;/a&gt;. It uses &lt;a href="http://pythonhosted.org/easygui/"&gt;easygui&lt;/a&gt; and &lt;a href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. For more info, see &lt;a href="https://github.com/pybites/challenges/tree/community/26/bbelderbos"&gt;the README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodori app" src="https://pybit.es/images/pomodori-app1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodori app" src="https://pybit.es/images/pomodori-app2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; continued his &lt;a href="https://pybit.es/guest-pytrack-app.html"&gt;&lt;em&gt;pyTrack&lt;/em&gt;&lt;/a&gt; project wrapping a GUI around it using &lt;a href="https://docs.python.org/3/library/tkinter.html#module-tkinter"&gt;tkinter&lt;/a&gt;. Nice addition, will make it more usable. See &lt;a href="https://github.com/pybites/challenges/tree/community/26/clamytoe"&gt;the README&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pytrack gui" src="https://pybit.es/images/pytrack-gui.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;Stay tuned for our new challenge tomorrow ...&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. We can always update our review posts with new PRs.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="GUI"></category><category term="tkinter"></category><category term="easygui"></category><category term="matplotlib"></category><category term="pyTrack"></category><category term="pygame"></category></entry><entry><title>Twitter digest 2017 week 27</title><link href="https://pybit.es/twitter_digest_201727.html" rel="alternate"></link><published>2017-07-09T17:52:00+02:00</published><updated>2017-07-09T17:52:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-09:/twitter_digest_201727.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don‚Äôt think I could start this digest with any other tweet!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#100daysofcode" target="_blank"&gt;#100daysofcode&lt;/a&gt; + 200 Days of PyBites! We recap the challenge, 10 stand out scripts and our next project here &lt;a href="https://t.co/RNTI13cjvm" title="https://t.co/RNTI13cjvm" target="_blank"&gt;https://t.co/RNTI13cjvm&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/883308644883812352" data-datetime="2017-07-07T12:56:06+00:00"&gt;July 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@GKLauraF:" target="_blank"&gt;@GKLauraF:&lt;/a&gt; Saw this interesting project featured in &lt;a href="https://twitter.com/@PythonWeekly" target="_blank"&gt;@PythonWeekly&lt;/a&gt; &lt;a href="https://t.co/I3KqG8UNHc" title="https://t.co/I3KqG8UNHc" target="_blank"&gt;https://t.co/I3KqG8UNHc&lt;/a&gt; &lt;a href="https://twitter.com/search/#github" target="_blank"&gt;#github&lt;/a&gt; &lt;a href="https://twitter.com/search/#RaspberryPi" target="_blank"&gt;#RaspberryPi&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/883069922775109634" data-datetime="2017-07-06T21:07:30+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Update: Animated version of previous tweet to show steps sequentially. &lt;a href="https://t.co/PIp63byPLH" title="https://t.co/PIp63byPLH" target="_blank"&gt;https://t.co/PIp63byPLH&lt;/a&gt; &lt;a href="https://t.co/Xqx3cqLUnQ" title="https://t.co/Xqx3cqLUnQ" target="_blank"&gt;https://t.co/Xqx3cqLUnQ&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/883793455897620484" data-datetime="2017-07-08T21:02:34+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;scikit-plot: An &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; library to add plotting functionality to scikit-learn objects. &lt;a href="https://twitter.com/search/#dataviz‚Ä¶" target="_blank"&gt;#dataviz‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/Bba5apZblT" title="https://t.co/Bba5apZblT" target="_blank"&gt;https://t.co/Bba5apZblT&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/883341575950151680" data-datetime="2017-07-07T15:06:58+00:00"&gt;July 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@fullstackpython:" target="_blank"&gt;@fullstackpython:&lt;/a&gt; How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS &lt;a href="https://t.co/2wObQPPJDD" title="https://t.co/2wObQPPJDD" target="_blank"&gt;https://t.co/2wObQPPJDD&lt;/a&gt; &lt;a href="https://t.co/dIVp0zgbkk" title="https://t.co/dIVp0zgbkk" target="_blank"&gt;https://t.co/dIVp0zgbkk&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/883758485430730752" data-datetime="2017-07-08T18:43:37+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A very simple Lisp interpreter in 250 lines of Python. Cool exercise &amp;amp; well documented! &lt;a href="https://t.co/4D2CUEtFdY" title="https://t.co/4D2CUEtFdY" target="_blank"&gt;https://t.co/4D2CUEtFdY&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/883746255146557443" data-datetime="2017-07-08T17:55:01+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;100 days of algorithms - the challenge is over. &lt;a href="https://t.co/6DguVcE5IA" title="https://t.co/6DguVcE5IA" target="_blank"&gt;https://t.co/6DguVcE5IA&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/883734500575981568" data-datetime="2017-07-08T17:08:18+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Five Tips To Get You Started With Jupyter ... &lt;a href="https://t.co/bluM53gJqo" title="https://t.co/bluM53gJqo" target="_blank"&gt;https://t.co/bluM53gJqo&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; &lt;a href="https://twitter.com/search/#visualization" target="_blank"&gt;#visualization&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/883056320735203329" data-datetime="2017-07-06T20:13:27+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Take ten minutes to improve your &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; and math skills. Get schooled by Mark Dickinson. &lt;a href="https://t.co/BoE236tL07" title="https://t.co/BoE236tL07" target="_blank"&gt;https://t.co/BoE236tL07&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/881502724919054337" data-datetime="2017-07-02T13:20:01+00:00"&gt;July 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Fourth Beta of "Python Testing with pytest" now available. &lt;a href="https://t.co/lwcq9i1quR" title="https://t.co/lwcq9i1quR" target="_blank"&gt;https://t.co/lwcq9i1quR&lt;/a&gt; &lt;a href="https://t.co/3FHUhReRGY" title="https://t.co/3FHUhReRGY" target="_blank"&gt;https://t.co/3FHUhReRGY&lt;/a&gt;&lt;/p&gt;‚Äî Brian Okken (@brianokken) &lt;a href="https://twitter.com/brianokken/status/883096179671678976" data-datetime="2017-07-06T22:51:51+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to use Python &amp;amp; Flask to upload files to AWS S3 &lt;a href="https://t.co/1jedW8x9k8" title="https://t.co/1jedW8x9k8" target="_blank"&gt;https://t.co/1jedW8x9k8&lt;/a&gt; &lt;a href="https://t.co/QL68jyxqiE" title="https://t.co/QL68jyxqiE" target="_blank"&gt;https://t.co/QL68jyxqiE&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/883677811336241155" data-datetime="2017-07-08T13:23:02+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@APIguy:" target="_blank"&gt;@APIguy:&lt;/a&gt; If you're not already using &lt;a href="https://twitter.com/search/#pipenv" target="_blank"&gt;#pipenv&lt;/a&gt; in your &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; workflow...start right now. Thanks &lt;a href="https://twitter.com/@kennethreitz" target="_blank"&gt;@kennethreitz&lt;/a&gt; &lt;a href="https://t.co/hgl4zk1YBH" title="https://t.co/hgl4zk1YBH" target="_blank"&gt;https://t.co/hgl4zk1YBH&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz üêç (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/882641719396892672" data-datetime="2017-07-05T16:45:59+00:00"&gt;July 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;404 link detector with scrapy &lt;a href="https://t.co/T6iI1E1A5K" title="https://t.co/T6iI1E1A5K" target="_blank"&gt;https://t.co/T6iI1E1A5K&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/883083251966922752" data-datetime="2017-07-06T22:00:28+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Create XKCD-like plots with &lt;a href="https://twitter.com/search/#matplotlib:" target="_blank"&gt;#matplotlib:&lt;/a&gt; &lt;a href="https://t.co/AzSFgaof7W" title="https://t.co/AzSFgaof7W" target="_blank"&gt;https://t.co/AzSFgaof7W&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/19OX0Hy8k8" title="https://t.co/19OX0Hy8k8" target="_blank"&gt;https://t.co/19OX0Hy8k8&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/882871740468035584" data-datetime="2017-07-06T08:00:00+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ankurb:" target="_blank"&gt;@ankurb:&lt;/a&gt; I've been trying to get all Python devs on our team to laugh at this: What do you call a folder of unrelated Django code? Djan‚Ä¶&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/883755656729292801" data-datetime="2017-07-08T18:32:22+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@vboykis:" target="_blank"&gt;@vboykis:&lt;/a&gt; Disciplining a child: 1950s: Spanking 1970s: Go to your room 1990s: Timeout 2010s: &lt;a href="https://t.co/snBCYJymhG" title="https://t.co/snBCYJymhG" target="_blank"&gt;https://t.co/snBCYJymhG&lt;/a&gt;&lt;/p&gt;‚Äî Vincent Driessen (@nvie) &lt;a href="https://twitter.com/nvie/status/882501558050721792" data-datetime="2017-07-05T07:29:02+00:00"&gt;July 05, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="pybites"></category><category term="raspberry pi"></category><category term="matplotlib"></category><category term="scikit"></category><category term="Django"></category><category term="flask"></category><category term="ubuntu"></category><category term="Lisp"></category><category term="algorithms"></category><category term="math"></category><category term="pytest"></category><category term="AWS"></category><category term="scrapy"></category><category term="jupyter"></category></entry><entry><title>200 Days of PyBites, 100 Days of Code and our Next Project</title><link href="https://pybit.es/special-100days-of-code.html" rel="alternate"></link><published>2017-07-07T13:23:00+02:00</published><updated>2017-07-07T13:23:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-07:/special-100days-of-code.html</id><summary type="html">&lt;p&gt;&lt;a href="https://twitter.com/pybites/status/883219041912987648"&gt;We did it!&lt;/a&gt; #100DaysOfCode is done: 5K lines of code, 100 scripts. Just on the day PyBites turns 200 days. In this article we will share our learning on this major project and announce our next 100 days effort ...&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;We highly recommend doing 100 Days no matter your level. Being aspiring or experienced programmers, you need deliberate practice. A lot of it. We can now assure you that 100Days makes you practice. And with the public commitment it's also a way to enhance your portfolio. - PyBites&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/pybites/status/883219041912987648"&gt;We did it!&lt;/a&gt; #100DaysOfCode is done: 5K lines of code, 100 scripts. Just on the day PyBites turns 200 days. In this article we will share our learning on this major project and announce our next 100 days effort ...&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pybit.es/special-100days.html"&gt;Last 100 days celebration&lt;/a&gt; we rewarded ourselves with a challenge: do the &lt;a href="https://medium.freecodecamp.org/join-the-100daysofcode-556ddb4579e4"&gt;100 Days of Code Challenge&lt;/a&gt;. Today is &lt;em&gt;Day 100&lt;/em&gt; and we confirm: &lt;em&gt;mission accomplished&lt;/em&gt;. With busy schedules it was not always easy, but we delivered. More on this in the Retrospective towards the end. First let us break it down ...&lt;/p&gt;
&lt;h2&gt;Stats&lt;/h2&gt;
&lt;p&gt;Here is our &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100DaysOfCode repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/100"&gt;We wrote roughly 5K lines of code&lt;/a&gt;, divided into 100 scripts, one each day:&lt;/p&gt;
&lt;p&gt;&lt;img alt="distribution of LOC per script" src="https://pybit.es/images/100d_histogram.png"&gt;&lt;/p&gt;
&lt;p&gt;We &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/007"&gt;auto-tweeted&lt;/a&gt; our progress each day which was tracked in our &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/LOG.md"&gt;log file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/096"&gt;most popular tweets&lt;/a&gt; were: &lt;/p&gt;
&lt;p&gt;&lt;img alt="most popular tweets" src="https://pybit.es/images/100d_most_popular.png"&gt;&lt;/p&gt;
&lt;h2&gt;Module Index&lt;/h2&gt;
&lt;p&gt;We ended up using exactly 100 modules as well (weird coincidence LOL):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;      &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;42.0&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt;
&lt;span class="n"&gt;stdlib&lt;/span&gt;    &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;38.0&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt;
&lt;span class="n"&gt;own&lt;/span&gt;       &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt;
&lt;span class="o"&gt;------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see the full index &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/021/index.txt"&gt;of used modules&lt;/a&gt;. Here you can pick your module and go directly to the days where we used it. &lt;/p&gt;
&lt;p&gt;Find something useful? You can thank us by starring the repo. &lt;/p&gt;
&lt;p&gt;See any issue or things we can improve? Fork the repo and make a Pull Request. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Do notice&lt;/em&gt; that some scripts are in a pretty basic state. Time was not always on our side. We need a round 2 to do some cleanup. Bear   with us ...&lt;/p&gt;
&lt;h2&gt;Showcase of 10 Utilities&lt;/h2&gt;
&lt;p&gt;Here are some scripts we specially liked:&lt;/p&gt;
&lt;h3&gt;1. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/086"&gt;Day 086&lt;/a&gt; - Twitter Archive Stats&lt;/h3&gt;
&lt;p&gt;Script to pull some quick stats from a #Twitter Archive CSV&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Using Counter and csv.Dictreader. Simple exercise, yet useful data. You can run it yourself downloading your Twitter Archive in Settings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Twitter archive stats" src="https://pybit.es/images/100d_twitter-archive.png"&gt;&lt;/p&gt;
&lt;p&gt;(refactored into a package later - see &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/093"&gt;Day 093&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;2. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/014"&gt;Day 014&lt;/a&gt; - Lynda.com new Python course auto-tweeter&lt;/h3&gt;
&lt;p&gt;Script to automatically tweet out new @lynda (#Python) titles&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Feedparser is awesome. Want to run it with filter on Python. Abstracted twitter config away in repo's common dir (re-use).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We were &lt;em&gt;surprised&lt;/em&gt; to find &lt;em&gt;us&lt;/em&gt; tweeting out this one yesterday ;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="lynda notifications" src="https://pybit.es/images/100d_lynda.png"&gt;&lt;/p&gt;
&lt;h3&gt;3. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/059"&gt;Day 059&lt;/a&gt; - Send an SMS with Twilio&lt;/h3&gt;
&lt;p&gt;Using the #Twilio #API to send SMS messages&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Prework for another app where I want to use Twilio to send reminder notification and text friends :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="twilio API" src="https://pybit.es/images/100d_twilio.png"&gt;&lt;/p&gt;
&lt;h3&gt;4. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Day 013&lt;/a&gt; - Weather app&lt;/h3&gt;
&lt;p&gt;A simple #Flask app to compare weather of 2 cities (using OpenWeatherMap #API)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) This was a nice follow-up of 012, making it more generic (support any city), using Jinja templating, Flask form handling, and of course a good chunk of timezone handling (for sunset and sunrise)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="weather compare app" src="https://pybit.es/images/weather-app.png"&gt;&lt;/p&gt;
&lt;p&gt;This led to &lt;a href="https://pybit.es/flask-simple-weather-app.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;5. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/099"&gt;Day 099&lt;/a&gt; - Flask photo gallery&lt;/h3&gt;
&lt;p&gt;Simple #Flask app to display photos in a directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) This is a very basic app to demonstrate displaying images using Flask and Jinja templates. All photos need to be stored in the "static" dir within the Flask folder structure. The glob module is used to parse the photo dir. The app can and will be expanded and refactored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="flask gallery" src="https://pybit.es/images/100d_photo_gallery.png"&gt;&lt;/p&gt;
&lt;h3&gt;6. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/003"&gt;Day 003&lt;/a&gt; - Gif image creator&lt;/h3&gt;
&lt;p&gt;Script to generate a gif from various png/jpg images&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Useful for blog, awesome: pip install imageio, cli arg interface is more code :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="example gif made with script" src="https://pybit.es/images/slackbot.gif"&gt;&lt;/p&gt;
&lt;h3&gt;7. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/033"&gt;Day 033&lt;/a&gt; - Water reminder app&lt;/h3&gt;
&lt;p&gt;I need to drink more water at work so I wrote a #Python #script to remind (spam) me every hour&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) A simple script using MIME and a cron job (read the readme.txt) to remind me to drink more water at work! Doesn't email on the weekends or before/after hours. Over the top? Maybe. Satisfying? Hell yes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="water drinking app" src="https://pybit.es/images/100d_waterdrinking-app.png"&gt;&lt;/p&gt;
&lt;h3&gt;8. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/022"&gt;Day 022&lt;/a&gt; - Amazon affiliation link generator&lt;/h3&gt;
&lt;p&gt;Create and paste #Amazon affiliation link to clipboard #pyperclip @AlSweigart&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) A nice little utility to copy an take Amazon link from clipboard, convert it into an affiliation link and paste it back to clipboard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="amazon affiliation link generator" src="https://pybit.es/images/100d_affiliation_link_creator.png"&gt;&lt;/p&gt;
&lt;h3&gt;9. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/074"&gt;Day 074&lt;/a&gt; - Making a ecard with Pillow&lt;/h3&gt;
&lt;p&gt;Using Pillow to add text and opacity to an image = your own cards&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Played with the Pillow module. Script to let user enter an image path (or url) and text to put on the image. Pillow does the rest. Could be a useful recipe to make your own Birthday cards :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="putting text on image with PIL" src="https://pybit.es/images/100d_pillow.png"&gt;&lt;/p&gt;
&lt;h3&gt;10. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/080"&gt;Day 080&lt;/a&gt; - "Is this Bob or Julian?"&lt;/h3&gt;
&lt;p&gt;"Is this Bob or Julian?" - script to reveal who of @pybites tweets&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Fun little exercise that started with Anthony Shaw asking who he was talking to - it actually became more involved turning/testing out location on our tweets and adding exception handling ... nice practice! (and a funny new service for our PyBites community)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="who tweets script" src="https://pybit.es/images/100d_twotweeted.png"&gt;&lt;/p&gt;
&lt;h3&gt;Bonus &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/009"&gt;Day 009&lt;/a&gt; - as we initiated this post ...&lt;/h3&gt;
&lt;p&gt;Interactive script to create a new Pelican blog article&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) A lot of known concepts, but nice to bring a lot of functionality together, and above all a really useful script for our blog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As we started this post: HAPPY BIRTHDAY!&lt;/p&gt;
&lt;p&gt;&lt;img alt="easter egg" src="https://pybit.es/images/100d_newpost.png"&gt;&lt;/p&gt;
&lt;h2&gt;Retrospective&lt;/h2&gt;
&lt;p&gt;As you can see, not only did we get a lot of code written but we had a hell of a lot of fun doing it!&lt;/p&gt;
&lt;p&gt;That‚Äôs the only way we got to 100 days with our sanity intact. It wasn‚Äôt easy in the least: Family, Kids, new jobs, and the usual PyBites responsibilities didn‚Äôt leave us with a heap of time but we managed to push and get there in the end. Again, the fun factor is what made it achievable.&lt;/p&gt;
&lt;p&gt;Looking back on the 100 days, it‚Äôs quite shocking to see how much we accomplished and learned. Julian developed an almost obsessive love affair with Flask (not a hip flask) and Bob created some truly outstanding, fully functional applications.&lt;/p&gt;
&lt;p&gt;The challenge also gave us the opportunity to scratch our own itches. Julian was able to create a &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/045"&gt;Steam Games notification service&lt;/a&gt; for himself and Bob &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/061"&gt;assigned himself reading goals using Twilio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While it was insanely tough, the payoff has been huge! We‚Äôve honed our skills, created tools, learned new modules and even developed relationships with other coders - all from participating in the challenge.&lt;/p&gt;
&lt;p&gt;We encourage anyone with a love of programming to take the 100 days of code challenge. Dedicating ourselves to a working script every day was a bit on the crazy side though and is by no means a requirement for the challenge. Just remember, &lt;strong&gt;anything&lt;/strong&gt; is better than nothing so give it a crack!&lt;/p&gt;
&lt;h2&gt;next(PyBites.projects) ?!&lt;/h2&gt;
&lt;p&gt;Yes, the rumors are true: our next 100 days project will be around learning Django. &lt;/p&gt;
&lt;p&gt;We will work incrementally on 2 or 3 projects which we will announce as we go. We will also tailor some articles and code challenges around this effort, so you can learn with us. &lt;/p&gt;
&lt;p&gt;This will be a lot of fun and with this major project under our belt, we're sure that we will learn a thing or two about Django which we hope you can benefit from too. &lt;/p&gt;
&lt;p&gt;Stay tuned ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="pybites"></category><category term="100DaysOfCode"></category><category term="learning"></category><category term="modules"></category><category term="special"></category><category term="milestone"></category><category term="lessons"></category><category term="community"></category><category term="automation"></category><category term="utilities"></category><category term="scripts"></category><category term="100DaysOfDjango"></category></entry><entry><title>From Challenge to Project - How I Made PyTrack, Learning Modules and Packaging</title><link href="https://pybit.es/guest-pytrack-app.html" rel="alternate"></link><published>2017-07-07T08:45:00+02:00</published><updated>2017-07-07T08:45:00+02:00</updated><author><name>Martin Uribe</name></author><id>tag:pybit.es,2017-07-07:/guest-pytrack-app.html</id><summary type="html">&lt;p&gt;This is a guest post by Martin, a passionate Pythonista who turns our code challenges into cool projects. In this article he describes his process of building &lt;a href="https://github.com/clamytoe/pyTrack/"&gt;pyTrack&lt;/a&gt;, a simple task time tracker. Not only did he learn various Python modules - PeeWee, Maya and Click - he also stunned us delivering a project with great documentation and properly packaged code.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Lessons learned during the making of pyTrack&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a guest post by Martin, a passionate Pythonista who turns our code challenges into cool projects. In this article he describes his process of building &lt;a href="https://github.com/clamytoe/pyTrack/"&gt;pyTrack&lt;/a&gt;, a simple task time tracker. Quoting the Readme:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pyTrack helps you keep track of how much time you spend on your projects and tasks. A sqlite database is used to track your time logs, and it is kept simple by only implementing as few commands as needed to get a full featured application. You can add/remove multiple projects, start/stop tracking any of them, or completely reset the database to start with a clean slate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only did he learn various Python modules - PeeWee, Maya and Click - he also stunned us delivering a project with great documentation (check out &lt;a href="https://github.com/clamytoe/pyTrack/blob/master/README.md"&gt;the README&lt;/a&gt;!) and properly packaged code. &lt;/p&gt;
&lt;p&gt;Enter Martin:&lt;/p&gt;
&lt;h2&gt;PyBites Challenge #23&lt;/h2&gt;
&lt;p&gt;When I first heard about &lt;a href="https://pybit.es/codechallenge23.html"&gt;this challenge&lt;/a&gt;, my interest was immediately peaked. It sounded like something that I could use myself on a regular basis. I knew from the get go that I wanted to use &lt;a href="https://github.com/kennethreitz/maya"&gt;Maya&lt;/a&gt; for keeping track of the timestamps so I installed it and got to work. Things were going great: I wrote up my classes and was able to create objects and save timestamps, pull them back out and get time intervals and such.&lt;/p&gt;
&lt;p&gt;It seemed like a relatively simple challenge. I knew that I needed a database back-end and didn't want to use &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; again, so I decided to up the stakes a bit by using &lt;a href="https://github.com/coleifer/peewee"&gt;PeeWee&lt;/a&gt; ORM. &lt;/p&gt;
&lt;p&gt;I'm usually able to figure things out by checking the docs and playing around with the code. Time was not on my side this time though so I could only work on this sporadically over a couple of weeks. It was hard going at first. I mostly struggled with getting to know how to use PeeWee. Maya on the other hand was relatively easy to pick up.&lt;/p&gt;
&lt;h2&gt;PeeWee and Maya&lt;/h2&gt;
&lt;p&gt;One thing was certain: all of the work that I had already put into creating the classes and tests for this would have to be tossed and replaced with the class models for &lt;em&gt;PeeWee&lt;/em&gt;...&lt;/p&gt;
&lt;p&gt;Figuring out a one-to-many relationship was one of my first hurdles. I read the docs a bit and looked at some quick tutorials. They were very basic, so my implementation ended up basic. I recently came across &lt;a href="http://blog.adnansiddiqi.me/develop-database-driven-applications-in-python-with-peewee/"&gt;Adnan's Random bytes&lt;/a&gt; blog, that would have came in really handy when I was first developing this. The way he sets his relationships is how I should have done it.&lt;/p&gt;
&lt;p&gt;Another thing that threw me off was not being able to save &lt;em&gt;MayaDT&lt;/em&gt; objects into the database. Only I didn't realize that it was the problem that I was having! The error messages from PeeWee were really cryptic and hard to follow.&lt;/p&gt;
&lt;p&gt;After a few days of cursing and messing around with it, it finally hit me! &lt;em&gt;PeeWee&lt;/em&gt; was expecting me to store &lt;em&gt;datetime&lt;/em&gt; objects because that's what I had declared them as in the models! As soon as I converted the &lt;em&gt;Maya&lt;/em&gt; objects into the correct format, I was able to get the ball rolling.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; now&lt;span class="o"&gt;()&lt;/span&gt;.datetime&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next issue was when I would pull those timestamps back out to get my time intervals, &lt;em&gt;Maya&lt;/em&gt; was not having it. Fortunate for me, the author of &lt;em&gt;Maya&lt;/em&gt;, had already solved that problem. Instead of using the normal &lt;em&gt;MayaInterval()&lt;/em&gt; I had to do it this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MayaInterval.from_datetime&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you would think that would be it, but no, that introduced another issue. See, with the normal &lt;em&gt;MayaInterval&lt;/em&gt; method, your local timezone is automatically determined and taken care of. Not so with the &lt;em&gt;.from_datetime()&lt;/em&gt; one. It took me a while to figure out why it was failing when it had all been working before the addition of &lt;em&gt;PeeWee&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It turns out that I couldn't simply just use the &lt;em&gt;datetime&lt;/em&gt; entries that I had placed into the database. I had to first get the timezone and then feed that into &lt;em&gt;.from_datetime()&lt;/em&gt;. The timezone object has many properties, the one that I was interested in was &lt;strong&gt;zone&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# set local timezone&lt;/span&gt;
&lt;span class="nv"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_localzone&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;local_tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; timezone.zone

&lt;span class="c1"&gt;# import datetime objects from database&lt;/span&gt;
...

&lt;span class="c1"&gt;# parse them into the proper formats&lt;/span&gt;
&lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; parse&lt;span class="o"&gt;(&lt;/span&gt;log.start_time&lt;span class="o"&gt;)&lt;/span&gt;.datetime&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;to_timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;local_tz, &lt;span class="nv"&gt;naive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;stop&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; parse&lt;span class="o"&gt;(&lt;/span&gt;log.stop_time&lt;span class="o"&gt;)&lt;/span&gt;.datetime&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;to_timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;local_tz, &lt;span class="nv"&gt;naive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get the interval&lt;/span&gt;
&lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MayaInterval.from_datetime&lt;span class="o"&gt;(&lt;/span&gt;start, stop&lt;span class="o"&gt;)&lt;/span&gt;.timedelta
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;timedelta&lt;/em&gt; converts the interval object into &lt;em&gt;0:00:00&lt;/em&gt; format, which is exactly what I wanted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note from PyBites: we definitely recognize this kind of struggle using new modules and technologies. This is why we encourage learning by code challenges. Reading a book about technology only gets you so far. It's when you start &lt;em&gt;using&lt;/em&gt; the technology that you run in many (context) specific issues. This can be frustrating, but practice enough and you will be on your way to mastery. We think Martin's &lt;em&gt;pyTrack&lt;/em&gt; is a great example of this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;User interface - plan ahead!&lt;/h2&gt;
&lt;p&gt;Once everything was working smoothly, I remembered that I wanted to make this into a command-line utility. &lt;/p&gt;
&lt;p&gt;A common mistake is to just start coding which often leads to having to rewrite a lot of your code. In that regard I think next time I‚Äôll build out the command-line interface first and then add the code for it. &lt;/p&gt;
&lt;p&gt;I started to add &lt;a href="https://github.com/pallets/click"&gt;Click&lt;/a&gt; to get the CLI functionality. I had already used Click before so I thought that it would be pretty easy to add it as an afterthought. Boy was I wrong!&lt;/p&gt;
&lt;p&gt;Let's just say that I patched it onto my existing code but then had to refactor the whole thing out once again so that the command-line portion of the code would be its own separate file. This will make it easier to add a GUI later on, if I get the motivation to do it.&lt;/p&gt;
&lt;p&gt;My biggest roadblock here was in trying to get the project listing to show whenever no arguments were passed. None of the documentation or tutorials that I found showed how to do this. Took me a while to figure out that you have to call the method that starts off &lt;em&gt;Click&lt;/em&gt; and since every example that I ran into in the wild started out that way, I thought it was a requirement.&lt;/p&gt;
&lt;p&gt;I modified my main function so that it would look for command-line arguments and take action appropriately.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
        &lt;span class="k"&gt;if&lt;/span&gt; len&lt;span class="o"&gt;(&lt;/span&gt;argv&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;:
            cli&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;:
            &lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_projects&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have that portion of the code wrapped in other code that opens and closes the connection to the database. I found it easier to do it this way instead of using function decorators.&lt;/p&gt;
&lt;h2&gt;Packaging&lt;/h2&gt;
&lt;p&gt;Last but not least came time to package the whole thing. PyBites wrote up &lt;a href="https://pybit.es/python-packaging.html"&gt;an excellent tutorial&lt;/a&gt; on how to do it, so I won't repeat it here. I actually learned from it myself and implemented some of it on this project, so go and have a read.&lt;/p&gt;
&lt;p&gt;I should also give a shout out to &lt;a href="https://twitter.com/dbader_org"&gt;Dan Bader&lt;/a&gt; and thank him for his excellent &lt;a href="https://dbader.org/blog/write-a-great-readme-for-your-github-project"&gt;README-Template for your GitHub project&lt;/a&gt;, which I use on every single project that I write. It takes your documentation from being so so, up to pro level!&lt;/p&gt;
&lt;p&gt;I haven‚Äôt covered a lot about actually using my project. I think I did a pretty good job of explaining how it works in the &lt;a href="https://github.com/clamytoe/pyTrack"&gt;README&lt;/a&gt;, so check it out for yourself and feel free to contact me with any suggestions on how to improve it.&lt;/p&gt;
&lt;p&gt;One more bit of advice when starting your own projects. Do a quick &lt;strong&gt;pip&lt;/strong&gt; search for your potential project name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip search pyTrack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wasn't planning on pushing this out to &lt;a href="https://pypi.python.org/pypi"&gt;pypi&lt;/a&gt;, but now that I'm considering it I'm running into the problem that &lt;strong&gt;pyTrack&lt;/strong&gt; is already taken! Not only will I have to come up with a new name, but I'm also going to have to rename my GitHub repo to reflect the change.&lt;/p&gt;
&lt;p&gt;Conclusion: put in a little bit of leg work at the beginning and save yourself the hassle. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#martinuribe"&gt;Martin&lt;/a&gt;&lt;/p&gt;</content><category term="challenges"></category><category term="guest"></category><category term="PyTrack"></category><category term="packaging"></category><category term="peewee"></category><category term="click"></category><category term="maya"></category><category term="learning"></category></entry><entry><title>Code Challenge 26 - Create a Simple Python GUI</title><link href="https://pybit.es/codechallenge26.html" rel="alternate"></link><published>2017-07-04T20:30:00+02:00</published><updated>2017-07-04T20:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-04:/codechallenge26.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Web apps tend to get all the love so it‚Äôs about time we shared the spotlight with GUIs. This week let‚Äôs take our first dive as a PyBites Community into Python GUIs!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Web apps tend to get all the love so it‚Äôs about time we shared the spotlight with GUIs. This week let‚Äôs take our first dive as a PyBites Community into Python GUIs!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;We‚Äôre keeping this simple as this will be the first foray into GUIs for a lot of you (us included). All we‚Äôre asking you to do is create a simple GUI. Done!&lt;/p&gt;
&lt;p&gt;You can use whatever framework or toolkit that floats your boat, just be creative and come up with a plain old GUI screen.&lt;/p&gt;
&lt;p&gt;You could use an image as a backdrop with some overlays or even create your own type of Game ‚ÄúMain Menu‚Äù screen. The choice is yours.&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;We imagine that this may be a bit too simple for some of you, or may just be quicker to achieve than you thought. If that‚Äôs the case, why not add some functionality to the GUI? Consider this a bonus objective - not mandatory in the least.&lt;/p&gt;
&lt;p&gt;For example, with the Game Main Menu screen, you could make a ‚ÄúCredits‚Äù button that then links to another screen which scrolls through fictional names.&lt;/p&gt;
&lt;p&gt;Create a stopwatch GUI that actually has timing functionality. How about a calculator?&lt;/p&gt;
&lt;p&gt;Whatever you decide, create a working GUI with added functionality and earn extra kudos.&lt;/p&gt;
&lt;h2&gt;A few resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The two main toolkits that come to mind are &lt;a href="https://wiki.python.org/moin/TkInter"&gt;TkInter&lt;/a&gt; and &lt;a href="http://pygame.org/"&gt;PyGame&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out this comprehensive &lt;a href="https://wiki.python.org/moin/GuiProgramming"&gt;list of Frameworks/Toolkits&lt;/a&gt; to get started.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="beginners"></category><category term="GUI"></category><category term="frameworks"></category><category term="toolkits"></category><category term="tkinter"></category><category term="pygame"></category></entry><entry><title>Code Challenge 25 - Notification Service of Now Playing and Upcoming Movies - Review</title><link href="https://pybit.es/codechallenge25_review.html" rel="alternate"></link><published>2017-07-03T11:20:00+02:00</published><updated>2017-07-03T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-03:/codechallenge25_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge25.html"&gt;Notification Service of Now Playing and Upcoming Movies&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge25.html"&gt;Notification Service of Now Playing and Upcoming Movies&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;The Movie Database (TMDb)&lt;/h3&gt;
&lt;p&gt;This challenge we focused on &lt;a href="https://www.themoviedb.org/documentation/api"&gt;TMDb's API&lt;/a&gt; to send html emails of movies / tv series. We decided to query 4 API endpoints: now playing movies, upcoming movies, popular TV series, and on-the-air TV series. &lt;/p&gt;
&lt;p&gt;We used 2 shelves for caching: movie info and items sent (to avoid duplicates in the mails). We also got to play with decorators and classes. We used &lt;a href="https://pypi.python.org/pypi/tmdbsimple"&gt;tmdbsimple&lt;/a&gt; to interface with TMDb's API.&lt;/p&gt;
&lt;p&gt;We followed &lt;a href="https://pybit.es/python-packaging.html"&gt;what we learned about packaging&lt;/a&gt; to structure our modules. Having a notifications package now makes it easier to add a Twitter bot later on for example.&lt;/p&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/pybites/challenges/tree/community/25/bbelderbos"&gt;here&lt;/a&gt; and this is a screenshot of part of the notification email:&lt;/p&gt;
&lt;p&gt;&lt;img alt="upcoming movies" src="https://pybit.es/images/upcoming-movies.png"&gt;&lt;/p&gt;
&lt;p&gt;We did not have time to build a front-end to add filters. We did start a login system in Flask but ran out of time. I think this would be a nice exercise for us learning Django. To be continued ...&lt;/p&gt;
&lt;h3&gt;PRs&lt;/h3&gt;
&lt;p&gt;We got a nice PR from &lt;a href="https://github.com/santiagobenitez"&gt;santiagobenitez&lt;/a&gt;: a single script allowing to filter on genre, year and vote average, using &lt;code&gt;argparse&lt;/code&gt;. It uses &lt;a href="https://www.mailgun.com/"&gt;mailgun&lt;/a&gt; - "The Email Service For Developers" - for emailing.&lt;/p&gt;
&lt;p&gt;His script demonstrates that it's not necessary to use a API wrapper package. He uses &lt;code&gt;requests&lt;/code&gt; which leads to compact code like: &lt;code&gt;movies_resp = requests.get(upcoming_movies_url, params=query_params)&lt;/code&gt; to query TMDb's API.&lt;/p&gt;
&lt;p&gt;You can checkout the code &lt;a href="https://github.com/pybites/challenges/blob/community/25/santiagobenitez/movies.py"&gt;here&lt;/a&gt;. We read in the PR: "This is my first ever python code ..." - really? Good job! &lt;/p&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;This was a challenge to sink your teeth in, there were many options, lot to code. This week we try to keep it simpler making the challenge smaller, not necessarily easier. We will also change topics a bit to do something entirely different: build a simple GUI app. Stay tuned ...&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="movies"></category><category term="series"></category><category term="digest"></category><category term="email"></category><category term="themoviedb"></category><category term="apis"></category><category term="argparse"></category><category term="requests"></category><category term="mailgun"></category></entry><entry><title>Twitter digest 2017 week 26</title><link href="https://pybit.es/twitter_digest_201726.html" rel="alternate"></link><published>2017-07-02T17:52:00+02:00</published><updated>2017-07-02T17:52:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-02:/twitter_digest_201726.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How cool is this? Too bad that I don't have a mac, I could rule my network! Wonder if I could get it to work on Pyt‚Ä¶ &lt;a href="https://t.co/H1PKdKDBpg" title="https://t.co/H1PKdKDBpg" target="_blank"&gt;https://t.co/H1PKdKDBpg&lt;/a&gt;&lt;/p&gt;‚Äî Mohhinder Suresh (@mohhinder) &lt;a href="https://twitter.com/mohhinder/status/881177568900239360" data-datetime="2017-07-01T15:47:58+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@johnjones4:" target="_blank"&gt;@johnjones4:&lt;/a&gt; An Interview With PGCLI and MYCLI Creator Amjith Ramanujam &lt;a href="https://t.co/fYeJDj2MWa" title="https://t.co/fYeJDj2MWa" target="_blank"&gt;https://t.co/fYeJDj2MWa&lt;/a&gt;&lt;/p&gt;‚Äî Amjith (@amjithr) &lt;a href="https://twitter.com/amjithr/status/879767723357519872" data-datetime="2017-06-27T18:25:45+00:00"&gt;June 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Over 15,000 kids across every province and territory created these projects during Canada Learning Code Week! (And‚Ä¶ &lt;a href="https://t.co/hbIeOFsGfG" title="https://t.co/hbIeOFsGfG" target="_blank"&gt;https://t.co/hbIeOFsGfG&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/881135310268022784" data-datetime="2017-07-01T13:00:03+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Effectively using&amp;nbsp;matplotlib &lt;a href="https://t.co/IJU1TKN7Gq" title="https://t.co/IJU1TKN7Gq" target="_blank"&gt;https://t.co/IJU1TKN7Gq&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/880761667373719552" data-datetime="2017-06-30T12:15:19+00:00"&gt;June 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@tjukanov:" target="_blank"&gt;@tjukanov:&lt;/a&gt; Optimal routes from &lt;a href="https://twitter.com/search/#London" target="_blank"&gt;#London&lt;/a&gt; to ~2000 locations in the UK. &lt;a href="https://t.co/snUvuzeDGb" title="https://t.co/snUvuzeDGb" target="_blank"&gt;https://t.co/snUvuzeDGb&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/880445916515323906" data-datetime="2017-06-29T15:20:39+00:00"&gt;June 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@VictorStinner:" target="_blank"&gt;@VictorStinner:&lt;/a&gt; Yeah! &lt;a href="https://twitter.com/@methane" target="_blank"&gt;@methane&lt;/a&gt; just made Python 3.7 startup 30% faster on macOS! (5% faster on Linux) &lt;a href="https://t.co/jM6lxowIog" title="https://t.co/jM6lxowIog" target="_blank"&gt;https://t.co/jM6lxowIog&lt;/a&gt; Don't impo‚Ä¶&lt;/p&gt;‚Äî Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/status/880180502073933824" data-datetime="2017-06-28T21:45:59+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Just launched a new course! &lt;a href="https://twitter.com/@MongoDB" target="_blank"&gt;@MongoDB&lt;/a&gt; for Python for Developers covering pymongo, &lt;a href="https://twitter.com/search/#mongoengine," target="_blank"&gt;#mongoengine,&lt;/a&gt; deployments and more &lt;a href="https:‚Ä¶" title="https:‚Ä¶" target="_blank"&gt;https:‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/880842818087997440" data-datetime="2017-06-30T17:37:47+00:00"&gt;June 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Flask Skeleton - a simple Flask starter project (UPDATED!) &amp;gt;&amp;gt; &lt;a href="https://t.co/Srf57p6TPO" title="https://t.co/Srf57p6TPO" target="_blank"&gt;https://t.co/Srf57p6TPO&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#flask" target="_blank"&gt;#flask&lt;/a&gt; &lt;a href="https://twitter.com/search/#webdev" target="_blank"&gt;#webdev&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/881322544724357120" data-datetime="2017-07-02T01:24:03+00:00"&gt;July 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building a Social Network Content Recommendation Service Using Factorisation Machines - Conor Duke &lt;a href="https://twitter.com/search/#pyconie" target="_blank"&gt;#pyconie&lt;/a&gt; &lt;a href="https://twitter.com/search/#pydata" target="_blank"&gt;#pydata&lt;/a&gt; &lt;a href="https://t.co/jRy1Vyo1E6" title="https://t.co/jRy1Vyo1E6" target="_blank"&gt;https://t.co/jRy1Vyo1E6&lt;/a&gt;&lt;/p&gt;‚Äî Python Ireland (@PythonIreland) &lt;a href="https://twitter.com/PythonIreland/status/880794326355279872" data-datetime="2017-06-30T14:25:06+00:00"&gt;June 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An intro to static type checking in Python 3.6: &lt;a href="https://t.co/pBxqmNDEuu" title="https://t.co/pBxqmNDEuu" target="_blank"&gt;https://t.co/pBxqmNDEuu&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/881209539483365376" data-datetime="2017-07-01T17:55:00+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brianokken:" target="_blank"&gt;@brianokken:&lt;/a&gt; You know you've gotten tons of value from Miguel's instruction. Pay it forward for future devs and keep the tutorial curren‚Ä¶&lt;/p&gt;‚Äî Brian Okken (@brianokken) &lt;a href="https://twitter.com/brianokken/status/879924323946971136" data-datetime="2017-06-28T04:48:01+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Multiple constructors: the pythonic way? [Score:13] &lt;a href="https://t.co/GhVPRY4S41" title="https://t.co/GhVPRY4S41" target="_blank"&gt;https://t.co/GhVPRY4S41&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/879473463844638722" data-datetime="2017-06-26T22:56:28+00:00"&gt;June 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; 3 gripe: List indexing is as slow as a dict lookup timeit -s 's=[0]' 's[0]' # 0.032 usec timeit -s 's={0:0}' 's[0]' # 0.0331 usec&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/879954202780368897" data-datetime="2017-06-28T06:46:45+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An overview of Vim (especially for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; development) &lt;a href="https://t.co/bDeMdqGKCo" title="https://t.co/bDeMdqGKCo" target="_blank"&gt;https://t.co/bDeMdqGKCo&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/880080138402017281" data-datetime="2017-06-28T15:07:10+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;kube-shell - Kubernetes shell: An integrated shell for working with the Kubernetes CLI &lt;a href="https://t.co/Hmx2U2w7JS" title="https://t.co/Hmx2U2w7JS" target="_blank"&gt;https://t.co/Hmx2U2w7JS&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/881256500139896832" data-datetime="2017-07-01T21:01:37+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Interesting!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Quora: Why did Pinterest move from Django to Flask: &lt;a href="https://t.co/LR3aLssbmD" title="https://t.co/LR3aLssbmD" target="_blank"&gt;https://t.co/LR3aLssbmD&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/880207939943968769" data-datetime="2017-06-28T23:35:01+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="code"></category><category term="Siri"></category><category term="voice"></category><category term="PGCLI"></category><category term="MYCLI"></category><category term="matplotlib"></category><category term="data science"></category><category term="MacOS"></category><category term="MongoDB"></category><category term="pymongo"></category><category term="training"></category><category term="Flask"></category><category term="pydata"></category><category term="type checking"></category><category term="Django"></category><category term="vim"></category><category term="constructors"></category><category term="Kubernetes"></category></entry><entry><title>Flask Web Server Port Mapping</title><link href="https://pybit.es/flask-ports.html" rel="alternate"></link><published>2017-07-01T20:31:00+02:00</published><updated>2017-07-01T20:31:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-07-01:/flask-ports.html</id><summary type="html">&lt;p&gt;A quick post on Flask App port mapping&lt;/p&gt;</summary><content type="html">&lt;p&gt;If like me you‚Äôre obsessed with Python Flask, you might have asked yourself, ‚ÄúHow on Earth do I run multiple Flask apps at the same time?!‚Äù.&lt;/p&gt;
&lt;p&gt;It‚Äôs actually pretty simple!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What Happens at Default Settings&lt;/h2&gt;
&lt;p&gt;Before I get to the solution, I‚Äôll first show you what happens if you leave everything at the default settings as it‚Äôs important to know.&lt;/p&gt;
&lt;p&gt;For this test I‚Äôm running my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/060"&gt;Pay Calculator App&lt;/a&gt; and my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/083"&gt;Timezone List App&lt;/a&gt; together.&lt;/p&gt;
&lt;p&gt;The app you launch &lt;em&gt;first&lt;/em&gt; will always take priority. In this case, my Pay Calculator interface shows up on 127.0.0.1:5000. The interesting thing is that when I run the Timezone App, there‚Äôs no error. Python still launches a web server on 127.0.0.1:5000.&lt;/p&gt;
&lt;p&gt;The catch is that all calls from my browser to localhost (127.0.0.1) are routed to the web server created by the Pay Calc app. If I try and browse to a web page that is &lt;em&gt;unique&lt;/em&gt; to the Timezone App, I get a 404 error. The page doesn‚Äôt exist in the Pay Calc app and therefore the call fails.&lt;/p&gt;
&lt;p&gt;As expected, the second I CTRL+C my Pay Calc app, everything springs to life for the Timezone app. Browsing to localhost brings up the Timezone interface and browsing to the aforementioned unique page works.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Specify a Port!&lt;/h2&gt;
&lt;p&gt;The solution? Specify a port number!&lt;/p&gt;
&lt;p&gt;In Flask code, it‚Äôs the &lt;code&gt;app.run()&lt;/code&gt; code that kicks everything off. Without that code, there‚Äôs no app.&lt;/p&gt;
&lt;p&gt;By default, this starts the web server on 127.0.0.1:5000. We can change this!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(port=5001)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Believe it or not, it‚Äôs as simple as that!&lt;/p&gt;
&lt;p&gt;Throw the port number you want to access the web app from to &lt;code&gt;app.run()&lt;/code&gt; and the web server launches on that port. So simple and easy!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion and Discussion&lt;/h2&gt;
&lt;p&gt;This is as simple as it gets. There is however something else to discuss.&lt;/p&gt;
&lt;p&gt;If you‚Äôre trying to run two or more concurrent web apps, it‚Äôs likely that you want these apps running in a sort of ‚Äúproduction‚Äù environment. That is, you want them running all the time, it‚Äôs no longer just for a test.&lt;/p&gt;
&lt;p&gt;That‚Äôs exactly my case. I want a few Flask apps running from my NAS on my local network at home.&lt;/p&gt;
&lt;p&gt;The web server bundled in Flask is a development server. It may be fine for my home network but best practice mandates I use a dedicated web server like &lt;a href="http://nginx.org/en/"&gt;nginx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or another question, should I even use Flask for making production apps? Once I get to this level of production should I be moving to Django?&lt;/p&gt;
&lt;p&gt;I‚Äôm actually not too sure! I‚Äôm definitely keen to hear everyone‚Äôs opinion on this. What do you use (if at all) for this sort of thing?&lt;/p&gt;
&lt;p&gt;Do you use Flask for small apps and testing and Django for the bigger and badder stuff?&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="learning"></category><category term="ports"></category><category term="apps"></category></entry><entry><title>From Script to Project - Packaging Your Code in Python</title><link href="https://pybit.es/python-packaging.html" rel="alternate"></link><published>2017-07-01T10:45:00+02:00</published><updated>2017-07-01T10:45:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-07-01:/python-packaging.html</id><summary type="html">&lt;p&gt;This week's article is about packaging your Python code. Sounds daunting? Actually it is pretty simple.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Namespaces are one honking great idea -- let's do more of those!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This week's article is about packaging your Python code. Sounds daunting? Actually it is pretty simple.&lt;/p&gt;
&lt;p&gt;Last week we introduced &lt;a href="https://github.com/pybites/karmabot"&gt;Karma Bot&lt;/a&gt;. I will use it to show you how I ended up organizing the code. Then I will show a simpler script refactored into a package.&lt;/p&gt;
&lt;p&gt;Packaging your code makes it easier for others to use. It also adds more structure to your code which leads to more maintainable code. Finally it namespaces your code, &lt;em&gt;one honking great idea&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At the very basic level you create a package by putting one or more modules (.py files) inside a folder together with a __init__.py file. This file turns the folder into a package. Your code should ideally not go in that file. It is used for imports and setup.&lt;/p&gt;
&lt;h2&gt;Example 1 - Karma bot&lt;/h2&gt;
&lt;p&gt;At this moment karmabot has two packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls bot
__init__.py    karma.py    slack.py

$ ls utils
__init__.py    get_botid.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And &lt;code&gt;main.py&lt;/code&gt; in the top level directory is the driving script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
...
main.py
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is not one best way to structure your code. A better grouping could be adding &lt;code&gt;slack.py&lt;/code&gt; and &lt;code&gt;get_botid.py&lt;/code&gt; to a &lt;em&gt;slack&lt;/em&gt; package. Work in progress.&lt;/p&gt;
&lt;p&gt;At least this is far better than the first version where I had all code in one big file. Unfortunately this was before my first commit so cannot retrieve it. That's why I have another example lined up ... &lt;/p&gt;
&lt;h2&gt;Example 2 - Twitter Archive Stats&lt;/h2&gt;
&lt;p&gt;This is a smaller script so better to demo. Take a minute to look at the &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/086/twitter_archive.py"&gt;original script&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This code is part of our &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100 Days of PyBites, 100 Days of Code&lt;/a&gt; (days 086 and 093) which we are about to finish. Stay tuned for a review article next week!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you see all the code is lumped together in one file. There is also way too much going on under &lt;code&gt;if __name__ == '__main__'&lt;/code&gt;. This is not code we can re-use. Most scripts start like this. If you don't step back every now and then though, it becomes a mess.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A great book on refactoring I read this year is Martin Fowler's &lt;a href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt;. Read it. You will write better code!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Packaging to the rescue! Here are the steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First. Don't write any code yet. Think about the various things this script tries to accomplish. What are the main responsibilities? In this case it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;parses the data from &lt;code&gt;tweets.csv&lt;/code&gt;, the exported Twitter archive,&lt;/li&gt;
&lt;li&gt;parses the obtained data from 1., counting certain metrics,&lt;/li&gt;
&lt;li&gt;prints the results to stdout.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So it does 3 things. As it is a small script one package is fine. I created a folder called "archive" with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a module (Python script file) for each functionality,&lt;/li&gt;
&lt;li&gt;an __init__.py file that turns it into a package:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls archive/
__init__.py    report.py    stats.py    tweets.py
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then I started moving code around. This actually led to additional refactoring! For example the &lt;code&gt;for row in data:&lt;/code&gt; block was reduced from 25 to 15 lines using the &lt;a href="https://refactoring.com/catalog/extractMethod.html"&gt;extract method&lt;/a&gt;. The additional helper methods also made it more readable. The final code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/093"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Refactoring your code is a positive side effect of packaging!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One note on imports. Starting off with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
archive    main.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding the init file to the archive package, in &lt;code&gt;main.py&lt;/code&gt; I could import like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;archive.report&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_results&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's common to make this shorter by bringing the imports into the package namespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.tweets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.stats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;calc_stats&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.report&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I can just import from &lt;em&gt;archive&lt;/em&gt;, reducing 3 import statements to only 1: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;archive&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc_stats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also &lt;a href="http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html"&gt;Be Pythonic: __init__.py&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;Next thing you want to do is add a &lt;code&gt;setup.py&lt;/code&gt; etc to make your code distributable. You could use a tool like &lt;a href="(https://github.com/audreyr/cookiecutter)"&gt;cookiecutter&lt;/a&gt; for this. I will explore this further in a future article.&lt;/p&gt;
&lt;p&gt;In closing here are some links for further inspection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-packaging.readthedocs.io/en/latest/"&gt;How To Package Your Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/"&gt;Python Packaging User Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/small-things-about-python/lets-talk-about-python-packaging-6d84b81f1bb5"&gt;A Simple Guide for Python Packaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter - a cli utility that creates projects from cookiecutters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="packaging"></category><category term="modules"></category><category term="init"></category><category term="imports"></category><category term="refactoring"></category><category term="karma"></category><category term="Twitter"></category></entry><entry><title>Code Challenge 25 - Notification Service of Now Playing and Upcoming Movies</title><link href="https://pybit.es/codechallenge25.html" rel="alternate"></link><published>2017-06-26T13:40:00+02:00</published><updated>2017-06-26T13:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-26:/codechallenge25.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! What movies are in theaters now or just came out on your favorite streaming service? What are upcoming movies, when will they be released? Can I keep track of all new humor movies? Or what about that specific actor or director? Having a notification service around movies seems an interesting, fun and useful code challenge to us.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! What movies are in theaters now or just came out on your favorite streaming service? What are upcoming movies, when will they be released? Can I keep track of all new humor movies? Or what about that specific actor or director? Having a notification service around movies seems an interesting, fun and useful code challenge to us.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: find a resource that updates with now playing and/or upcoming movies and consume it. Make a simple notification mechanism. We think an email would be best, but you could also try a bot of some kind (Twitter, Slack, ...). You are more into series? That's fine too. You could for example make a notification service around air dates of TV shows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate: add command line switches to the script to filter on things like genre, director, actor, country, rating, streaming service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced: make a subscription service web app where the filters are check boxes and subscribers get customized emails based on their stored preferences.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A few resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google &lt;em&gt;now playing/upcoming movies/series&lt;/em&gt; and you get a ton of resources. Just a few examples: &lt;a href="http://www.fandango.com/moviesintheaters"&gt;Fadango&lt;/a&gt;, &lt;a href="http://www.imdb.com/movies-coming-soon/"&gt;Imdb&lt;/a&gt;, &lt;a href="https://www.rottentomatoes.com/browse/upcoming/"&gt;Rotten tomatoes&lt;/a&gt;, etc. For series you could use &lt;a href="http://www.airdates.tv/"&gt;airdates.tv&lt;/a&gt; for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the resource has an API we recommend using it. One nice API for example is &lt;a href="https://www.themoviedb.org/?language=en"&gt;The Movie DB&lt;/a&gt;. Another open database you could use is &lt;a href="http://thetvdb.com/"&gt;TheTVDB.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to make a bot, we did a few, just search &lt;a href="https://pybit.es/pages/articles.html"&gt;our articles&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="movies"></category><category term="series"></category><category term="digest"></category><category term="email"></category><category term="themoviedb"></category><category term="imdb"></category><category term="omdb"></category><category term="apis"></category></entry><entry><title>Code Challenge 24 - Use Dunder / Special Methods to Enrich a Class - Review</title><link href="https://pybit.es/codechallenge24_review.html" rel="alternate"></link><published>2017-06-26T10:00:00+02:00</published><updated>2017-06-26T10:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-26:/codechallenge24_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge24.html"&gt;Use Dunder / Special Methods to Enrich a Class&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge24.html"&gt;Use Dunder / Special Methods to Enrich a Class&lt;/a&gt; code challenge we coupled to &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;our guest post&lt;/a&gt; on Dan Bader's blog.&lt;/p&gt;
&lt;h3&gt;Account class&lt;/h3&gt;
&lt;p&gt;First of all you can follow along with the code in the article &lt;a href="https://github.com/pybites/dunders"&gt;here&lt;/a&gt; (class and notebook). One thing we learned from the comments on the article is that __reversed__ should reverse the normal iteration. So newest to oldest, not by transaction amount (&lt;a href="https://github.com/pybites/dunders/commit/fced4f1f9a22270eb57bf3342289568e5ed7f113"&gt;fix&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;As there were no PR submissions other than ours we keep it short. &lt;/p&gt;
&lt;p&gt;We made a &lt;a href="https://github.com/pybites/challenges/tree/community/24/bbelderbos"&gt;Developer class&lt;/a&gt; pretty similar to the Account class example. &lt;/p&gt;
&lt;p&gt;Funny fact is it was meant for our new &lt;a href="https://github.com/pybites/karmabot"&gt;Karma Bot&lt;/a&gt; but &lt;a href="https://pybit.es/slack-karma-bot.html"&gt;we implementing it without using dunders&lt;/a&gt;! So it is good to note that you don't always need them. &lt;/p&gt;
&lt;p&gt;Even a word of caution is warranted as pointed out by &lt;em&gt;_seemethere&lt;/em&gt;  on the article's &lt;a href="https://www.reddit.com/r/Python/comments/6ih6cj/enriching_your_python_classes_with_dunder_magic/"&gt;Reddit thread&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would say that you should be careful with magic methods.&lt;/p&gt;
&lt;p&gt;On one hand they can be extremely useful and extend your objects and on the other hand they can make using your library very difficult and hard to understand.&lt;/p&gt;
&lt;p&gt;Use them where you feel as though they make sense and not just because it would be cool to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Useful tool, powerful and elegant, but use wisely.&lt;/p&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;Stay tuned for this week's code challenge where we get you to code up a weekly digest email of now playing/ upcoming movies or series.&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="dunders"></category><category term="special methods"></category><category term="magic methods"></category><category term="classes"></category><category term="polymorphism"></category><category term="operator overloading"></category><category term="guest"></category></entry><entry><title>Building a Karma Bot with Python and the Slack API</title><link href="https://pybit.es/slack-karma-bot.html" rel="alternate"></link><published>2017-06-25T20:00:00+02:00</published><updated>2017-06-25T20:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-06-25:/slack-karma-bot.html</id><summary type="html">&lt;p&gt;We love Slack! But what if we can make it even cooler? Imagine: you are geeking out with your fellow developers on Slack and you want to give them credit. Or you can write "stupidsubject--" and it automagically shows "stupidsubject's karma decreased to -2". Enter &lt;em&gt;Karma Bot&lt;/em&gt;. This is &lt;a href="https://blog.hipchat.com/2016/05/02/meet-karma-bot/"&gt;nothing new&lt;/a&gt; but building one myself was a great learning exercise and a fun tool we use on our Slack now.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We love Slack! But what if we can make it even cooler? Imagine: you are geeking out with your fellow developers on Slack and you want to give them credit. Or you can write "stupidsubject--" and it automagically shows "stupidsubject's karma decreased to -2". Enter &lt;em&gt;Karma Bot&lt;/em&gt;. This is &lt;a href="https://blog.hipchat.com/2016/05/02/meet-karma-bot/"&gt;nothing new&lt;/a&gt; but building one myself was a great learning exercise and a fun tool we use on our Slack now.&lt;/p&gt;
&lt;p&gt;I will show you how I implemented our Karma Bot using Slack's &lt;a href="https://api.slack.com/rtm"&gt;Real Time Messaging API&lt;/a&gt;. I hope to extend it into an open source package later on adding tests, docs, setup file, etc. I will document progress in future articles.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;This exercise is similar to our &lt;a href="https://pybit.es/simple-chatbot.html"&gt;How to Build a Simple Slack Bot&lt;/a&gt; article. First you create a bot user and get an API_KEY from Slack. &lt;/p&gt;
&lt;p&gt;The bot user needs to be defined as ID so you need to retrieve it for which I made a helper script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 -m utils.get_botid
Bot ID &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;karmabot&amp;#39;&lt;/span&gt; is xyz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(This calls the get_botid.py script in the utils package. More on packaging next week ...)&lt;/p&gt;
&lt;p&gt;Then I stored the following two env variables in my &lt;code&gt;bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export SLACK_KARMA_BOTUSER=xyz
export SLACK_KARMA_TOKEN=super-secret
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we will see next week __init__.py makes a folder a package. You can use this file to do setup. I read env variables in, define my (regex) constants, instantiate the &lt;code&gt;SlackClient&lt;/code&gt; object to talk to the Slack API, and setup logging and caching. See &lt;a href="https://github.com/pybites/karmabot/blob/master/bot/__init__.py"&gt;__init__.py&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/karmabot"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/pybites/karmabot/blob/master/main.py"&gt;main.py&lt;/a&gt; script is the driver calling methods from the bot package (folder):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It connects to the &lt;a href="https://api.slack.com/rtm"&gt;Real Time Messaging API&lt;/a&gt; with &lt;code&gt;SLACK_CLIENT.rtm_connect()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each second it checks our Slack for new messages with the helper &lt;code&gt;parse_next_msg&lt;/code&gt; (&lt;a href="https://github.com/pybites/karmabot/blob/master/bot/karma.py"&gt;karma.py&lt;/a&gt;) which pings the API with &lt;code&gt;SLACK_CLIENT.rtm_read()&lt;/code&gt; and parses the response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One of my favorite regex methods &lt;code&gt;findall&lt;/code&gt; checks each new message for potential karma actions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;karma_changes = KARMA_ACTION.findall(text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;KARMA_ACTION = re.compile(r&amp;#39;(?:^| )(\S{2,}?)\s?([\+\-]{2,})&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a complex regex so let me break it down: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start of message or preceding space &lt;/li&gt;
&lt;li&gt;two or more non-space characters&lt;/li&gt;
&lt;li&gt;one optional space (convenient because Slack's autocomplete-select of username inserts one)&lt;/li&gt;
&lt;li&gt;the voting component = two or more +'s and/or -'s (one + or - led to a lot of false positives!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/karmabot/blob/master/bot/karma.py"&gt;karma.py&lt;/a&gt;'s &lt;code&gt;parse_karma_change&lt;/code&gt; is then called to parse out giver, receiver and points. Giver and receiver are returned by the Slack API as IDs so I need &lt;a href="https://github.com/pybites/karmabot/blob/master/bot/slack.py"&gt;slack.py&lt;/a&gt;'s &lt;code&gt;lookup_username&lt;/code&gt; to convert them to usernames (which I cache in &lt;code&gt;USERNAME_CACHE&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then &lt;a href="https://github.com/pybites/karmabot/blob/master/bot/karma.py"&gt;karma.py&lt;/a&gt;'s &lt;code&gt;change_karma&lt;/code&gt; is called to increase/decrease the karma and returns a message for the bot to post.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly &lt;code&gt;post_msg&lt;/code&gt; (&lt;a href="https://github.com/pybites/karmabot/blob/master/bot/slack.py"&gt;slack.py&lt;/a&gt;) is called to have the bot post the karma result message back to the same channel the original message (request) came from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To keep track of scores I use a &lt;code&gt;Counter&lt;/code&gt; object which is stored to disk with &lt;code&gt;pickle&lt;/code&gt;. This is setup in &lt;a href="https://github.com/pybites/karmabot/blob/master/bot/__init__.py"&gt;__init__.py&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Retrieving karma cache file&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;karmas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KARMA_CACHE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;No cache file starting new Counter object in memory&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;karmas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... and is backed up every minute with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _save_cache():
    pickle.dump(karmas, open(KARMA_CACHE, &amp;quot;wb&amp;quot;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I might actually turn this into a real DB.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;p&gt;When we built our first Slack bot for &lt;a href="https://pybit.es/simple-chatbot.html"&gt;How to Build a Simple Slack Bot&lt;/a&gt; we needed a way to keep the bot alive even if it crashed or the process was terminated by the OS. For Karma Bot I went with the same workaround as then: a &lt;a href="https://github.com/pybites/karmabot/blob/master/run.sh"&gt;run.sh&lt;/a&gt; wrapper that respawns. So if you want to use this code yourself, you would kick it off like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nohup ./run.sh &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Test session in private Karma Bot channel:&lt;/p&gt;
&lt;p&gt;&lt;img alt="karma example" src="https://pybit.es/images/karma_example.png"&gt;&lt;/p&gt;
&lt;p&gt;You need to invite the bot to any channel you want to use this in.&lt;/p&gt;
&lt;h2&gt;More on packaging&lt;/h2&gt;
&lt;p&gt;My first attempt at this was one big script. I then splitted it out into different modules (responsabilities). Unfortunately I did not commit the initial script to compare. No worries though. Next week I go back to basics on modules and packaging, explaining how they work. I will explain how we import from them which often leads to confusion. &lt;/p&gt;
&lt;h2&gt;Update 07/08/2017&lt;/h2&gt;
&lt;p&gt;I refactored this project for &lt;a href="https://pybit.es/codechallenge30.html"&gt;Code Challenge 30 - The Art of Refactoring: Improve Your Code&lt;/a&gt;, see the review &lt;a href="https://pybit.es/codechallenge30_review.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Slack"></category><category term="karma"></category><category term="bot"></category><category term="API"></category><category term="picle"></category><category term="packaging"></category><category term="logging"></category><category term="Counter"></category></entry><entry><title>Twitter digest 2017 week 25</title><link href="https://pybit.es/twitter_digest_201725.html" rel="alternate"></link><published>2017-06-25T16:53:00+02:00</published><updated>2017-06-25T16:53:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-25:/twitter_digest_201725.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@DataSciFact:" target="_blank"&gt;@DataSciFact:&lt;/a&gt; Python plotting for exploratory analysis &lt;a href="https://t.co/kRlFNQKTNK" title="https://t.co/kRlFNQKTNK" target="_blank"&gt;https://t.co/kRlFNQKTNK&lt;/a&gt; &lt;a href="https://t.co/42LEk3cevR" title="https://t.co/42LEk3cevR" target="_blank"&gt;https://t.co/42LEk3cevR&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/877898032070766596" data-datetime="2017-06-22T14:36:16+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Introduction to the Peewee &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; object-relational mapper (ORM) &lt;a href="https://t.co/UDpClFnhLh" title="https://t.co/UDpClFnhLh" target="_blank"&gt;https://t.co/UDpClFnhLh&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/878670149271924737" data-datetime="2017-06-24T17:44:23+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It is ridiculously easy to generate any audio signal using Python ‚Äì &lt;a href="https://t.co/JEEgjW4ES3" title="https://t.co/JEEgjW4ES3" target="_blank"&gt;https://t.co/JEEgjW4ES3&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/878682638999048192" data-datetime="2017-06-24T18:34:00+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;CONGRATS BOB ON THIS INCREDIBLE ARTICLE!!!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; üì∞üêç Make your classes more Pythonic with this tutorial on dunder methods &lt;a href="https://t.co/mpxvq58ZMn" title="https://t.co/mpxvq58ZMn" target="_blank"&gt;https://t.co/mpxvq58ZMn&lt;/a&gt; by &lt;a href="https://twitter.com/@bbelderbos" target="_blank"&gt;@bbelderbos&lt;/a&gt;&lt;/p&gt;‚Äî Bob Belderbos (@bbelderbos) &lt;a href="https://twitter.com/bbelderbos/status/877778746673176576" data-datetime="2017-06-22T06:42:16+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Published a guest post: Yelp Reviews: Authorship Attribution with Python and scikit-learn &lt;a href="https://t.co/pPAiWCrdJ1" title="https://t.co/pPAiWCrdJ1" target="_blank"&gt;https://t.co/pPAiWCrdJ1&lt;/a&gt; &lt;a href="https://t.co/mlTNKlEGcL" title="https://t.co/mlTNKlEGcL" target="_blank"&gt;https://t.co/mlTNKlEGcL&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/877571229527552000" data-datetime="2017-06-21T16:57:40+00:00"&gt;June 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; socketserver: A module in Python's std lib that makes writing socket-based network servers easier: &lt;a href="https://t.co/s3gLrBS2PX" title="https://t.co/s3gLrBS2PX" target="_blank"&gt;https://t.co/s3gLrBS2PX&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/878746025674014720" data-datetime="2017-06-24T22:45:53+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django vs Flask, a practitioner's perspective &lt;a href="https://t.co/SXrWB4XWph" title="https://t.co/SXrWB4XWph" target="_blank"&gt;https://t.co/SXrWB4XWph&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/877973723462029312" data-datetime="2017-06-22T19:37:02+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python variables got you confused? 1) assignment never copies. 2) lots of things are assignments. Full details: &lt;a href="https://t.co/Ayxi0TRfFg" title="https://t.co/Ayxi0TRfFg" target="_blank"&gt;https://t.co/Ayxi0TRfFg&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/877581946452234241" data-datetime="2017-06-21T17:40:15+00:00"&gt;June 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build an IoT Grow-box on a budget for the holidays with your &lt;a href="https://twitter.com/@Raspberry_Pi" target="_blank"&gt;@Raspberry_Pi&lt;/a&gt; and Python. &lt;a href="https://t.co/gRWtDDOVGB" title="https://t.co/gRWtDDOVGB" target="_blank"&gt;https://t.co/gRWtDDOVGB&lt;/a&gt; &lt;a href="https://t.co/3NEk5oxvIE" title="https://t.co/3NEk5oxvIE" target="_blank"&gt;https://t.co/3NEk5oxvIE&lt;/a&gt;&lt;/p&gt;‚Äî Alex Ellis (@alexellisuk) &lt;a href="https://twitter.com/alexellisuk/status/878649599593938944" data-datetime="2017-06-24T16:22:43+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mikeloukides:" target="_blank"&gt;@mikeloukides:&lt;/a&gt; Using static type checking in Python 3.6 to find bugs before they find you: &lt;a href="https://t.co/RUZphqa1jS" title="https://t.co/RUZphqa1jS" target="_blank"&gt;https://t.co/RUZphqa1jS&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/878249577043828738" data-datetime="2017-06-23T13:53:10+00:00"&gt;June 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New location for the Python dev guide! &lt;a href="https://t.co/Mzxi0DM6tx" title="https://t.co/Mzxi0DM6tx" target="_blank"&gt;https://t.co/Mzxi0DM6tx&lt;/a&gt; Thanks &lt;a href="https://twitter.com/@brettsky" target="_blank"&gt;@brettsky&lt;/a&gt; and the PSF infrastructure team.&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/877717256167243776" data-datetime="2017-06-22T02:37:55+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@plotlygraphs:" target="_blank"&gt;@plotlygraphs:&lt;/a&gt; üåü Announcement üåü Today we‚Äôre launching Dash: Create Reactive Web Apps in pure Python &lt;a href="https://t.co/CnRiQFSwcJ" title="https://t.co/CnRiQFSwcJ" target="_blank"&gt;https://t.co/CnRiQFSwcJ&lt;/a&gt; &lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Michael Herman (@MikeHerman) &lt;a href="https://twitter.com/MikeHerman/status/877900677489594369" data-datetime="2017-06-22T14:46:46+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@adnan_hashmi:" target="_blank"&gt;@adnan_hashmi:&lt;/a&gt; GitHub Repo: Introduction to Geo-spatial Data with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/8dNfS1UGAl" title="https://t.co/8dNfS1UGAl" target="_blank"&gt;https://t.co/8dNfS1UGAl&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://‚Ä¶" title="https://‚Ä¶" target="_blank"&gt;https://‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/877978904279035906" data-datetime="2017-06-22T19:57:37+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Solid üéØ - A comprehensive gradient-free optimization framework written in Python &lt;a href="https://t.co/DXXaxFP8X1" title="https://t.co/DXXaxFP8X1" target="_blank"&gt;https://t.co/DXXaxFP8X1&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/878766575330836481" data-datetime="2017-06-25T00:07:32+00:00"&gt;June 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@KirkDBorne:" target="_blank"&gt;@KirkDBorne:&lt;/a&gt; üåüAWESOMEüåü Essential Cheat Sheets for &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; and &lt;a href="https://twitter.com/search/#DeepLearning:" target="_blank"&gt;#DeepLearning:&lt;/a&gt; &lt;a href="https://t.co/fA1Dqx8mQC" title="https://t.co/fA1Dqx8mQC" target="_blank"&gt;https://t.co/fA1Dqx8mQC&lt;/a&gt; &lt;a href="https://twitter.com/search/#BigData" target="_blank"&gt;#BigData&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; by &lt;a href="https://twitter.com/@‚Ä¶" target="_blank"&gt;@‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Karlijn Willems (@willems_karlijn) &lt;a href="https://twitter.com/willems_karlijn/status/878367218970484738" data-datetime="2017-06-23T21:40:38+00:00"&gt;June 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;How freaking awesome is this?!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Want to take Pok√©mon to the next level? Create your own app like this student did on Code Studio! &lt;a href="https://t.co/mUxtBuZnnD" title="https://t.co/mUxtBuZnnD" target="_blank"&gt;https://t.co/mUxtBuZnnD&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/878613684313964544" data-datetime="2017-06-24T14:00:00+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="code"></category><category term="data analysis"></category><category term="audio"></category><category term="scikit"></category><category term="socketserver"></category><category term="Django"></category><category term="flask"></category><category term="Peewee"></category><category term="ORM"></category><category term="variables"></category><category term="raspberry pi"></category><category term="type checking"></category><category term="plotly"></category><category term="data science"></category><category term="machine learning"></category><category term="solid"></category><category term="cheatsheet"></category></entry><entry><title>PyBites Module of the Week - Pendulum</title><link href="https://pybit.es/pendulum.html" rel="alternate"></link><published>2017-06-24T09:00:00+02:00</published><updated>2017-06-24T09:00:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-24:/pendulum.html</id><summary type="html">&lt;p&gt;A brief overview of the Pendulum datetime module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I‚Äôll come clean. When it comes to Python datetime, I‚Äôm a shocker! I always struggle with the whole formatting side of things.&lt;/p&gt;
&lt;p&gt;This week, I discovered the Pendulum Package and I swear I heard angels sing.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is Pendulum?&lt;/h2&gt;
&lt;p&gt;Let‚Äôs be clear, we‚Äôre not talking about one of my &lt;a href="https://en.wikipedia.org/wiki/Pendulum_(drum_and_bass_band)"&gt;favourite bands&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Pendulum is a Python Package designed to make the manipulation of Python datetimes easier.  In some cases, you can even totally replace every instance of &lt;code&gt;datetime&lt;/code&gt; in your code with &lt;code&gt;pendulum&lt;/code&gt; and the code should still work.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;There are so many cool functions and use cases which (unfortunately for this article) are explained clearly and thoroughly in the &lt;a href="https://pendulum.eustace.io/docs/"&gt;Pendulum Documentation&lt;/a&gt;. I‚Äôm not going to bother copying and pasting so I strongly urge you to check it out.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;My Favourite Uses&lt;/h2&gt;
&lt;p&gt;The first thing I‚Äôll point out is that Pendulum has a wonderfully simplistic way of describing what each function does. Take the following for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;now = pendulum.now()
print(now)
&amp;#39;2016-06-28T16:51:45.978473-05:00&amp;#39;

today = pendulum.today()
print(today)
&amp;#39;2016-06-28T00:00:00-05:00&amp;#39;

tomorrow = pendulum.tomorrow(&amp;#39;Europe/London&amp;#39;)
print(tomorrow)
&amp;#39;2016-06-29T00:00:00+01:00&amp;#39;

yesterday = pendulum.yesterday()
print(yesterday)
&amp;#39;2016-06-27T00:00:00-05:00&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is taken straight from the docs. I‚Äôm just making a point. How simple is that to read? &lt;code&gt;.tomorrow()&lt;/code&gt; and &lt;code&gt;.yesterday()&lt;/code&gt; are super useful!&lt;/p&gt;
&lt;p&gt;On top of that, you can even specify the timezone of the place you want to know the time of, thus the &lt;code&gt;.tomorrow(‚ÄòEurope/London‚Äô)&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;My absolute favourite Pendulum feature is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; pendulum.now().to_datetime_string()
&amp;#39;2017-06-24 09:35:38&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; pendulum.now().to_day_datetime_string()
&amp;#39;Sat, Jun 24, 2017 09:36 AM‚Äô
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pendulum has a brilliant set of formatting options for datetime results. No longer do I need to use the convoluted and hard to remember &lt;code&gt;strftime&lt;/code&gt; type formatting method (%D %M %Y). Pendulum will do it all for me! Mmmm.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
On top of all of this, I feel like date comparisons, calculations and timezone manipulation has also been made easier. For example, you can create a Pendulum instance with a specified timezone and time, then change the timezone for it on the fly with ease:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;in_paris = pendulum.create(2016, 8, 7, 22, 24, 30, tz=&amp;#39;Europe/Paris&amp;#39;)
&amp;#39;2016-08-07T22:24:30+02:00&amp;#39;
in_paris.in_timezone(&amp;#39;America/New_York&amp;#39;)
&amp;#39;2016-08-07T16:24:30-04:00&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
There are even more advanced functions when it comes to calculations (addition and subtraction). You can easily add/subtract days, months, years, hours, minutes and seconds. Totally awesome!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I‚Äôm now using Pendulum for all of my datetime needs. I‚Äôm sure the datetime module is capable of doing many of the jobs I‚Äôve mentioned but again, I‚Äôve always found it confusing and tedious.&lt;/p&gt;
&lt;p&gt;Pendulum makes things even more &lt;a href="https://pendulum.eustace.io/docs/#difference-for-humans"&gt;human readable&lt;/a&gt; and approachable (for me anyway!).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/sdispater"&gt;S√©bastien Eustace&lt;/a&gt; for this wonderful package!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="code"></category><category term="pybites"></category><category term="pendulum"></category><category term="datetime"></category><category term="pytz"></category><category term="timezones"></category></entry><entry><title>Code Challenge 24 - Use Dunder / Special Methods to Enrich a Class</title><link href="https://pybit.es/codechallenge24.html" rel="alternate"></link><published>2017-06-20T09:50:00+02:00</published><updated>2017-06-20T09:50:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-20:/codechallenge24.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We wrote an article for Dan Bader's Python blog: &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;Enriching Your Python Classes With Dunder (Magic, Special) Methods&lt;/a&gt;. We hope you like it. To put dunders into practice we dedicate this week's code challenge to it.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We wrote an article for Dan Bader's Python blog: &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;Enriching Your Python Classes With Dunder (Magic, Special) Methods&lt;/a&gt;. We hope you like it. To put dunders into practice we dedicate this week's code challenge to it.&lt;/p&gt;
&lt;h2&gt;What Are Dunder Methods?&lt;/h2&gt;
&lt;p&gt;To quote from our guest post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Python, special methods are a set of predefined methods you can use to enrich your classes. They are easy to recognize because they start and end with double underscores, for example &lt;code&gt;__init__&lt;/code&gt; or &lt;code&gt;__str__&lt;/code&gt;. .... This elegant design is known as the Python data model and lets developers tap into rich language features like sequences, iteration, operator overloading, attribute access, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: take an existing class you wrote or write one from scratch (other than Account), implementing at least construction, object representation and iteration using special methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate to Advanced: implement one or more of the other language features discussed in the article: operator overloading, method invocation, context management. And/or look at the &lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;data model documentation&lt;/a&gt; and try to implement one or more dunders not discussed in the article: attribute access, metaclasses or coroutines for example. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus: write some tests to verify the dunders you have implemented behave as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;New PR template&lt;/h3&gt;
&lt;p&gt;Note that when you do a PR you should see a short template asking for some meta data. We implemented that &lt;a href="https://pybit.es/codechallenge23_review.html"&gt;as part of code challenge 23&lt;/a&gt; to track our challenges and over time enrich our &lt;a href="https://pybit.es/pages/challenges.html"&gt;Challenges page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="dunders"></category><category term="special methods"></category><category term="magic methods"></category><category term="classes"></category><category term="polymorphism"></category><category term="operator overloading"></category><category term="guest"></category></entry><entry><title>Code Challenge 23 - Challenge Estimated Time API - Review</title><link href="https://pybit.es/codechallenge23_review.html" rel="alternate"></link><published>2017-06-18T21:32:00+02:00</published><updated>2017-06-18T21:32:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-18:/codechallenge23_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge23.html"&gt;Challenge Estimated Time API&lt;/a&gt;. This was a cool challenge and we implemented it using Github's awesome platform and &lt;a href="https://developer.github.com/v3/"&gt;API&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge23.html"&gt;Challenge Estimated Time API&lt;/a&gt;. This was a cool challenge and we implemented it using Github's awesome platform and &lt;a href="https://developer.github.com/v3/"&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;More than just parsing data&lt;/h3&gt;
&lt;p&gt;This challenge was two in one: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We had to think about how to get data from our challenge takers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We had to code up the processing of this data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first point took us a bit of brainstorming, but we stumbled upon &lt;a href="https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/"&gt;Github's PR template methodology&lt;/a&gt; we &lt;a href="https://github.com/pybites/challenges/commit/614b080a16da0b53187ebc93fd95239d18621c68"&gt;happily embraced&lt;/a&gt; (yeah "Simple is better than complex").&lt;/p&gt;
&lt;p&gt;The cool thing about this is that it puts the template in the comment field when you want to submit a PR:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PR template upon PR" src="https://pybit.es/images/pr-template1.png"&gt;&lt;/p&gt;
&lt;p&gt;Of course you can just nuke the template, but we think this is the best we can get: the folks that do PRs are probably in the best position to provide input on these metrics. Secondly if you provide a Google doc a click is an extra step. Doing it this way it's part of the process you're already following.&lt;/p&gt;
&lt;p&gt;Example of a filled in template in the PR submission: &lt;/p&gt;
&lt;p&gt;&lt;img alt="PR template filled in" src="https://pybit.es/images/pr-template2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Github API&lt;/h3&gt;
&lt;p&gt;For interacting with the Github API we used the &lt;a href="https://github.com/PyGithub/PyGithub"&gt;PyGithub&lt;/a&gt; package which made this pretty easy (although it took some inspection of the various GH API endpoint objects to get to the relevant data).&lt;/p&gt;
&lt;p&gt;The code: in &lt;a href="https://github.com/pybites/challenges/blob/community/23/bbelderbos/challenge_stats.py"&gt;challenge_stats.py&lt;/a&gt; we get &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; object with &lt;code&gt;get_challenge_repo&lt;/code&gt;. From that we parse out the submissions with &lt;code&gt;get_submissions&lt;/code&gt; in which we loop through all PRs: &lt;code&gt;for pr in challenge_repo.get_pulls('all')&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;To get the code challenge number we cannot rely on the PR title. Looking at the PR files we see that they are like: &lt;em&gt;challenge_number/GH_USER/filename&lt;/em&gt; (e.g. &lt;em&gt;23/bbelderbos/challenge_stats.py&lt;/em&gt;) so we parse it from there.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;_parse_template_response&lt;/code&gt; helper we parse the new feedback template with the help of &lt;a href="https://pybit.es/mastering-regex.html"&gt;some regex&lt;/a&gt;. We use a &lt;code&gt;defaultdict(dict)&lt;/code&gt; to store user responses per challenge number. The advantages are: we don't have to initialize keys, and user responses are uniquified this way.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;We only just used the template ourselves so we only have one response :)&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;pprint&lt;/code&gt; we can see the structure of the submissions defaultdict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python challenge_stats.py
defaultdict&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;class &lt;span class="s1"&gt;&amp;#39;dict&amp;#39;&lt;/span&gt;&amp;gt;,
            &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;23&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bbelderbos&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;completed&amp;#39;&lt;/span&gt;: True,
                                &lt;span class="s1"&gt;&amp;#39;difficulty_level&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;,
                                &lt;span class="s1"&gt;&amp;#39;estimated_time&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;,
                                &lt;span class="s1"&gt;&amp;#39;i_stretched&amp;#39;&lt;/span&gt;: True,
                                &lt;span class="s1"&gt;&amp;#39;other_feedback&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;another test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}}})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's where we leave it for now. This will be a handy script to get recorded stats of all PR submissions. When we have enough data, we can write some more code to parse these metrics and show (anonymous) averages on &lt;a href="https://pybit.es/pages/challenges.html"&gt;our challenges page&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;PR: PyTrack&lt;/h3&gt;
&lt;p&gt;We got a nice PR from &lt;a href="https://github.com/clamytoe"&gt;clamytoe (Martin)&lt;/a&gt;: &lt;em&gt;PyTrack&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple project/task time tracker for Python 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/tree/community/23/clamytoe"&gt;on community branch&lt;/a&gt; | &lt;a href="https://github.com/clamytoe/pyTrack/"&gt;original repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To quote the excellent Readme documentation: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Helps you keep track of how much time you spend on your projects and tasks. A sqlite database is used to track your time logs, and it is kept simple by only implementing as few commands as needed to get a full featured application. You can add/remove multiple projects, start/stop tracking any of them, or completely reset the database to start with a clean slate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We like how this works as a stopwatch, just stop and start to track a project, and it stores all timings in a DB. &lt;/p&gt;
&lt;p&gt;It uses click for command line interface, maya for datetime parsing, and peewee for ORM, check out the code if you want to learn about these packages. &lt;/p&gt;
&lt;p&gt;Another nice aspect is that Martin refactored this into a package.&lt;/p&gt;
&lt;h3&gt;Thanks for joining&lt;/h3&gt;
&lt;p&gt;Great work is coming out of these challenges, we are humbled and stoked creating our PyBites community this way!&lt;/p&gt;
&lt;p&gt;You can start any challenge at any time, just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="APIs"></category><category term="Github"></category><category term="PyGithub"></category><category term="PR template"></category><category term="tracking"></category><category term="meta"></category><category term="data"></category><category term="platform"></category><category term="packaging"></category><category term="peewee"></category><category term="click"></category><category term="maya"></category></entry><entry><title>Twitter digest 2017 week 24</title><link href="https://pybit.es/twitter_digest_201724.html" rel="alternate"></link><published>2017-06-18T19:00:00+02:00</published><updated>2017-06-18T19:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-18:/twitter_digest_201724.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@baybryj:" target="_blank"&gt;@baybryj:&lt;/a&gt; Python 3.6.2 release candidate 1 is now available for testing: go for it! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/YSVCUh6Lmp" title="https://t.co/YSVCUh6Lmp" target="_blank"&gt;https://t.co/YSVCUh6Lmp&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/876294713447391232" data-datetime="2017-06-18T04:25:15+00:00"&gt;June 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn how to work with time in &lt;a href="https://twitter.com/search/#postgres:" target="_blank"&gt;#postgres:&lt;/a&gt; &lt;a href="https://t.co/wIud6Gsaas" title="https://t.co/wIud6Gsaas" target="_blank"&gt;https://t.co/wIud6Gsaas&lt;/a&gt; via &lt;a href="https://twitter.com/@craigkerstiens" target="_blank"&gt;@craigkerstiens&lt;/a&gt;&lt;/p&gt;‚Äî Caktus Group (@CaktusGroup) &lt;a href="https://twitter.com/CaktusGroup/status/875370743332253696" data-datetime="2017-06-15T15:13:43+00:00"&gt;June 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; How to convert JSON data into a &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; object &lt;a href="https://t.co/XCWj5iiZTd" title="https://t.co/XCWj5iiZTd" target="_blank"&gt;https://t.co/XCWj5iiZTd&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/875813386277322752" data-datetime="2017-06-16T20:32:37+00:00"&gt;June 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Simple Rest API Example and String Formatting (always learning) &lt;a href="https://t.co/6yMdQ4KFSS" title="https://t.co/6yMdQ4KFSS" target="_blank"&gt;https://t.co/6yMdQ4KFSS&lt;/a&gt; by &lt;a href="https://twitter.com/@gngrninja" target="_blank"&gt;@gngrninja&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/876320446823530496" data-datetime="2017-06-18T06:07:30+00:00"&gt;June 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Microservices with Docker, Flask, and React (part 2) - from localhost to Amazon EC2 &lt;a href="https://t.co/pxWl68vCsC" title="https://t.co/pxWl68vCsC" target="_blank"&gt;https://t.co/pxWl68vCsC&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/874295229695832065" data-datetime="2017-06-12T16:00:01+00:00"&gt;June 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Py is teaching people to code in "byte"-sized, gamified chunks. &lt;a href="https://t.co/qH9ouu7weG" title="https://t.co/qH9ouu7weG" target="_blank"&gt;https://t.co/qH9ouu7weG&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/876076982664138752" data-datetime="2017-06-17T14:00:04+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Instagram Makes a Smooth Move to Python3 &lt;a href="https://t.co/a5BEEUA8DC" title="https://t.co/a5BEEUA8DC" target="_blank"&gt;https://t.co/a5BEEUA8DC&lt;/a&gt; "Performance speed is no longer the primary worry. Time to market speed is"&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/875632151990947840" data-datetime="2017-06-16T08:32:28+00:00"&gt;June 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@haxor:" target="_blank"&gt;@haxor:&lt;/a&gt; Check out this week's &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; podcast where &lt;a href="https://twitter.com/@mkennedy" target="_blank"&gt;@mkennedy&lt;/a&gt; and I cover the best talks of &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/KjE6CcZqqj" title="https://t.co/KjE6CcZqqj" target="_blank"&gt;https://t.co/KjE6CcZqqj&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/874662874391511040" data-datetime="2017-06-13T16:20:54+00:00"&gt;June 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Overlaying charts in Python ‚Äì &lt;a href="https://t.co/eHJFywo0ua" title="https://t.co/eHJFywo0ua" target="_blank"&gt;https://t.co/eHJFywo0ua&lt;/a&gt; &lt;a href="https://t.co/G8iiTwGRWs" title="https://t.co/G8iiTwGRWs" target="_blank"&gt;https://t.co/G8iiTwGRWs&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/876145941883047936" data-datetime="2017-06-17T18:34:05+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@openNASA:" target="_blank"&gt;@openNASA:&lt;/a&gt; Interested in joining &lt;a href="https://twitter.com/search/#NASADatanauts?" target="_blank"&gt;#NASADatanauts?&lt;/a&gt; Engage with open data, learn skills, work on NASA projects or create your own! &lt;a href="https://‚Ä¶" title="https://‚Ä¶" target="_blank"&gt;https://‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/876188697858789376" data-datetime="2017-06-17T21:23:59+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tutorial for Faker, a library that generates placeholder data (names, addresses, ...) for use in unit tests: &lt;a href="https://t.co/UAlaLvEYUp" title="https://t.co/UAlaLvEYUp" target="_blank"&gt;https://t.co/UAlaLvEYUp&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/875907602730942465" data-datetime="2017-06-17T02:47:00+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;HA!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@spolsky:" target="_blank"&gt;@spolsky:&lt;/a&gt; I can tell this is not going to end well &lt;a href="https://t.co/PMi3jYFFnf" title="https://t.co/PMi3jYFFnf" target="_blank"&gt;https://t.co/PMi3jYFFnf&lt;/a&gt;&lt;/p&gt;‚Äî Vincent Driessen (@nvie) &lt;a href="https://twitter.com/nvie/status/875394995678842882" data-datetime="2017-06-15T16:50:05+00:00"&gt;June 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@AnalyticsVidhya:" target="_blank"&gt;@AnalyticsVidhya:&lt;/a&gt; Cheat sheet with various codes and steps while performing exploratory &lt;a href="https://twitter.com/search/#dataanalysis" target="_blank"&gt;#dataanalysis&lt;/a&gt; in &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; &lt;a href="https://t.co/ex6ca2kSR‚Ä¶" title="https://t.co/ex6ca2kSR‚Ä¶" target="_blank"&gt;https://t.co/ex6ca2kSR‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/875939073159946242" data-datetime="2017-06-17T04:52:03+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Birth Announcements for the Busy Father using &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; Flask and &lt;a href="https://twitter.com/@Twilio" target="_blank"&gt;@Twilio&lt;/a&gt; SMS &lt;a href="https://t.co/zEB3BVZZey" title="https://t.co/zEB3BVZZey" target="_blank"&gt;https://t.co/zEB3BVZZey&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/875820712694624257" data-datetime="2017-06-16T21:01:44+00:00"&gt;June 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
And something different. Take a look at the reply thread involving myself, Bob and @anthonyshaw that was started on the below Tweet. It‚Äôs a good example of how issues are identified and solved using code! Amazing job Bob! (The article is awesome too of course!).&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∞ How to write a great README for your GitHub project (tips + template you can use) &lt;a href="https://t.co/hedbw7FWZn" title="https://t.co/hedbw7FWZn" target="_blank"&gt;https://t.co/hedbw7FWZn&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/875048945113845762" data-datetime="2017-06-14T17:55:00+00:00"&gt;June 14, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Postgres"></category><category term="JSON"></category><category term="Rest"></category><category term="API"></category><category term="Strings"></category><category term="Docker"></category><category term="Flask"></category><category term="React"></category><category term="AWS"></category><category term="learning"></category><category term="Py"></category><category term="Instagram"></category><category term="data science"></category><category term="charts"></category><category term="NASA"></category><category term="Faker"></category><category term="GitHub"></category><category term="Readme"></category><category term="indentation"></category><category term="data analysis"></category><category term="twilio"></category></entry><entry><title>Parsing Twitter Geo Data and Mocking API Calls by Example</title><link href="https://pybit.es/twitter-api-geodata-mocking.html" rel="alternate"></link><published>2017-06-17T23:55:00+02:00</published><updated>2017-06-17T23:55:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-06-17:/twitter-api-geodata-mocking.html</id><summary type="html">&lt;p&gt;&lt;a href="https://twitter.com/anthonypjshaw/status/875275923930480641"&gt;"Is this Bob or Julian?!"&lt;/a&gt; ... yeah tweeting from our shared &lt;a href="https://twitter.com/pybites"&gt;@pybites Twitter account&lt;/a&gt; can be confusing! So I made a little script to parse the location of our tweets. Then I extended it to make it testable. I wrote a &lt;a href="https://pybit.es/codechallenge14.html"&gt;decorator&lt;/a&gt; to cache a couple of API outputs to be used with the unittest.mock patch decorator I learned about. A simple script turned into a good learning exercise.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://twitter.com/anthonypjshaw/status/875275923930480641"&gt;"Is this Bob or Julian?!"&lt;/a&gt; ... yeah tweeting from our shared &lt;a href="https://twitter.com/pybites"&gt;@pybites Twitter account&lt;/a&gt; can be confusing! So I made a little script to parse the location of our tweets. Then I extended it to make it testable. I wrote a &lt;a href="https://pybit.es/codechallenge14.html"&gt;decorator&lt;/a&gt; to cache a couple of API outputs to be used with the unittest.mock patch decorator I learned about. A simple script turned into a good learning exercise. &lt;/p&gt;
&lt;h3&gt;Practice leads to new discoveries&lt;/h3&gt;
&lt;p&gt;That's the cool thing: even a relatively easy exercise like parsing some Twitter data can grow into something more interesting when you extend your goals, in this case: "how to unittest an API?". I will do a dedicated article on mocking when I learn some more, but for now I wanted to share how I went about testing the Twitter API.&lt;/p&gt;
&lt;h3&gt;1. whotweeted.py&lt;/h3&gt;
&lt;p&gt;First of all the script: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/080/whotweeted.py"&gt;whotweeted&lt;/a&gt;: it uses &lt;code&gt;tweepy&lt;/code&gt; to get the tweet meta data from the Twitter API and parses the country code (&lt;code&gt;try tweet.place.country_code ...&lt;/code&gt;). &lt;/p&gt;
&lt;p&gt;If Spain it's me, if Australia it's Julian:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python whotweeted.py https://twitter.com/pybites/status/875677559970770944
Bob tweeted it out

$ python whotweeted.py https://twitter.com/pybites/status/875639674244444160
Julian tweeted it out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It raises some exceptions if we input or retrieve bad data. It makes the program longer but more robust: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python whotweeted.py https://twitter.com/KirkDBorne/status/876176282542891008
Not a pybites tweet

$ python whotweeted.py https://twitter.com/pybites/status/844092059988508673
Location not &lt;span class="nb"&gt;set&lt;/span&gt; on tweet

$ python whotweeted.py https://twitter.com/pybites/status/844092059988508abc
Problem getting tweet:
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;144&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;No status found with that ID.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that tweet location is not enabled by default, you have to turn it on, see &lt;a href="https://support.twitter.com/articles/78525"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. Use mocking to test API calls&lt;/h3&gt;
&lt;p&gt;This is cool but how can we test our assumptions? We don't want to call the API each time we run our unittests. Enter &lt;a href="https://stackoverflow.com/questions/2665812/what-is-mocking"&gt;mocking&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, mocking is creating objects that simulate the behaviour of real objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I learned about the unittest.mock patch decorator which I use like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@patch.object(tweepy.API, &amp;#39;get_status&amp;#39;, return_value=get_tweet(&amp;#39;AU&amp;#39;))
...
test
...

@patch.object(tweepy.API, &amp;#39;get_status&amp;#39;, return_value=get_tweet(&amp;#39;ES&amp;#39;))
...
another test
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test script is &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/081/test_whotweeted.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This imitates a &lt;code&gt;get_status&lt;/code&gt; method call of the &lt;code&gt;tweepy.API&lt;/code&gt; object. As &lt;code&gt;return_value&lt;/code&gt; I load in one of Julian's/my tweets I pickled to a data directory. Not sure if I could have simplified this by using a library like &lt;a href="https://github.com/joke2k/faker"&gt;Faker&lt;/a&gt;. As I wanted the full &lt;code&gt;tweepy&lt;/code&gt; response object I added a &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/080/whotweeted.py"&gt;cache decorator&lt;/a&gt; in &lt;code&gt;whotweeted&lt;/code&gt; to cache (pickle) response data (TODO: put this code in a separate setup script).&lt;/p&gt;
&lt;p&gt;The test script is not only much faster (no internet dependency/ latency), you also prevent repeated calls to the API (not sure for Twitter, but some APIs have pretty strict quotas).&lt;/p&gt;
&lt;p&gt;To learn more about mocking in Python, checkout the &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"&gt;mock object library&lt;/a&gt; or if you use pytest see &lt;a href="https://pypi.python.org/pypi/pytest-mock"&gt;pytest-mock&lt;/a&gt;. I have to practice some more with this, I will do a follow-up article on mocking at some point ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="twitter"></category><category term="API"></category><category term="mock"></category><category term="geo"></category><category term="data"></category><category term="unittest"></category><category term="pickle"></category><category term="tweepy"></category><category term="testing"></category><category term="100days"></category></entry><entry><title>How to Write a Python Subclass</title><link href="https://pybit.es/python-subclasses.html" rel="alternate"></link><published>2017-06-17T19:37:00+02:00</published><updated>2017-06-17T19:37:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-17:/python-subclasses.html</id><summary type="html">&lt;p&gt;In this article I cover Python subclasses and inheritance using a relatable code example scenario.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an article on Python Subclasses and inheritance. Before reading on, if you haven‚Äôt done so already, I strongly recommend you check out my write up on &lt;a href="https://pybit.es/python-classes.html"&gt;Python Classes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let‚Äôs get cracking!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Python Sub-what?&lt;/h2&gt;
&lt;p&gt;Let‚Äôs say you have a class already set up. In my &lt;a href="https://pybit.es/python-classes.html"&gt;previous article on classes&lt;/a&gt;, I created what I‚Äôm going to refer to as a ‚Äúsingle tier‚Äù Person class. That is, you use the &lt;code&gt;Person&lt;/code&gt; class to create a person object. That‚Äôs it. (I created Bob using this class. Muahaha!).&lt;/p&gt;
&lt;p&gt;What if I wanted some more depth though? Let‚Äôs use vehicles as an example. I‚Äôll get really simplistic here.&lt;/p&gt;
&lt;p&gt;Vehicle &amp;gt; Car &amp;gt; Mercedes.&lt;/p&gt;
&lt;p&gt;See that? Now we‚Äôre talking! Multiple levels! &lt;code&gt;Vehicle&lt;/code&gt; would be the parent class, &lt;code&gt;Car&lt;/code&gt; would be the &lt;strong&gt;Subclass&lt;/strong&gt; and &lt;code&gt;Mercedes&lt;/code&gt; would be an object we create using the &lt;code&gt;Car&lt;/code&gt; subclass.&lt;/p&gt;
&lt;p&gt;Not only that, but the Mercedes we just created will &lt;em&gt;inherit&lt;/em&gt; all of the attributes and functions associated with the &lt;code&gt;Vehicle&lt;/code&gt; parent class &lt;em&gt;and&lt;/em&gt; those from the &lt;code&gt;Car&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;That is, the Mercedes will be deemed a car vehicle in that it has four wheels and a windshield as opposed to a motorbike vehicle which only has two wheels and a tiny windshield. Both the car and the motorbike are vehicles but just two different &lt;em&gt;types&lt;/em&gt; of vehicles. Get it?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Familiar Example&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Full code &lt;a href="https://github.com/pybites/blog_code/tree/master/boss_class_code"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To demonstrate this in code, I wrote up a &lt;code&gt;Boss&lt;/code&gt; class. Let‚Äôs face it, we‚Äôve all had a job at some point in our lives. It‚Äôs also more than likely that we‚Äôve copped good and bad bosses and managers along the way.&lt;/p&gt;
&lt;p&gt;Imagine if you would, a game with a Boss in it. I can imagine myself coding up a Boss class similar to the below. I‚Äôd then use this code to create different types of Bosses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;behaviour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_attitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attitude&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_behaviour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;behaviour&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A full explanation of a class written like this is found in my &lt;a href="https://pybit.es/python-classes.html"&gt;Python Classes article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A boss would have a &lt;code&gt;name&lt;/code&gt;, an &lt;code&gt;attitude&lt;/code&gt;, a &lt;code&gt;behaviour&lt;/code&gt; and a &lt;code&gt;face&lt;/code&gt; (facial expression!).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Now, let‚Äôs start working on the Boss Subclasses. What kind of Bosses do we want to be able to make? How about a &lt;code&gt;GoodBoss&lt;/code&gt; and a &lt;code&gt;BadBoss&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GoodBoss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kr"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What did I do here? It‚Äôs very similar to coding the parent class. Note the differences though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We start by defining the subclass &lt;code&gt;GoodBoss&lt;/code&gt;. See how it‚Äôs got ‚ÄúBoss‚Äù between the brackets? That‚Äôs because we‚Äôre defining a &lt;code&gt;GoodBoss&lt;/code&gt;, &lt;code&gt;Boss&lt;/code&gt; object. This will ensure the &lt;code&gt;GoodBoss&lt;/code&gt; class inherits everything from the &lt;code&gt;Boss&lt;/code&gt; class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the init dunder, we have to specify &lt;code&gt;self&lt;/code&gt; as well as all of the attributes defined in the parent &lt;code&gt;Boss&lt;/code&gt; class. We can then &lt;strong&gt;add&lt;/strong&gt; whatever ‚ÄòGoodBoss‚Äô unique attributes we want, such as a ‚Äúlaugh‚Äù attribute (good bosses laugh right?). In this case, I‚Äôm not adding any, thus the last attribute you see is &lt;code&gt;face&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;super()&lt;/code&gt; statement is probably the most confusing. It relates to the inheritance from the base class. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;I‚Äôd be doing you a disservice trying to explain super() in one bullet point so I‚Äôm going to direct you to where I read up on it. The 3rd answer in &lt;a href="https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods"&gt;this Stack Overflow thread&lt;/a&gt; is amazing as is this &lt;a href="https://www.programiz.com/python-programming/methods/built-in/super"&gt;Programiz article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Phew! Okay. Next up, we can define some GoodBoss specific class functions. These can &lt;em&gt;only&lt;/em&gt; be used by an object created using the &lt;code&gt;GoodBoss&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def nurture_talent(self):
    #A good boss nurtures talent making employees happy!
    print(&amp;quot;The employees feel all warm and fuzzy then put their talents to good use.&amp;quot;)

def encourage(self):
    #A good boss encourages their employees!
    print(&amp;quot;The team cheers, starts shouting awesome slogans then gets back to work.&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What does a good boss do? He/She nurtures talent to help employees grow! They also encourage their teams to keep them motivated!&lt;/p&gt;
&lt;p&gt;These two class functions simply print out the specified message when called. If this &lt;em&gt;were&lt;/em&gt; a game, rather than just printing, we could have these functions perform transactions like ‚Äúincrease &lt;code&gt;employee_happiness&lt;/code&gt; by 20 points, or something similar.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
In the same way, we can define a &lt;code&gt;BadBoss&lt;/code&gt; subclass. You can find the &lt;code&gt;BadBoss&lt;/code&gt; subclass code in our code repo &lt;a href="https://github.com/pybites/blog_code/tree/master/boss_class_code"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Who‚Äôs the Boss?!&lt;/h2&gt;
&lt;p&gt;Time for some fun! I‚Äôll be the good boss, Bob can be the bad boss. (Sorry brother!).
The easiest way to test this out is to import the code into the interactive shell.&lt;/p&gt;
&lt;p&gt;I‚Äôve got a file called &lt;code&gt;boss_class.py&lt;/code&gt;. I‚Äôm initiating the python shell from the same folder the script lives in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boss_class&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GoodBoss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BadBoss&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
Once imported, we can create a ‚Äústandard‚Äù &lt;code&gt;Boss&lt;/code&gt;, a &lt;code&gt;GoodBoss&lt;/code&gt; or a &lt;code&gt;BadBoss&lt;/code&gt;. Let‚Äôs start with the good one!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;julian = GoodBoss(&amp;quot;Julian&amp;quot;, &amp;quot;Positive&amp;quot;, &amp;quot;Sociable&amp;quot;, &amp;quot;Smiling&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
We can then use the class functions associated with both the &lt;code&gt;Boss&lt;/code&gt; class &lt;em&gt;and&lt;/em&gt; &lt;code&gt;GoodBoss&lt;/code&gt;  subclass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;julian.attitude
‚ÄòPositive‚Äô

julian.get_behaviour()
‚ÄòSociable‚Äô

julian.nurture_talent()
The employees feel all warm and fuzzy then put their talents to good use.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wish I really had that effect on people! Also, this is inheritance in action! We ‚Äúinherited‚Äù the &lt;code&gt;get_behaviour&lt;/code&gt; function from the &lt;code&gt;Boss&lt;/code&gt; class! Woohoo!&lt;/p&gt;
&lt;h2&gt;Ending on a low&lt;/h2&gt;
&lt;p&gt;I know we‚Äôre on a roll but Bad Bosses always have a way of ruining things:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob = BadBoss(&amp;quot;Bob&amp;quot;, ‚ÄúCrazy‚Äù, &amp;quot;Anti-Social&amp;quot;, &amp;quot;Scowl of Hate&amp;quot;)

bob.face
&amp;#39;Scowl of Hate&amp;#39;

bob.get_attitude()
‚ÄòCrazy‚Äô

bob.hoard_praise()
The employees feel cheated and start plotting Bob&amp;#39;s demise while he stares at his own reflection.

bob.yell()
Everyone stares while Bob yells. Someone shouts, &amp;#39;Won&amp;#39;t somebody PLEASE think of the children?!‚Äô
Bob storms off, everyone comforts the victim and one person offers to arrange an &amp;#39;accident&amp;#39; for Bob.
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I love Bob (we all know he‚Äôs the best thing since sliced bread!). I also love my AWS overlords.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;How cool are classes, subclasses and inheritance?!&lt;/p&gt;
&lt;p&gt;Not only has this helped me better plan my code but it‚Äôs also allowed me to better appreciate other code. I can only imagine how many classes and subclasses exist in video games (World of Warcraft for example!).&lt;/p&gt;
&lt;p&gt;Once you get the hang of them, classes really are quite easy to use. They‚Äôre a series of set and forget templates/blueprints for you to call at any time. Oh the possibilities‚Ä¶ Yum!&lt;/p&gt;
&lt;p&gt;Oh and speaking of templates. I created a framework/blank class and subclass template for Day 77 of our 100 days of code challenge. Check it out &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/077"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;
&lt;p&gt;(Psst! Did anyone get the &lt;a href="https://www.youtube.com/watch?v=RybNI0KB1bg"&gt;Simpsons Reference&lt;/a&gt;?)&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="classes"></category><category term="beginners"></category></entry><entry><title>Code Challenge 23 - Challenge Estimated Time API</title><link href="https://pybit.es/codechallenge23.html" rel="alternate"></link><published>2017-06-13T11:20:00+02:00</published><updated>2017-06-13T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-13:/codechallenge23.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will give you the opportunity to enhance our challenge platform by creating a simple API to track how much time our challenges take (and possibly other metadata).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will give you the opportunity to enhance our challenge platform by creating a simple API to track how much time our challenges take (and possibly other metadata).&lt;/p&gt;
&lt;p&gt;Why? To quote one of our challenge takers: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just wanted to say thanks for accepting my PR last week. My first one! I also have a request for the challenges. One of the reasons I am doing these challenges is to improve how efficiently I can write code. At the moment I have a timer on from starting up my venv to the end of unit testing. I'm recording these times each week to see if I improve. I was wondering if you could put a suggested time in the challenge readme. Almost like the 'suggested reading time' Medium have on their articles.¬†&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And we got similar inqueries. We saw that adding reading times to our articles was something our audience really liked. Now challenges take a lot more investment of one's time than reading an article, so it does make sense to work on this feature. &lt;/p&gt;
&lt;p&gt;Estimating the time it takes to do a code challenge however is inherently difficult. People have different levels of experience and the the &lt;a href="https://twitter.com/pybites/status/857520323956289536"&gt;open nature&lt;/a&gt; of our challenges allows for different levels of effort.&lt;/p&gt;
&lt;p&gt;At least as we get some indication from an increasing amount of participants we can average the data making &lt;a href="https://pybit.es/pages/challenges.html"&gt;our challenges page&lt;/a&gt; more informative.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: make a simple class or API to track and persistently save (e.g. SQLite, Google docs) challenge estimated times (minutes). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate: allow the user to save more attributes about the challenges: difficulty level (1-10), rating (1-5), could complete (True/False).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced: authenticate with the &lt;a href="https://developer.github.com/v3/"&gt;Github API&lt;/a&gt; so we only get real user data. This makes sense because challenge participants == GH users. This also allows you to add validation: user to enter data once per challenge and CRUD: user being able to update what he/she entered. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced part II: another idea we really like is making a private Slack for our community and participants could enter this meta data into a dedicated channel. If you like this option you could code something up using the &lt;a href="https://api.slack.com/"&gt;Slack API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual you are free to pick the tools you want: Flask, Django, ..., or just vanilla Python. &lt;/p&gt;
&lt;h2&gt;Make our code challenges better!&lt;/h2&gt;
&lt;p&gt;We challenge you to try to finish all 3 levels providing a complete solution for our PyBites community. Note this could be an integral part of our challenges platform moving forward! Pretty exciting, no?&lt;/p&gt;
&lt;p&gt;The best solution not only gets featured on our weekly review, but also on the &lt;a href="https://pybit.es/pages/challenges.html"&gt;challenges page&lt;/a&gt; (one of the most visited page on our blog). That is, when it collected enough data we are happy integrating it.&lt;/p&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;p&gt;Here are some similar topics you can reference while taking this challenge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask is one way to do this, we wrote this article some time ago: &lt;a href="https://pybit.es/simple-flask-api.html"&gt;How To Build a Simple API with Flask and Unit Test it&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A similar tracking app we wrote: &lt;a href="https://pybit.es/flask-api-part2.html"&gt;Simple API Part 2 - Building a Deep Work Logger with Flask, Slack and Google Docs&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is similar to &lt;a href="https://pybit.es/codechallenge08.html"&gt;Code Challenge 08 - House Inventory Tracker&lt;/a&gt;, reviewed &lt;a href="https://pybit.es/codechallenge08_review.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you go the Slack route you can check out: &lt;a href="https://pybit.es/simple-chatbot.html"&gt;How to Build a Simple Slack Bot&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="APIs"></category><category term="Github"></category><category term="Slack"></category><category term="Flask"></category><category term="tracking"></category><category term="meta"></category><category term="data"></category><category term="platform"></category></entry><entry><title>Code Challenge 22 - Packt Free Ebook Web Scraper - Review</title><link href="https://pybit.es/codechallenge22_review.html" rel="alternate"></link><published>2017-06-12T13:00:00+02:00</published><updated>2017-06-12T13:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-12:/codechallenge22_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge22.html"&gt;Packt free ebook code challenge&lt;/a&gt;. We really scratched our own itch building both a notification service and an ebook download manager.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge22.html"&gt;Packt free ebook code challenge&lt;/a&gt;. We really scratched our own itch building both a notification service and an ebook download manager.&lt;/p&gt;
&lt;p&gt;First of all we were a tad disappointed not being able to automate the whole thing. Packt's &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;free-learning link&lt;/a&gt; requires a "I'm not a robot" captcha to be solved. We are not the only ones &lt;a href="https://github.com/igbt6/Packt-Publishing-Free-Learning/issues/51"&gt;hitting this wall&lt;/a&gt;. &lt;a href="https://2captcha.com/recaptchav2_eng_instruction"&gt;2captcha&lt;/a&gt; provies a possible way around it, but we didn't go there. &lt;/p&gt;
&lt;p&gt;Update 24/08/2017: there is &lt;a href="https://github.com/igbt6/Packt-Publishing-Free-Learning/pull/56"&gt;a fix&lt;/a&gt; for this now.&lt;/p&gt;
&lt;p&gt;There was still a lot of room to build cool/useful stuff:&lt;/p&gt;
&lt;h2&gt;Packt Daily Notification Email&lt;/h2&gt;
&lt;p&gt;We wrote a script to get a daily html email of the free html book, the amount of hh:mm before it expires, and adding &lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;Pybonacci's affiliation link&lt;/a&gt; (to sponsor Python Spain).&lt;/p&gt;
&lt;p&gt;Here is how it looks: &lt;/p&gt;
&lt;p&gt;&lt;img alt="packt-notifier" src="https://pybit.es/images/packt-notifier.png"&gt;&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/076"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Packt Ebook Download Manager&lt;/h2&gt;
&lt;p&gt;We also made a script to manage downloaded/purchased Packt ebooks. It uses requests session (detailed &lt;a href="https://pybit.es/requests-session.html"&gt;here&lt;/a&gt;) to login/access/download books. We use BeautifulSoup for html parsing. Here you can see it in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python packt.py
PACKT DOWNLOAD MANAGER

Logging in
Retrieving books

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: dta
No matches, try again

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: data
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Data Mining with Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; R Data Visualization Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Data Science Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Data Analysis with R &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; ASP.NET Data Presentation Controls Essentials &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Implementing Splunk: Big Data Reporting and Development &lt;span class="k"&gt;for&lt;/span&gt; Operational Intelligence &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/21201/pdf
Saving to /Users/bbelderb/Documents/books/Packt/learning-data-mining-with-python.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: python
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Expert Python Programming - Second Edition &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Modern Python Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Python GUI Programming Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; What You Need to Know about Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Raspberry Pi Cookbook &lt;span class="k"&gt;for&lt;/span&gt; Python Programmers &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Python Application Development &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Robotics Using Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
...
many more &lt;span class="o"&gt;(&lt;/span&gt;thanks Packt!&lt;span class="o"&gt;)&lt;/span&gt;
...
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/25257/mobi
Saving to /Users/bbelderb/Documents/books/Packt/expert-python-programming-second-edition.mobi
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;22&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/20125/pdf
Saving to /Users/bbelderb/Documents/books/Packt/functional-python-programming.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: postgres
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; PostgreSQL &lt;span class="m"&gt;9&lt;/span&gt; Admin Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning PostgreSQL &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/22041/pdf
Saving to /Users/bbelderb/Documents/books/Packt/learning-postgresql.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: c
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: science
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Data Science Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: machine
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Machine Learning &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Machine Learning with R - Second Edition &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Machine Learning with Spark &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Python Machine Learning &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Building Machine Learning Systems with Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;6&lt;/span&gt;
Wrong input, please try again
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: f
Wrong input, please try again
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/11703/pdf
Saving to /Users/bbelderb/Documents/books/Packt/building-machine-learning-systems-with-python.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n
Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: q
Bye
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And on the file system (some downloads were already there):&lt;/p&gt;
&lt;p&gt;&lt;img alt="packt-dl-manager" src="https://pybit.es/images/packt-dl-manager.png"&gt;&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/072"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bonus: if you want to do login with Selenium, we covered that &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/066"&gt;in our 100 Days Challenge too&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;PacktScraper&lt;/h2&gt;
&lt;p&gt;We got a nice PR from &lt;a href="http://github.com/wonderfulboyx"&gt;wonderfulboyx&lt;/a&gt; scraping the free ebook site and offering email and tweet notification options, all modular and configurable with configparser. Check it out &lt;a href="https://github.com/pybites/challenges/tree/community/22/wonderfulboyx"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Great work is coming out of these challenges, we are humbled and stoked creating our PyBites community this way. Thanks for joining.&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch - see &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="webscraping"></category><category term="BeautifulSoup"></category><category term="Selenium"></category><category term="Packt"></category><category term="Pybonacci"></category><category term="ebooks"></category><category term="community"></category><category term="automation"></category><category term="sponsoring"></category></entry><entry><title>Twitter digest 2017 week 23</title><link href="https://pybit.es/twitter_digest_201723.html" rel="alternate"></link><published>2017-06-11T19:48:00+02:00</published><updated>2017-06-11T19:48:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-11:/twitter_digest_201723.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Generating mock data wit... &lt;a href="https://t.co/Gj8VKPPOSV" title="https://t.co/Gj8VKPPOSV" target="_blank"&gt;https://t.co/Gj8VKPPOSV&lt;/a&gt; &lt;a href="https://twitter.com/search/#mock" target="_blank"&gt;#mock&lt;/a&gt; &lt;a href="https://twitter.com/search/#tutorial" target="_blank"&gt;#tutorial&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Get Python (@getpy) &lt;a href="https://twitter.com/getpy/status/873391122000642048" data-datetime="2017-06-10T04:07:24+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Expert Python Programming" free thanks to &lt;a href="https://twitter.com/@PacktPub" target="_blank"&gt;@PacktPub&lt;/a&gt; Log in into her page and paste the link &lt;a href="https://t.co/9n7cLvUQbL" title="https://t.co/9n7cLvUQbL" target="_blank"&gt;https://t.co/9n7cLvUQbL&lt;/a&gt; to download it.&lt;/p&gt;‚Äî Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/status/873050877203947523" data-datetime="2017-06-09T05:35:24+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mirkolorenz:" target="_blank"&gt;@mirkolorenz:&lt;/a&gt; Walks you through the steps: Exploratory Data Analysis in Python - Silicon Valley Data Science &lt;a href="https://twitter.com/search/#ddj" target="_blank"&gt;#ddj&lt;/a&gt; &lt;a href="https://t.co/GtlO0ijVwO" title="https://t.co/GtlO0ijVwO" target="_blank"&gt;https://t.co/GtlO0ijVwO&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/873531791910379520" data-datetime="2017-06-10T13:26:23+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∞üêç "plain old data objects" in Python and how to use them effectively &lt;a href="https://t.co/E1QJShlR4G" title="https://t.co/E1QJShlR4G" target="_blank"&gt;https://t.co/E1QJShlR4G&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/872985094822273027" data-datetime="2017-06-09T01:14:00+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The best sentiment analysis tool has been ported from python to C# &lt;a href="https://t.co/0Ilg1XnDNu" title="https://t.co/0Ilg1XnDNu" target="_blank"&gt;https://t.co/0Ilg1XnDNu&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/873244240415006720" data-datetime="2017-06-09T18:23:45+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Scatter plotting pandas DataFrame with categorically labeled rows/columns [Score:9] &lt;a href="https://t.co/BsoqJL7l8a" title="https://t.co/BsoqJL7l8a" target="_blank"&gt;https://t.co/BsoqJL7l8a&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/873217688541306880" data-datetime="2017-06-09T16:38:15+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; teaching tip: Give learners frequent practice using help(). That way, they won't be literally helpless after the class ;-)&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/872504847983034368" data-datetime="2017-06-07T17:25:40+00:00"&gt;June 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; vs R: 4 Implementations of Same Machine Learning Technique &lt;a href="https://t.co/OD0NV50JBN" title="https://t.co/OD0NV50JBN" target="_blank"&gt;https://t.co/OD0NV50JBN&lt;/a&gt; &lt;a href="https://t.co/L8LTc7IE0a" title="https://t.co/L8LTc7IE0a" target="_blank"&gt;https://t.co/L8LTc7IE0a&lt;/a&gt;&lt;/p&gt;‚Äî Cool Python (@cool_python) &lt;a href="https://twitter.com/cool_python/status/873761944204963840" data-datetime="2017-06-11T04:40:55+00:00"&gt;June 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@captainsafia:" target="_blank"&gt;@captainsafia:&lt;/a&gt; command line tip of the day: use `ls -p` to add a forward slash at the end of directories when listing directory contents‚Ä¶&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/873027386576560128" data-datetime="2017-06-09T04:02:03+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building an API with &lt;a href="https://twitter.com/search/#Django" target="_blank"&gt;#Django&lt;/a&gt; REST Framework and Class-Based Views &lt;a href="https://t.co/xZ9FXDe0aO" title="https://t.co/xZ9FXDe0aO" target="_blank"&gt;https://t.co/xZ9FXDe0aO&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/N1yOzzLx7V" title="https://t.co/N1yOzzLx7V" target="_blank"&gt;https://t.co/N1yOzzLx7V&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/873130973864448000" data-datetime="2017-06-09T10:53:40+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Newest post is up! How to Create Your First Static Site with &lt;a href="https://twitter.com/@getpelican" target="_blank"&gt;@getpelican&lt;/a&gt; and Jinja2. How's it look &lt;a href="https://twitter.com/@jmayer?" target="_blank"&gt;@jmayer?&lt;/a&gt; &lt;a href="https://t.co/Ijes5F13We" title="https://t.co/Ijes5F13We" target="_blank"&gt;https://t.co/Ijes5F13We&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/873520719547830272" data-datetime="2017-06-10T12:42:23+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;10 awesome features of Python that you can't use because you refuse to upgrade t... &lt;a href="https://t.co/33xcVl9WMX" title="https://t.co/33xcVl9WMX" target="_blank"&gt;https://t.co/33xcVl9WMX&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/872947293208444928" data-datetime="2017-06-08T22:43:47+00:00"&gt;June 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;uvicorn - A lightning-fast asyncio server for Python 3. &lt;a href="https://t.co/ghYWwDAvz2" title="https://t.co/ghYWwDAvz2" target="_blank"&gt;https://t.co/ghYWwDAvz2&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/873444289958817792" data-datetime="2017-06-10T07:38:41+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why we should stop making learning to code too easy - do you agree? &lt;a href="https://t.co/c4qP0ahwJ8" title="https://t.co/c4qP0ahwJ8" target="_blank"&gt;https://t.co/c4qP0ahwJ8&lt;/a&gt;&lt;/p&gt;‚Äî Grok Learning (@groklearning) &lt;a href="https://twitter.com/groklearning/status/873055745083719681" data-datetime="2017-06-09T05:54:44+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;/r/ProgrammerHumor has been going nuts with innovating the volume slider. &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://t.co/j45HjcCHWK" title="https://t.co/j45HjcCHWK" target="_blank"&gt;https://t.co/j45HjcCHWK&lt;/a&gt; &lt;a href="https://t.co/jYygNZZYaq" title="https://t.co/jYygNZZYaq" target="_blank"&gt;https://t.co/jYygNZZYaq&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/872450897888071681" data-datetime="2017-06-07T13:51:18+00:00"&gt;June 07, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Elizabeth"></category><category term="books"></category><category term="packtpub"></category><category term="data analysis"></category><category term="objects"></category><category term="sentiment analysis"></category><category term="VADER"></category><category term="matplotlib"></category><category term="pandas"></category><category term="help"></category><category term="R"></category><category term="machine learning"></category><category term="cli"></category><category term="Django"></category><category term="REST"></category><category term="Pelican"></category><category term="Jinja2"></category><category term="asyncio"></category><category term="learning"></category><category term="coding"></category></entry><entry><title>Using Python Requests on a Page Behind a Login</title><link href="https://pybit.es/requests-session.html" rel="alternate"></link><published>2017-06-09T21:48:00+02:00</published><updated>2017-06-09T21:48:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-09:/requests-session.html</id><summary type="html">&lt;p&gt;In this post I discuss using the requests module on web pages behind a login&lt;/p&gt;</summary><content type="html">&lt;p&gt;A great frustration in my web scraping journey has been finding a page tucked away behind a login. I didn‚Äôt actually think it was possible to scrape a page locked away like this so I didn‚Äôt bother Googling it. Bad Julian, bad!&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;requests&lt;/code&gt; module to pull data from a page behind a login is relatively simple. It does however require a little bit of HTML know how.&lt;/p&gt;
&lt;p&gt;For this article I‚Äôm going to demonstrate logging into &lt;a href="https://www.freecycle.org"&gt;freecycle.org&lt;/a&gt; (totally check it out if you don‚Äôt know what it is!).&lt;/p&gt;
&lt;p&gt;Full code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/051"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;POSTing data&lt;/h2&gt;
&lt;p&gt;First you need to understand how data is handled at the HTML page level. &lt;/p&gt;
&lt;p&gt;The login prompt on a web page is an HTML form. As such, when you enter your credentials and click submit, you‚Äôre sending your data to the authentication application behind the page. This is called a &lt;strong&gt;POST&lt;/strong&gt;. You‚Äôre pushing, or &lt;em&gt;POSTing&lt;/em&gt; your data.&lt;/p&gt;
&lt;p&gt;What you‚Äôre doing with the requests module is automating this. Instead of you typing the data in yourself, your script will do it for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; on the other hand is precisely the opposite. GET, as the name implies, &lt;em&gt;pulls&lt;/em&gt; data. Very useful for requests right?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Get Dirty, Start Digging&lt;/h2&gt;
&lt;p&gt;The next step is to start digging around the HTML code for the login page of the site. What we‚Äôre looking for is the HTML &lt;code&gt;form&lt;/code&gt; code that our script will look for so it knows where to plug in your credentials.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The login page for freecycle.org is &lt;a href="https://my.freecycle.org"&gt;https://my.freecycle.org&lt;/a&gt;. Inspect the HTML page using your browser of choice (I use Google Chrome).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, start working your way through the HTML until you find the &lt;code&gt;form&lt;/code&gt; HTML tag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Within the form tag look for the &lt;code&gt;method&lt;/code&gt; argument and you‚Äôll see it says ‚Äúpost‚Äù. This means we‚Äôre in the right place!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again, within the tag, you‚Äôll see the &lt;code&gt;action&lt;/code&gt; argument. The URL specified is what you want to note down. In this case it‚Äôs: https://my.freecycle.org/login. This URL is where the credentials are used once you enter them in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, drill down further into the &lt;code&gt;form&lt;/code&gt; tag and look for the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags. There should be at least two (username and password). The username input tag is generally of &lt;code&gt;type=text&lt;/code&gt; and the password, &lt;code&gt;type=password&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look within these &lt;code&gt;input&lt;/code&gt; tags for a &lt;code&gt;name&lt;/code&gt; argument. This is the &lt;em&gt;name&lt;/em&gt; of this input field. This is also how &lt;code&gt;requests&lt;/code&gt; is going to know &lt;em&gt;where&lt;/em&gt; to ‚Äúenter‚Äù your credentials.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the freecyle.org login page the username input field has &lt;code&gt;name&lt;/code&gt; &lt;code&gt;username&lt;/code&gt;. The password input field has &lt;code&gt;name&lt;/code&gt; &lt;code&gt;pass&lt;/code&gt;. Note these two names down.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What are you Scraping?&lt;/h2&gt;
&lt;p&gt;At this point you‚Äôll want to actually login to the website and figure out what you‚Äôre scraping.&lt;/p&gt;
&lt;p&gt;Consider the following for your own situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you login to freecycle.org in a browser, the page you‚Äôre redirected to has the URL: https://my.freecycle.org/home/groups. This is &lt;strong&gt;not&lt;/strong&gt; a limiting factor. That is, this is not the only page &lt;code&gt;requests&lt;/code&gt; has access to for scraping goodness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to scrape a list of my active posts, the URL for the ‚ÄúMy Posts‚Äù page is: https://my.freecycle.org/home/posts. This is precisely the URL I‚Äôll be pointing &lt;code&gt;requests&lt;/code&gt; at.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue on as you normally would with &lt;code&gt;requests&lt;/code&gt; to grab your data. Look for the relevant HTML tags and IDs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Talk is Cheap, Show me the Code!&lt;/h2&gt;
&lt;p&gt;Finally! Code time! With all of the data on hand, we can piece this baby together.&lt;/p&gt;
&lt;p&gt;Assign your two URLs to variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#This URL will be the URL that your login form points to with the &amp;quot;action&amp;quot; tag.
POST-LOGIN-URL = &amp;#39;https://my.freecycle.org/login&amp;#39;

#This URL is the page you actually want to pull down with requests.
REQUEST-URL = &amp;#39;https://my.freecycle.org/home/posts&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pythonic and self-explanatory. Let‚Äôs move on.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Now we want to set up a dict that contains our login information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;payload = {
    ‚Äòusername‚Äô: ‚Äòyour_username‚Äô,
    &amp;#39;pass‚Äô: ‚Äòyour_password&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The keys in the dict are the &lt;code&gt;name&lt;/code&gt;s of the input fields collected earlier. Eg: &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt;. The values associated with each are (you guessed it!) your username and password details. It‚Äôd be a good idea to at the very least, store your password in an environment variable and call it in for use in the script.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Finally, we want to open our &lt;code&gt;requests&lt;/code&gt; &lt;code&gt;session&lt;/code&gt;. Yep! Requests will create its own session instance (useful for multiple requests to the same site):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with requests.Session() as session:
    post = session.post(POST-LOGIN-URL, data=payload)
    r = session.get(REQUEST-URL)
    print(r.text)   #or whatever else you want to do with the request data!
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We‚Äôll use a &lt;code&gt;with&lt;/code&gt; statement to open the request Pythonically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 2 &lt;strong&gt;POSTS&lt;/strong&gt; the data to the login URL we noted down earlier. It requires &lt;code&gt;data&lt;/code&gt; to be specified, in which case we pass it the &lt;code&gt;payload&lt;/code&gt; dict we created. This is the part that enters our username and password!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 3 is our traditional requests call using &lt;code&gt;session.get&lt;/code&gt; to the URL we want to scrape.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 4 is where you‚Äôll continue on with your requests work. To keep it simple I‚Äôll leave it at a &lt;code&gt;print&lt;/code&gt; statement that will print the entire page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And we‚Äôre done! That‚Äôs it! You can now carry on requesting data from the site behind the login.&lt;/p&gt;
&lt;p&gt;The next challenge is to get past those pesky CAPTCHA boxes. Don‚Äôt get us started on those!&lt;/p&gt;
&lt;p&gt;For simple sites that just use a text login system though, this process works. The code is actually quite simple. Rather, it‚Äôs the preparation and digging that‚Äôs time consuming!&lt;/p&gt;
&lt;p&gt;I haven‚Äôt attempted this with Scrapy or other modules yet so if you can do this another way I‚Äôd love to hear how!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="requests"></category><category term="code"></category><category term="web scraping"></category><category term="python"></category></entry><entry><title>Next Time I Will Use Pandas to Parse Html Tables</title><link href="https://pybit.es/pandas-parse-html-table.html" rel="alternate"></link><published>2017-06-08T12:46:00+02:00</published><updated>2017-06-08T12:46:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-06-08:/pandas-parse-html-table.html</id><summary type="html">&lt;p&gt;Last week I did some html table parsing with BeautifulSoup and regex. It turns out there is an easier way to do this: Pandas.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week I did some html table parsing for our &lt;a href="https://pybit.es/codechallenge21_review.html"&gt;Electricity Cost Calculation App challenge&lt;/a&gt;. I used BeautifulSoup and regex. It turns out there is an easier way to do this: Pandas.&lt;/p&gt;
&lt;h2&gt;Parsing html tables&lt;/h2&gt;
&lt;h3&gt;Take 1: BeautifulSoup and regex&lt;/h3&gt;
&lt;p&gt;For our challenge I wanted to include a table of wattage uses of standard devices. I did not find any API so ended up with &lt;a href="https://www.wholesalesolar.com/solar-information/how-to-save-energy/power-table"&gt;Wholesale Solar's power table&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;However even having a great library like &lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt; available it was still a pain parsing the html (see &lt;code&gt;get_appliance_wattages()&lt;/code&gt; &lt;a href="https://github.com/pybites/challenges/blob/community/21/bbelderbos/data.py"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Take 2: Pandas&lt;/h3&gt;
&lt;p&gt;Luckily I stumbled upon &lt;a href="https://medium.com/@ageitgey/quick-tip-the-easiest-way-to-grab-data-out-of-a-web-page-in-python-7153cecfca58"&gt;this article&lt;/a&gt; which shows you how to use Pandas' &lt;code&gt;read_html()&lt;/code&gt; to grab tabular data from html pages. Very useful! Here is &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/070/pandas-html-tables.ipynb"&gt;a Jupyter notebook&lt;/a&gt; applying it to the power table problem.&lt;/p&gt;
&lt;p&gt;Although easy to use, I still had to do some data conversion in Pandas, because the table came with duplicated column names: 3 columns of Appliances and 3 columns of Watts.&lt;/p&gt;
&lt;p&gt;So I did end up spending time on both methods, but the Pandas way is more extensible, because once you have the data in a &lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html"&gt;DataFrame&lt;/a&gt; you have a rich API to your disposal to do all kinds of data manipulations, like grouping, filtering and format conversion (to csv/json).&lt;/p&gt;
&lt;h2&gt;The manual part: Data cleaning&lt;/h2&gt;
&lt;p&gt;The take away is to use specialized libraries as much as possible. They have most of the common use cases figured out. &lt;/p&gt;
&lt;p&gt;However be it BeautifulSoup, regex or Pandas, there is always some data (manual) manipulation and cleaning involved. &lt;/p&gt;
&lt;p&gt;As you can see in the notebook, although Pandas took care of stripping the thousand separators, I still needed to manually manipulate/clean values like: &lt;code&gt;80-150&lt;/code&gt; (average), &lt;code&gt;400-1000+&lt;/code&gt; (strip), or &lt;code&gt;1080 watt-hours /day*&lt;/code&gt; (normalize).&lt;/p&gt;
&lt;p&gt;If you have a magic method for that let me know or if you want to share your data parsing story do so in the comments below, specially if it involved a lot of nasty manipulation and cleaning :)&lt;/p&gt;
&lt;p&gt;I realize this would be an ideal code challenge too, if you agree, feel free to suggest one &lt;a href="https://github.com/pybites/challenges/issues"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="BeautifulSoup"></category><category term="regex"></category><category term="Pandas"></category><category term="parsing"></category><category term="data"></category><category term="data cleaning"></category><category term="energy"></category><category term="json"></category><category term="csv"></category><category term="html"></category></entry><entry><title>Code Challenge 22 - Packt Free Ebook Web Scraper</title><link href="https://pybit.es/codechallenge22.html" rel="alternate"></link><published>2017-06-05T11:20:00+02:00</published><updated>2017-06-05T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-05:/codechallenge22.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will do some web scraping of Packt's daily free ebook, sending out daily notifications. This week we even have a unique opportunity to sponsor the Python Community, read on ... and happy coding!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding :)&lt;/p&gt;
&lt;p&gt;This week we will do some web scraping. As you might know &lt;a href="https://www.packtpub.com/"&gt;Packt&lt;/a&gt; gives away a free ebook &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;every (!) single day&lt;/a&gt;. In this challenge you will scrape that page and send out a notification to never miss an interesting title.&lt;/p&gt;
&lt;h2&gt;Sponsor the Python Community&lt;/h2&gt;
&lt;p&gt;But it gets better: the guys from &lt;a href="https://pybonacci.es/"&gt;Pybonacci&lt;/a&gt; (great Spanish Python science blog) partnered up with Packt:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Pybonacci"&gt;@Pybonacci&lt;/a&gt; Inviting you to participate in our free eBook initiative next week, including a donation to a tech charity of your choice.&lt;/p&gt;&amp;mdash; Packt (@PacktPub) &lt;a href="https://twitter.com/PacktPub/status/870223070027550720"&gt;June 1, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Packt will donate up till 1000 bucks ($ 1 per free ebook download) to a Python related non-profit (more info &lt;a href="https://pybonacci.es/2017/06/03/donaciones-gracias-a-packtpub/#en"&gt;here&lt;/a&gt;, you can vote for the non-profit &lt;a href="https://twitter.com/Pybonacci/status/870943704500056065"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So taking this challenge you get to promote the awesome Python community, isn't that cool?&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is to make a script that scrapes &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;the free learning link&lt;/a&gt; every day for meta data about the book (title, description, cover, promo time left).&lt;/p&gt;
&lt;p&gt;Then have the script share this info together with this affiliation link: &lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals&lt;/a&gt; to your favorite channel: email, Twitter, Facebook, reddit, slack, etc.&lt;/p&gt;
&lt;p&gt;That's it for the basic requirements. You probably want to put this in OS cron or you can use Dan Bader's &lt;a href="https://schedule.readthedocs.io/"&gt;schedule package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the web scraping you could use &lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt; or &lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt; for example. We did an article &lt;a href="https://pybit.es/simplewebscraper.html"&gt;on the former&lt;/a&gt; and used it &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/055"&gt;in our 100days Challenge&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;If you really want to challenge yourself, you could have the script login to your Packt account and click the 'Claim Your Free eBook', making it fully automated. It might not be easy because they use a &lt;a href="https://en.wikipedia.org/wiki/CAPTCHA"&gt;CAPTCHA&lt;/a&gt;, but hey we like a good challenge, right? It would definitely be a useful tool and a good skill to add.&lt;/p&gt;
&lt;p&gt;Not sure where to start? Check out &lt;a href="https://github.com/igbt6/Packt-Publishing-Free-Learning"&gt;this repo&lt;/a&gt; (Github is your friend!). They used &lt;a href="http://docs.python-requests.org/en/master/user/advanced/#session-objects"&gt;Requests / Session&lt;/a&gt; to do this.&lt;/p&gt;
&lt;p&gt;You could also look at &lt;a href="http://selenium-python.readthedocs.io/"&gt;Selenium&lt;/a&gt; (here is &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/066/packt.py"&gt;some 100days code&lt;/a&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="webscraping"></category><category term="BeautifulSoup"></category><category term="Selenium"></category><category term="Packt"></category><category term="Pybonacci"></category><category term="ebooks"></category><category term="community"></category><category term="automation"></category><category term="sponsoring"></category></entry><entry><title>Code Challenge 21 - Electricity Cost Calculation App - Review</title><link href="https://pybit.es/codechallenge21_review.html" rel="alternate"></link><published>2017-06-05T11:15:00+02:00</published><updated>2017-06-05T11:15:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-05:/codechallenge21_review.html</id><summary type="html">&lt;p&gt;In this article we review this week's &lt;a href="http://pybit.es/codechallenge21.html"&gt;code challenge #21&lt;/a&gt; for which we got some nice PRs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review this week's &lt;a href="http://pybit.es/codechallenge21.html"&gt;code challenge #21&lt;/a&gt; for which we got some nice PRs.&lt;/p&gt;
&lt;p&gt;This was a relatively easy challenge but building it out to something cool had its challenge. We are stoked to receive solutions with similar functionality yet using different technologies.&lt;/p&gt;
&lt;h2&gt;Submissions&lt;/h2&gt;
&lt;p&gt;We merged 4 PRs onto our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;Community branch&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Martin made &lt;a href="https://github.com/pybites/challenges/tree/community/21/clamytoe"&gt;a nice app&lt;/a&gt; for iPhone use with Pythonista 3. We really like how you guys provide screenshots and other meta data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dante made a cool Flask app: &lt;a href="https://github.com/pybites/challenges/tree/community/21/dseptem/wattapp"&gt;wattapp&lt;/a&gt;. Features include: simple interface, history of energy consumption and an option to clear items. Check it out to learn about useful Flask extensions like Flask-SQLAlchemy and Flask-WTF for forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we got some Django! Wonderfulboyx made an energy app that lets us add devices and companies, then do the calculation based on inputs. It also saves the history. It's hosted &lt;a href="http://wonderfulboyx.pythonanywhere.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites: we made a simple &lt;a href="https://github.com/pybites/challenges/tree/community/21/bbelderbos"&gt;cli app&lt;/a&gt; that loads in real data from the web: kwh per country and estimated wattages per device (parsing this was a challenge, html tables arg!). It's not done yet, we still need to cache the data and write some more tests. We found out that energy in expensive in Spain!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Everytime a PR comes in we cheer with joy, humbled by the fact we see you are stretching yourselves by taking our challenges (we do too!). Keep up the good work, the stuff you are building is amazing!&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;When we merge your work onto our Challenges branch the PR auto-closes but you can still add comments to it. For new revisions, just open a new PR.&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="calculation"></category><category term="electricity"></category><category term="Flask"></category><category term="Django"></category><category term="cli"></category><category term="data"></category><category term="BeautifulSoup"></category><category term="Python Anywhere"></category><category term="Pythonista 3"></category></entry><entry><title>Twitter digest 2017 week 22</title><link href="https://pybit.es/twitter_digest_201722.html" rel="alternate"></link><published>2017-06-04T21:08:00+02:00</published><updated>2017-06-04T21:08:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-04:/twitter_digest_201722.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I just published ‚Äú&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Package Management for the Paranoid‚Äù &lt;a href="https://t.co/nkWUWR9isX" title="https://t.co/nkWUWR9isX" target="_blank"&gt;https://t.co/nkWUWR9isX&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/871247979813806080" data-datetime="2017-06-04T06:11:20+00:00"&gt;June 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Quick Tip - The easiest way to grab data out of a web page in Python &lt;a href="https://t.co/yRjQKBH7FF" title="https://t.co/yRjQKBH7FF" target="_blank"&gt;https://t.co/yRjQKBH7FF&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/871095937124384768" data-datetime="2017-06-03T20:07:10+00:00"&gt;June 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Tutorial &lt;a href="https://twitter.com/search/#20" target="_blank"&gt;#20&lt;/a&gt; - Processing Video I, How to build a webcam app &lt;a href="https://t.co/9gqu9H1G0V" title="https://t.co/9gqu9H1G0V" target="_blank"&gt;https://t.co/9gqu9H1G0V&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/870082474113720320" data-datetime="2017-06-01T01:00:01+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sometimes it helps to know what goes on underneath all these layers of abstractions we use every day. Nice read! &lt;a href="https://t.co/binTY94CzU" title="https://t.co/binTY94CzU" target="_blank"&gt;https://t.co/binTY94CzU&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/870423466775916544" data-datetime="2017-06-01T23:35:00+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Top 15 &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Libraries for Data Science in 2017 &lt;a href="https://t.co/A0U2ME4ggd" title="https://t.co/A0U2ME4ggd" target="_blank"&gt;https://t.co/A0U2ME4ggd&lt;/a&gt; &lt;a href="https://t.co/1W9B4fYtne" title="https://t.co/1W9B4fYtne" target="_blank"&gt;https://t.co/1W9B4fYtne&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/871047220228890624" data-datetime="2017-06-03T16:53:35+00:00"&gt;June 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@hackebrot:" target="_blank"&gt;@hackebrot:&lt;/a&gt; Reminder: You can pretty-print JSON text with a built-in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; CLI tool &lt;a href="https://t.co/ha5N8Y829B" title="https://t.co/ha5N8Y829B" target="_blank"&gt;https://t.co/ha5N8Y829B&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/871320021145755648" data-datetime="2017-06-04T10:57:36+00:00"&gt;June 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@JaniKarh:" target="_blank"&gt;@JaniKarh:&lt;/a&gt; 27 excellent Podcasts&amp;nbsp;revisited, including some &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; goodies like &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; üéß &lt;a href="https://twitter.com/search/#podcast" target="_blank"&gt;#podcast&lt;/a&gt; &lt;a href="https://t.co/8gygt6‚Ä¶" title="https://t.co/8gygt6‚Ä¶" target="_blank"&gt;https://t.co/8gygt6‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Python Bytes Podcast (@pythonbytes) &lt;a href="https://twitter.com/pythonbytes/status/869644465304096768" data-datetime="2017-05-30T19:59:32+00:00"&gt;May 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/S0jgbY4Wja" title="https://t.co/S0jgbY4Wja" target="_blank"&gt;https://t.co/S0jgbY4Wja&lt;/a&gt; ‚Äì a series of small programming puzzles for a variety of skill levels&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/871196559676932096" data-datetime="2017-06-04T02:47:00+00:00"&gt;June 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python For Finance: Algorithmic Trading &lt;a href="https://t.co/ZpbzgwRDmD" title="https://t.co/ZpbzgwRDmD" target="_blank"&gt;https://t.co/ZpbzgwRDmD&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/870764533815672832" data-datetime="2017-06-02T22:10:17+00:00"&gt;June 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.6 Mac O/S tip: To fix &lt;a href="https" title="https" target="_blank"&gt;https&lt;/a&gt; certificate failures, run this once: $ /Applications/Python\ 3.6/Install\ Certificates.command&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/870528999998410752" data-datetime="2017-06-02T06:34:21+00:00"&gt;June 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;(Shameless plug!)&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyBites ‚Äì How to Write a Python Class &lt;a href="https://t.co/3QLx1sRsa5" title="https://t.co/3QLx1sRsa5" target="_blank"&gt;https://t.co/3QLx1sRsa5&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/870383485612982272" data-datetime="2017-06-01T20:56:08+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Awesome interview with &lt;a href="https://twitter.com/@ellisonbg" target="_blank"&gt;@ellisonbg&lt;/a&gt; on JupyterLab and the Future &lt;a href="https://twitter.com/@ProjectJupyter" target="_blank"&gt;@ProjectJupyter&lt;/a&gt; &lt;a href="https://t.co/YZzILIw1tQ" title="https://t.co/YZzILIw1tQ" target="_blank"&gt;https://t.co/YZzILIw1tQ&lt;/a&gt;&lt;/p&gt;‚Äî Andreas Mueller (@amuellerml) &lt;a href="https://twitter.com/amuellerml/status/870243148987076608" data-datetime="2017-06-01T11:38:29+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Working with paths is easy in &lt;a href="https://twitter.com/search/#Python3" target="_blank"&gt;#Python3&lt;/a&gt; from pathlib import Path d = Path("/etc") filepath = d/"test.txt" if filepath.exists(): somestuff&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/870188166325600256" data-datetime="2017-06-01T08:00:00+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üéâGood news.üéâ Every video from &lt;a href="https://twitter.com/search/#signalconf" target="_blank"&gt;#signalconf&lt;/a&gt; is now online. Grab the popcorn and get the üìπ train rolling here:‚Ä¶ &lt;a href="https://t.co/o28pYkw0rS" title="https://t.co/o28pYkw0rS" target="_blank"&gt;https://t.co/o28pYkw0rS&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/870722152437227520" data-datetime="2017-06-02T19:21:53+00:00"&gt;June 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@MichelePlayfair:" target="_blank"&gt;@MichelePlayfair:&lt;/a&gt; I laughed at this way more than I should have &lt;a href="https://t.co/e1BlxSJ3Jl" title="https://t.co/e1BlxSJ3Jl" target="_blank"&gt;https://t.co/e1BlxSJ3Jl&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/869705941570142208" data-datetime="2017-05-31T00:03:49+00:00"&gt;May 31, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="packages"></category><category term="pandas"></category><category term="video"></category><category term="data science"></category><category term="cloud"></category><category term="json"></category><category term="podcasts"></category><category term="puzzles"></category><category term="arrays"></category><category term="finance"></category><category term="classes"></category><category term="jupyter"></category><category term="pathlib"></category><category term="signalconf"></category></entry><entry><title>Flask Sessions</title><link href="https://pybit.es/flask-sessions.html" rel="alternate"></link><published>2017-06-02T21:57:00+02:00</published><updated>2017-06-02T21:57:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-02:/flask-sessions.html</id><summary type="html">&lt;p&gt;In this quick post I discuss Flask Sessions and provide a few use cases.&lt;/p&gt;</summary><content type="html">&lt;p&gt;More Flask?! Yes! More Flask! I apologise for nothing! This is however a quick article for anyone wanting to learn about Flask Session Objects.&lt;/p&gt;
&lt;p&gt;One of my most exciting discoveries as of late has been the &lt;code&gt;session&lt;/code&gt; object. I stumbled upon this useful little thing while making my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/060"&gt;Pay Calculator App&lt;/a&gt; for our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let‚Äôs discuss sessions in the usual Julian format.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is a Flask Session Object?&lt;/h2&gt;
&lt;p&gt;Think of a Flask Session Object as a special variable that persists for the life of the browser session that‚Äôs connected to the Flask app.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Say What?!&lt;/h2&gt;
&lt;p&gt;Well, here:&lt;/p&gt;
&lt;p&gt;I wanted to make a pay calculator web application that allowed me to calculate how much money I‚Äôd be paid based on me entering my hourly wage and how many hours I worked. Simple right?&lt;/p&gt;
&lt;p&gt;Well, what if, as part of this app, I want to have another web page that could extrapolate my entire annual salary from just the hourly wage? I don‚Äôt want these two functions to exist on the same page.&lt;/p&gt;
&lt;p&gt;I also don‚Äôt want to ask the user to enter in their salary every time they flick between these two pages/apps, that‚Äôd be annoying right? I‚Äôd need a variable that could store the hourly wage and keep that data accessible to any of the web apps running from this Flask app.&lt;/p&gt;
&lt;p&gt;This is where you‚Äôd use a &lt;code&gt;session&lt;/code&gt; object. You‚Äôd assign the user‚Äôs hourly wage to the &lt;code&gt;session&lt;/code&gt; object which you would then make available to use across different web pages in your app.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Code Me Up!&lt;/h2&gt;
&lt;p&gt;The thing that surprised me was how simple it was. Coding wise, you use the object in exactly the same way you‚Äôd use a normal variable. It still has to abide by normal global/local rules in your code too.&lt;/p&gt;
&lt;p&gt;To assign the hourly wage to a &lt;code&gt;session&lt;/code&gt; object I did this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;session[&amp;#39;wage&amp;#39;] = float(request.form.get(&amp;#39;wage&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code on the right is just pulling in the data from the HTML form with the name ‚Äúwage‚Äù. It stores that as a float into a &lt;code&gt;session&lt;/code&gt; object of the same name (wage).&lt;/p&gt;
&lt;p&gt;It‚Äôs seriously as simple as that.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Super Secret Keys&lt;/h2&gt;
&lt;p&gt;I know all of this sounds a lot like cookies. It should. Flask &lt;code&gt;session&lt;/code&gt; objects exist on top of standard cookies. All that‚Äôs different is that the cookie is locked down with a secret key.&lt;/p&gt;
&lt;p&gt;This does not mean the data is private! The cookie data is visible but &lt;strong&gt;cannot be modified unless you have the secret key&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This secret key needs to be accessible to your app code. You‚Äôd preferably make it an environment variable that isn‚Äôt accessible to the outside world. I made mine as complex as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.secret_key = &amp;quot;Test_Secret_Key&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Test_Secret_Key&lt;/code&gt; being the password. Good luck cracking this bad boy!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;The Pay Calc App Use Case&lt;/h2&gt;
&lt;p&gt;In my Pay Calculator App, I create the &lt;code&gt;wage&lt;/code&gt; session object in my index ‚Äò/‚Äò route:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def index():    
    if request.method == &amp;#39;POST&amp;#39; and &amp;#39;wage&amp;#39; in request.form:
        session[&amp;#39;wage&amp;#39;] = float(request.form.get(&amp;#39;wage&amp;#39;))
        return redirect(url_for(&amp;#39;pay_calc&amp;#39;))
    return render_template(&amp;quot;index.html&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What you‚Äôll notice is that &lt;code&gt;wage&lt;/code&gt; is created and then returned in the &lt;code&gt;redirect&lt;/code&gt; to the page associated with the &lt;code&gt;pay_calc&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This essentially makes it available to the second page of the app.&lt;/p&gt;
&lt;p&gt;I then check for it in the code for the second page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/pay&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def pay_calc():
    pay = &amp;#39;&amp;#39;
    if request.method == &amp;#39;POST&amp;#39; and &amp;#39;hours&amp;#39; in request.form and &amp;#39;wage&amp;#39; in session:
        hours = float(request.form.get(&amp;#39;hours&amp;#39;))
        pay = calc_wage(session[&amp;#39;wage&amp;#39;], hours)
    return render_template(&amp;quot;pay_calc.html&amp;quot;,
                            pay=pay)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement checks to see if the &lt;code&gt;wage&lt;/code&gt; session object exists. If it doesn‚Äôt, the calculation within the &lt;code&gt;if&lt;/code&gt; won‚Äôt take place.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Other Use Cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You could use this for a personal touch on your site. A user enters their name which allows you to refer to them by their name on relevant screens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A to-do list! The entire list is in the &lt;code&gt;session&lt;/code&gt; object which can be called and loaded on any page the user loads on your site. It‚Äôd be a good idea to have data persistence as well in this scenario though!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dare I say it? Ordering food online is a great use case for this. Add all selected items to a &lt;code&gt;session&lt;/code&gt; object to keep track of the user order while they browse. Once the order is complete, the data can be scrapped when the browser session closes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any sort of online calculation service: currency exchange, electricity, insurance, superannuation. These all require temporary data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flight tracking information (I may be stretching it here). A user would enter details of a flight to track and that data would stay live for the duration of the session. There‚Äôs no need for it to be stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even an old school type of browser game like Jetman. The score is retained for the duration of the session but once the browser closes, you start from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think you get the point! The &lt;code&gt;session&lt;/code&gt; object is incredibly useful!&lt;/p&gt;
&lt;p&gt;I‚Äôll admit, it did take some time to wrap my head around how to get it working at a code level. The concept is simple but writing the code such that it worked took some testing and playing.&lt;/p&gt;
&lt;p&gt;If you have any cool use cases or examples of &lt;code&gt;session&lt;/code&gt; object usage, let us know!&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="sessions"></category><category term="learning"></category><category term="examples"></category><category term="code"></category></entry><entry><title>OOP Beyond the Basics: Using Properties for Encapsulation, Computation and Refactoring</title><link href="https://pybit.es/property-decorator.html" rel="alternate"></link><published>2017-05-31T12:00:00+02:00</published><updated>2017-05-31T12:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-05-31:/property-decorator.html</id><summary type="html">&lt;p&gt;In this article I share my learning of the property decorator coding a simple Account class. I think it's an unmissable tool in your (Python) OOP toolkit.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article I share my learning of the property decorator coding a simple Account class. I think it's an unmissable tool in your (Python) OOP toolkit.&lt;/p&gt;
&lt;h2&gt;What is a property?&lt;/h2&gt;
&lt;p&gt;I found this good definition in &lt;a href="http://www.amazon.com/dp/0692878971/?tag=pyb0f-20"&gt;Powerful Python&lt;/a&gt;, a highly recommended beyond-the-basics Python book:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In object-oriented programming, a property is a special sort of object attribute. It‚Äôs almost a cross between a method and an attribute. The idea is that you can, when designing the class, create "attributes" whose reading, writing, and so on can be managed by special methods. In Python, you do this with a decorator named property. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;A simple Account class&lt;/h2&gt;
&lt;p&gt;Lets define a simple account class (full code is &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/063/account.py"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;:

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start_balance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start_balance&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;

    &lt;span class="kd"&gt;@property&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;tt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_transactions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_start_balance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;encapsulation&lt;/span&gt;

    &lt;span class="kd"&gt;@property&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;start_balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_start_balance&lt;/span&gt;

    &lt;span class="kd"&gt;@start_balance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setter&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;start_balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Start balance needs to be int&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Start balance cannot be negative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_start_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt;

    &lt;span class="kd"&gt;@start_balance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleter&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;start_balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cannot delete start_balance attr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;manage&lt;/span&gt; &lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;related&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;¬†&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;__iadd__&lt;/span&gt; 
    &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;¬†&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;__isub__&lt;/span&gt;
    &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;spending&lt;/span&gt; &lt;span class="nx"&gt;too&lt;/span&gt; &lt;span class="nx"&gt;much&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here you see two cool features of properties:&lt;/p&gt;
&lt;h3&gt;1. Encapsulation&lt;/h3&gt;
&lt;p&gt;I cannot assign a string nor negative value to start_balance (tests that show this are &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/063/test_account.py"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;account&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/bbelderb/Documents/code/pybites_100days/063/account.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start_balance&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/bbelderb/Documents/code/pybites_100days/063/account.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start_balance&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Start balance needs to be int&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="n"&gt;needs&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/bbelderb/Documents/code/pybites_100days/063/account.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start_balance&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/bbelderb/Documents/code/pybites_100days/063/account.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start_balance&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Start balance cannot be negative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;negative&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x102a81d68&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A useful insight I picked up from Powerful Python is to use the setter also in the constructor by NOT using the underscore. Here you see why:&lt;/p&gt;
&lt;p&gt;NOT:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def __init__(self, owner, start_balance=0):
    self.owner = owner.title()
    self._start_balance = start_balance
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which can lead to this!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;account&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def __init__(self, owner, start_balance=0):
    self.owner = owner.title()
    self.start_balance = start_balance
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which also throws 'TypeError: Start balance needs to be int' when constructing the object with the wrong type.&lt;/p&gt;
&lt;h3&gt;2. Computation&lt;/h3&gt;
&lt;p&gt;As stated in &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Properties can also be a way to define computed attributes. These are attributes that are not actually stored, but computed on demand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; acc = Account(&amp;#39;bob&amp;#39;, 100)
&amp;gt;&amp;gt;&amp;gt; acc += 25
&amp;gt;&amp;gt;&amp;gt; acc -= 100
&amp;gt;&amp;gt;&amp;gt; acc += 50
&amp;gt;&amp;gt;&amp;gt; acc -= 10
&amp;gt;&amp;gt;&amp;gt; acc.balance
65
&amp;gt;&amp;gt;&amp;gt; acc += 135
&amp;gt;&amp;gt;&amp;gt; acc.balance
200
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;acc.balance corresponds to this code which is calculated on the fly: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@property
def balance(self):
    tt = sum(t.amount for t in self._transactions)
    return self._start_balance + tt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes you can also implement this as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; acc.get_balance()
65
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... but this is much nicer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; acc.balance
65
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also if the computation requires an external resource (DB, network) you probably want to do it on demand.&lt;/p&gt;
&lt;h2&gt;Python 2.x&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/2/library/functions.html#property"&gt;2.x docs property section&lt;/a&gt; states: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Return a property attribute for new-style classes (classes that derive from object).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Python 2.x to use 'new-style classes' you have to inherit explicitly from object (class Foo(object): pass). In Python 3.x this is done implicitly (class Foo: pass), see &lt;a href="https://stackoverflow.com/questions/15374857/should-all-python-classes-extend-object"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In Python there are no private variables and writing getters and setters for all of them is not the way to go.&lt;/p&gt;
&lt;p&gt;The Pythonic way to do getters and setters is using the @property decorator. &lt;/p&gt;
&lt;p&gt;As succinctly summarized &lt;a href="http://blaag.haard.se/What-s-the-point-of-properties-in-Python/"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can start out by writing the simplest implementation imaginable, and if you later need to change the implementation you can still do so without changing the interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the way if you need a lot of them and they do similar type checking check out recipe 9.21 of &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt;: Avoiding Repetitive Property Methods.&lt;/p&gt;
&lt;h2&gt;Other use cases&lt;/h2&gt;
&lt;p&gt;Another common use case is caching. See &lt;a href="http://www.amazon.com/dp/1784398780/?tag=pyb0f-20"&gt;Python 3 Object-Oriented Programming - Second Edition&lt;/a&gt; - &lt;a href="https://github.com/mono0926/Python-3-Object-Oriented-Programming/blob/master/1261_05_Code/1261_05_15_cache_getter.py"&gt;caching a web request&lt;/a&gt; or &lt;a href="https://stackoverflow.com/questions/4037481/caching-attributes-of-classes-in-python"&gt;SO&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Another cool use case in this context is refactoring, see &lt;a href="https://wiki.python.org/moin/ComputedAttributesUsingPropertyObjects"&gt;this wiki&lt;/a&gt; for an example of refactoring Widget colors to support colors specified as #rrggbb strings alongside (R,G,B) tuples (TODO: try to use this technique on one of my own classes ...)&lt;/p&gt;
&lt;p&gt;What have you used properties for? Let us know in the comments below ... &lt;/p&gt;
&lt;p&gt;Maybe we can do a Code Challenge around this one? :)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="oop"></category><category term="property"></category><category term="decorators"></category><category term="encapsulation"></category><category term="computation"></category><category term="dunder"></category><category term="refactoring"></category><category term="pytest"></category><category term="2vs3"></category><category term="getter"></category><category term="setter"></category></entry><entry><title>Code Challenge 21 - Electricity Cost Calculation App</title><link href="https://pybit.es/codechallenge21.html" rel="alternate"></link><published>2017-05-29T11:00:00+02:00</published><updated>2017-05-29T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-29:/codechallenge21.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will get you to create a simple app to calculate the monetary cost of using an electrical device. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will get you to create a simple app to calculate the monetary cost of using an electrical device. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is simple. We want you to create an app that will allow you to calculate the hourly cost of running an electrical device.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic Requirements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;App will allow a user to enter the wattage consumption of a device (eg, a 20w light globe) and a cost per kilowatt hour (kWh). kWh being the unit of measurement the electric company charges by.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The app will then return the cost of running the device for 1 hour.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the absolute baseline for beginners. We recommend you continue with the Bonus Features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Features:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make it interesting, see if you can complete the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make this a web app using the framework of your choice. It‚Äôd look great in a browser!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow a user to enter in how many hours they want to use the device for and have this factored into your cost result (eg, Using a 20w globe at 50 cents per kWh for 10 hours).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use persistent storage (sqlite, shelf, etc) to store all queries to the app and have the ability to print this stored data back to the user when requested.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don‚Äôt want to make it a web app, see if you can construct a GUI using &lt;a href="https://wiki.python.org/moin/TkInter"&gt;TkInter&lt;/a&gt; or other.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
Consider this a half specific, half open ended challenge. There‚Äôs an intentional, specific goal here but how you get there is up to you. If you‚Äôre a newbie and it takes time, feel free to leave this as a CLI based app.&lt;/p&gt;
&lt;p&gt;It doesn‚Äôt matter how great it looks, only that you were challenged along the way and learned something!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="calculation"></category><category term="math"></category><category term="electricity"></category><category term="beginner"></category><category term="GUI"></category><category term="TkInter"></category><category term="Flask"></category><category term="newquote"></category></entry><entry><title>Code Challenge 20 - Object Oriented Programming Fun - Review</title><link href="https://pybit.es/codechallenge20_review.html" rel="alternate"></link><published>2017-05-29T09:00:00+02:00</published><updated>2017-05-29T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-29:/codechallenge20_review.html</id><summary type="html">&lt;p&gt;It's review time again. Wow: &lt;a href="http://pybit.es/codechallenge20.html"&gt;challenge #20&lt;/a&gt; already! We can't believe we have worked through so many already. We also keep receiving amazing PRs, awesome!&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's review time again. Wow: &lt;a href="http://pybit.es/codechallenge20.html"&gt;challenge #20&lt;/a&gt; already! We can't believe we have worked through so many already. We also keep receiving amazing PRs, awesome!&lt;/p&gt;
&lt;h2&gt;Submissions&lt;/h2&gt;
&lt;p&gt;This was a great challenge. We got to play with OOP and learned a couple of things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Julian: exploring inheritance using the character class system in the World of Warcraft, see &lt;a href="https://github.com/pybites/challenges/blob/community/20/hobojoe1848/warlock_class.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bob: a book/video task planner that sends a weekly SMS (Twilio API) with material to consume, see &lt;a href="https://github.com/pybites/challenges/tree/community/20/bbelderbos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode&lt;/a&gt;: simple Karma app using inheritance and playing with dunder methods, see &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/058/karma.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dseptem"&gt;Dante&lt;/a&gt;: Rooms framework (including unittests, nice!), Readme:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Rooms is a humble and simple Framework to create adventure games with Python. A player has an inventory and moves between Rooms, interacting with Actors. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    $ python rooms.py

    ...
    ...
    This normal looking room has a weird guy standing against the wall

    -=-

    Here I see a weird guy that I don&amp;#39;t know. he looks friendly..

    Actions:
    1) Talk to the friendly weird guy I don&amp;#39;t know
    2) Inventory

    Exits:
    3) A place with a strange aura

    Choose your action / exit: 1

    Take this botato, use is wisely!

    Received 1 Holy Botato!

    ...
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Everytime a PR comes in we cheer with joy, humbled by the fact we see you are stretching yourself by taking our challenges. Keep up the good work, the stuff you are building is amazing!&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="OOP"></category><category term="object oriented"></category><category term="inheritance"></category><category term="dunder"></category><category term="games"></category><category term="adventure"></category><category term="warcraft"></category><category term="Twilio"></category><category term="karma"></category><category term="Rooms"></category></entry><entry><title>Twitter digest 2017 week 21</title><link href="https://pybit.es/twitter_digest_201721.html" rel="alternate"></link><published>2017-05-28T20:01:00+02:00</published><updated>2017-05-28T20:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-28:/twitter_digest_201721.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nostarch:" target="_blank"&gt;@nostarch:&lt;/a&gt; The latest from &lt;a href="https://twitter.com/@AlSweigart," target="_blank"&gt;@AlSweigart,&lt;/a&gt; Cracking Codes with Python, is now in Early Access! &lt;a href="https://t.co/19trOQbBhk" title="https://t.co/19trOQbBhk" target="_blank"&gt;https://t.co/19trOQbBhk&lt;/a&gt; &lt;a href="https://t.co/oHtPpOG‚Ä¶" title="https://t.co/oHtPpOG‚Ä¶" target="_blank"&gt;https://t.co/oHtPpOG‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Al Sweigart (@AlSweigart) &lt;a href="https://twitter.com/AlSweigart/status/867880275728060417" data-datetime="2017-05-25T23:09:16+00:00"&gt;May 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brettsky:" target="_blank"&gt;@brettsky:&lt;/a&gt; My post on explaining PEP 518 thanks to &lt;a href="https://twitter.com/@takluyver" target="_blank"&gt;@takluyver&lt;/a&gt; landing his PR implementing it in pip &lt;a href="https://t.co/ul4eOLHyql" title="https://t.co/ul4eOLHyql" target="_blank"&gt;https://t.co/ul4eOLHyql&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/868646481699364864" data-datetime="2017-05-28T01:53:54+00:00"&gt;May 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Will have to check this out. Wonder how it compares to &lt;a href="https://twitter.com/search/#Faker?" target="_blank"&gt;#Faker?&lt;/a&gt; &lt;a href="https://t.co/Do93AHH71g" title="https://t.co/Do93AHH71g" target="_blank"&gt;https://t.co/Do93AHH71g&lt;/a&gt;&lt;/p&gt;‚Äî Mohhinder Suresh (@mohhinder) &lt;a href="https://twitter.com/mohhinder/status/868022004963844097" data-datetime="2017-05-26T08:32:27+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hand-crafted Python 2 and 3 boilerplates with argparse, logging, Flask, pytest, tox, and more &lt;a href="https://t.co/Etcmb5QJHN" title="https://t.co/Etcmb5QJHN" target="_blank"&gt;https://t.co/Etcmb5QJHN&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/868196850095882240" data-datetime="2017-05-26T20:07:14+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kdnuggets:" target="_blank"&gt;@kdnuggets:&lt;/a&gt; Top 20 &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; Open Source Projects, updated &lt;a href="https://t.co/xyuGDGtBWP" title="https://t.co/xyuGDGtBWP" target="_blank"&gt;https://t.co/xyuGDGtBWP&lt;/a&gt; &lt;a href="https://t.co/swskwnrN2S" title="https://t.co/swskwnrN2S" target="_blank"&gt;https://t.co/swskwnrN2S&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/868494213415018496" data-datetime="2017-05-27T15:48:50+00:00"&gt;May 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;calculate memory footprint for any python object &lt;a href="https://t.co/NPlYeMrrBa" title="https://t.co/NPlYeMrrBa" target="_blank"&gt;https://t.co/NPlYeMrrBa&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/868693322939998208" data-datetime="2017-05-28T05:00:02+00:00"&gt;May 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Navigate to the last edit using Shift+Cmd+Backspace/Shift+Ctrl+Backspace &lt;a href="https://twitter.com/search/#PyCharmTip" target="_blank"&gt;#PyCharmTip&lt;/a&gt; &lt;a href="https://t.co/jp40j8GB8N" title="https://t.co/jp40j8GB8N" target="_blank"&gt;https://t.co/jp40j8GB8N&lt;/a&gt;&lt;/p&gt;‚Äî JetBrains PyCharm (@pycharm) &lt;a href="https://twitter.com/pycharm/status/866624694178508800" data-datetime="2017-05-22T12:00:02+00:00"&gt;May 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Shallow and deep copy: &amp;gt;&amp;gt; from copy import copy, deepcopy &amp;gt;&amp;gt; a = [1,[2,3]] &amp;gt;&amp;gt; b = a &amp;gt;&amp;gt; c = copy(a) &amp;gt;&amp;gt; d = deepcopy(‚Ä¶ &lt;a href="https://t.co/KBePIiuqX6" title="https://t.co/KBePIiuqX6" target="_blank"&gt;https://t.co/KBePIiuqX6&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/866926676520738816" data-datetime="2017-05-23T08:00:01+00:00"&gt;May 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nicoddemus:" target="_blank"&gt;@nicoddemus:&lt;/a&gt; Pytest 3.1.0 has been released! Changelog: &lt;a href="https://t.co/QkUqbNw0Lz" title="https://t.co/QkUqbNw0Lz" target="_blank"&gt;https://t.co/QkUqbNw0Lz&lt;/a&gt; &lt;a href="https://twitter.com/search/#pytest" target="_blank"&gt;#pytest&lt;/a&gt;&lt;/p&gt;‚Äî pytest.org (@pytestdotorg) &lt;a href="https://twitter.com/pytestdotorg/status/866792741367197696" data-datetime="2017-05-22T23:07:48+00:00"&gt;May 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My first book - Tkinter By Example - now available (Free, CC BY-ND) &lt;a href="https://t.co/PzulG4NUXc" title="https://t.co/PzulG4NUXc" target="_blank"&gt;https://t.co/PzulG4NUXc&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/868481931180224512" data-datetime="2017-05-27T15:00:02+00:00"&gt;May 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New post is up! Responsive Bar Charts with &lt;a href="https://twitter.com/@BokehPlots," target="_blank"&gt;@BokehPlots,&lt;/a&gt; Flask and &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3 &lt;a href="https://t.co/rP6BxBKkE2" title="https://t.co/rP6BxBKkE2" target="_blank"&gt;https://t.co/rP6BxBKkE2&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/868111827783340033" data-datetime="2017-05-26T14:29:23+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Exposing Python 3.6's Private Dict Version" ‚Äî blog post inspired by &lt;a href="https://twitter.com/@raymondh" target="_blank"&gt;@raymondh&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/@brandon_rhodes" target="_blank"&gt;@brandon_rhodes&lt;/a&gt; talks at &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/ZAVJhUFyLD" title="https://t.co/ZAVJhUFyLD" target="_blank"&gt;https://t.co/ZAVJhUFyLD&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/868127985504624640" data-datetime="2017-05-26T15:33:35+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Gitsuggest ‚Äì A tool to suggest github repositories based on the repositories you have shown interest in &amp;gt;&amp;gt; &lt;a href="https://t.co/nSZfVoqIE4" title="https://t.co/nSZfVoqIE4" target="_blank"&gt;https://t.co/nSZfVoqIE4&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/868095390121435136" data-datetime="2017-05-26T13:24:04+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This is &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/0svw0OdApP" title="https://t.co/0svw0OdApP" target="_blank"&gt;https://t.co/0svw0OdApP&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/866429000670863361" data-datetime="2017-05-21T23:02:25+00:00"&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;And just because I can‚Äôt wait for this stuff here in Australia‚Ä¶&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just as I got all the lights setup, this is going to be legit. &lt;a href="https://t.co/mIF3UVFk3z" title="https://t.co/mIF3UVFk3z" target="_blank"&gt;https://t.co/mIF3UVFk3z&lt;/a&gt;&lt;/p&gt;‚Äî Mahdi Yusuf (@myusuf3) &lt;a href="https://twitter.com/myusuf3/status/867238505784672256" data-datetime="2017-05-24T04:39:06+00:00"&gt;May 24, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="books"></category><category term="pycon2017"></category><category term="pip"></category><category term="PEP"></category><category term="pyPI"></category><category term="Elizabeth"></category><category term="machine learning"></category><category term="boilerplates"></category><category term="open source"></category><category term="pycharm"></category><category term="copy"></category><category term="pytest"></category><category term="memory"></category><category term="tkinter"></category><category term="bokeh"></category><category term="flask"></category><category term="dicts"></category><category term="gitsuggest"></category></entry><entry><title>How to Write a Python Class</title><link href="https://pybit.es/python-classes.html" rel="alternate"></link><published>2017-05-25T20:37:00+02:00</published><updated>2017-05-25T20:37:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-25:/python-classes.html</id><summary type="html">&lt;p&gt;In this post I cover learning Python classes by walking through one of our 100 days of code submissions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another week, another scary Python construct to tackle. Classes! I‚Äôm so glad we‚Äôre covering Object Oriented Programming in &lt;a href="http://pybit.es/codechallenge20.html"&gt;this week‚Äôs code challenge&lt;/a&gt;. Thanks to this challenge, I wrote my first class! In this post I explain what a Python class is (in my own words of course!) and break down my code to help  with the learning.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is a Python Class?&lt;/h2&gt;
&lt;p&gt;It‚Äôs hard to explain. Pretty much, a class is a way of ‚Äúgenerically‚Äù representing some sort of object. (Confusing right?) Let me try with an example.&lt;/p&gt;
&lt;p&gt;What‚Äôs something we‚Äôre all familiar with‚Ä¶ Angry Birds! (At least, you should be if you‚Äôve ever owned an iPhone!).&lt;/p&gt;
&lt;p&gt;Let‚Äôs go with the Pigs. In Angry Birds there are a heap of different types of Pigs to kill. Some are large, some are small. Some have hats that give them extra health and some have helmets that make them almost indestructible. What‚Äôs one thing they all have in common? They‚Äôre all Pigs!&lt;/p&gt;
&lt;p&gt;If you were to be writing the code for Angry Birds, you wouldn‚Äôt manually code up each Pig, you‚Äôd create a &lt;em&gt;Pig Class&lt;/em&gt; that you could call every time you wanted to create a Pig. When you create the Pig Class, you would specify the &lt;em&gt;attributes&lt;/em&gt; that a Pig could be created with, e.g., how much health the pig gets. &lt;/p&gt;
&lt;p&gt;I‚Äôm being simplistic but you get the idea. The base ‚ÄúPigness‚Äù is there. A Pig will &lt;em&gt;always&lt;/em&gt; have a set amount of health to begin with, you‚Äôre just specifying how much it gets when you create it.&lt;/p&gt;
&lt;p&gt;I wrote a basic Person Class this week for our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;. I‚Äôll break it down for you to make this easier.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Person Class&lt;/h2&gt;
&lt;p&gt;The code for this example is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/054"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A person is as simple as it gets. We‚Äôre all people but we differ immensely. We‚Äôre different ages, different heights, weights, sexes, colours and so on. At the end of the day, we‚Äôre still people - which makes us a great Class use case!&lt;/p&gt;
&lt;p&gt;In the below code, I define a person class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The first line is simple. We‚Äôre &lt;em&gt;defining&lt;/em&gt; a class called ‚ÄúPerson‚Äù and it‚Äôs an object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt; is a dunder method used to say that we‚Äôre &lt;em&gt;creating&lt;/em&gt; the Person object (using the Person class definition).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the difference between &lt;em&gt;defining&lt;/em&gt; the class and &lt;em&gt;creating&lt;/em&gt; the object based on the class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the ()s we specify all of the attributes we want the Person object to be created with. Self is pretty self explanatory (pun intended!). It‚Äôs referring to itself. That is, the actual Person object that‚Äôs being created. (You‚Äôll see in a sec).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then assign these attributes to variables because they‚Äôll contain data once a person object is created. &lt;code&gt;self.name&lt;/code&gt; for example, is then assigned ‚Äúname‚Äù which will actually be a name at object creation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Creating A Person Object&lt;/h2&gt;
&lt;p&gt;At this point, we‚Äôve defined a Person. A Person will have the attributes: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt;, &lt;code&gt;gender&lt;/code&gt;, &lt;code&gt;job&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let‚Äôs create that person!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob = Person(&amp;quot;Bob&amp;quot;, 30, 180, 80, &amp;quot;Male&amp;quot;, &amp;quot;Professional Awesome Programmer Guy&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like passing variables to a function, we pass the attributes to the Person Class. What we‚Äôre doing here is we‚Äôre assigning all of these details (in the order specified in the class) to the &lt;code&gt;bob&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Yay! We just used the &lt;code&gt;Person&lt;/code&gt; class to create &lt;code&gt;bob&lt;/code&gt;! Creepy right?!&lt;/p&gt;
&lt;p&gt;We can then do funky things like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.age
30
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where the &lt;code&gt;self&lt;/code&gt; stuff starts to make sense. Look back at the class creation and substitute the word &lt;code&gt;self&lt;/code&gt; with &lt;code&gt;bob&lt;/code&gt;. Get it?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Creating Class Functions&lt;/h2&gt;
&lt;p&gt;If we want, we can also create some functions specific to this class that we can call to do the same thing. Here‚Äôs another way of getting &lt;code&gt;bob&lt;/code&gt;‚Äôs job (this is specified in the class):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_job(self):
    return self.job
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then call this as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.get_job()
Professional Awesome Programmer Guy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the same output as running &lt;code&gt;bob.job&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Getting Funky with Class Functions&lt;/h2&gt;
&lt;p&gt;What‚Äôs something interesting we could do? This is where I came up with the idea of calculating a person‚Äôs BMI (Body Mass Index).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bmi(self):
    return (self.weight / ((self.height / 100) ** 2))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BMI is calculated using the equation in the above: weight (kgs) divided by height in metres squared.&lt;/p&gt;
&lt;p&gt;Once a Person object has been created, we can then check what their BMI is as per the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.bmi()
24.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty cool right?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;When Would you use a Class?&lt;/h2&gt;
&lt;p&gt;I‚Äôd say you‚Äôd want to use them any time you‚Äôre dealing with repetitive data sets.&lt;/p&gt;
&lt;p&gt;For example, if you were dealing with data from a movie database you could make a Movie Class because we know that each movie is going to have the same attributes: title, duration, year, director and so on.&lt;/p&gt;
&lt;p&gt;You could use them for anything really.&lt;/p&gt;
&lt;p&gt;Consider a complaints system at a company. A complaint would be structured the same way every time: ID, Customer Name, Affected Service, Date, Complaint Text.&lt;/p&gt;
&lt;p&gt;The best part is that by creating your own class functions you can do all sorts of weird and wonderful things with the data. Imagine a &lt;code&gt;complaint.email()&lt;/code&gt; function. It could email off the complaint to the correct department if it was deemed legitimate!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Classes do take a little getting used to, especially when you start playing with subclasses (Code Challenge 20!) but they‚Äôre so great and totally necessary if you‚Äôre diving into Object Oriented Programming!&lt;/p&gt;
&lt;p&gt;My recommendation is to open up an editor and code up a quick and dirty class right now:&lt;/p&gt;
&lt;p&gt;Create a car class with attributes: Manufacturer, Model, Year of Manufacturing, Petrol Type, Mileage, Odometer. Then create some cars and play with their data! Print them to screen, add them to a database, whatever. Just get coding!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="classes"></category><category term="beginners"></category></entry><entry><title>PyCon 2017 - Digest, Impressions, Reflection</title><link href="https://pybit.es/pycon-2017.html" rel="alternate"></link><published>2017-05-24T12:00:00+02:00</published><updated>2017-05-24T12:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-05-24:/pycon-2017.html</id><summary type="html">&lt;p&gt;PyCon 2017 was such a great conference, I made so many good connections, got to see many good things the community is working on. It was very inspiring. In this article a digest.&lt;/p&gt;</summary><content type="html">&lt;p&gt;PyCon 2017 was such a great conference, I made so many good connections, got to see many good things the community is working on. It was very inspiring. &lt;/p&gt;
&lt;p&gt;In this article I will summarize some highlights and link to other resources.&lt;/p&gt;
&lt;h2&gt;Networking&lt;/h2&gt;
&lt;p&gt;The best thing you can do at a conference.&lt;/p&gt;
&lt;p&gt;In that context the best lesson I think came from &lt;a href="https://twitter.com/AlSweigart"&gt;@AlSweigart&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... skip all the talks - conference is primarily about meeting new people. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg/videos"&gt;All the talks are up&lt;/a&gt; and you can watch them at your own pace, the in-person networking could only be done during these days though so I am happy I did plenty of that :)&lt;/p&gt;
&lt;p&gt;Ideas, ideas, ideas. The expo hall was filled with companies and interesting people. I spoke with various companies and great software developers, I met with Dan Bader, Mike Kennedy, Brian Okken, Anthony Shaw, Trey Hunner, and many more, which gave me a lot of inspiration.&lt;/p&gt;
&lt;h2&gt;Talks / workshops&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The keynotes were fantastic, from Kelsey Hightower's &lt;a href="https://www.youtube.com/watch?v=u_iAXzy3xBA&amp;amp;feature=youtu.be&amp;amp;t=1677"&gt;Ok Google, talk to Kubernetes&lt;/a&gt; to Jake's &lt;a href="https://www.youtube.com/watch?v=ZyjCqQEUa8o"&gt;Why is Python such an effective tool in science&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Why don't you use C instead of Python? It's so much faster&lt;/p&gt;
&lt;p&gt;Why don't you commute by plane instead of car? It's so much faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Again &lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg/videos"&gt;all the talks are on YouTube&lt;/a&gt; and they are packed with good info. Some that I attended and enjoyed: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hJhZhLg3obk"&gt;Amjith Ramanujam - Awesome Command Line Tools&lt;/a&gt;: this was a great talk which taught me a lot of new tools to make your CLI apps more user-focused.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=npw4s1QTmPg"&gt;Raymond Hettinger - Modern Python Dictionaries A confluence of a dozen great ideas&lt;/a&gt;. As all talks by Raymond, highly informative and entertaining. More dicts: &lt;a href="https://www.youtube.com/watch?v=66P5FMkWoVU"&gt;Brandon Rhodes - The Dictionary Even Mightier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qOH-h-EKKac"&gt;Dave Forgac - Share Your Code! Python Packaging Without Complication&lt;/a&gt; - useful / practical talk, makes me want to try &lt;a href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt; and write an article about it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9TfDYds8WPg"&gt;Sep Dehpour - Magic Method, on the wall, who, now, is the fairest one of all&lt;/a&gt; - this was a fun talk showing what you can do with dunder methods and some things you probably should not do ;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xId9B1BVusA&amp;amp;t=11148s"&gt;Chalmer Lowe - bokeh: Data Visualization in Python (workshop)&lt;/a&gt; - I will definitely use Bokeh next time I need to do some data visualization, this workshop gave me all the basics to get started.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KIXACCJHtDg"&gt;Ben Zaitlen, Matthew Rocklin, Min Ragan Kelley, Olivier Grisel - Parallel Data Analysis (workshop)&lt;/a&gt; - great experimentation/ (first) exposure to parallel tools like map, submit and Dask/Spark. The workshops showed a lot of new tools, here they used futures and snakeviz for example, very cool.&lt;/li&gt;
&lt;li&gt;Testing: &lt;a href="https://www.youtube.com/watch?v=Vaq_e7qUA-4"&gt;Big picture software testing unit testing, Lean Startup, and everything in between&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=jmsk1QZQEvQ"&gt;James Saryerwinnie - Next Level Testing&lt;/a&gt;: good overview and learning about new libraries to write more/better tests.&lt;/li&gt;
&lt;li&gt;APIs: &lt;a href="https://www.youtube.com/watch?v=4mkFfce46zE"&gt;Fl√°vio Juvenal - How to make a good library API&lt;/a&gt; - nice talk showing examples of good vs bad APIs, conclusion: &lt;a href="https://twitter.com/pybites/status/866053135399174145"&gt;an #API should make the simple easy, the complex possible and the wrong impossible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data analysis: &lt;a href="https://www.youtube.com/watch?v=kWtffImyfp8"&gt;Deborah Hanus - Lights, camera, action! Scraping a great dataset to predict Oscar winners&lt;/a&gt; - this was a cool example showing how to obtain and prepare movie data, perform data analysis and make predictions. It inspired me to try to do a similar analysis using another data set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some that I missed and plan on watching next: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vGphzPLemZE"&gt;Andrew T Baker - 5 ways to deploy your Python web app in 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2FftatTS3jc"&gt;Nicole Zuckerman - The Glory of pdb's set trace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=v75rNdPukuI"&gt;Sam Agnew - Hacking Classic Nintendo Games with Python&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;And definitely quite a few more ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did see a lot of Python 3.6 mentioned/used, which seems a good trend.&lt;/p&gt;
&lt;h2&gt;Great community&lt;/h2&gt;
&lt;p&gt;One talk I wanted to highlight in particular is &lt;a href="https://www.youtube.com/watch?v=Wc1krFb5ifQ"&gt;Mariatta Wijaya's Dial M For Mentor&lt;/a&gt; about finding a mentor and how she became the first Woman Python Core Dev. She received a &lt;a href="https://twitter.com/matrixise/status/865678978677223429"&gt;standing ovation&lt;/a&gt; and it goes on to show how awesome our Python community is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mentors learn from you too.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Good mentor's don't hang around in communities that enable and accept trolls and assholes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Some impressions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Arriving:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 1" src="https://pybit.es/images/pycon/1.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zen of Python conference t-shirt:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 2" src="https://pybit.es/images/pycon/2.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The convention center was nice:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 3" src="https://pybit.es/images/pycon/3.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expo hall - meet fellow Pythonistas!&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 4" src="https://pybit.es/images/pycon/4.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Panel discussion with our &lt;a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life"&gt;BDFL&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 5" src="https://pybit.es/images/pycon/5.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Twitter bot tutorial poster:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 6" src="https://pybit.es/images/pycon/6.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another original poster: &lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 7" src="https://pybit.es/images/pycon/7.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyCon is getting more visitors every year:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 8" src="https://pybit.es/images/pycon/8.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Receiving my share of power holding the &lt;a href="https://twitter.com/hashtag/pythonicstaffofenlightenment?src=hash"&gt;pythonicstaffofenlightenment&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 9" src="https://pybit.es/images/pycon/9.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Closing dinner at the Portland museum of Art, each table received cards to kickstart the networking (although this happened naturally anyways):&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon pic 10" src="https://pybit.es/images/pycon/10.JPG"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more impressions check &lt;a href="https://twitter.com/search?q=pycon2017&amp;amp;src=typd"&gt;hashtag #pycon2017&lt;/a&gt; on Twitter and our &lt;a href="http://pybit.es/twitter_digest_201720.html"&gt;special digest&lt;/a&gt; we published during the conference weekend.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="conference"></category><category term="pycon"></category><category term="learning"></category><category term="community"></category><category term="networking"></category><category term="bokeh"></category><category term="parallel"></category><category term="mentoring"></category><category term="photos"></category></entry><entry><title>Code Challenge 20 - Object Oriented Programming Fun</title><link href="https://pybit.es/codechallenge20.html" rel="alternate"></link><published>2017-05-22T15:10:00+02:00</published><updated>2017-05-22T15:10:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-22:/codechallenge20.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will let you experiment with Object Oriented Programming, an important skill and fundamental building block of (everthing-is-an-object) Python. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will let you experiment with Object Oriented Programming, an important skill and fundamental building block of (everthing-is-an-object) Python. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;If you are new to OOP you might want to checkout &lt;a href="http://pybit.es/oop-primer.html"&gt;our primer tutorial&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define a class with a constructor (__init__ = object setup code, e.g. defining instance variables) and at least two methods. To relive PyCon you could have a generic Session class, but use any concept you like (Employee, Car, Person, Animal, Account, Notebook, etc). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define a subclass that inherits from the parent class. For example you could let (Lightning)Talk, KeyNote and Workshop be subclasses (inherit from) Session. Other examples: Employee - Manager / Developer, Car - Toyota, Account - SavingsAccount ... you get the idea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define another class for use in the initial (sub)class. So for the PyCon Session example you could pull in a bunch of Person (Developer) objects that joined it. This &lt;a href="http://www.amazon.com/dp/1784398780/?tag=pyb0f-20"&gt;Python OOP book&lt;/a&gt; has an example of a Notebook class to which Note objects are getting added. Or you could model a Blog with Posts, Tags, Categories, Comments. The possibilities are endless. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another (more fun) option that could be a good fit for OOP is developing a simple game with different Characters (Monsters, Heros, maybe Princesses even?) and Places they go, each class (blueprint) defining its own state (attributes) and behaviors (methods).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We hope you follow along so far. For the more experienced coders among us, get bonus credits if you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apart from Inheritance implement Polymorphism and Encapsulation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use one or more class and/or static methods. You could have a class variable keep track of the number of instances of the class for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;investigate and use Abstract base classes (= ABCs, see also our &lt;a href="http://pybit.es/oop-primer.html"&gt;OOP primer&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement special (aka "dunder" aka "magic") methods which we covered &lt;a href="http://pybit.es/python-data-model.html"&gt;here&lt;/a&gt;, at least __str__ and __repr__ &lt;/p&gt;
&lt;p&gt;To get an idea of the difference between these two and a list of dunder methods on a typical Python object run this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;2017-05-22 12:16:08.816364&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;datetime.datetime(2017, 5, 22, 12, 16, 8, 816364)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not sure if we should go down the route of multiple inheritance but it is possible if you have a use case. You can use __mro__ to figure out the inheritance order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="OOP"></category><category term="object oriented"></category><category term="inheritance"></category><category term="encapsulation"></category><category term="polymorphism"></category><category term="dunder"></category><category term="games"></category><category term="ABCs"></category></entry><entry><title>Code Challenge 19 - Post to Your Favorite API - Review</title><link href="https://pybit.es/codechallenge19_review.html" rel="alternate"></link><published>2017-05-22T15:00:00+02:00</published><updated>2017-05-22T15:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-22:/codechallenge19_review.html</id><summary type="html">&lt;p&gt;This week was pretty busy due to PyCon, but what an amazing conference! A lot to absorb which we will digest in the upcoming articles. First our regular schedule though: review of &lt;a href="http://pybit.es/codechallenge19.html"&gt;last week's challenge&lt;/a&gt;: post to your favorite API.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week was pretty busy due to PyCon, but what an amazing conference! A lot to absorb which we will digest in the upcoming articles. First our regular schedule though: review of &lt;a href="http://pybit.es/codechallenge19.html"&gt;last week's challenge&lt;/a&gt;: post to your favorite API. &lt;/p&gt;
&lt;h2&gt;PyCon&lt;/h2&gt;
&lt;p&gt;Before we dive in just to say we are absolutely stoked about the positive feedback we got engaging with fellow Pythonistas at PyCon this week! People got excited about the code challenges: the fact it stretches fellow programmers and the way they can submit their work via PR. So we definitely keep using this format for now. Do reach out though if you have any feedback or want to submit a code challenge / share your ideas, they are more than welcome. Thanks. &lt;/p&gt;
&lt;h2&gt;Our solutions&lt;/h2&gt;
&lt;p&gt;Here are some scripts that POST to APIs all taken from our &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100 Days of Code repo&lt;/a&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This week's contribution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facebook API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/007/"&gt;a script to automatically post to our FB group&lt;/a&gt; which uses the &lt;a href="https://github.com/mobolic/facebook-sdk"&gt;facebook-sdk package&lt;/a&gt; and &lt;a href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt; which is neat to create command line interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Previously featured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Twitter API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/053/"&gt;script to (daily) auto-tweet our 100 Days of Code progress&lt;/a&gt; (&lt;a href="http://pybit.es/100days-autotweet.html"&gt;article&lt;/a&gt;). If you are curious about Twitter bots, you might want to check out &lt;a href="http://pybit.es/automate-twitter.html"&gt;our article&lt;/a&gt; and &lt;a href="https://twitter.com/pybites/status/866346450699001856"&gt;this poster&lt;/a&gt; spotted at PyCon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slack API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/020/"&gt;post to Slack upon each domain mention on Twitter&lt;/a&gt; (&lt;a href="http://pybit.es/twitter-monitor-slack-notify.html"&gt;article&lt;/a&gt;). We also have &lt;a href="http://pybit.es/simple-chatbot.html"&gt;an article&lt;/a&gt; on how to build a Slack bot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We initially wanted to look at the &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify&lt;/a&gt; or &lt;a href="https://developers.google.com/youtube/"&gt;YouTube&lt;/a&gt; API but we lacked the time. We will update this article when we get around it. Or maybe it's a nice one for you to contribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;next(Challenges)&lt;/h2&gt;
&lt;p&gt;This week we will dive into Object Oriented Programming. We will set up a nice free-form challenge to let you experiment with classes, inheritance and more. Stay tuned ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now is better than never.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We hope you are having fun with these challenges. Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="API"></category><category term="POST"></category><category term="Twitter"></category><category term="Facebook"></category></entry><entry><title>Twitter digest 2017 week 20</title><link href="https://pybit.es/twitter_digest_201720.html" rel="alternate"></link><published>2017-05-21T19:59:00+02:00</published><updated>2017-05-21T19:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-21:/twitter_digest_201720.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week we‚Äôve decided to include cool things that we‚Äôve found, learned and heard while Bob‚Äôs been at #PyCon2017! Woohoo!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cool, &lt;a href="https://twitter.com/@pycharm" target="_blank"&gt;@pycharm&lt;/a&gt; supports &lt;a href="https://twitter.com/search/#vim" target="_blank"&gt;#vim&lt;/a&gt; mode via IdeaVim - &lt;a href="https://t.co/g2TId7f70K" title="https://t.co/g2TId7f70K" target="_blank"&gt;https://t.co/g2TId7f70K&lt;/a&gt; - trying it out ...&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866094856543780865" data-datetime="2017-05-21T00:54:39+00:00"&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Always amazes me how fast &lt;a href="https://twitter.com/@pycon" target="_blank"&gt;@pycon&lt;/a&gt; is able to upload their videos. All the tutorials are already available! &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/nB24mksIV9" title="https://t.co/nB24mksIV9" target="_blank"&gt;https://t.co/nB24mksIV9&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/865943453884071938" data-datetime="2017-05-20T14:53:02+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why have I not used bpython yet?! It's awesome &lt;a href="https://t.co/mAO9CJojVC" title="https://t.co/mAO9CJojVC" target="_blank"&gt;https://t.co/mAO9CJojVC&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866028106942775296" data-datetime="2017-05-20T20:29:25+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The evolution of dictionaries in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; history. Great thing to know &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/2yfqJwY0M6" title="https://t.co/2yfqJwY0M6" target="_blank"&gt;https://t.co/2yfqJwY0M6&lt;/a&gt;&lt;/p&gt;‚Äî yosola (@yosola) &lt;a href="https://twitter.com/yosola/status/866015571376197633" data-datetime="2017-05-20T19:39:36+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The new features of Python 3.6 (&lt;a href="https://t.co/fcHMkEf5Yd" title="https://t.co/fcHMkEf5Yd" target="_blank"&gt;https://t.co/fcHMkEf5Yd&lt;/a&gt;) are a highlight in many &lt;a href="https://twitter.com/search/#pycon2017" target="_blank"&gt;#pycon2017&lt;/a&gt; talks so far. It seems like an inflection point!&lt;/p&gt;‚Äî Brett Slatkin (@haxor) &lt;a href="https://twitter.com/haxor/status/865995754401284096" data-datetime="2017-05-20T18:20:51+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;pgcli - a REPL for Postgres &lt;a href="https://t.co/8ddSupFmi3" title="https://t.co/8ddSupFmi3" target="_blank"&gt;https://t.co/8ddSupFmi3&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866020323384213504" data-datetime="2017-05-20T19:58:29+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;2D platformer game made in Python 3 and... *Tkinter* Can you believe it!? So cool! &lt;a href="https://t.co/4wpJRUQvcM" title="https://t.co/4wpJRUQvcM" target="_blank"&gt;https://t.co/4wpJRUQvcM&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/865760742724833280" data-datetime="2017-05-20T02:47:00+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Speedml is a Python package to speed start machine learning projects. - &lt;a href="https://t.co/t9n45sbf5u" title="https://t.co/t9n45sbf5u" target="_blank"&gt;https://t.co/t9n45sbf5u&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/865569500393082880" data-datetime="2017-05-19T14:07:05+00:00"&gt;May 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Use ast_note_interactivity option in &lt;a href="https://twitter.com/search/#Jupyter" target="_blank"&gt;#Jupyter&lt;/a&gt; notebooks to see the value of multiple statements at once. &lt;a href="https://t.co/KKZG3UtPlf" title="https://t.co/KKZG3UtPlf" target="_blank"&gt;https://t.co/KKZG3UtPlf&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/864397514719604736" data-datetime="2017-05-16T08:30:01+00:00"&gt;May 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;3D Interfaces for Python using Unity3D &lt;a href="https://t.co/2BSxSPU2Gz" title="https://t.co/2BSxSPU2Gz" target="_blank"&gt;https://t.co/2BSxSPU2Gz&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/865673428291813380" data-datetime="2017-05-19T21:00:03+00:00"&gt;May 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Inspect PCAP Files Using AWS Lambda &lt;a href="https://t.co/t94k4YVLKu" title="https://t.co/t94k4YVLKu" target="_blank"&gt;https://t.co/t94k4YVLKu&lt;/a&gt; &lt;a href="https://twitter.com/search/#scapy" target="_blank"&gt;#scapy&lt;/a&gt; &lt;a href="https://twitter.com/search/#aws" target="_blank"&gt;#aws&lt;/a&gt; &lt;a href="https://twitter.com/search/#lambda" target="_blank"&gt;#lambda&lt;/a&gt; &lt;a href="https://twitter.com/search/#pcap" target="_blank"&gt;#pcap&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/865349881119911937" data-datetime="2017-05-18T23:34:23+00:00"&gt;May 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Raymond Hettinger: Modern Python Dictionaries: A confluence of a dozen great ideas (PyCon 2017) &lt;a href="https://t.co/SuFpnCfqNK" title="https://t.co/SuFpnCfqNK" target="_blank"&gt;https://t.co/SuFpnCfqNK&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/866068084372766721" data-datetime="2017-05-20T23:08:16+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Create a Facebook Messenger Bot with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Flask" target="_blank"&gt;#Flask&lt;/a&gt; &lt;a href="https://t.co/Oym57PwyGb" title="https://t.co/Oym57PwyGb" target="_blank"&gt;https://t.co/Oym57PwyGb&lt;/a&gt; &lt;a href="https://t.co/2j3KbXeL40" title="https://t.co/2j3KbXeL40" target="_blank"&gt;https://t.co/2j3KbXeL40&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/865852623345274881" data-datetime="2017-05-20T08:52:06+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An &lt;a href="https://twitter.com/search/#API" target="_blank"&gt;#API&lt;/a&gt; should make the simple easy, the complex possible and the wrong impossible - great talk by &lt;a href="https://twitter.com/@flaviojuvenal‚Ä¶" target="_blank"&gt;@flaviojuvenal‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/jiw3UeUkZy" title="https://t.co/jiw3UeUkZy" target="_blank"&gt;https://t.co/jiw3UeUkZy&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866053135399174145" data-datetime="2017-05-20T22:08:52+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A great truth from &lt;a href="https://twitter.com/@marriatta's" target="_blank"&gt;@marriatta's&lt;/a&gt; talk: Good mentor's don't hang around in communities that enable and accept trolls and assholes. &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt;&lt;/p&gt;‚Äî Leland McInnes (@leland_mcinnes) &lt;a href="https://twitter.com/leland_mcinnes/status/865674442499702785" data-datetime="2017-05-19T21:04:05+00:00"&gt;May 19, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="pycharm"></category><category term="vim"></category><category term="PyCon2017"></category><category term="tutorials"></category><category term="resources"></category><category term="bpython"></category><category term="dictionaries"></category><category term="Postgres"></category><category term="cli"></category><category term="mentors"></category><category term="tkinter"></category><category term="speedml"></category><category term="machine learning"></category><category term="jupyter"></category><category term="aws"></category><category term="lambda"></category><category term="pcap"></category><category term="unity3d"></category><category term="bot"></category><category term="flask"></category></entry><entry><title>How to Create Your Own Steam Game Release Notifier</title><link href="https://pybit.es/steam-notifier.html" rel="alternate"></link><published>2017-05-19T19:53:00+02:00</published><updated>2017-05-19T19:53:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-19:/steam-notifier.html</id><summary type="html">&lt;p&gt;In this post we demonstrate ways in which you can parse common data formats used in Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you‚Äôve been following our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt; you‚Äôll have noticed that I‚Äôve been contributing snippets of code relating to the &lt;a href="http://store.steampowered.com/"&gt;Steam&lt;/a&gt; gaming platform and store.&lt;/p&gt;
&lt;p&gt;When people ask us what the best way to learn Python is, we always tell them to get their hands dirty and to &lt;a href="http://pybit.es/learn-by-doing.html"&gt;learn by doing&lt;/a&gt;. Idea wise, we tell people to scratch their own itch. That‚Äôs exactly what I‚Äôve been doing between code challenges, work and family life. I made my own Steam Game Notifier that emails me the latest Steam game releases!&lt;/p&gt;
&lt;p&gt;Steam does have its own RSS feed which I could have just loaded in an RSS app but there‚Äôs no fun in that! I wanted the challenge of coding up a solution myself. This post will break down the code and describe the solution.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/tree/master/steam_notifier"&gt;Full code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Splitting the Code Up&lt;/h2&gt;
&lt;p&gt;Looking at the above code link you‚Äôll notice there are four Python scripts that make up the program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;email_list.py:&lt;/strong&gt; Stores the email addresses of recipients for this tool.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;emailer.py:&lt;/strong&gt; The script that sends the email. It reads in the emails stored in email_list.py.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pull_xml.py:&lt;/strong&gt; This script pulls down the newreleases.xml file from the Steam servers and saves it to the local directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xml_steam_scraper.py:&lt;/strong&gt; The main script. This parses the XML file and manipulates the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;pull_xml.py&lt;/h2&gt;
&lt;p&gt;We‚Äôll attack this in executional order. First up is &lt;code&gt;pull_xml.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a very simple &lt;code&gt;requests&lt;/code&gt; pull. It requests the newreleases.xml file from Steam and saves the contents to the local directory. The main thing to note in the code is the &lt;code&gt;wb&lt;/code&gt; open mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;newreleases.xml&amp;#39;, &amp;#39;wb&amp;#39;) as f:
    f.write(r.content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;wb&lt;/code&gt; (write binary) mode is required to correctly write the XML data to a local file called new releases.xml.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;xml_steam_scraper.py&lt;/h2&gt;
&lt;p&gt;Now for the meat. I‚Äôll cover the noteworthy parts as it should hopefully help anyone learning Python.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Game = namedtuple(&amp;#39;Game&amp;#39;, &amp;#39;title url&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a &lt;code&gt;namedtuple&lt;/code&gt; from the &lt;code&gt;collections&lt;/code&gt; module. Read this &lt;a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"&gt;docs.python doc&lt;/a&gt; if you‚Äôre new to these. Essentially we‚Äôre creating a tuple subclass named &lt;code&gt;Game&lt;/code&gt;. It has two fields associated with it: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; (more on this later).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_create_db():
    with sqlite3.connect(DB_NAME) as connection:
        c = connection.cursor()
        try:
            c.execute(&amp;quot;&amp;quot;&amp;quot;CREATE TABLE new_steam_games
                (Name TEXT, Link TEXT, Emailed TEXT)
                    &amp;quot;&amp;quot;&amp;quot;)        
        except:
            pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This entire function handles the database creation we‚Äôre using for this program. The &lt;code&gt;sqlite&lt;/code&gt; code will create the DB &lt;code&gt;steam_games.db&lt;/code&gt; (as per the declaration at the top of the code) if the DB doesn‚Äôt exist. If it does exist, it just continues on.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.execute(&amp;quot;SELECT Name from new_steam_games&amp;quot;)
db_games_list = c.fetchall()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within the &lt;code&gt;pull_db_data()&lt;/code&gt; function you‚Äôll see this line. This code will pull the &lt;code&gt;Name&lt;/code&gt; data from the &lt;code&gt;steam_games.db&lt;/code&gt; file and populate the &lt;code&gt;db_games_list&lt;/code&gt; list with the data.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Ignore my intentionally awesome function names
def parse_that_feed_baby():
    feed_list = []
    feed = feedparser.parse(FEED_FILE)
    for entry in feed[&amp;#39;entries&amp;#39;]:
        game_data = Game(title=entry[&amp;#39;title&amp;#39;], url=entry[&amp;#39;link&amp;#39;])
        feed_list.append(game_data)
    return feed_list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where I use &lt;code&gt;feedparser&lt;/code&gt; to interrogate the &lt;code&gt;newreleases.xml&lt;/code&gt; file. We also see the usage of that &lt;code&gt;namedtuple&lt;/code&gt; &lt;code&gt;Game&lt;/code&gt;. The fields we specified earlier are being assigned ‚Äúentries‚Äù pulled from the XML file with feedparser.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; field is given the XML ‚Äútitle‚Äù of the game; the &lt;code&gt;url&lt;/code&gt; field is given the link to the game.&lt;/p&gt;
&lt;p&gt;This is done for every individual ‚Äúentry‚Äù (game) in the XML file using the &lt;code&gt;for&lt;/code&gt; loop. It‚Äôs all appended to &lt;code&gt;feed_list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_for_new(feed_list, db_games):
    new_games_list = []
    for data in feed_list:
        if (data.title,) not in db_games:
            new_games_list.append(data)
    return new_games_list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function creates an empty list called &lt;code&gt;new_games_list&lt;/code&gt;. It then checks whether &lt;code&gt;data.title&lt;/code&gt; (&lt;code&gt;.title&lt;/code&gt; being the field from the namedtuple) is &lt;strong&gt;not&lt;/strong&gt; in the existing games database &lt;code&gt;db_games&lt;/code&gt;. I‚Äôm essentially doing a name match. Eg: Does the game name from the feed list exist in the list of games already in the database.&lt;/p&gt;
&lt;p&gt;If the name &lt;strong&gt;isn‚Äôt&lt;/strong&gt; in the existing DB, then we add it to the &lt;code&gt;new_games_list&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.executemany(&amp;quot;INSERT INTO new_steam_games VALUES (?, ?, 0)&amp;quot;, new_games)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, at the end of the &lt;code&gt;main()&lt;/code&gt; function, we add the &lt;strong&gt;new games&lt;/strong&gt; to the DB. The 2x ?s are placeholders for the data in the &lt;code&gt;new_games&lt;/code&gt; list. The 0 at the end will be explained in a moment.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;DB Table Layout and Emailed Flag&lt;/h2&gt;
&lt;p&gt;The DB we create at the start of the script has 3x columns: &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Link&lt;/code&gt;, and &lt;code&gt;Emailed&lt;/code&gt;, all of which are &lt;code&gt;TEXT&lt;/code&gt; types.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; are self explanatory but why &lt;code&gt;Emailed&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I needed a way to determine whether a row (game) had been emailed out already. I decided to go with a boolean flag, i.e., Yes/No, True/False, 0/1.&lt;/p&gt;
&lt;p&gt;When new games are added to the DB at the end of the code, they‚Äôre added with a 0 in the 3rd column (&lt;code&gt;Emailed&lt;/code&gt;). This indicates that they are new and have &lt;strong&gt;not&lt;/strong&gt; been emailed.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;emailer.py&lt;/h2&gt;
&lt;p&gt;I‚Äôve covered sending advanced emails using Python MIME in a &lt;a href="http://pybit.es/python-MIME.html"&gt;previous article&lt;/a&gt; so have a read through of that for the basics if you‚Äôre not sure what you‚Äôre looking at here.&lt;/p&gt;
&lt;p&gt;The important code is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with sqlite3.connect(DATA_FILE) as connection:
    c = connection.cursor()
    c.execute(&amp;quot;SELECT Name, Link FROM new_steam_games WHERE Emailed=&amp;#39;0&amp;#39;&amp;quot;)
    for item in c.fetchall():
        body += item[0] + &amp;#39;: &amp;#39; + item[1] + &amp;#39;\n&amp;#39;
    c.execute(&amp;quot;UPDATE new_steam_games SET Emailed=&amp;#39;1&amp;#39;&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this code I grab the data from the database that has a ‚Äú0‚Äù in the &lt;code&gt;Emailed&lt;/code&gt; column. (Pulling the new games!).&lt;/p&gt;
&lt;p&gt;I then add the name, &lt;code&gt;item[0]&lt;/code&gt;, and link, &lt;code&gt;item[1]&lt;/code&gt; to the body of the email using a &lt;code&gt;for&lt;/code&gt; loop. This will add the new games one by one.&lt;/p&gt;
&lt;p&gt;After this, the games are then flagged as being emailed by changing the &lt;code&gt;Emailed&lt;/code&gt; flag to ‚Äú1‚Äù. This will ensure that the next time the emailer is run, the same games don‚Äôt get emailed again.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Automate it!&lt;/h2&gt;
&lt;p&gt;Done! What next? Add it to a cron job and automate the sucker!&lt;/p&gt;
&lt;p&gt;I‚Äôve got the pull, the feedparse and emailer all running on separate cron jobs, one after the other (2 mins apart).&lt;/p&gt;
&lt;p&gt;The pull writes over newreleases.xml with fresh data; feedparser updates the DB with fresh data (if any) and the emailer sends out any new games.&lt;/p&gt;
&lt;p&gt;An example crontab entry could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;30 20 * * * cd /opt/development/steamscraper &amp;amp;&amp;amp; /usr/bin/python3 pull_xml.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;I‚Äôm seeing plenty of room for improvement just writing this article! The curse of the programmer!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What happens if there isn‚Äôt a new game to email out? Does it break or just send an empty email? (No idea at the time of writing!). The script should either not send an email or (easier) just email a ‚ÄúNo new games‚Äù message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the xml_steam_scraper.py script I access the sqlite DB using a &lt;code&gt;with&lt;/code&gt; statement &lt;strong&gt;three&lt;/strong&gt; times. This seems unpythonic to me. I need to figure out a better way to talk to the DB throughout the script. I could do a &lt;code&gt;connect&lt;/code&gt; at the start and then a &lt;code&gt;close&lt;/code&gt; at the end of &lt;code&gt;main()&lt;/code&gt; but is it Pythonic to leave the DB connection open for the entirety of the script?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I could have some nicer text (a header maybe?) in the email rather than just a plain text dump of the Names/URLs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What happens if the emailer fails &lt;em&gt;after&lt;/em&gt; I‚Äôve already changed the &lt;code&gt;Emailed&lt;/code&gt; DB flag to 1? The new games will &lt;strong&gt;not&lt;/strong&gt; have been mailed out but the DB will have potentially been updated to reflect that they have been. I could probably move the update to the end of the script to avoid this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create funnier function names (just on my copy of the code of course!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;I‚Äôm stoked that this thing actually WORKS! And boy did I learn a lot! In this program alone I‚Äôve tackled so many different concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feedparser (web scraping)&lt;/li&gt;
&lt;li&gt;sqlite (persistent storage)&lt;/li&gt;
&lt;li&gt;with statements&lt;/li&gt;
&lt;li&gt;smtplib (emailers)&lt;/li&gt;
&lt;li&gt;requests (more web scraping)&lt;/li&gt;
&lt;li&gt;collections (namedtuples)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The biggest hurdle for me was figuring out how to store the data in the DB and determine whether an entry had been emailed or not. That took me &lt;em&gt;ages&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Very happy with the final result, regardless of its Pythonicness (roll with the word). I‚Äôll keep refactoring as I go but for now I‚Äôll enjoy the satisfaction of automatically emailing myself games to buy!&lt;/p&gt;
&lt;p&gt;If you have any feedback or improvements &lt;em&gt;please&lt;/em&gt; let me know. It‚Äôs the best way to learn!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="sqlite3"></category><category term="xml"></category><category term="email"></category><category term="automation"></category><category term="tools"></category><category term="feedparser"></category><category term="game"></category></entry><entry><title>How to Parse Common Data Formats in Python</title><link href="https://pybit.es/parsing-data.html" rel="alternate"></link><published>2017-05-16T20:37:00+02:00</published><updated>2017-05-16T20:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-16:/parsing-data.html</id><summary type="html">&lt;p&gt;In this post we demonstrate ways in which you can parse common data formats used in Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the biggest jumps you make in your Python learning is when you start dealing with external data. &lt;/p&gt;
&lt;p&gt;With this post we wanted to demonstrate a few ways you can work with the more common data formats. Why? Because it‚Äôs a big deal when you‚Äôre starting out! Furthermore, unless you do it often enough it‚Äôs easy to forget how so bookmark this baby and reference it!&lt;/p&gt;
&lt;p&gt;The links below are to articles and scripts we‚Äôve actually written as well as to external resources we‚Äôve found helpful.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;1. CSV&lt;/h2&gt;
&lt;p&gt;If you‚Äôre going to play with CSV files, &lt;code&gt;DictReader&lt;/code&gt; is your friend. It converts each row into an &lt;code&gt;OrderedDict&lt;/code&gt; (Hallelujah!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reading the contents of a CSV file:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/001/pytip.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for entry in csv.DictReader(f, fieldnames=FIELDS):
    yield entry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Opening and reading the CSV using a &lt;code&gt;with&lt;/code&gt; statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/030/movies.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def read_csv(cf=CSV_FILE):
    with open(cf, &amp;#39;r&amp;#39;) as csvfile:
        return list(csv.DictReader(csvfile))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;2. JSON&lt;/h2&gt;
&lt;p&gt;JSON is a must these days, especially if you want to work with APIs. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple read of JSON data pulled down by &lt;code&gt;requests&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/027/warcraft_scraper.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = json.loads(r.text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;One of our first articles used a &lt;code&gt;with&lt;/code&gt; statement to load in JSON data:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/kindle-json-to-html.html"&gt;Article/Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def load_json(json_file):    
    with open(json_file) as f:        
        return json.loads(f.read())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Our Challenge 07 review used &lt;code&gt;yield&lt;/code&gt; to return the JSON data:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge07_review.html"&gt;Article/Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(input_file):
    with open(input_file) as f:
        for line in f.readlines():
            yield json.loads(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Note the &lt;code&gt;.json()&lt;/code&gt; method on &lt;code&gt;requests.get&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/weather_compare/blob/master/weather.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = requests.get(API_URL.format(city, API_KEY)).json()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Resources&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;dump&lt;/code&gt; to write to a file as per this &lt;a href="http://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file-in-python"&gt;Stack Overflow question&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;3. SQLite&lt;/h2&gt;
&lt;p&gt;We‚Äôve learned to love SQLite recently and have found ourselves using it all the time. It‚Äôs worth picking up as it‚Äôs such an easy and great way of getting a persistent DB!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent use to convert a CSV of movies to an &lt;code&gt;sqlite&lt;/code&gt; DB:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/030/movies.py"&gt;Code Link&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch06s08.html"&gt;Python Cookbook chapter&lt;/a&gt; details working with Relational Databases (&lt;a href="http://amzn.to/2qMGNaN"&gt;Amazon Link&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We enjoyed this thorough &lt;code&gt;sqlite&lt;/code&gt; &lt;a href="http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html"&gt;Python tutorial&lt;/a&gt; by Sebastian Raschka too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;4. XML&lt;/h2&gt;
&lt;p&gt;XML! The data format of choice for RSS feeds. Can be a bit troublesome at times but always worth the effort.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example of using &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; to parse the Safari RSS feed:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/017/safari.py"&gt;Code Link&lt;/a&gt; - Worth checking out the full code but the gist of it is‚Ä¶&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for item in doc.iterfind(&amp;#39;channel/item&amp;#39;):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Using &lt;code&gt;feedparser&lt;/code&gt; to pull specific XML tags and add to a list:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/045/xml_steam_scraper.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feed = feedparser.parse(FEED_FILE)
    for entry in feed[&amp;#39;entries&amp;#39;]:
        Game = (entry[&amp;#39;title&amp;#39;], entry[&amp;#39;link&amp;#39;])
            games_list.append(Game)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Challenge Solutions&lt;/h2&gt;
&lt;p&gt;We‚Äôve had numerous challenges over the past few months where the solutions involved these data formats. Here are a few of the noteworthy ones:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge04.html"&gt;Code Challenge 04&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/6gvF0b"&gt;Read CSV&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/udmLRm"&gt;Write CSV&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;a href="http://pybit.es/codechallenge07.html"&gt;Code Challenge 07&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/lsv2MJ"&gt;Dump tweet JSON&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/VjEukO"&gt;Load tweets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge17_review.html"&gt;Code Challenge 17 Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was definitely a great challenge. Check out the multiple community contributions for some examples of using &lt;code&gt;sqlite&lt;/code&gt; and XML in functional scripts written by your fellow Pythonistas.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Learn By Doing&lt;/h2&gt;
&lt;p&gt;Now that you have the info, as we said in our &lt;a href="http://pybit.es/learn-by-doing.html"&gt;Learn By Doing article&lt;/a&gt;, open up a vim session and get coding!&lt;/p&gt;
&lt;p&gt;One awesome, shameless plug of a way to do this would be to come up with a solution for &lt;a href="http://pybit.es/codechallenge19.html"&gt;Code Challenge 19&lt;/a&gt;. Playing with an API means you‚Äôll more than likely need to use quite a few of these formats.&lt;/p&gt;
&lt;p&gt;We‚Äôd love to hear if you have any Pythonic tips on using these formats too so leave a comment!&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian and Bob&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="resources"></category><category term="csv"></category><category term="sqlite3"></category><category term="json"></category><category term="xml"></category></entry><entry><title>Code Challenge 19 - Post to Your Favorite API</title><link href="https://pybit.es/codechallenge19.html" rel="alternate"></link><published>2017-05-15T13:31:00+02:00</published><updated>2017-05-15T13:31:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-15:/codechallenge19.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week part 2 of APIs: post to your favorite API. Enjoy&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we have another nice free-form challenge for you: after last time's &lt;a href="http://pybit.es/codechallenge16.html"&gt;API challenge success&lt;/a&gt;, we have a part 2 this week where we will let you post to your favorite API. &lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We keep it free-form so you can go wild on consuming your favorite service(s) / data. The difference with last time is that you actually have to edit your account by doing one or more POST requests. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post (periodic) updates to your favorite social media platform. We really like the Twitter API (see &lt;a href="http://pybit.es/codechallenge04_review.html"&gt;here&lt;/a&gt;, &lt;a href="http://pybit.es/100days-autotweet.html"&gt;here&lt;/a&gt;, and &lt;a href="http://pybit.es/automate-twitter.html"&gt;here&lt;/a&gt;), but you could use Facebook, Linkedin, Pinterest, Instagram, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create playlists of your favorite music with the &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify API&lt;/a&gt; / &lt;a href="https://developers.soundcloud.com/docs/api/guide"&gt;Soundcloud API&lt;/a&gt; / &lt;a href="https://developers.google.com/youtube/"&gt;YouTube API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you like books, playing with the &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/046"&gt;Goodreads API last week&lt;/a&gt;, pushing books to your shelve(s) is something this API supports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;Google APIs&lt;/a&gt;: send an email, add a calendar invite, add a file to Google drive, to name a few. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push a new article/ post to reddit Python or LearnPython using &lt;a href="https://www.reddit.com/dev/api"&gt;their API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a list of your favorite movies with &lt;a href="https://www.themoviedb.org/?language=en"&gt;TheMovieDB API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send SMS with the &lt;a href="https://www.twilio.com/"&gt;Twilio API&lt;/a&gt;, etc etc ... be creative, scratch your own itch!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still searching for APIs? Last time we linked to these two resources: &lt;a href="https://www.reddit.com/r/webdev/comments/3wrswc/what_are_some_fun_apis_to_play_with/"&gt;fun APIs to play with (reddit thread)&lt;/a&gt; and &lt;a href="https://www.programmableweb.com/apis"&gt;programmableweb&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="API"></category><category term="Twitter"></category><category term="Facebook"></category><category term="TheMovieDB"></category><category term="Spotify"></category><category term="Goodreads"></category><category term="Reddit"></category><category term="Google"></category><category term="POST"></category></entry><entry><title>Code Challenge 18 - Get Recommendations - Review</title><link href="https://pybit.es/codechallenge18_review.html" rel="alternate"></link><published>2017-05-15T11:37:00+02:00</published><updated>2017-05-15T11:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-15:/codechallenge18_review.html</id><summary type="html">&lt;p&gt;Before moving onto the new challenge let's review &lt;a href="http://pybit.es/codechallenge18.html"&gt;last week's challenge&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week we aimed at &lt;a href="http://pybit.es/codechallenge18.html"&gt;Getting Recommendations From Twitter Influencers&lt;/a&gt;. It required a bit more work and knowledge than anticipated so we leave it pending/working for now. We were also pretty busy last week.&lt;/p&gt;
&lt;p&gt;We did fiddle with the Goodreads API managing to get a user authorized (oauth) and pull their friends' updates. We only need to parse the output and probably filter "books read" with a rating of &amp;gt;= 4 (out of 5). Some code to get you started &lt;a href="https://github.com/pybites/challenges/tree/solutions/18"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another thing we'd like to build at some point is getting Netflix recommendations (digest email) because there is just too much to watch. Netflix does not have an API anymore though :( - Twitter has &lt;a href="https://twitter.com/search?q=netflix%20recommend&amp;amp;src=typd"&gt;a lot of Netflix tweets&lt;/a&gt; but the challenge is the free text (spam) and filtering out the exact show name. &lt;a href="https://parrotread.com/"&gt;Parrotread&lt;/a&gt; managed to do it for books so there must be a way. To be continued ... &lt;/p&gt;
&lt;p&gt;So building a recommendation engine takes more (structured) data and ML skills. We found some good resources to get started: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/grahamjenson/list_of_recommender_systems"&gt;List of Recommender Systems&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ML starter book: &lt;a href="http://www.amazon.com/dp/1449369413/?tag=pyb0f-20"&gt;Introduction to Machine Learning with Python: A Guide for Data Scientists&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the making: Manning's &lt;a href="https://www.manning.com/books/practical-recommender-systems"&gt;Practical Recommender Systems&lt;/a&gt;. You can download a free chapter and &lt;a href="https://github.com/practical-recommender-systems"&gt;source&lt;/a&gt; is already up and seems to use an interesting data set: &lt;a href="https://github.com/sidooms/MovieTweetings"&gt;MovieTweetings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Challenges don't have deadlines so we will refer back to this one when we learned more about recommendation engines. Let us know if you made further progress on this one.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This week we have another nice free-form challenge for you: after last time's &lt;a href="http://pybit.es/codechallenge16.html"&gt;API challenge&lt;/a&gt; success, we have a part 2 this week where we will let you post to your favorite API. Standby as we post the challenge in a bit ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="books"></category><category term="Goodreads"></category><category term="API"></category><category term="oauth"></category><category term="Manning"></category><category term="Machine Learning"></category><category term="Netflix"></category><category term="recommendation engine"></category><category term="Parrotread"></category><category term="recommender system"></category></entry><entry><title>Twitter digest 2017 week 19</title><link href="https://pybit.es/twitter_digest_201719.html" rel="alternate"></link><published>2017-05-14T17:29:00+02:00</published><updated>2017-05-14T17:29:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-14:/twitter_digest_201719.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;General Tips for Web Scraping with Python &lt;a href="https://t.co/ZUZqE5fhL1" title="https://t.co/ZUZqE5fhL1" target="_blank"&gt;https://t.co/ZUZqE5fhL1&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/863214091141234689" data-datetime="2017-05-13T02:07:31+00:00"&gt;May 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@marcel_dmg:" target="_blank"&gt;@marcel_dmg:&lt;/a&gt; Artificial Intelligence: Reinforcement Learning in Python &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; &lt;a href="https://twitter.com/search/#AI" target="_blank"&gt;#AI&lt;/a&gt; &lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/862385339545137154" data-datetime="2017-05-10T19:14:21+00:00"&gt;May 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Creating the Python Logo in Matplotlib &lt;a href="https://t.co/etXFzaI0Pe" title="https://t.co/etXFzaI0Pe" target="_blank"&gt;https://t.co/etXFzaI0Pe&lt;/a&gt; &lt;a href="https://t.co/ATOn4eqbzU" title="https://t.co/ATOn4eqbzU" target="_blank"&gt;https://t.co/ATOn4eqbzU&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/863133608768405504" data-datetime="2017-05-12T20:47:43+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sometimes tiny programs are just so pleasing: &lt;a href="https://t.co/GNR3wUdmH1" title="https://t.co/GNR3wUdmH1" target="_blank"&gt;https://t.co/GNR3wUdmH1&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/863058471234797569" data-datetime="2017-05-12T15:49:09+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New to &lt;a href="https://twitter.com/search/#python?" target="_blank"&gt;#python?&lt;/a&gt; Here are 6 projects to help you practice: &lt;a href="https://t.co/ncxl0fFBVh" title="https://t.co/ncxl0fFBVh" target="_blank"&gt;https://t.co/ncxl0fFBVh&lt;/a&gt; &lt;a href="https://twitter.com/search/#coding" target="_blank"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/search/#girlswhocode" target="_blank"&gt;#girlswhocode&lt;/a&gt; &lt;a href="https://t.co/9jZgwgW9nb" title="https://t.co/9jZgwgW9nb" target="_blank"&gt;https://t.co/9jZgwgW9nb&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/863026424722202626" data-datetime="2017-05-12T13:41:48+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@gvanrossum:" target="_blank"&gt;@gvanrossum:&lt;/a&gt; Great example of beginner-friendly guide to submitting PRs: &lt;a href="https://t.co/c97EW3pVVb" title="https://t.co/c97EW3pVVb" target="_blank"&gt;https://t.co/c97EW3pVVb&lt;/a&gt; (also check the previous sections)&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/863009708516327426" data-datetime="2017-05-12T12:35:23+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;locals() and globals() return a dictionary of local / global variables: &amp;gt;&amp;gt;&amp;gt; a = 1 &amp;gt;&amp;gt;&amp;gt; b = 1 &amp;gt;&amp;gt;&amp;gt; locals() {'a': 1, 'b': 1, ...} &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/862578271422042112" data-datetime="2017-05-11T08:01:00+00:00"&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;GPU Data Frame provides &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Democratization, Acceleration and Production. More from &lt;a href="https://twitter.com/@teoliphant:‚Ä¶" target="_blank"&gt;@teoliphant:‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/G9TaMqDnD3" title="https://t.co/G9TaMqDnD3" target="_blank"&gt;https://t.co/G9TaMqDnD3&lt;/a&gt;&lt;/p&gt;‚Äî Continuum Analytics (@ContinuumIO) &lt;a href="https://twitter.com/ContinuumIO/status/863091436115374084" data-datetime="2017-05-12T18:00:08+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;4 Python libraries for building great command-line user interfaces &lt;a href="https://t.co/ReGxw248Yk" title="https://t.co/ReGxw248Yk" target="_blank"&gt;https://t.co/ReGxw248Yk&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/861989146373607424" data-datetime="2017-05-09T17:00:02+00:00"&gt;May 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to recover lost Python source code if it's still resident in-memory &lt;a href="https://t.co/hwWe0jGaFP" title="https://t.co/hwWe0jGaFP" target="_blank"&gt;https://t.co/hwWe0jGaFP&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/863417413622087685" data-datetime="2017-05-13T15:35:27+00:00"&gt;May 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Teach your Pythons to talk with Alexa and PythonAnywhere: &lt;a href="https://t.co/IsLsIW5oo3" title="https://t.co/IsLsIW5oo3" target="_blank"&gt;https://t.co/IsLsIW5oo3&lt;/a&gt;&lt;/p&gt;‚Äî PythonAnywhere (@pythonanywhere) &lt;a href="https://twitter.com/pythonanywhere/status/862627536274165761" data-datetime="2017-05-11T11:16:46+00:00"&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Lap Around Python in Visual Studio 2017 &lt;a href="https://t.co/pFUvN0yUXl" title="https://t.co/pFUvN0yUXl" target="_blank"&gt;https://t.co/pFUvN0yUXl&lt;/a&gt; &lt;a href="https://t.co/LN9GWDfoLY" title="https://t.co/LN9GWDfoLY" target="_blank"&gt;https://t.co/LN9GWDfoLY&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/863183871386537990" data-datetime="2017-05-13T00:07:26+00:00"&gt;May 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Publish Your Package on PyPI &lt;a href="https://t.co/T0jUGsip5F" title="https://t.co/T0jUGsip5F" target="_blank"&gt;https://t.co/T0jUGsip5F&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/863123374993661952" data-datetime="2017-05-12T20:07:03+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Another great image recognition post by &lt;a href="https://twitter.com/@PyImageSearch:" target="_blank"&gt;@PyImageSearch:&lt;/a&gt; Drowsiness detection with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; and OpenCV &lt;a href="https://t.co/YNXIV5ER5J" title="https://t.co/YNXIV5ER5J" target="_blank"&gt;https://t.co/YNXIV5ER5J&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/862637761421090818" data-datetime="2017-05-11T11:57:24+00:00"&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Give that data to your users. &lt;a href="https://twitter.com/@cassidoo" target="_blank"&gt;@cassidoo&lt;/a&gt; shows you how to build a web app w/ Vue.js, complete with a working backend &lt;a href="https://t.co/BIDtGKlS5I" title="https://t.co/BIDtGKlS5I" target="_blank"&gt;https://t.co/BIDtGKlS5I&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/862023116473630720" data-datetime="2017-05-09T19:15:01+00:00"&gt;May 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@cyb3rops:" target="_blank"&gt;@cyb3rops:&lt;/a&gt; Schr√∂dingers Backup &lt;a href="https://twitter.com/search/#Ransomware" target="_blank"&gt;#Ransomware&lt;/a&gt; &lt;a href="https://twitter.com/search/#WannaCry" target="_blank"&gt;#WannaCry&lt;/a&gt; üò∏ &lt;a href="https://t.co/eh0ptYjpw9" title="https://t.co/eh0ptYjpw9" target="_blank"&gt;https://t.co/eh0ptYjpw9&lt;/a&gt;&lt;/p&gt;‚Äî Benjamin Spak (@benjaminspak) &lt;a href="https://twitter.com/benjaminspak/status/863627722664415232" data-datetime="2017-05-14T05:31:09+00:00"&gt;May 14, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="twilio"></category><category term="javascript"></category><category term="beginners"></category><category term="webscraping"></category><category term="PyPI"></category><category term="AI"></category><category term="pandoc"></category><category term="git"></category><category term="Continuum"></category><category term="cli"></category><category term="Alexa"></category><category term="flask"></category><category term="matplotlib"></category><category term="visual studio"></category><category term="OpenCV"></category></entry><entry><title>Building a Simple Birthday App with Flask-SQLAlchemy</title><link href="https://pybit.es/flask-sqlalchemy-bday-app.html" rel="alternate"></link><published>2017-05-11T11:00:00+02:00</published><updated>2017-05-11T11:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-05-11:/flask-sqlalchemy-bday-app.html</id><summary type="html">&lt;p&gt;In this article I teach you how to get started with Flask-SQLAlchemy. I will set up a model, create the DB, retrieve birthdays from FB and import them into the DB. Lastly I will query the birthdays by date range.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my favorite Flask extensions is &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt;. It makes working with a database a breeze. For some time I wanted to detach my birthday management from Facebook. So I started a simple Flask app. Work so far &lt;a href="https://github.com/pybites/bday-app"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;FB birthday data&lt;/h2&gt;
&lt;p&gt;I am almost sure you could use the FB API before to pull all your friends and birthdays. &lt;a href="http://stackoverflow.com/questions/27924140/fetch-friends-birthday-using-facebook-graph-api-v2-0"&gt;Not anymore&lt;/a&gt; :(&lt;/p&gt;
&lt;p&gt;Luckily &lt;a href="https://github.com/pybites/bday-app/blob/master/README.md"&gt;I found a way&lt;/a&gt; to export them and parse them into a useful format - see &lt;a href="https://github.com/pybites/bday-app/blob/master/bdays.py"&gt;bdays.py&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Starting Flask-SQLAlchemy&lt;/h2&gt;
&lt;p&gt;Back to the article subject: how do we get this data into a DB? Flask-SQLAlchemy to the rescue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First I defined a simple model in &lt;a href="https://github.com/pybites/bday-app/blob/master/model.py"&gt;model.py&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Birthday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;bday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bday&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Birthday %r %r %r&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's best to store dates as db.DateTime objects so we can easily query them (see further down).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If model.py is run as standalone script (not imported) it recreates the DB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.drop_all()
db.create_all()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I use the bdays.py ics parsing code to populate the table with all birthdays. You can even strip out the names (which was useful to share printscreens here). I store all birthdays with the same year (calendar ics ranges May '17 - May '18), otherwise the date querying fails (next step):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#¬†insert birthdays sorted&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_birthdays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cal.ics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;

    &lt;span class="c1"&gt;# no real names&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;TEST_MODE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_random_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="c1"&gt;# import all bdays with THIS_YEAR to make it easier to query later&lt;/span&gt;
    &lt;span class="n"&gt;bday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;THIS_YEAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bd_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Birthday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bd_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The app is still very bare-bones. It has an index/home route, to get the birthdays of the next 14 days, and a route to get birthdays for each month. See &lt;a href="https://github.com/pybites/bday-app/blob/master/app.py"&gt;app.py&lt;/a&gt;. Here's why you want to work with datetime objects, it makes querying dates easier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upcoming n days:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;)
...
start = datetime.now()
end = start + timedelta(days=UPCOMING_DAYS)
bdays = Birthday.query.filter(Birthday.bday &amp;lt;= end).filter(Birthday.bday &amp;gt;= start)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to get all birthdays of month n (&lt;a href="http://stackoverflow.com/questions/36155332/how-to-get-the-first-day-and-last-day-of-current-month-in-python"&gt;see SO&lt;/a&gt;). The SQLAlchemy query is the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;lt;int:month&amp;gt;&amp;#39;)
...
_, num_days = calendar.monthrange(THIS_YEAR, month)
start = date(THIS_YEAR, month, 1)
end = date(THIS_YEAR, month, num_days)
bdays = Birthday.query.filter(Birthday.bday &amp;lt;= end).filter(Birthday.bday &amp;gt;= start)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resulting App&lt;/h2&gt;
&lt;p&gt;&lt;img alt="bday app upcoming" src="https://pybit.es/images/bday-app1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bday app for a particular month" src="https://pybit.es/images/bday-app2.png"&gt;&lt;/p&gt;
&lt;p&gt;You can use the calendar module to get the month name for a month int:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;month_name = calendar.month_name[month]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See &lt;a href="https://github.com/pybites/bday-app/blob/master/app.py"&gt;app.py&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;This is it for starters. In part 2 I will make the app more functional: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement notifications: email me one day before a birthday.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow setting of notify == True for individual friends so I only get the notifications I want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full CRUD: add/update/delete friends and/or re-import new ics download.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second (relational) model for tracking: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add the notifications sent to this table &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;have a "done" flag to update when I sent Happy Birthday wishes to a particular friend.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a nice extension to use Flask-SQLAlchemy's db.ForeignKey.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask-SQLAlchemy &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;docs&lt;/a&gt; is a great start.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See our &lt;a href="http://pybit.es/codechallenge15_review.html"&gt;code challenge 15 review&lt;/a&gt; for more example apps using Flask-SQLAlchemy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For examples of standard SQLAlchemy (outside Flask), our &lt;a href="http://pybit.es/codechallenge17_review.html"&gt;code challenge 17 review&lt;/a&gt; has some examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To learn SQLAlchemy start with the &lt;a href="http://sqlalchemy.readthedocs.io/en/latest/orm/tutorial.html"&gt;Object Relational Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Flask-SQLAlchemy"></category><category term="SQLAlchemy"></category><category term="Flask"></category><category term="Facebook"></category><category term="birthday"></category><category term="calendar"></category><category term="icalendar"></category><category term="datetime"></category></entry><entry><title>Learning Python by Building a Wisdom Quotes App</title><link href="https://pybit.es/guest-learning-apis.html" rel="alternate"></link><published>2017-05-09T14:10:00+02:00</published><updated>2017-05-09T14:10:00+02:00</updated><author><name>Dante Septem</name></author><id>tag:pybit.es,2017-05-09:/guest-learning-apis.html</id><summary type="html">&lt;p&gt;In this guest post Dante tells us about his &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;Wisdom of the Ages&lt;/a&gt; app he built for &lt;a href="http://pybit.es/codechallenge16.html"&gt;PyBites code challenge 16&lt;/a&gt; (reviewed &lt;a href="http://pybit.es/codechallenge16_review.html"&gt;here&lt;/a&gt;). The best way to learn Python is to build something and we are proud of our community achieving just that.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this guest post Dante tells us about his &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;Wisdom of the Ages&lt;/a&gt; app he built for &lt;a href="http://pybit.es/codechallenge16.html"&gt;PyBites code challenge 16&lt;/a&gt; (reviewed &lt;a href="http://pybit.es/codechallenge16_review.html"&gt;here&lt;/a&gt;). The best way to learn Python is to build something and we are proud of our community achieving just that. &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Query Your Favorite API Challenge&lt;/h2&gt;
&lt;p&gt;Only recently I started following PyBites, but I really liked the idea of the &lt;a href="http://pybit.es/pages/challenges.html"&gt;code challenges&lt;/a&gt;, so when I saw the opportunity to put some of my knowledge in practice, I took it without thinking twice.&lt;/p&gt;
&lt;p&gt;As I like to challenge myself and up the bets, I decided I was going to query one API and then query another one using somehow the results of the first. Since I had some experience querying the Wikipedia API, I chose it then googled up for free APIs on the internet to use. I came by &lt;a href="http://forismatic.com/en/api/"&gt;an API to get random inspirational quotes&lt;/a&gt;, and the idea struck me: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple website that displays a random inspirational quote, with its author's biography as an addendum. Wikipedia could provide those biographies!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;App implementation&lt;/h3&gt;
&lt;p&gt;I quickly sketched the app using the well-known 'flask' and 'requests' modules, with a simple jinja2 template to display three variables: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The quote, &lt;/li&gt;
&lt;li&gt;the quote's author, and &lt;/li&gt;
&lt;li&gt;the quote's author's biography.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Error handling&lt;/h3&gt;
&lt;p&gt;After the core functionality was done, I started to iron out some bugs by adding try/except blocks for expected errors: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the quotes API sometimes returned malformed JSON, &lt;/li&gt;
&lt;li&gt;I couldn't grab a biography for an anonymous author.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Making it pretty&lt;/h2&gt;
&lt;p&gt;Done with the 'insides' of my machine, I wanted to make it look pretty on the outside too, so I used my google-fu to search for bootstrap templates and themes, found one I liked (&lt;a href="https://bootstraptaste.com/free-one-page-bootstrap-template-amoeba/"&gt;Amoeba&lt;/a&gt;) and after cutting down all the things I didn't need and downloading a favicon, my first iteration of &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;&lt;strong&gt;Wisdom of the Ages&lt;/strong&gt;&lt;/a&gt; was finished:&lt;/p&gt;
&lt;p&gt;&lt;img alt="wisdom of ages design" src="https://pybit.es/images/pcc16_dseptem2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Experimenting&lt;/h2&gt;
&lt;p&gt;But I wanted more! Recently I had heard about a Python module called &lt;a href="https://github.com/r0x0r/pywebview"&gt;pywebview&lt;/a&gt;, which displays a barebones browser as an application to the user. I figured I could make the user of my script choose between the 'embedded' simple view of the website flask created and her own browser, but eventually dropped the functionality because it made everything more complicated (I even had to use threading to run code after starting the flask app website) with no real benefit.&lt;/p&gt;
&lt;h2&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;Finally, after some back-and-forth with PyBites (thanks for the feedback, again!), I refactored the code for readability, made it more pythonic, added an "another quote" button that refreshes the website on click and last but not least, prepared the app to display an 'Internal server error' if the quotes API is down or the user has no internet connection.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really enjoyed this experience and I'm looking forward to more challenges! Peer-reviewing code is a joy I don't usually get to experience. Thanks to the folks at PyBites and have fun with your coding!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#danteseptem"&gt;Dante&lt;/a&gt;&lt;/p&gt;</content><category term="challenges"></category><category term="learning"></category><category term="guest"></category><category term="wikipedia"></category><category term="API"></category><category term="code review"></category><category term="flask"></category><category term="requests"></category><category term="quotes"></category><category term="forismatic"></category></entry><entry><title>Code Challenge 18 - Get Recommendations</title><link href="https://pybit.es/codechallenge18.html" rel="alternate"></link><published>2017-05-08T09:30:00+02:00</published><updated>2017-05-08T09:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-08:/codechallenge18.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll do another API exercise: you will parse your Twitter feed searching for book / movie / music / you-name-it recommendations. Can you create a simple &lt;a href="https://parrotread.com"&gt;ParrotRead&lt;/a&gt;? Enjoy&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll do another API exercise: you will parse your Twitter feed searching for book / movie / music / you-name-it recommendations. Can you create a simple &lt;a href="https://parrotread.com"&gt;ParrotRead&lt;/a&gt;? Enjoy&lt;/p&gt;
&lt;p&gt;Ah what if you don't have or like Twitter?! Feel free to use any social media site where you can parse updates from people you follow or respect. Or use your favorite service, for example &lt;a href="https://www.goodreads.com/"&gt;Goodreads&lt;/a&gt; in case of books.&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Register an Twitter app and put the key/secret in a private (not under version control) config file or store them in env variables (os.environ). Again if using another API, follow similar steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual environment and pip install &lt;a href="https://twython.readthedocs.io/en/latest/"&gt;Twython&lt;/a&gt;, &lt;a href="http://www.tweepy.org/"&gt;Tweepy&lt;/a&gt; or your favorite Twitter API module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse the updates from your followers. If you don't follow a lot of people you could also work with a set of predefined Twitter handles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Come up with a way to identify recommendations of your choice (books / movies / music / whatever you like).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want recommendations, so check if the updates are positive (check &lt;a href="http://pybit.es/codechallenge07_review.html"&gt;this challenge&lt;/a&gt; where we used TextBlob, however use any tool you want).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Optional&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go beyond stdout by notifying the user either by tweet (already using the Twitter API so should be easy) or email (cache the results).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tie this into a simple Flask app / front-end, &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/038"&gt;here&lt;/a&gt; is some code to get Twitter login working in Flask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it more intelligent. Ask the user for his/her preferences upfront and use an algorithm (k-means clustering maybe?) to make relevant recommendations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Twitter"></category><category term="books"></category><category term="recommendations"></category><category term="API"></category><category term="TextBlob"></category></entry><entry><title>Code Challenge 17 - Never Miss a Good Podcast - Review</title><link href="https://pybit.es/codechallenge17_review.html" rel="alternate"></link><published>2017-05-07T23:59:00+02:00</published><updated>2017-05-07T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-07:/codechallenge17_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge17.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge17.html"&gt;Never Miss a Good Podcast&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Wow, this challenge led to some great learning! We got 3 Pull Requests (PRs) which we just merged into our Community branch. Don't want to miss your favorite podcast anymore? Here are some solutions that get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; built "Podcaster" providing a rich command line interface. Really nice documentation (lot of screenshots) in his README. It uses SQLAlchemy for the back-end and click for the CLI interface (good reminder we need to check this module out!). Another nice feature is that it lets you download episodes. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/clamytoe"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/cverna"&gt;cverna&lt;/a&gt; wrote a script that fetches the feed of podcastinit.com (keep it Python!) - all nicely done in one script using sqlite3 and feedparser. Cron is done at the OS level (/etc/cron.weekly). Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/cverna"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jhervas"&gt;jhervas&lt;/a&gt; wrote "Personal Podcast Assistant": a script that will manage a database with your favorite podcasts, notifying you by email when it finds new podcasts. It uses the schedule module for cron (schedule.every().wednesday.at("10:52").do(main) - nice). The script even tries to install the required packages. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/jhervas"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used feedparser to parse a podcast feed which can be given with the --feed option. We also used SQLAlchemy to keep track of episodes and status (done = emailed out). We also print some stats at the bottom of each mail (e.g. "Podcast consumption stats: 0.9% done [1 of 111]"). We tried to make the code modular (package) and wrote some tests. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/bbelderbos"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best way to learn is to play around with these projects doing a git pull of the Community branch.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again we really enjoyed these nice solutions and we are pumped to deliver more challenges so you can learn by building cool stuff.&lt;/p&gt;
&lt;p&gt;Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="podcast"></category><category term="feedparser"></category><category term="SQLite"></category><category term="sqlite3"></category><category term="mail"></category><category term="cron"></category><category term="review"></category></entry><entry><title>Twitter digest 2017 week 18</title><link href="https://pybit.es/twitter_digest_201718.html" rel="alternate"></link><published>2017-05-07T12:37:00+02:00</published><updated>2017-05-07T12:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-07:/twitter_digest_201718.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;100 days of algorithms in Python &lt;a href="https://t.co/IDbKtVNq3G" title="https://t.co/IDbKtVNq3G" target="_blank"&gt;https://t.co/IDbKtVNq3G&lt;/a&gt; by &lt;a href="https://twitter.com/@athena_maker" target="_blank"&gt;@athena_maker&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/860224295812833280" data-datetime="2017-05-04T20:07:08+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Generate word clouds in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; with wordcloud package: &lt;a href="https://t.co/hUKyZnCQ0b" title="https://t.co/hUKyZnCQ0b" target="_blank"&gt;https://t.co/hUKyZnCQ0b&lt;/a&gt; &lt;a href="https://t.co/PUFsXtTPox" title="https://t.co/PUFsXtTPox" target="_blank"&gt;https://t.co/PUFsXtTPox&lt;/a&gt; &lt;a href="https://t.co/PT2zTRshVS" title="https://t.co/PT2zTRshVS" target="_blank"&gt;https://t.co/PT2zTRshVS&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/860403698207305730" data-datetime="2017-05-05T08:00:01+00:00"&gt;May 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here are a few Python coding tips for every beginner coding geek &lt;a href="https://t.co/ft7J4R88mq" title="https://t.co/ft7J4R88mq" target="_blank"&gt;https://t.co/ft7J4R88mq&lt;/a&gt; via &lt;a href="https://twitter.com/@zeovino" target="_blank"&gt;@zeovino&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/860048622733467648" data-datetime="2017-05-04T08:29:05+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;All in one library for Notifications (SMS, PUSH, EMAIL) &lt;a href="https://t.co/gB71FBTkIK" title="https://t.co/gB71FBTkIK" target="_blank"&gt;https://t.co/gB71FBTkIK&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/859392038462255105" data-datetime="2017-05-02T13:00:03+00:00"&gt;May 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; with scikit-learn: tutorial and cheat sheet - &lt;a href="https://t.co/mEUuqRBp7n" title="https://t.co/mEUuqRBp7n" target="_blank"&gt;https://t.co/mEUuqRBp7n&lt;/a&gt; &lt;a href="https://twitter.com/search/#datascience" target="_blank"&gt;#datascience&lt;/a&gt; &lt;a href="https://t.co/IvUY5YuFff" title="https://t.co/IvUY5YuFff" target="_blank"&gt;https://t.co/IvUY5YuFff&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/860585201210204160" data-datetime="2017-05-05T20:01:15+00:00"&gt;May 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Using Python unittest in IPython o... &lt;a href="https://t.co/FBLWn4uxbA" title="https://t.co/FBLWn4uxbA" target="_blank"&gt;https://t.co/FBLWn4uxbA&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; &lt;a href="https://twitter.com/search/#ipython" target="_blank"&gt;#ipython&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/860288380529242112" data-datetime="2017-05-05T00:21:47+00:00"&gt;May 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Jupyter &amp;amp; Python in the corporate LAN ‚Äì Olivier Borderies ‚Äì Medium &lt;a href="https://t.co/dpLAA2JWT8" title="https://t.co/dpLAA2JWT8" target="_blank"&gt;https://t.co/dpLAA2JWT8&lt;/a&gt; &lt;a href="https://t.co/VrS0n2ElJb" title="https://t.co/VrS0n2ElJb" target="_blank"&gt;https://t.co/VrS0n2ElJb&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/859698375708594178" data-datetime="2017-05-03T09:17:19+00:00"&gt;May 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Send SMS Text Messages with AWS Lambda and Python 3.6 &lt;a href="https://t.co/HCQQQHF5Kh" title="https://t.co/HCQQQHF5Kh" target="_blank"&gt;https://t.co/HCQQQHF5Kh&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/860174196466429952" data-datetime="2017-05-04T16:48:04+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;AssistantPi - Bring both Google Assistant and Alexa to yor RPi &lt;a href="https://t.co/EXTCySNACW" title="https://t.co/EXTCySNACW" target="_blank"&gt;https://t.co/EXTCySNACW&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/860917626163388417" data-datetime="2017-05-06T18:02:11+00:00"&gt;May 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Machine Learning In &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; for Trading &lt;a href="https://t.co/uw4LHcDMwi" title="https://t.co/uw4LHcDMwi" target="_blank"&gt;https://t.co/uw4LHcDMwi&lt;/a&gt; &lt;a href="https://t.co/oSiYa7g7qc" title="https://t.co/oSiYa7g7qc" target="_blank"&gt;https://t.co/oSiYa7g7qc&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/860772182426656769" data-datetime="2017-05-06T08:24:15+00:00"&gt;May 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Modern languages like Python are effective tools for teaching, learning, exploring, and thinking: &lt;a href="https://t.co/semyLEPxjl" title="https://t.co/semyLEPxjl" target="_blank"&gt;https://t.co/semyLEPxjl&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/860276628068478976" data-datetime="2017-05-04T23:35:05+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ageis:" target="_blank"&gt;@ageis:&lt;/a&gt; TIL in Python 3.5 you can explicitly hint the type of an argument passed to a function, plus type it returns...neat &lt;a href="https://t.co‚Ä¶" title="https://t.co‚Ä¶" target="_blank"&gt;https://t.co‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/860271618387529729" data-datetime="2017-05-04T23:15:11+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice, looks like &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; has launched Pythonista Cafe, a peer-to-peer learning community for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/BDPZKrW6FQ" title="https://t.co/BDPZKrW6FQ" target="_blank"&gt;https://t.co/BDPZKrW6FQ&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/859438982345740289" data-datetime="2017-05-02T16:06:35+00:00"&gt;May 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Wrote a quick article for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; beginners (and me!) on how to pull down an &lt;a href="https://twitter.com/search/#XML" target="_blank"&gt;#XML&lt;/a&gt; file using the requests module. &lt;a href="https://t.co/avuGJOLQ7R" title="https://t.co/avuGJOLQ7R" target="_blank"&gt;https://t.co/avuGJOLQ7R&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/861051452973654016" data-datetime="2017-05-07T02:53:58+00:00"&gt;May 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@frathgeber:" target="_blank"&gt;@frathgeber:&lt;/a&gt; Teams quizzing away at 1st ever &lt;a href="https://twitter.com/@pydatalondon" target="_blank"&gt;@pydatalondon&lt;/a&gt; &lt;a href="https://twitter.com/search/#pub" target="_blank"&gt;#pub&lt;/a&gt; &lt;a href="https://twitter.com/search/#quiz." target="_blank"&gt;#quiz.&lt;/a&gt; We didn't promise easy questions, we didn't say it was fair... &lt;a href="https://twitter.com/search/#P‚Ä¶" target="_blank"&gt;#P‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Marc Garcia (@datapythonista) &lt;a href="https://twitter.com/datapythonista/status/860992943599104000" data-datetime="2017-05-06T23:01:28+00:00"&gt;May 06, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="word cloud"></category><category term="100days"></category><category term="algorithms"></category><category term="beginner"></category><category term="machine learning"></category><category term="tutorial"></category><category term="unittest"></category><category term="jupyter"></category><category term="twilio"></category><category term="aws"></category><category term="raspberry pi"></category><category term="xml"></category><category term="learning"></category></entry><entry><title>How to Download an XML File with Python</title><link href="https://pybit.es/download-xml-file.html" rel="alternate"></link><published>2017-05-04T20:46:00+02:00</published><updated>2017-05-04T20:46:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-04:/download-xml-file.html</id><summary type="html">&lt;p&gt;In this post I detail how to download an xml file to your OS and why it‚Äôs not as simple as you‚Äôd think&lt;/p&gt;</summary><content type="html">&lt;p&gt;Really? An article on downloading and saving an XML file? ‚ÄúJust use requests mate!‚Äù, I hear you all saying. Well, it‚Äôs not that simple. At least, it wasn‚Äôt as straight forward as that for a beginner like me. Here‚Äôs why.&lt;/p&gt;
&lt;h2&gt;Parsing is Different to Saving&lt;/h2&gt;
&lt;p&gt;For sure, experts and beginners alike will have used requests to pull down the contents of a web page. Generally it‚Äôs for the purpose of parsing or scraping that page for specific data elements.&lt;/p&gt;
&lt;p&gt;What if you wanted to actually &lt;em&gt;save&lt;/em&gt; that web page to your local drive? Things get slightly different. You‚Äôre no longer just reading a text rendered version of the page, you‚Äôre trying to save the actual page in its original state.&lt;/p&gt;
&lt;p&gt;This is what I found slightly confusing. I wasn‚Äôt dealing with a &lt;code&gt;text = r.text&lt;/code&gt; situation anymore, I was trying to maintain the original format of the page as well, tabs and all.&lt;/p&gt;
&lt;h2&gt;Why XML?&lt;/h2&gt;
&lt;p&gt;I‚Äôm talking XML here because I was/am trying to download the actual XML file for an RSS feed I wanted to parse offline. For those of you playing at home, this is for our &lt;a href="http://pybit.es/codechallenge17.html"&gt;PyBites Code Challenge 17&lt;/a&gt; (hint hint!).&lt;/p&gt;
&lt;h2&gt;Why Download when you can just Parse the feed itself?&lt;/h2&gt;
&lt;p&gt;Good question! It‚Äôs about best practice and just being nice.&lt;/p&gt;
&lt;p&gt;In the case of our code challenge (PCC17), how many times are you going to run your Py script while building the app to test if it works? Every time you run that script with your &lt;code&gt;requests.get&lt;/code&gt; code in place, you‚Äôre making a call to the target web server.&lt;/p&gt;
&lt;p&gt;This generates unnecessary traffic and load on that server which is a pretty crappy thing to do!&lt;/p&gt;
&lt;p&gt;The nicer and Pythonic thing to do is to have a separate script that does the request once and saves the required data to a local file. Your primary scraping or analysis script then references the local file.&lt;/p&gt;
&lt;h2&gt;Get to the code already!&lt;/h2&gt;
&lt;p&gt;Alright, check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://insert.your/feed/here.xml&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It all looks pretty familiar so I won‚Äôt go into detail on the usual suspects.&lt;/p&gt;
&lt;p&gt;What I‚Äôm doing in this code is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pulling the xml &lt;em&gt;content&lt;/em&gt; down using &lt;code&gt;requests.get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using a &lt;code&gt;with&lt;/code&gt; statement to create a file called &lt;code&gt;feed.xml&lt;/code&gt;. (If the file exists it‚Äôll be overwritten).&lt;/li&gt;
&lt;li&gt;Writing the &lt;strong&gt;contents&lt;/strong&gt; of the requests response into the file &lt;code&gt;feed.xml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here‚Äôs why it was a learning exercise for me:&lt;/p&gt;
&lt;p&gt;As I open/create the feed.xml file, I‚Äôm using the ‚ÄúMode‚Äù &lt;code&gt;wb&lt;/code&gt;. This means I‚Äôm opening the file for writing purposes but &lt;strong&gt;can only write to it in a binary format&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you fail to choose the binary mode then you‚Äôll get an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File &amp;quot;pull_xml.py&amp;quot;, line 12, in &amp;lt;module&amp;gt;
    file.write(response.content)
TypeError: write() argument must be str, not bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This confused the hell out of me and resulted in me wasting time trying to convert the requests response data to different formats or writing to the external file one line at a time (which meant I lost formatting anyway!).&lt;/p&gt;
&lt;p&gt;The binary mode is required to write the actual content of the XML page to your external file in the original format.&lt;/p&gt;
&lt;p&gt;Speaking of content. Notice in the final &lt;code&gt;write&lt;/code&gt; statement I‚Äôm using &lt;code&gt;response.content&lt;/code&gt;? Have any idea how long I spent thinking my use of the usual &lt;code&gt;response.text&lt;/code&gt; was the only way to do this? Too damn long!&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;content&lt;/code&gt; option allows you to dump the entire XML file (as is) into your own local XML file. Brilliant!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note for beginners: If you‚Äôre reading other people‚Äôs code, be prepared to see &lt;code&gt;with&lt;/code&gt; statements where files are opened &lt;code&gt;as f&lt;/code&gt;. The same applies to the &lt;code&gt;requests&lt;/code&gt; module. The line will generally read &lt;code&gt;r = requests.get(URL)&lt;/code&gt;. I‚Äôve used full form names for the sake of this article thus the words &lt;em&gt;file&lt;/em&gt; and &lt;em&gt;response&lt;/em&gt; in my code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is one of those things that we all just get used to doing. Pulling a feed down and saving it to a file is something Bob has done a thousand times so no longer has to give it any extra thought.&lt;/p&gt;
&lt;p&gt;For me, however, this took an entire night* of playing around because I‚Äôd never done it before and was assuming (silly me!) that the parsing code I've been using &lt;code&gt;requests&lt;/code&gt; for was all I needed.&lt;/p&gt;
&lt;p&gt;I also found that I had to scour a ton of StackOverflow posts and other documentation just to get my head wrapped around this concept correctly.&lt;/p&gt;
&lt;p&gt;So with this finally cleared up, it‚Äôs time to go attack some feeds!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;Julian&lt;/p&gt;
&lt;p&gt;*Not really an entire night. I do need my beauty sleep!&lt;/p&gt;</content><category term="tutorial"></category><category term="learning"></category><category term="webscraping"></category><category term="requests"></category><category term="xml"></category><category term="beginners"></category><category term="python"></category></entry><entry><title>The making of my Task Manager App for the PyBites Code Challenge</title><link href="https://pybit.es/guest-making-of-task-manager.html" rel="alternate"></link><published>2017-05-02T13:00:00+02:00</published><updated>2017-05-02T13:00:00+02:00</updated><author><name>Martin Uribe</name></author><id>tag:pybit.es,2017-05-02:/guest-making-of-task-manager.html</id><summary type="html">&lt;p&gt;As a relatively newcomer to the Python scene I've come to realize that the best way to learn is to actually participate in coding challenges. This has helped to push me out of my comfort zone.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a relatively newcomer to the Python scene I've come to realize that the best way to learn is to actually participate in coding challenges. This has helped to push me out of my comfort zone. If you're in the same boat as me, I hope that this writeup will motivate you to do the same.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clamytoe's Task Manager" src="https://pybit.es/images/ctm.png"&gt;&lt;/p&gt;
&lt;h2&gt;Backstory&lt;/h2&gt;
&lt;p&gt;To be honest, I was already working on a command line version of a task manger. I basically wanted a way to track my achievements throughout the year so that I could readily have them available when it came time for my "self review". I forget what I did this morning, so having this would be a tremendous asset. I figured I could just convert my code to work with Flask, easy right? Boy was I wrong!&lt;/p&gt;
&lt;p&gt;If you're interested in learning how I approached this challenge, read on.&lt;/p&gt;
&lt;h2&gt;Flask&lt;/h2&gt;
&lt;p&gt;The first thing I did was to head on over to &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;'s website and check out their &lt;a href="http://flask.pocoo.org/docs/0.12/"&gt;documentation&lt;/a&gt;. I specifically found their &lt;a href="http://flask.pocoo.org/docs/0.12/quickstart/"&gt;Quickstart&lt;/a&gt; guide to be an invaluable resource and I went back to it many times. I've been trying to keep up with developments with HTML5, CSS3, and JavaScript, so I knew that the easiest route would be to build this app on top of &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, so that's where I headed to next.&lt;/p&gt;
&lt;h2&gt;Bootstrap&lt;/h2&gt;
&lt;p&gt;The first thing I did was to make my way to their &lt;a href="http://getbootstrap.com/getting-started/"&gt;Getting Started&lt;/a&gt; page. Out of all their choices on implementing their framework, I opted to go with the CDN option to avoid having to upload too many files to &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;. Unfortunately, my Internet connection at home is very limited, so going this route would mean having to deal with slow response times, but it would be worth it for everyone else.&lt;/p&gt;
&lt;p&gt;I headed straight for their &lt;a href="http://getbootstrap.com/getting-started/#examples"&gt;Examples&lt;/a&gt; page to find me a template that was close enough to what I was looking for. Modifying a template would definitely speedup the development of this app. If you're new to Bootstrap, like I was, their &lt;a href="http://getbootstrap.com/components/"&gt;Components&lt;/a&gt; page was another one of those resources that made this a whole lot easier. I chose to go with their &lt;a href="http://getbootstrap.com/examples/navbar-static-top/"&gt;Static top navbar&lt;/a&gt; template.&lt;/p&gt;
&lt;h2&gt;HTML &amp;amp; CSS&lt;/h2&gt;
&lt;p&gt;The next thing I did was to get the template up and running locally. I copied the code to my template and replaced the Bootstrap calls with the ones for the CDN. Where other files were being called, I just downloaded those and stuck them in the static folder of my project. I started with a simple "Hello World!" page just to have something loaded.&lt;/p&gt;
&lt;p&gt;From there I started to customize the form that I would need and to add the table to display the results. Being a bit rusty, I headed over to &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt; and went over their tutorials on &lt;a href="https://www.w3schools.com/html/html_forms.asp"&gt;Forms&lt;/a&gt;, &lt;a href="https://www.w3schools.com/html/html_tables.asp"&gt;Tables&lt;/a&gt;, and &lt;a href="https://www.w3schools.com/css/default.asp"&gt;CSS&lt;/a&gt; formating. To my surprise, they also had a section on &lt;a href="https://www.w3schools.com/bootstrap/default.asp"&gt;Bootstrap&lt;/a&gt;, but I found the examples on Bootstrap's page more useful.&lt;/p&gt;
&lt;h2&gt;Template&lt;/h2&gt;
&lt;p&gt;Now that I had my page up and running, it was time to get things rolling! I should have headed over to &lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt;'s page and checked out their
&lt;a href="http://jinja.pocoo.org/docs/2.9/"&gt;documentation&lt;/a&gt;, but all I went off of was the basic examples on Flask's site. My goal was to make this a one page application, so the examples there were all I needed.&lt;/p&gt;
&lt;p&gt;Creating the template was pretty straight forward. I had it mocked up and coded without much trouble. The hardest part was working within the confines of Bootstrap and trying to get it to do what I wanted. Once I was happy with that, it was time to actually start writing some Python code!&lt;/p&gt;
&lt;h2&gt;Flask-SQLAlchemy&lt;/h2&gt;
&lt;p&gt;With my CLI task list, I had used &lt;a href="https://docs.python.org/2/library/sqlite3.html"&gt;slqlite3&lt;/a&gt;, but I wasn't too happy with all of the calls that I had to make each time that I wanted to modify or pull data from the database. On top of that, I had to actually write out the &lt;a href="https://www.w3schools.com/sql/default.asp"&gt;SQL&lt;/a&gt; commands as well. I had heard that &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; was the tool to use, so I figured that this would be the perfect time to get acquainted with it.&lt;/p&gt;
&lt;p&gt;Unfortunately, their docs were pretty daunting. &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt; to the rescue! Like all of the other great tools that I've talked about thus far, their &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/quickstart/"&gt;documentation&lt;/a&gt; made this a breeze. I spent a lot of time going over those pages. When I couldn't find what I was looking for, &lt;a href="http://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; and &lt;a href="http://stackexchange.com/"&gt;Stack Exchange&lt;/a&gt; via &lt;a href="https://www.startpage.com/eng/?"&gt;StartPage&lt;/a&gt; searches came through for me. I found a lot of differing "opinions" on the proper way of doing things, but none would actually work for me. A bit of trial and error and actually dropping into the Python interpreter were key.&lt;/p&gt;
&lt;p&gt;I recently discovered &lt;a href="https://pypi.python.org/pypi/pdir2"&gt;pdir2&lt;/a&gt;, which has been great for helping with discovering what actual commands I can use with the modules. Python's default &lt;code&gt;dir()&lt;/code&gt; works as well, but I find the formatting and coloring of &lt;code&gt;pdir()&lt;/code&gt; a lot easier to consume. I didn't add it to the &lt;em&gt;requirements.txt&lt;/em&gt; because it's not needed for running the application. Another great tool that needs to be mentioned is the &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm IDE&lt;/a&gt;. Its code completion came in really handy while working with SQLAlchemy.&lt;/p&gt;
&lt;h2&gt;Setbacks&lt;/h2&gt;
&lt;p&gt;I did run into some trouble trying to get Python &lt;code&gt;datetime&lt;/code&gt; objects through SQLAlchemy, so I ended up discarding my accomplishment task tracking app idea and just going with a simple Todo Task Manager: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Original UI" src="https://pybit.es/images/old-ui.png"&gt;&lt;/p&gt;
&lt;p&gt;Even though I had to "dumb it down" a bit, I still tried to make it as easy as possible to use. With it you can do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create separate Projects&lt;/li&gt;
&lt;li&gt;Add tasks to each Project&lt;/li&gt;
&lt;li&gt;Easily navigate between Projects&lt;/li&gt;
&lt;li&gt;Remembers which Project you used last&lt;/li&gt;
&lt;li&gt;One button click task status changes&lt;/li&gt;
&lt;li&gt;from Open to Close&lt;/li&gt;
&lt;li&gt;from Close to Open&lt;/li&gt;
&lt;li&gt;Remove all tasks from a Project&lt;/li&gt;
&lt;li&gt;Remove a single task at a time&lt;/li&gt;
&lt;li&gt;Remove Projects along with any tasks assigned to it&lt;/li&gt;
&lt;li&gt;Able to add tasks that are initially marked as Close&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Later on, if I have the motivation and time, I'd like to add the ability to select all tasks and perform operations on them with a single button click.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall it was a great experience and I learned a lot from it. I'd recommend anyone looking to learn more about Python to take the time and participate &lt;a href="http://pybit.es/pages/challenges.html"&gt;in PyBites code challenges&lt;/a&gt;. It's one thing to read about how to do something and another one altogether having to actually implement it.&lt;/p&gt;
&lt;h2&gt;PyBites addition&lt;/h2&gt;
&lt;p&gt;Martin submitted this cool project for our &lt;a href="http://pybit.es/codechallenge15.html"&gt;Code Challenge 15 - Create a Simple Flask App&lt;/a&gt; which we reviewed &lt;a href="http://pybit.es/codechallenge15_review.html"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- &lt;a href="pages/guests.html#martinuribe"&gt;Martin&lt;/a&gt;&lt;/p&gt;</content><category term="blog"></category><category term="challenges"></category><category term="Flask"></category><category term="Bootstrap"></category><category term="HTML"></category><category term="CSS"></category><category term="Jinja2"></category><category term="Flask-SQLAlchemy"></category><category term="sql"></category><category term="guest"></category><category term="learning"></category></entry><entry><title>Code Challenge 17 - Never Miss a Good Podcast</title><link href="https://pybit.es/codechallenge17.html" rel="alternate"></link><published>2017-05-01T11:00:00+02:00</published><updated>2017-05-01T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-01:/codechallenge17.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you import a Podcast feed, store it in SQLite, and email unplayed episodes at a regular interval. Inspiration &lt;a href="https://twitter.com/clickdroid/status/857245545185722368"&gt;here&lt;/a&gt;. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you import a Podcast feed, store it in SQLite, and email unplayed episodes at a regular interval. Inspiration &lt;a href="https://twitter.com/clickdroid/status/857245545185722368"&gt;here&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Of course &lt;a href="https://talkpython.fm/"&gt;Talk Python&lt;/a&gt; is a good use case or &lt;a href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;another Python Podcast&lt;/a&gt;, but take any podcast you want. &lt;/p&gt;
&lt;p&gt;We want to keep the challenges as open as possible: &lt;a href="http://pybit.es/pages/challenges.html"&gt;last two times&lt;/a&gt; that worked pretty well, and &lt;a href="https://twitter.com/pybites/status/857520323956289536"&gt;our poll on Twitter&lt;/a&gt; showed the same:&lt;/p&gt;
&lt;p&gt;&lt;img alt="our challenge poll" src="https://pybit.es/images/poll_result.png"&gt;&lt;/p&gt;
&lt;p&gt;However even free form needs some structure to talk the same language. That's why we'd like you to try the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pick your favorite podcast and find its feed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can probably use &lt;a href="https://pypi.python.org/pypi/feedparser"&gt;feedparser&lt;/a&gt; to easily parse the feed. Don't re-invent the wheel here, use &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load the data into SQLite or some other &lt;a href="https://docs.python.org/3.6/library/persistence.html"&gt;persistence form&lt;/a&gt;. We recommend the &lt;a href="https://docs.python.org/3.6/library/sqlite3.html"&gt;sqlite3&lt;/a&gt; module though: it is stdlib and easy to use. For starters we recommend &lt;a href="http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark the episodes as unplayed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure out how to email from your env. We wrote about this &lt;a href="http://pybit.es/python-smtplib.html"&gt;here&lt;/a&gt; and &lt;a href="http://pybit.es/python-MIME.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure out how to use cronjob in your env or do it with Python (see &lt;a href="https://docs.python.org/3.6/library/sched.html"&gt;sched&lt;/a&gt; or &lt;a href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up one or two jobs to: A) send a daily (or weekly) email with podcast link(s) for you to consume, and B) update the DB with new episodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark the episode(s) as played (done) in the DB.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As this is code challenge towards a podcast challenge ("listen all episodes of podcast x"), show some stats in each email, for example: "x % done (y out of z)".&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). Cool PRs will be featured in our end-of-the-week challenge review.&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="podcast"></category><category term="feedparser"></category><category term="SQLite"></category><category term="sqlite3"></category><category term="mail"></category><category term="cron"></category></entry><entry><title>Code Challenge 16 - Query Your Favorite API - Review</title><link href="https://pybit.es/codechallenge16_review.html" rel="alternate"></link><published>2017-04-30T23:59:00+02:00</published><updated>2017-04-30T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-30:/codechallenge16_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge16.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge16.html"&gt;Query Your Favorite API&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;PyBites&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;As I discussed in my &lt;a href="http://pybit.es/learn-by-doing.html"&gt;post this week&lt;/a&gt; about learning Python, this code challenge was pretty much directed at me.&lt;/p&gt;
&lt;p&gt;Going into this one, I'd never accessed an API in my life!&lt;/p&gt;
&lt;p&gt;I spent the entire week playing around with different APIs but primarily the World of Warcraft and Gmail APIs.&lt;/p&gt;
&lt;p&gt;The work with the Gmail API was great learning but essentially a bust when it came to having a working script. I had an idea in mind as to what I wanted from it but I just wasn't able to get it done.&lt;/p&gt;
&lt;p&gt;I did have a little more success with the &lt;a href="http://wowwiki.wikia.com/wiki/World_of_Warcraft_API"&gt;World of Warcraft API&lt;/a&gt; however. I'm sure it means nothing to most of you reading this but I was able to pull down data about my player character and have it presented in a readable format. (JSON was also new to me!).&lt;/p&gt;
&lt;p&gt;The code for this is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/027"&gt;here&lt;/a&gt;. As it was my first API attempt, it is definitely quite simplistic. The intention is to wrap it all up such that I can recreate my character profile locally.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I used various APIs this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I combined the Twitter and Slack API in my article of this week: &lt;a href="http://pybit.es/twitter-monitor-slack-notify.html"&gt;How to Write a Simple Slack Bot to Monitor Your Brand on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For our 100 days challenge I created &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/026"&gt;an interactive script to query the OMDb API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the challenge I really wanted to make a start migrating &lt;a href="http://fbreadinglist.com/"&gt;fbreadinglist&lt;/a&gt; from PHP to Python. As it uses the &lt;a href="https://developers.google.com/books/"&gt;Google Books API&lt;/a&gt; it was a good fit for this challenge. I completed the autocomplete feature using the same JS, but Python/Flask for the back-end:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="google books autocomplete 1" src="https://pybit.es/images/pcc16_googlebooks1.png"&gt;&lt;/p&gt;
&lt;p&gt;When you select a title it redirects to a page where it pulls more details from the Google Books API (buttons not yet implemented):&lt;/p&gt;
&lt;p&gt;&lt;img alt="google books autocomplete 2" src="https://pybit.es/images/pcc16_googlebooks2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;We got 2 cool Pull Requests. We are really stoked you submit code to our repo. Good work folks, keep up the momentum!&lt;/p&gt;
&lt;h3&gt;Clamytoe&lt;/h3&gt;
&lt;p&gt;Martin submitted a cool project called &lt;a href="https://github.com/clamytoe/Github-Profiler"&gt;GitHub-Profiler&lt;/a&gt; where he queries the Github API for a given user, entering 'pybites' it generates this nice page, awesome:&lt;/p&gt;
&lt;p&gt;&lt;img alt="github api 1" src="https://pybit.es/images/pcc16_clamytoe1.png"&gt;&lt;/p&gt;
&lt;p&gt;If bio and repos was not enough, scrolling towards the end it also lists gists: &lt;/p&gt;
&lt;p&gt;&lt;img alt="github api 2" src="https://pybit.es/images/pcc16_clamytoe2.png"&gt;&lt;/p&gt;
&lt;p&gt;Code merged &lt;a href="https://github.com/pybites/challenges/tree/community/16/clamytoe"&gt;on our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Dseptem&lt;/h3&gt;
&lt;p&gt;Another usage of APIs we got from Dante who used the &lt;a href="http://forismatic.com/en/api/"&gt;Forismatic API&lt;/a&gt; to pull random quotes. The author's bio gets crawled from Wikipedia, really nice:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forismatic api 1" src="https://pybit.es/images/pcc16_dseptem1.png"&gt;&lt;/p&gt;
&lt;p&gt;When you hit "Another Quote!" the page refreshes and shows another random quote and its author + bio:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forismatic api 2" src="https://pybit.es/images/pcc16_dseptem2.png"&gt;&lt;/p&gt;
&lt;p&gt;Code merged &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;on our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Flask"></category><category term="APIs"></category><category term="Github"></category><category term="Google"></category><category term="books"></category><category term="Warcraft"></category><category term="quotes"></category><category term="Wikipedia"></category><category term="Forismatic"></category></entry><entry><title>Twitter digest 2017 week 17</title><link href="https://pybit.es/twitter_digest_201717.html" rel="alternate"></link><published>2017-04-30T20:04:00+02:00</published><updated>2017-04-30T20:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-30:/twitter_digest_201717.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;colorful - Terminal string styling done right, in Python. &lt;a href="https://t.co/vdfGJkkh4j" title="https://t.co/vdfGJkkh4j" target="_blank"&gt;https://t.co/vdfGJkkh4j&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/857278370341687296" data-datetime="2017-04-26T17:01:05+00:00"&gt;April 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Handling Missing Values in Pandas Dataframes ‚Äì &lt;a href="https://t.co/BQxDc0wr4C" title="https://t.co/BQxDc0wr4C" target="_blank"&gt;https://t.co/BQxDc0wr4C&lt;/a&gt; &lt;a href="https://t.co/NW3TMsUzDU" title="https://t.co/NW3TMsUzDU" target="_blank"&gt;https://t.co/NW3TMsUzDU&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/857989319063207937" data-datetime="2017-04-28T16:06:08+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Another shoe drops for legacy Python. &lt;a href="https://twitter.com/@PlayCheckiO" target="_blank"&gt;@PlayCheckiO&lt;/a&gt; just went Python 3 only. &lt;a href="https://t.co/l1MehdEdUw" title="https://t.co/l1MehdEdUw" target="_blank"&gt;https://t.co/l1MehdEdUw&lt;/a&gt; &lt;a href="https://t.co/dmqfiuiDWT" title="https://t.co/dmqfiuiDWT" target="_blank"&gt;https://t.co/dmqfiuiDWT&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/856925972293181445" data-datetime="2017-04-25T17:40:47+00:00"&gt;April 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Boolean logic: why is this true? &lt;a href="https://t.co/42q1xdsfgc" title="https://t.co/42q1xdsfgc" target="_blank"&gt;https://t.co/42q1xdsfgc&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learnpython" target="_blank"&gt;#learnpython&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/858005618317242369" data-datetime="2017-04-28T17:10:55+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∫üêç See how list comprehensions work "behind the scenes" &lt;a href="https://t.co/bxYlDLkpRp" title="https://t.co/bxYlDLkpRp" target="_blank"&gt;https://t.co/bxYlDLkpRp&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/858512985458966532" data-datetime="2017-04-30T02:47:00+00:00"&gt;April 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I just wrote about my experiences and opinions of Python 3.6's f-strings: &lt;a href="https://t.co/iPefSJxKVv" title="https://t.co/iPefSJxKVv" target="_blank"&gt;https://t.co/iPefSJxKVv&lt;/a&gt;&lt;/p&gt;‚Äî Daniel Roy Greenfeld (@pydanny) &lt;a href="https://twitter.com/pydanny/status/857324660026781696" data-datetime="2017-04-26T20:05:01+00:00"&gt;April 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Code laced with if-statements around or after every function call might not be taking full advantage of exceptions.&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/856663816981041152" data-datetime="2017-04-25T00:19:04+00:00"&gt;April 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Try Deep Learning in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; now with a fully pre-configured VM &lt;a href="https://t.co/DLqHzbqr29" title="https://t.co/DLqHzbqr29" target="_blank"&gt;https://t.co/DLqHzbqr29&lt;/a&gt; &lt;a href="https://t.co/x4dZ0Vq7kI" title="https://t.co/x4dZ0Vq7kI" target="_blank"&gt;https://t.co/x4dZ0Vq7kI&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/858325799094468609" data-datetime="2017-04-29T14:23:12+00:00"&gt;April 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nixcraft:" target="_blank"&gt;@nixcraft:&lt;/a&gt; Why Unix has short command names like rm, mv and so on. &lt;a href="https://twitter.com/search/#linux" target="_blank"&gt;#linux&lt;/a&gt; &lt;a href="https://twitter.com/search/#sysadmin" target="_blank"&gt;#sysadmin&lt;/a&gt; &lt;a href="https://twitter.com/search/#macos" target="_blank"&gt;#macos&lt;/a&gt; &lt;a href="https://twitter.com/search/#freebsd" target="_blank"&gt;#freebsd&lt;/a&gt; &lt;a href="https://twitter.com/search/#openbsd" target="_blank"&gt;#openbsd&lt;/a&gt; &lt;a href="https://twitter.com/search/#netbsd" target="_blank"&gt;#netbsd&lt;/a&gt; &lt;a href="https://t.co/unrw‚Ä¶" title="https://t.co/unrw‚Ä¶" target="_blank"&gt;https://t.co/unrw‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/856468191911870464" data-datetime="2017-04-24T11:21:44+00:00"&gt;April 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;DevOops - Python script to monitor services, dispatch SMS on fail, and attempt restart. &lt;a href="https://t.co/bLSzfBgrNX" title="https://t.co/bLSzfBgrNX" target="_blank"&gt;https://t.co/bLSzfBgrNX&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/858010457235501056" data-datetime="2017-04-28T17:30:08+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Develop your AWS Lambda functions using Python 3.6. Learn more: &lt;a href="https://t.co/UbAkBJqWkG" title="https://t.co/UbAkBJqWkG" target="_blank"&gt;https://t.co/UbAkBJqWkG&lt;/a&gt; &lt;a href="https://t.co/42VkKWlWL5" title="https://t.co/42VkKWlWL5" target="_blank"&gt;https://t.co/42VkKWlWL5&lt;/a&gt;&lt;/p&gt;‚Äî Amazon Web Services (@awscloud) &lt;a href="https://twitter.com/awscloud/status/858509758969466880" data-datetime="2017-04-30T02:34:11+00:00"&gt;April 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;BlockPy ‚Äì Introductory Python Programming Blockly Environment &lt;a href="https://t.co/uiWPWzqtJR" title="https://t.co/uiWPWzqtJR" target="_blank"&gt;https://t.co/uiWPWzqtJR&lt;/a&gt; &lt;a href="https://t.co/UxjiR1jdDD" title="https://t.co/UxjiR1jdDD" target="_blank"&gt;https://t.co/UxjiR1jdDD&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/857593478884229120" data-datetime="2017-04-27T13:53:13+00:00"&gt;April 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Quick Introduction to the Numpy Library &lt;a href="https://t.co/gXlxdMWq1S" title="https://t.co/gXlxdMWq1S" target="_blank"&gt;https://t.co/gXlxdMWq1S&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/857737535191105536" data-datetime="2017-04-27T23:25:39+00:00"&gt;April 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;`is` operator tests if variables point to the same object: &amp;gt;&amp;gt;&amp;gt; a = [1, 2] &amp;gt;&amp;gt;&amp;gt; b = [1, 2] &amp;gt;&amp;gt;&amp;gt; c = a &amp;gt;&amp;gt;&amp;gt; a is b False &amp;gt;&amp;gt;&amp;gt; a is c True &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/857082055837884417" data-datetime="2017-04-26T04:01:00+00:00"&gt;April 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;If faxing ASCII portraits of yourself to your friends is your thing, &lt;a href="https://twitter.com/@devinrader" target="_blank"&gt;@devinrader&lt;/a&gt; has you covered. &lt;a href="https://twitter.com/search/#nodejs‚Ä¶" target="_blank"&gt;#nodejs‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/GVYBiYOX7U" title="https://t.co/GVYBiYOX7U" target="_blank"&gt;https://t.co/GVYBiYOX7U&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/857993319368011777" data-datetime="2017-04-28T16:22:02+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="terminal"></category><category term="ascii"></category><category term="pandas"></category><category term="booleans"></category><category term="strings"></category><category term="deep learning"></category><category term="scripts"></category><category term="aws"></category><category term="lambda"></category><category term="numpy"></category><category term="unix"></category></entry><entry><title>Learn Python by Coding for Yourself</title><link href="https://pybit.es/learn-by-doing.html" rel="alternate"></link><published>2017-04-27T23:30:00+02:00</published><updated>2017-04-27T23:30:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-27:/learn-by-doing.html</id><summary type="html">&lt;p&gt;In this post I discuss (with examples) why it‚Äôs important to learn Python by actually coding. It‚Äôs not enough to just read!&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all know that the best way to learn &lt;em&gt;anything&lt;/em&gt; is to just jump in and do it. You don‚Äôt learn to play the guitar by simply watching &lt;a href="https://www.youtube.com/watch?v=tQ0iww5u6_I"&gt;YouTube videos&lt;/a&gt;, you learn by playing every day, trying new songs and challenging yourself.&lt;/p&gt;
&lt;p&gt;The same applies to learning Python.&lt;/p&gt;
&lt;h2&gt;Sharing is Caring&lt;/h2&gt;
&lt;p&gt;In typical PyBites fashion, I‚Äôm going to share my experiences from the past two weeks regarding this ‚ÄúLearn by Doing‚Äù concept.&lt;/p&gt;
&lt;p&gt;This is also a crucial part of learning Python - sharing. Don‚Äôt be afraid to put yourself out there and share your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put it on GitHub for the world to see.&lt;/li&gt;
&lt;li&gt;Share it on the &lt;a href="http://reddit.com/r/learnpython"&gt;Reddit Learn Python page&lt;/a&gt; for it to be critiqued.&lt;/li&gt;
&lt;li&gt;Take part in &lt;a href="http://pybit.es/pages/challenges.html"&gt;code challenges&lt;/a&gt; (shameless plug!) and actually submit your code for review.&lt;/li&gt;
&lt;li&gt;Send the code to friends with more coding experience for some feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whatever the case, sharing your code with others is one of the best ways to learn and &lt;em&gt;retain&lt;/em&gt; the knowledge.&lt;/p&gt;
&lt;h2&gt;Challenge Yourself&lt;/h2&gt;
&lt;p&gt;This week our &lt;a href="http://pybit.es/codechallenge16.html"&gt;code challenge&lt;/a&gt; is based on APIs. Why? Because I didn‚Äôt know jack about them. When Bob and I brainstorm ideas for the code challenges, we generally settle on a topic that we‚Äôre not entirely comfortable with ourselves.&lt;/p&gt;
&lt;p&gt;While Bob can query APIs in his sleep, just the thought of working with APIs made me collapse and start foaming at the mouth. Again, that‚Äôs why it was chosen.&lt;/p&gt;
&lt;p&gt;It‚Äôs important to challenge yourself. If you just stick with what you know and stay within your comfort zone, not only will you never improve but you‚Äôre never going to have a &lt;em&gt;reason&lt;/em&gt; to.&lt;/p&gt;
&lt;h2&gt;The Results&lt;/h2&gt;
&lt;p&gt;On the surface, my foray into the world of APIs was disastrous. Seriously. Dive a little deeper though and it‚Äôs honestly been one of the greatest Python learning experiences I‚Äôve had.&lt;/p&gt;
&lt;p&gt;Being a World of Warcraft nerd, naturally the first API I looked into was the &lt;a href="https://dev.battle.net/"&gt;Blizzard Warcraft API&lt;/a&gt;. Needless to say, I had no idea what the heck I was doing. The documentation assumed a level of familiarity with APIs and clearly that wasn‚Äôt me.&lt;/p&gt;
&lt;p&gt;After hours of playing around, I was able to get the basics down and pull some meaningful (to me!) data from my player profile. The saddest part is that after all of that effort, the most ‚Äúcrucial‚Äù line of code for the API call was this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;url = (&amp;#39;https://us.api.battle.net/wow/character/%s/%s?fields=mounts&amp;amp;locale=en_US&amp;amp;apikey=%s&amp;#39; % (realm, char_name, API_KEY))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It was like a kick in the teeth seeing such a pitiful line of code sitting there after such long period of time. (&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/027"&gt;Full code here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Why was it such a great experience? Well‚Ä¶&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being thrown in the deep end can be super beneficial. Assumptive documentation and almost zero meaningful content online meant I had to figure it out through trial and error.&lt;/li&gt;
&lt;li&gt;I was forced to read code that called &lt;em&gt;other&lt;/em&gt; APIs in order to see how it was done, then apply that to this scenario.&lt;/li&gt;
&lt;li&gt;I learned that you can use the &lt;code&gt;requests&lt;/code&gt; module to pull data from the API using a specific HTTP URL. This was using the &lt;code&gt;get&lt;/code&gt; attribute of &lt;code&gt;requests&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I learned a little about &lt;code&gt;OAuth&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;This all resulted in me playing around with JSON content for the first time ever.&lt;/li&gt;
&lt;li&gt;I discovered that you can make JSON print out in a readable format using &lt;code&gt;pprint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This forced me to then start looking into how one parses JSON data effectively, especially when you have multiple layers of dicts stored in the one JSON dict.&lt;/li&gt;
&lt;li&gt;I did this completely for me. This wasn‚Äôt out of a book or something someone told me to do. &lt;em&gt;I&lt;/em&gt; wanted to play with this specific API because &lt;em&gt;I‚Äôm&lt;/em&gt; a big Blizzard fan. This meant that I was engaged and &lt;strong&gt;determined&lt;/strong&gt; to learn it even though it was bloody frustrating.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While my code is nowhere near a success and most definitely unPythonic, it‚Äôs one heck of an achievement for me. I actually understand this stuff now!&lt;/p&gt;
&lt;h2&gt;The GMAIL API Experience&lt;/h2&gt;
&lt;p&gt;The next day I decided to hit up the &lt;a href="https://developers.google.com/apis-explorer/#p/gmail/v1/"&gt;Gmail API&lt;/a&gt; because of the whole &lt;a href="https://www.gizmodo.com.au/2017/04/how-did-unrollme-get-users-to-allow-it-to-sell-their-inbox-data/"&gt;Unroll.me fuss&lt;/a&gt; going on at the moment. I figured if they could do it, so could I!&lt;/p&gt;
&lt;p&gt;I was wrong. But at least I learned something!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I learned how Google uses OAuth to authenticate applications with your Google account.&lt;/li&gt;
&lt;li&gt;I was able to pull down a list of my Gmail labels, messages and filters.&lt;/li&gt;
&lt;li&gt;I performed all of these requests using the Python &lt;code&gt;apiclient&lt;/code&gt; module to talk directly to the Gmail API (didn‚Äôt use &lt;code&gt;requests&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;I learned that each type of call to the API has its own set of options that allow you to filter the returned data. Seems obvious now‚Ä¶&lt;/li&gt;
&lt;li&gt;I had more practice trying to parse multi-tiered JSON output.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;results = service.users().settings().filters().list(userId=&amp;#39;me&amp;#39;).execute()
    pprint(results)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, I was underwhelmed with the outcome but learned so much more by actually doing this than if I was just reading a book. (Full code not online).&lt;/p&gt;
&lt;h2&gt;Python Flask App&lt;/h2&gt;
&lt;p&gt;Last week we created &lt;a href="http://pybit.es/codechallenge15_review.html"&gt;Python Flask Apps for our code challenge&lt;/a&gt;. It was freaking awesome. If you saw my website you‚Äôll see that it‚Äôs very ‚ÄúI‚Äôm just learning HTML‚Äù retro. (I didn‚Äôt have time for the CSS and Bootstrap).&lt;/p&gt;
&lt;p&gt;I think I learned more Python in that week than any other time. It was full on and it was damn satisfying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I revived my HTML and CSS ‚Äúskills‚Äù (Steady on! It's been a while!).&lt;/li&gt;
&lt;li&gt;I got to push learning Flask!&lt;/li&gt;
&lt;li&gt;I played with Jinja2 templates.&lt;/li&gt;
&lt;li&gt;I created my very first, working HTML Form that returned data to my &lt;em&gt;own&lt;/em&gt; backend script and DB.&lt;/li&gt;
&lt;li&gt;Subsequently, I learned about HTML &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests! (Who knew?!)&lt;/li&gt;
&lt;li&gt;I learned &lt;code&gt;sqlite3&lt;/code&gt; from scratch. I knew absolutely no SQL prior to last week!&lt;/li&gt;
&lt;li&gt;I created my first persistent SQL database.&lt;/li&gt;
&lt;li&gt;I created my first working Web App!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a &lt;em&gt;massive&lt;/em&gt; learning experience. None of which was taught from one book as part of an ‚Äúend of chapter exercise‚Äù.&lt;/p&gt;
&lt;p&gt;This was purely for the thrill of creating my own web app. And it was &lt;strong&gt;fun&lt;/strong&gt;! (Meal Tracker 5000 baby!).&lt;/p&gt;
&lt;p&gt;The best part was that for this challenge I found information everywhere. YouTube, StackOverflow, Reddit, PyBites (Bam!), GitHub and some other books.&lt;/p&gt;
&lt;p&gt;I‚Äôm happy with the code too. &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/meal"&gt;Check it out here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Get on With it&lt;/h2&gt;
&lt;p&gt;So here‚Äôs the deal. If you‚Äôre finding it tough to learn Python then do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Come up with an idea for something to code. Make it something you‚Äôd want or use yourself. (My first app was an Overtime Tracker for the extra hours I worked at Oracle!)&lt;/li&gt;
&lt;li&gt;If you‚Äôre learning something new, make it something fun! (To learn how to automate sending emails I created a script that spams my workmates every evening! Sorry fellas!)&lt;/li&gt;
&lt;li&gt;Don‚Äôt just use one resource, search &lt;strong&gt;everywhere&lt;/strong&gt;. Expect to find many ways to solve your problem, not just the way they might be telling you in the book you‚Äôre reading.&lt;/li&gt;
&lt;li&gt;Experiment in the Python Shell! It‚Äôs the best place to stuff around!&lt;/li&gt;
&lt;li&gt;As I said before, share your code and get people to give you feedback.&lt;/li&gt;
&lt;li&gt;Join us in our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Day Code Challenge&lt;/a&gt;! It‚Äôs been the leading factor for my recent increase in Python understanding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of all though: &lt;strong&gt;STICK WITH IT&lt;/strong&gt;. The failures and the frustrating evenings where the code just doesn‚Äôt work are so important. They totally suck but man do you learn!&lt;/p&gt;
&lt;p&gt;And I seriously mean it when I say, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Anyone else remember the guy from the YouTube video at the top? That video may be &lt;strong&gt;the&lt;/strong&gt; reason I started playing the guitar! I love it!&lt;/em&gt;&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="resources"></category><category term="Flask"></category><category term="Warcraft"></category><category term="requests"></category><category term="gmail"></category><category term="APIs"></category><category term="sqlite3"></category><category term="challenge"></category><category term="motivation"></category></entry><entry><title>How to Write a Simple Slack Bot to Monitor Your Brand on Twitter</title><link href="https://pybit.es/twitter-monitor-slack-notify.html" rel="alternate"></link><published>2017-04-25T11:00:00+02:00</published><updated>2017-04-25T11:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-04-25:/twitter-monitor-slack-notify.html</id><summary type="html">&lt;p&gt;In this article I show you how to monitor Twitter and post alerts to a Slack channel. We built a nice tool to monitor whenever our domain gets mentioned on Twitter. The slacker and twython modules made this pretty easy. We also use configparser and logging.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article I show you how to monitor Twitter and post alerts to a Slack channel. We built a nice tool to monitor whenever our domain gets mentioned on Twitter. The slacker and twython modules made this pretty easy. We also use configparser and logging.&lt;/p&gt;
&lt;p&gt;This was &lt;a href="https://twitter.com/pybites/status/854432856386420736"&gt;another script&lt;/a&gt; that came out of our &lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode challenge&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The funny thing is that we started out using &lt;a href="https://www.mediatrigger.io/"&gt;mediatrigger.io&lt;/a&gt; using a free trial, but soon we thought: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How difficult would it be to build this ourselves?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not that much, in this article we show you how. &lt;/p&gt;
&lt;p&gt;By the way, if at some point you lack inspiration what to build next, apart from &lt;a href="http://pybit.es/pages/challenges.html"&gt;joining our code challenges&lt;/a&gt;, think about how you can scratch your own itch. When we do this we tend to stumble upon &lt;a href="http://pybit.es/flask-api-part2.html"&gt;interesting projects&lt;/a&gt;. We think it's the best way to learn.&lt;/p&gt;
&lt;p&gt;With that said let's get coding!&lt;/p&gt;
&lt;h2&gt;Requirements and Setup&lt;/h2&gt;
&lt;p&gt;We use &lt;a href="https://pypi.python.org/pypi/slacker/"&gt;slacker&lt;/a&gt; and &lt;a href="https://pypi.python.org/pypi/twython"&gt;twython&lt;/a&gt; so pip install them or pip install -r &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/020/requirements.txt"&gt;requirements.txt&lt;/a&gt; (after creating &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;a virtual env&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;You will need Twitter API tokens and a Slack token. We wrote about the &lt;a href="http://pybit.es/tag/twitterapi.html"&gt;Twitter API&lt;/a&gt; and &lt;a href="http://pybit.es/tag/slack.html"&gt;Slack&lt;/a&gt; before. &lt;/p&gt;
&lt;p&gt;We use configparser to read these tokens in from a &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/020/config.ini-example"&gt;config file&lt;/a&gt;. Note we only store the template config file on GH, the real one &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/020/.gitignore"&gt;is ignored&lt;/a&gt; to not reveal any secret info.&lt;/p&gt;
&lt;p&gt;For Slack you need to &lt;a href="https://julbob.slack.com/apps/new/A0F7YS25R-bots"&gt;create a bot first&lt;/a&gt; and add the bot to your designated channel.&lt;/p&gt;
&lt;h2&gt;The code&lt;/h2&gt;
&lt;p&gt;You can get the full project &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/020"&gt;here&lt;/a&gt; (as said it's part of &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;our 100DaysOfCode repo&lt;/a&gt;). Here I go over the script bit by bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Imports and read config, setting the required tokens. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;slacker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Slacker&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twython&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwythonStreamer&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cs_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cs_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;acc_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;acc_secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;SLACK_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Slack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define some other constants. Note that CHANNEL includes the pound sign (#) and the domain to monitor is defined as a tuple (explained further down). The message is constructed to make it easy to go to the tweet and know who is tweeting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;CHANNEL =&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="c1"&gt;#pybites-mentions&amp;#39;&lt;/span&gt;
&lt;span class="ss"&gt;DOMAIN =&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;pybit&amp;#39;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;es&amp;#39;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ss"&gt;MSG =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;A new mention of {domain}:&lt;/span&gt;

&lt;span class="s1"&gt;{user} (name: {name} / followers {followers}) tweeted:&lt;/span&gt;
&lt;span class="s1"&gt;{tweet_text}&lt;/span&gt;

&lt;span class="s1"&gt;Link to tweet: https://twitter.com/{user}/status/{tweet_id}&lt;/span&gt;
&lt;span class="se"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiate a Slacker object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;slack = Slacker(SLACK_TOKEN)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up logging if we need to debug anything on the remote server one day:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logging.basicConfig(level=logging.DEBUG,
                    format=&amp;#39;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&amp;#39;,
                    datefmt=&amp;#39;%m-%d %H:%M&amp;#39;,
                    filename=&amp;#39;bot.log&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A helper to create the message that shows up in our Slack channel: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_post(data):
    tweet_text = data[&amp;#39;text&amp;#39;]
    tweet_id = data[&amp;#39;id_str&amp;#39;]
    user = data[&amp;#39;user&amp;#39;][&amp;#39;screen_name&amp;#39;]
    name = data[&amp;#39;user&amp;#39;][&amp;#39;name&amp;#39;]
    followers = data[&amp;#39;user&amp;#39;][&amp;#39;followers_count&amp;#39;]
    return MSG.format(domain=&amp;#39;.&amp;#39;.join(DOMAIN),
                    user=user,
                    name=name,
                    followers=followers,
                    tweet_text=tweet_text,
                    tweet_id=tweet_id)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What really makes this solution cool is the &lt;a href="https://dev.twitter.com/streaming/overview"&gt;Streaming API&lt;/a&gt;. We also used it &lt;a href="http://pybit.es/codechallenge07.html"&gt;here&lt;/a&gt;. &lt;a href="https://twython.readthedocs.io/en/latest/usage/streaming_api.html"&gt;TwythonStreamer&lt;/a&gt; makes it quite easy to start to monitor Twitter: 6 LOC in the docs, 10 LOC here, because we added exception handling, logging and posting to Slack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyStreamer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TwythonStreamer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39; https://twython.readthedocs.io/en/latest/usage/streaming_api.html &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;on_success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;slack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CHANNEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;as_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;exc&lt;/span&gt;:
            &lt;span class="kt"&gt;logging.error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cannot post to channel: {}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;on_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;An error occurred: {}, exiting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoke the Streamer. Important note: pybit.es (one term) did not work so well, so we had to feed stream.statuses.filter 'pybit es' which works as a logical AND, see &lt;a href="https://dev.twitter.com/streaming/overview/request-parameters#track"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:

    stream = MyStreamer(CONSUMER_KEY, CONSUMER_SECRET,
                        ACCESS_TOKEN, ACCESS_SECRET)

    # https://dev.twitter.com/streaming/overview/request-parameters#track
    stream.statuses.filter(track=&amp;#39; &amp;#39;.join(DOMAIN))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quite amazed how these modules abstract away a lot of complex stuff keeping the script lean. As we &lt;a href="http://pybit.es/py-mistakes.html"&gt;wrote before&lt;/a&gt;: don't re-invent the wheel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;I run this script on my server. Of course it might die and we want it to work 7x24, so I &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/020/bot.sh"&gt;included a small shell script&lt;/a&gt; to respawn the process if it dies, a technique I learned from &lt;a href="http://pybit.es/simple-chatbot.html"&gt;my previous Slack bot&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Result&lt;/h3&gt;
&lt;p&gt;Whenever our domain is mentioned we get an instant notification on Slack:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pybites mentions channel" src="https://pybit.es/images/pybites-mentions.png"&gt;&lt;/p&gt;
&lt;h2&gt;What would you Slackify?&lt;/h2&gt;
&lt;p&gt;For us this is a great form of monitoring (automation). I hope you've enjoyed this tour of how to interact with 2 APIs. It's not that difficult, yet the options are endless and you can build some really cool stuff.&lt;/p&gt;
&lt;h3&gt;Go wild with APIs&lt;/h3&gt;
&lt;p&gt;On that note, 'Now is better than never' (Python Zen), because &lt;a href="http://pybit.es/codechallenge16.html"&gt;this week's challenge&lt;/a&gt; is all about fiddling with Web APIs! Comment below if this inspired you to build something yourself, or &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;submit your code&lt;/a&gt; to our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;challenges community branch&lt;/a&gt; via a PR.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Twitter"></category><category term="Slack"></category><category term="Automation"></category><category term="monitoring"></category><category term="twython"></category><category term="TwythonStreamer"></category><category term="slacker"></category><category term="configparser"></category><category term="logging"></category><category term="brand"></category><category term="triggers"></category></entry><entry><title>Code Challenge 16 - Query Your Favorite API</title><link href="https://pybit.es/codechallenge16.html" rel="alternate"></link><published>2017-04-24T00:01:00+02:00</published><updated>2017-04-24T00:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-24:/codechallenge16.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you play with Web APIs. They are fun to fiddle with and great for learning and building cool things. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you play with Web APIs. They are fun to fiddle with and great for learning and building cool things.&lt;/p&gt;
&lt;p&gt;We are eager to see what you come up with. If you want to share your work please do so &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;via our new PR proc&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We keep it free-form so you can go wild on consuming your favorite service(s) / data.&lt;/p&gt;
&lt;p&gt;Lack inspiration? Here are some ideas to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a Twitter digest or search for recommended books by your followers (we used the &lt;a href="https://dev.twitter.com/rest/public"&gt;Twitter API&lt;/a&gt; before, see &lt;a href="http://pybit.es/codechallenge04_review.html"&gt;here&lt;/a&gt;, &lt;a href="http://pybit.es/100days-autotweet.html"&gt;here&lt;/a&gt;, and &lt;a href="http://pybit.es/automate-twitter.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a Slack bot, for example to monitor Twitter (we will post an article this week how!). We have used the Slack API before, see &lt;a href="http://pybit.es/flask-api-part2.html"&gt;here&lt;/a&gt; and &lt;a href="http://pybit.es/simple-chatbot.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a notification email of series being aired this week, using &lt;a href="http://thetvdb.com"&gt;TheTVDB&lt;/a&gt; and/or movies premieres using &lt;a href="https://www.themoviedb.org/?language=en"&gt;TheMovieDB API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull a bunch of movie metadata using &lt;a href="http://www.omdbapi.com/"&gt;OMDb API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check reddit for useful (Python) threads using the &lt;a href="https://www.reddit.com/dev/api"&gt;their API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull your music playlists / metadata from &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify API&lt;/a&gt; / &lt;a href="https://developers.soundcloud.com/docs/api/guide"&gt;Soundcloud API&lt;/a&gt; / &lt;a href="https://developers.google.com/youtube/"&gt;YouTube API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Republish your Instagram photos to your blog &lt;a href="https://www.instagram.com/developer/"&gt;via their API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump your friends' birthdays in your own DB using the &lt;a href="https://developers.facebook.com/"&gt;Facebook API&lt;/a&gt;. The FB API is huge, ranging from FB login to leveraging their powerful &lt;a href="https://developers.facebook.com/docs/graph-api"&gt;Graph API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do cool stuff with Google APIs: e.g. calendar, books, drive, Gmail, translate, Youtube, &lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;wow they really have a lot&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send SMS with &lt;a href="https://www.twilio.com/"&gt;Twilio API&lt;/a&gt;, you probably have seen &lt;a href="https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html"&gt;this awesome example&lt;/a&gt; some weeks ago? If not, check it out!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query the weather via &lt;a href="https://openweathermap.org/api"&gt;OpenWeatherMap&lt;/a&gt; (example &lt;a href="http://pybit.es/flask-simple-weather-app.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Still searching ideas? Check out &lt;a href="https://www.reddit.com/r/webdev/comments/3wrswc/what_are_some_fun_apis_to_play_with/"&gt;this thread&lt;/a&gt; or &lt;a href="https://www.programmableweb.com/apis"&gt;programmableweb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using one API is cool, combining two is even more powerful (e.g. Twitter + Slack, Google + FB, or whatever combination). There are so many options here, we probably reserve another challenge to do more of this (if you like it).&lt;/p&gt;
&lt;p&gt;If you are going to call an API repeatedly while developing you might want to consider &lt;a href="http://pybit.es/requests-cache.html"&gt;a library like Requests-cache&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. We updated this doc with additional instructions how to submit your solution to our community branch (and end-of-the-week review) via a Pull Request (PR).&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="APIs"></category><category term="movies"></category><category term="music"></category><category term="Slack"></category><category term="Twitter"></category><category term="weather"></category></entry><entry><title>Twitter digest 2017 week 16</title><link href="https://pybit.es/twitter_digest_201716.html" rel="alternate"></link><published>2017-04-23T20:04:00+02:00</published><updated>2017-04-23T20:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-23:/twitter_digest_201716.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;AWS now supports &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.6! &lt;a href="https://t.co/7mAsHzZM2e" title="https://t.co/7mAsHzZM2e" target="_blank"&gt;https://t.co/7mAsHzZM2e&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/854445536937684992" data-datetime="2017-04-18T21:24:25+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Image Processing in Python with Pillow &lt;a href="https://t.co/JosVZQaIFf" title="https://t.co/JosVZQaIFf" target="_blank"&gt;https://t.co/JosVZQaIFf&lt;/a&gt; by &lt;a href="https://twitter.com/@joyceechessa" target="_blank"&gt;@joyceechessa&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/855271649851068416" data-datetime="2017-04-21T04:07:06+00:00"&gt;April 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn how to generate passwords using Python &lt;a href="https://t.co/HJwd3mpyrj" title="https://t.co/HJwd3mpyrj" target="_blank"&gt;https://t.co/HJwd3mpyrj&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learntocode" target="_blank"&gt;#learntocode&lt;/a&gt; &lt;a href="https://t.co/sPDXhx5fhA" title="https://t.co/sPDXhx5fhA" target="_blank"&gt;https://t.co/sPDXhx5fhA&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/854367987259912192" data-datetime="2017-04-18T16:16:16+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best Python books in 2017 - ReactDOM &lt;a href="https://t.co/PFAaM0ttkZ" title="https://t.co/PFAaM0ttkZ" target="_blank"&gt;https://t.co/PFAaM0ttkZ&lt;/a&gt; via &lt;a href="https://twitter.com/@gp_pulipaka" target="_blank"&gt;@gp_pulipaka&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/855663018834898944" data-datetime="2017-04-22T06:02:15+00:00"&gt;April 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Use folium to generate interactive webmaps from &lt;a href="https://twitter.com/search/#python." target="_blank"&gt;#python.&lt;/a&gt; &lt;a href="https://t.co/J6tVWDq1Uf" title="https://t.co/J6tVWDq1Uf" target="_blank"&gt;https://t.co/J6tVWDq1Uf&lt;/a&gt; &lt;a href="https://t.co/F6pONmTu58" title="https://t.co/F6pONmTu58" target="_blank"&gt;https://t.co/F6pONmTu58&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/854217934297718785" data-datetime="2017-04-18T06:20:00+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python power comes to SQL Server 2017 &lt;a href="https://t.co/GpfbnizXNO" title="https://t.co/GpfbnizXNO" target="_blank"&gt;https://t.co/GpfbnizXNO&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/855979552723619840" data-datetime="2017-04-23T03:00:03+00:00"&gt;April 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just published a new blog article on the CPython compiler- "modifying the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; language in 6 minutes". &lt;a href="https://t.co/q3XeiUvSVd" title="https://t.co/q3XeiUvSVd" target="_blank"&gt;https://t.co/q3XeiUvSVd&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/854070950723108864" data-datetime="2017-04-17T20:35:57+00:00"&gt;April 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn a Python script for automating the process of publishing podca... &lt;a href="https://t.co/7fLlIiLv5X" title="https://t.co/7fLlIiLv5X" target="_blank"&gt;https://t.co/7fLlIiLv5X&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/855199091394887680" data-datetime="2017-04-20T23:18:46+00:00"&gt;April 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; TensorFlow Tutorial - Build a Neural Network &lt;a href="https://t.co/VGD3sSQe7U" title="https://t.co/VGD3sSQe7U" target="_blank"&gt;https://t.co/VGD3sSQe7U&lt;/a&gt; &lt;a href="https://t.co/hYicimCReb" title="https://t.co/hYicimCReb" target="_blank"&gt;https://t.co/hYicimCReb&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/855137575123562496" data-datetime="2017-04-20T19:14:20+00:00"&gt;April 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I couldn't find anything like this so I started my own list: The Ultimate List of Python Podcasts üéôüêç&lt;a href="https://t.co/LFYiXMuv2a" title="https://t.co/LFYiXMuv2a" target="_blank"&gt;https://t.co/LFYiXMuv2a&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/854503314444177412" data-datetime="2017-04-19T01:14:00+00:00"&gt;April 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What is python .. ("dot dot") notation syntax? [Score:20] &lt;a href="https://t.co/ffQdyilROo" title="https://t.co/ffQdyilROo" target="_blank"&gt;https://t.co/ffQdyilROo&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/854610723573555200" data-datetime="2017-04-19T08:20:49+00:00"&gt;April 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The Periodic Table of Data Science, using research &amp;amp; survey data from &lt;a href="https://twitter.com/@kdnuggets" target="_blank"&gt;@kdnuggets&lt;/a&gt; &lt;a href="https://twitter.com/@OReillyMedia" target="_blank"&gt;@OReillyMedia&lt;/a&gt; &lt;a href="https://twitter.com/@Gartner_inc‚Ä¶" target="_blank"&gt;@Gartner_inc‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/oHp9kqGKsH" title="https://t.co/oHp9kqGKsH" target="_blank"&gt;https://t.co/oHp9kqGKsH&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/855099476872228867" data-datetime="2017-04-20T16:42:56+00:00"&gt;April 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Announcing episode 22 of &lt;a href="https://twitter.com/@pythonbytes," target="_blank"&gt;@pythonbytes,&lt;/a&gt; PYTHONPATH considered harmful &lt;a href="https://t.co/82zBSRPtcP" title="https://t.co/82zBSRPtcP" target="_blank"&gt;https://t.co/82zBSRPtcP&lt;/a&gt; cc &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt;&lt;/p&gt;‚Äî Python Bytes Podcast (@pythonbytes) &lt;a href="https://twitter.com/pythonbytes/status/854481234424156161" data-datetime="2017-04-18T23:46:16+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Not surprisingly, I agree: Thinking like a programmer helps you tackle all kinds of problems in life:‚Ä¶ &lt;a href="https://t.co/95hPXoZBsu" title="https://t.co/95hPXoZBsu" target="_blank"&gt;https://t.co/95hPXoZBsu&lt;/a&gt;&lt;/p&gt;‚Äî Bill Gates (@BillGates) &lt;a href="https://twitter.com/BillGates/status/853962277531385862" data-datetime="2017-04-17T13:24:07+00:00"&gt;April 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"How to explain a layperson why a developer should not be interrupted while neck-deep in coding?" &lt;a href="https://t.co/T7mnQsw6hh" title="https://t.co/T7mnQsw6hh" target="_blank"&gt;https://t.co/T7mnQsw6hh&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/855842389029777408" data-datetime="2017-04-22T17:55:00+00:00"&gt;April 22, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="aws"></category><category term="pillow"></category><category term="passwords"></category><category term="books"></category><category term="folium"></category><category term="sql"></category><category term="automation"></category><category term="machine learning"></category><category term="tensorflow"></category><category term="podcasts"></category><category term="data science"></category></entry><entry><title>Code Challenge 15 - Create a Simple Flask App - Review</title><link href="https://pybit.es/codechallenge15_review.html" rel="alternate"></link><published>2017-04-22T17:20:00+02:00</published><updated>2017-04-22T17:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-22:/codechallenge15_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge15.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge15.html"&gt;Create a Simple Flask App&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;This was one of the best challenges so far. We have 3 cool apps to show today.&lt;/p&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;This has to have been one of the most satisfying projects of my life. Why? Because, for the first time I successfully coded up an application with a front end, a back end &lt;em&gt;and&lt;/em&gt; persistent storage!&lt;/p&gt;
&lt;p&gt;&lt;img alt="julian's meal tracker" src="https://pybit.es/images/meal-tracker.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first thing you'll notice is that the page looks like it's straight out of the early 90's. (My CSS/Bootstrap game isn't very strong yet so settle down). I figured it was more important to get the app side working first. Styling can and will be improved later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is a very simple program that asks you for the last thing you ate and drank and tracks it in a database. You can then print out the "meal history" (ie, dump of the db) on another web page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is run within an &lt;em&gt;app.py&lt;/em&gt; file. I can definitely go back and refactor this code to be more Pythonic. For example, I control the connection to the sqlite db using a &lt;em&gt;with&lt;/em&gt; statement. You can see this statement occur three times in the program which is way too much repetition for my liking!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most difficult thing to get right was the passing of the data from the form back to the Python script for storage. The difficulty was more in wrapping my head around how this worked as I wasn't 100% across the whole HTTP GET and POST methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Point of learning: In my &lt;em&gt;def index()&lt;/em&gt; function, the first load of the web page causes the return value to be passed to the page straight away. The entire if statement isn't processed &lt;strong&gt;until the POST request is made by submitting the form&lt;/strong&gt;. (Figuring this out was like reaching enlightenment).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I spent an entire evening this week learning sqlite3 just for this challenge. Totally worth it. If you don't know it already, do it. It's a wonderful way of storing data! It's also super handy being able to view the .db file in the SQLite DB browser to sanity check your app is doing what it's supposed to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I used a &lt;em&gt;lot&lt;/em&gt; of different resources to learn this.(Shameless plug alert!): I used our existing &lt;a href="http://pybit.es/tag/flask.html"&gt;PyBites Articles on Flask&lt;/a&gt; for the most part but also &lt;a href="https://www.youtube.com/watch?v=DIcpEg77gdE"&gt;this great video on Flask&lt;/a&gt; by the Miguel Grinberg.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: I can't wait to continue work on this app. The next step will be refactoring and finishing some UX features (eg: a return button on the second page) and then to get this running on Heroku or AWS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/meal"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I scratched my own itch building a reading planner using &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt; and copied the PureCSS from &lt;a href="http://pybit.es/flask-simple-weather-app.html"&gt;my previous app&lt;/a&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="bob's reading planner" src="https://pybit.es/images/reading-planner.png"&gt;&lt;/p&gt;
&lt;p&gt;This was a great exercise using SQLAlchemy and made me more confident to rewrite &lt;a href="http://fbreadinglist.com/"&gt;My Reading List&lt;/a&gt; (PHP) using an ORM, be it Flask or Django.&lt;/p&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/reading_planner"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think this was one of the best challenges so far and I am happy to see that our code challenges trigger people to really practice and learn, building awesome stuff. Which brings us on:&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;We had a really nice PR from &lt;a href="https://github.com/clamytoe"&gt;clamytoe (Martin)&lt;/a&gt; who built a "no frills task manager that's really intuitive and simple to use." - under the covers it uses Flask-SQLAlchemy and some very nice styling using Bootstrap. Here is us using his nice app:&lt;/p&gt;
&lt;p&gt;&lt;img alt="martin's task manager" src="https://pybit.es/images/task-manager.png"&gt;&lt;/p&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/community/15/clamytoe"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Flask"></category><category term="task manager"></category><category term="reading planner"></category><category term="meal history"></category></entry><entry><title>Simple Flask app to compare the weather of 2 cities</title><link href="https://pybit.es/flask-simple-weather-app.html" rel="alternate"></link><published>2017-04-20T09:40:00+02:00</published><updated>2017-04-20T09:40:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-04-20:/flask-simple-weather-app.html</id><summary type="html">&lt;p&gt;In this post I show you how to build a simple Flask app to compare the weather of 2 cities using the &lt;a href="https://openweathermap.org"&gt;OpenWeatherMap API&lt;/a&gt;. Maybe this aids you in solving &lt;a href="http://pybit.es/codechallenge15.html"&gt;this week's challenge&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some nice things coming out of our &lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode Challenge&lt;/a&gt;. You seemed to like &lt;a href="https://twitter.com/pybites/status/851896144594583552"&gt;this one&lt;/a&gt; so I decided to do an article on it.&lt;/p&gt;
&lt;p&gt;In this post I show you how to build a simple Flask app to compare the weather of 2 cities using the &lt;a href="https://openweathermap.org"&gt;OpenWeatherMap API&lt;/a&gt;. Maybe this aids you in solving &lt;a href="http://pybit.es/codechallenge15.html"&gt;this week's challenge&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Our simple Flask app" src="https://pybit.es/images/weather-app.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step by step&lt;/h2&gt;
&lt;p&gt;The full code is &lt;a href="https://github.com/pybites/weather_compare"&gt;here&lt;/a&gt;. We deployed the app &lt;a href="http://weathercompare.herokuapp.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First install dependencies we put in &lt;a href="https://github.com/pybites/weather_compare/blob/master/requirements.txt"&gt;requirements.txt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m venv venv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get an API key from &lt;a href="https://openweathermap.org/current"&gt;OpenWeatherMap API&lt;/a&gt; and store it in your environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi .bashrc
...
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WEATHER_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xyz
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CSS goes into the static directory, our template into templates. &lt;a href="https://github.com/pybites/weather_compare/blob/master/templates/weather.html"&gt;It contains&lt;/a&gt; a POST form to submit 2 cities and a table for the results of the query. The nice and simple design are thanks to &lt;a href="https://purecss.io/"&gt;PureCSS&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href="https://github.com/pybites/weather_compare/blob/master/weather.py"&gt;weather.py&lt;/a&gt; gets the API_KEY from the OS env, sets up some other constants and defines two helpers: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;get_local_time() -&amp;gt; tries to be as specific regarding timezone as possible, looking for both city and country. I had a good play with the pytz package here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;query_api() queries the OpenWeatherMap API via requests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With these helpers the &lt;a href="https://github.com/pybites/weather_compare/blob/master/app.py"&gt;main app&lt;/a&gt; becomes pretty lean (just 32 LOC). I only use the root (/) path for both view and POST. If POST, I get the 2 cities from the form with request.form.get, I query the API for both cities appending the results to data. If data does not have 2 items we set the error variable. All the data gets passed to the weather html template with this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return render_template(&amp;quot;weather.html&amp;quot;,
                    data=data,
                    error=error,
                    time=get_local_time)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we can pass in a function as well: get_local_time() which we use &lt;a href="https://github.com/pybites/weather_compare/blob/master/templates/weather.html"&gt;in the template&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sunrise&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deploy to Heroku&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I then &lt;a href="http://weathercompare.herokuapp.com/"&gt;deployed the app&lt;/a&gt; and luckily took some notes. Prerequisite is installing &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt;.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;web: gunicorn &amp;lt;APP_FILE_NAME&amp;gt;:app&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Procfile&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python-3.5.2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prep&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;
&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;Heroku&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typing&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Logged&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;# you can name your app or let Heroku give you a random name&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;
&lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="err"&gt;‚¨¢&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//weathercompare.herokuapp.com/ | https://git.heroku.com/weathercompare.git&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="nl"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt;    &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git (fetch)&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt;    &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git (push)&lt;/span&gt;

&lt;span class="cp"&gt;# if ENV variables&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="nl"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;WEATHER_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;XYZ&lt;/span&gt;
&lt;span class="n"&gt;Setting&lt;/span&gt; &lt;span class="n"&gt;WEATHER_API&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;restarting&lt;/span&gt; &lt;span class="err"&gt;‚¨¢&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;
&lt;span class="nl"&gt;WEATHER_API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XYZ&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Counting&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Writing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;2.55&lt;/span&gt; &lt;span class="n"&gt;KiB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="nl"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.2&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Launching&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Released&lt;/span&gt; &lt;span class="n"&gt;v4&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//weathercompare.herokuapp.com/ deployed to Heroku&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verifying&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="nl"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Scaling&lt;/span&gt; &lt;span class="n"&gt;dynos&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Free&lt;/span&gt;

&lt;span class="cp"&gt;# made a change? e.g. I added the CSS later, no problem, just deploy again&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="nl"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Discovering&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Procfile&lt;/span&gt; &lt;span class="n"&gt;declares&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;57.5&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Launching&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Released&lt;/span&gt; &lt;span class="n"&gt;v7&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//weathercompare.herokuapp.com/ deployed to Heroku&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verifying&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git&lt;/span&gt;
&lt;span class="n"&gt;c9771bb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;.77&lt;/span&gt;&lt;span class="n"&gt;abb53&lt;/span&gt;  &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope this inspired you to build your own mini Flask app using an API and putting it on Heroku. I hope I have convinced you this is pretty awesome stuff, not too hard to grasp, yet powerful if you further exploit its features. &lt;/p&gt;
&lt;p&gt;Leave a comment below if you want to share what you've built and/or join our &lt;a href="http://pybit.es/codechallenge15.html"&gt;Flask Code Challenge&lt;/a&gt; of this week.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Flask"></category><category term="weather"></category><category term="API"></category><category term="OpenWeatherMap"></category><category term="learning"></category><category term="Heroku"></category><category term="pytz"></category><category term="deploy"></category><category term="Jinja"></category><category term="CSS"></category></entry><entry><title>Behind the Scenes of PyBites - a Blog for Passionate Pythonistas (Post #100 Special)</title><link href="https://pybit.es/special-building-pybites.html" rel="alternate"></link><published>2017-04-18T08:24:00+02:00</published><updated>2017-04-18T08:24:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-18:/special-building-pybites.html</id><summary type="html">&lt;p&gt;Python is hot according to &lt;a href="http://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/"&gt;Dice&lt;/a&gt;. It‚Äôs an easy language to learn, has an elegant design and is widely used. In this article we proudly present our now 4 months journey into building PyBites. It‚Äôs a reflection of what we achieved and lessons learned. We hope to inspire fellow developers to start their own venture. It is very rewarding!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is hot according to &lt;a href="http://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/"&gt;Dice&lt;/a&gt;. It‚Äôs an easy language to learn, has an elegant design and is widely used. In this article we proudly present our now 4 months journey into building PyBites. It‚Äôs a reflection of what we achieved and lessons learned. We hope to inspire fellow developers to start their own venture. It is very rewarding!&lt;/p&gt;
&lt;h2&gt;__init__.py&lt;/h2&gt;
&lt;p&gt;Julian and Bob met (virtually) 8 years ago both working for Sun Microsystems. As we wrote on our about page: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They quickly realised that their mutual enthusiasm for technology, programming and self development was unrivalled and have thus remained the best of friends.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had already been sharing our passion for Python for some time. We had not done any major publicly documented project / effort together though. Hence we needed a platform ‚Ä¶&lt;/p&gt;
&lt;h3&gt;Just get started&lt;/h3&gt;
&lt;p&gt;Around last Christmas break we decided to take action. It is important to take that first step, it‚Äôs also the hardest part. Don‚Äôt expect your first iteration to be perfect. In fact perfectionism might be your biggest enemy.&lt;/p&gt;
&lt;p&gt;Looking back we made a lot of decisions on the fly, you simply can‚Äôt plan for everything in advance. Like writing an article: you have an outline, yet the meat of the story presents itself while writing.&lt;/p&gt;
&lt;h3&gt;Have a success buddy&lt;/h3&gt;
&lt;p&gt;Physical proximity is not required to start a successful project / partnership. Being held accountable is. As Darren Hardy succinctly wrote in &lt;a href="http://www.amazon.com/dp/159315724X/?tag=pyb0f-20"&gt;The Compound Effect&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find a success buddy: there are few things as powerful as two people locked arm and arm marching forward the same goal. To up your chances of success, get a success buddy, someone who‚Äôll keep you accountable as you cement your new habit while you return the favor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;First steps: assert toolset and domain name&lt;/h3&gt;
&lt;p&gt;Based on prior good experience with Jekyll and Github Pages (git + performance), we decided to use a static site generator. To keep it Python we forced ourselves to use and learn &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;. We used an &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;existing Pelican theme&lt;/a&gt;. Terminal (Vim), markdown, Git(hub), we felt right at home.&lt;/p&gt;
&lt;p&gt;We also put some thought into picking a cool domain name &lt;em&gt;pybit.es&lt;/em&gt;: short, startswith(‚Äòpy‚Äô), bite as in learning Python in bite-sized units and .es is from Spain (couldn‚Äôt figure out what to do with .au ...). After a quick hello world post &lt;a href="http://bobbelderbos.com/assets/pybites_home.png"&gt;we were online&lt;/a&gt;, now we had to deliver ...&lt;/p&gt;
&lt;h2&gt;Grinding it out&lt;/h2&gt;
&lt;p&gt;At the start you are just writing, building up a content base. It is hard work and you have to persist. There is no shortcut. You will see a few visitors a day, no comments, no shares, it gets pretty lonely at times, self doubt might kick in. The majority give up at this point but, if you stick with it consistently eventually you will get noticed and traffic starts to flow in. &lt;/p&gt;
&lt;p&gt;We had 2 breakpoints in this regard:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We posted the initial idea to Hacker News (appropriately using ‚ÄòShow HN: ...‚Äô) and got &lt;a href="https://news.ycombinator.com/item?id=13274876"&gt;some positive feedback&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a while we recognized that a lot of developers were stuck in the between-Beginner-and-Intermediate stage, so we wrote a &lt;a href="https://redd.it/5sjt3l"&gt;Python resources post&lt;/a&gt; which got a lot of upvotes on the &lt;a href="https://www.reddit.com/r/learnpython/"&gt;learnpython subreddit&lt;/a&gt; and got featured on the &lt;a href="https://pythonbytes.fm/episodes/show/14/lots-of-python-style-and-python-3000-is-3000-days-old"&gt;Python Bytes podcast&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there the ball started rolling.&lt;/p&gt;
&lt;h2&gt;Expose your learning, be unique&lt;/h2&gt;
&lt;p&gt;What makes an interesting blog? We decided from the start that we had to fully expose our learning to get the most out of it. Obviously this takes some courage, especially with the code challenges. Be it writing or coding, it is the best way to learn: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You force yourself to practice at regular intervals, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You care about submitting the best content/code you possibly can, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you get it wrong, you learn even more. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is no shame in that. As &lt;a href="https://en.wikiquote.org/wiki/Timothy_Ferriss"&gt;Tim Ferriss said&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A person's success in life can usually be measured by the number of uncomfortable conversations he or she is willing to have. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anybody performing on stage gets criticized at some point, it goes with the territory. It is hard to please everybody, nor should you want that.&lt;/p&gt;
&lt;p&gt;We wanted our blog to be original which meant not limiting ourselves to just &lt;a href="http://pybit.es/pages/articles.html"&gt;articles&lt;/a&gt;. We cannot exactly recall how the &lt;a href="http://pybit.es/pages/challenges.html"&gt;code challenges&lt;/a&gt; came about, but we needed a vehicle to learn and it didn‚Äôt seem prevalent elsewhere. &lt;/p&gt;
&lt;p&gt;We inquired HN again and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;people seemed interested&lt;/a&gt;. Our weekly code challenges (&lt;a href="https://github.com/pybites/challenges"&gt;140 forks at this writing&lt;/a&gt;) turned out to be a great way to learn from each other, and it is adding an interesting dynamic to our site and brand.&lt;/p&gt;
&lt;h3&gt;Market yourself&lt;/h3&gt;
&lt;p&gt;Brand? Yes. That is the advantage of starting a blog: to help create your brand. We recommend reading &lt;a href="http://www.amazon.com/dp/1617292397/?tag=pyb0f-20"&gt;Soft Skills&lt;/a&gt; for practical advice how to market yourself. &lt;/p&gt;
&lt;p&gt;In our second month we hired a designer to make an attractive logo and this really gave PyBites its unique flavor. We became more active on social media. We reached out to fellow Pythonistas. We got invaluable feedback from our readers. We gained quite some traction from Reddit‚Äôs &lt;a href="https://www.reddit.com/r/learnpython/"&gt;learnpython&lt;/a&gt; (and grew some thicker skin!). &lt;/p&gt;
&lt;p&gt;We started a &lt;a href="https://www.facebook.com/groups/pybites/"&gt;Facebook group&lt;/a&gt;. We even created two Cheat Sheets to condense part of our learning. It is important to spend some time on marketing your content. You can have top-notch content but if nobody can find you, it might as well just not exist. However ...&lt;/p&gt;
&lt;h3&gt;Content is king&lt;/h3&gt;
&lt;p&gt;The number one focus should be content. We write our articles with great care. We try to come up with interesting and varied code challenges. We want to develop our own style and voice. To keep the momentum we also commit to a certain weekly volume of work: one code challenge, two articles, and a news digest.&lt;/p&gt;
&lt;h3&gt;Automate the boring stuff&lt;/h3&gt;
&lt;p&gt;To allow us to focus on the important, automation is key. Although we manually craft our newsletter we get the article links via a cron script. We parse &lt;a href="http://planetpython.org"&gt;Planet Python&lt;/a&gt;, emailing a daily digest to keep up2date. We &lt;a href="http://pybit.es/100days-autotweet.html"&gt;auto-tweet our daily script&lt;/a&gt; for our &lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode challenge&lt;/a&gt; we are doing these days. &lt;/p&gt;
&lt;p&gt;We use a tool to assist in creating &lt;a href="http://pybit.es/pages/news.html"&gt;our weekly Twitter news digest&lt;/a&gt;. We have automatic featured images on our posts (red = challenge, blue = article, green = news, purple = special occasion). Code challenge participation has &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;a process&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;4 months in PyBites is pretty streamlined and that makes things more consistent and compounds to saved time we can use to focus on what matters: the content.&lt;/p&gt;
&lt;h2&gt;Sharpen the saw&lt;/h2&gt;
&lt;p&gt;PyBites made us push the envelope resulting in significant Python learning in the last 4 months. From mastering important concepts of the language to building useful utilities using Pythonic code. If it was not for the blog we would not have had this kind of drive, inspiration nor tooling. &lt;/p&gt;
&lt;p&gt;&lt;img alt="pybites is everywhere" src="https://pybit.es/images/coffee.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Building a community&lt;/h2&gt;
&lt;p&gt;From the start we decided to do a weekly newsletter, growing our following. The number of page views only tells you so much. What you really want is returning visitors and loyal followers that want to read your content every week and can provide you with useful feedback. We want to build a community of passionate Pythonistas that want to learn with us (both directions).&lt;/p&gt;
&lt;h3&gt;And we‚Äôre just getting started&lt;/h3&gt;
&lt;p&gt;With this sort of momentum, we only can go forward. With such positive results we are pretty stoked to continue to learn Python inside-out sharing our progress and to keep growing our community. &lt;/p&gt;
&lt;h3&gt;We challenge you&lt;/h3&gt;
&lt;p&gt;If you like this article we ask you one favor: send this to a friend or co-worker. Identify something that passionates you and partner up with somebody to start creating a blog, open source project, or some other platform to share your learning. There is no better way to hone your skills than daily practice and holding each other accountable. &lt;/p&gt;
&lt;p&gt;We‚Äôre eager to hear from you so leave a comment below to share your story / feedback.&lt;/p&gt;
&lt;p&gt;We hope this article has inspired you to &lt;em&gt;take action&lt;/em&gt;. We hope it convinced you that starting a programming endeavor is not that difficult if you are willing to put in &lt;em&gt;consistent&lt;/em&gt; hard work. &lt;/p&gt;
&lt;p&gt;Besides, helping other people get better is highly rewarding in itself and is an invaluable skill in your developer toolkit. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="special"></category><category term="milestone"></category><category term="softskills"></category><category term="learning"></category><category term="lessons"></category><category term="community"></category><category term="pelican"></category><category term="challenge"></category><category term="python"></category><category term="pybites"></category><category term="automation"></category></entry><entry><title>Code Challenge 15 - Create a Simple Flask App</title><link href="https://pybit.es/codechallenge15.html" rel="alternate"></link><published>2017-04-17T08:40:00+02:00</published><updated>2017-04-17T08:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-17:/codechallenge15.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we‚Äôre going to get down and dirty with Python Flask. Flask is becoming a hot skill to have up your sleeve. We‚Äôre all in with learning it so figure it‚Äôs about time we had a challenge on it! Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we‚Äôre going to get down and dirty with Python Flask. Flask is becoming a hot skill to have in your arsenal so we figure it‚Äôs about time we had a challenge on it! Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We decided to split the challenge into two parts given how time consuming this may be for some. If you can manage it, go for the bonus too!&lt;/p&gt;
&lt;p&gt;The base requirement: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Flask web app that allows you to enter data via a web form&lt;/li&gt;
&lt;li&gt;Data should then be displayed in some way (on the same page or on another page)&lt;/li&gt;
&lt;li&gt;Data should be persistent. It‚Äôs up to you how you store the data, as long as it‚Äôs persistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow the stored data to be manipulated (deleted, edited).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example use case for this could be a To-Do list app.&lt;/p&gt;
&lt;p&gt;This is an open ended challenge. There are very few requirements and many possibilities! It doesn‚Äôt have to look pretty, as long as the functionality is there. Have fun with it, learning Flask can be incredibly satisfying!&lt;/p&gt;
&lt;h2&gt;What is Flask?&lt;/h2&gt;
&lt;p&gt;As we discussed in our &lt;a href="http://pybit.es/beginning-flask.html"&gt;beginner Flask article&lt;/a&gt; last week, it‚Äôs a web framework to allow you to create Python web applications.&lt;/p&gt;
&lt;p&gt;For this challenge you should definitely have some HTML (and CSS) experience. It‚Äôll definitely make things easier.&lt;/p&gt;
&lt;h2&gt;Helpful Resources&lt;/h2&gt;
&lt;p&gt;To help with your learning, here are some resources that should get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our &lt;a href="http://pybit.es/beginning-flask.html"&gt;beginner Flask article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our &lt;a href="http://pybit.es/flask-for-loop.html"&gt;Printing Dicts with Flask article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This great (working!) simple &lt;a href="https://github.com/mikicaivosevic/flask-simple-todo"&gt;Flask to-do list app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bob‚Äôs &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Weather Compare App Code&lt;/a&gt; (post coming soon!)&lt;/li&gt;
&lt;li&gt;The offical &lt;a href="http://flask.pocoo.org/docs/0.12/"&gt;Flask documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This &lt;a href="https://www.youtube.com/watch?v=ZVGwqnjOKjk&amp;amp;list=PL6gx4Cwl9DGDi9F_slcQK7knjtO8TUvUs"&gt;beginner video series&lt;/a&gt; from &lt;em&gt;The New Boston&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If you're serious about learning Flask and Python web development checkout &lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;, they have top-notch material on this subject.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. We updated this doc with additional instructions how to submit your solution to our community branch (and end-of-the-week review) via a Pull Request (PR).&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="flask"></category><category term="todo"></category></entry><entry><title>Twitter digest 2017 week 15</title><link href="https://pybit.es/twitter_digest_201715.html" rel="alternate"></link><published>2017-04-16T12:57:00+02:00</published><updated>2017-04-16T12:57:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-16:/twitter_digest_201715.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This O‚ÄôReilly report surveys 30 &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; web frameworks and provides a deeper look into six of the most widely used. &lt;a href="https://t.co/1cbRoXqNoj" title="https://t.co/1cbRoXqNoj" target="_blank"&gt;https://t.co/1cbRoXqNoj&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/852588935859638276" data-datetime="2017-04-13T18:26:57+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Chrome Extension that adds direct links to `import` and `from ... import` statements on GitHub &lt;a href="https://t.co/YZGsWHy6Yj" title="https://t.co/YZGsWHy6Yj" target="_blank"&gt;https://t.co/YZGsWHy6Yj&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/853097341678608385" data-datetime="2017-04-15T04:07:10+00:00"&gt;April 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Common Python Programming Mistakes To Avoid &amp;gt;&amp;gt; &lt;a href="https://t.co/HPug5mpFY1" title="https://t.co/HPug5mpFY1" target="_blank"&gt;https://t.co/HPug5mpFY1&lt;/a&gt; &lt;a href="https://t.co/7E1tkutx6O" title="https://t.co/7E1tkutx6O" target="_blank"&gt;https://t.co/7E1tkutx6O&lt;/a&gt;&lt;/p&gt;‚Äî Python Programmers (@python_devv) &lt;a href="https://twitter.com/python_devv/status/853275822060433409" data-datetime="2017-04-15T15:56:23+00:00"&gt;April 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best feature of iTerm2 (&lt;a href="https://t.co/OYKD7OV5Gi):" title="https://t.co/OYKD7OV5Gi):" target="_blank"&gt;https://t.co/OYKD7OV5Gi):&lt;/a&gt; Show Timestamps ‚Äî labels every line with when it appeared *after the fact*. Perfect.&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/851493125394747392" data-datetime="2017-04-10T17:52:35+00:00"&gt;April 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How does the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Super Function work? &lt;a href="https://t.co/KU3UsSGw9C" title="https://t.co/KU3UsSGw9C" target="_blank"&gt;https://t.co/KU3UsSGw9C&lt;/a&gt; &lt;a href="https://twitter.com/search/#learntocode" target="_blank"&gt;#learntocode&lt;/a&gt; &lt;a href="https://twitter.com/search/#coding" target="_blank"&gt;#coding&lt;/a&gt; &lt;a href="https://t.co/Pbl1dcVwn8" title="https://t.co/Pbl1dcVwn8" target="_blank"&gt;https://t.co/Pbl1dcVwn8&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/852160277969866752" data-datetime="2017-04-12T14:03:37+00:00"&gt;April 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Wedding at Scale: How I Used Twilio, Python and Google to Automate My Wedding &lt;a href="https://t.co/4Q0PIH4F6x" title="https://t.co/4Q0PIH4F6x" target="_blank"&gt;https://t.co/4Q0PIH4F6x&lt;/a&gt; by &lt;a href="https://twitter.com/@SeekTom" target="_blank"&gt;@SeekTom&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/851859173646024705" data-datetime="2017-04-11T18:07:08+00:00"&gt;April 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best Python Books for Beginners 2017 | FreelancingGig Blog - Freelancer Job Tips and Hiring ... &lt;a href="https://t.co/eUJ7ptRZ7y" title="https://t.co/eUJ7ptRZ7y" target="_blank"&gt;https://t.co/eUJ7ptRZ7y&lt;/a&gt; via &lt;a href="https://twitter.com/@_Data_Science_" target="_blank"&gt;@_Data_Science_&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/852980450654134272" data-datetime="2017-04-14T20:22:41+00:00"&gt;April 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Merge two dictionaries: x = {'a':1, 'b':2} y = {'c':3, 'd':4} z = {**x, **y} output: z = {'a': 1, 'b': 2, 'c': 3, 'd': 4} &lt;a href="https://twitter.com/search/#python3" target="_blank"&gt;#python3&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/852828279019057152" data-datetime="2017-04-14T10:18:01+00:00"&gt;April 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Advanced web scraping in Python &lt;a href="https://t.co/ePI9y1xgIh" title="https://t.co/ePI9y1xgIh" target="_blank"&gt;https://t.co/ePI9y1xgIh&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/852416072666009600" data-datetime="2017-04-13T07:00:03+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#DataViz" target="_blank"&gt;#DataViz&lt;/a&gt; in &lt;a href="https://twitter.com/search/#Python:" target="_blank"&gt;#Python:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Bokeh" target="_blank"&gt;#Bokeh&lt;/a&gt; cheat sheet - &lt;a href="https://t.co/6AAXvyGM1q" title="https://t.co/6AAXvyGM1q" target="_blank"&gt;https://t.co/6AAXvyGM1q&lt;/a&gt; &lt;a href="https://t.co/MKNbgbRwyF" title="https://t.co/MKNbgbRwyF" target="_blank"&gt;https://t.co/MKNbgbRwyF&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/853518411044982785" data-datetime="2017-04-16T08:00:21+00:00"&gt;April 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∞üêç My step-by-step intro to &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Decorators &lt;a href="https://t.co/ATChYGqsIo" title="https://t.co/ATChYGqsIo" target="_blank"&gt;https://t.co/ATChYGqsIo&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/851990002510778368" data-datetime="2017-04-12T02:47:00+00:00"&gt;April 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Calculate the number of days between two dates: &amp;gt;from datetime import datetime as dt &amp;gt;(&lt;a href="https://t.co/0O6FbyJick()" title="https://t.co/0O6FbyJick()" target="_blank"&gt;https://t.co/0O6FbyJick()&lt;/a&gt; - dt(2016,12,31)).days 101&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/851781899387379713" data-datetime="2017-04-11T13:00:04+00:00"&gt;April 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Are you looking for a LINQ equivalent in &lt;a href="https://twitter.com/search/#Python?" target="_blank"&gt;#Python?&lt;/a&gt; Check out &lt;a href="https://twitter.com/@robsmallshire's" target="_blank"&gt;@robsmallshire's&lt;/a&gt; ASQ: &lt;a href="https://t.co/UTUQVXns7x" title="https://t.co/UTUQVXns7x" target="_blank"&gt;https://t.co/UTUQVXns7x&lt;/a&gt; a LINQ-inspired API for Python&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/852535204686176256" data-datetime="2017-04-13T14:53:26+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;EzPyGame - An easier way to use pygame &lt;a href="https://t.co/4qumKQZJVv" title="https://t.co/4qumKQZJVv" target="_blank"&gt;https://t.co/4qumKQZJVv&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pygame" target="_blank"&gt;#pygame&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/852552328251047941" data-datetime="2017-04-13T16:01:29+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;[on my death bed, struggling to speak] me: if..your..unit..test..makes..a..network..call..it's..not..a..unit..test.. [dies]&lt;/p&gt;‚Äî Rebecca Slatkin (@RebeccaSlatkin) &lt;a href="https://twitter.com/RebeccaSlatkin/status/852627030092939274" data-datetime="2017-04-13T20:58:19+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="frameworks"></category><category term="chrome"></category><category term="iterm2"></category><category term="twilio"></category><category term="books"></category><category term="learning"></category><category term="beginners"></category><category term="dictionaries"></category><category term="web scraping"></category><category term="cheat sheet"></category><category term="bokeh"></category><category term="data science"></category><category term="decorators"></category><category term="APIs"></category><category term="pygamels"></category></entry><entry><title>Code Challenge 14 - Write DRY Code With Decorators - Review</title><link href="https://pybit.es/codechallenge14_review.html" rel="alternate"></link><published>2017-04-15T01:00:00+02:00</published><updated>2017-04-15T01:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-15:/codechallenge14_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge14.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge14.html"&gt;Write DRY Code With Decorators&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;Getting our hands on decorators we enriched our Python toolkit!  This one was also a lot of fun. See our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/14/decorator-pb.py"&gt;here&lt;/a&gt;. We did a simple timeit one and a more complex mute_exception one. For the latter we needed this week's article: &lt;a href="http://pybit.es/decorator-optional-argument.html"&gt;How to Write a Decorator with an Optional Argument?&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Some other things we learned: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Know the stdlib. Part of what makes these decorators useful is knowing about time, random, the @wraps decorator, partial, the awesome logging module, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As we sensed using optional arguments made the mute_exception more versatile. You can run it in various ways: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@mute_exception                                    # works: no args provided = takes defaults (no reraise, returns None)
@mute_exception(reraise=True)                      # works: raises the ZeroDivisionError = crash
@mute_exception(reraise=False, default_return=0)   # works: does not reraise ZeroDivisionError and returns 0 in that case
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used f-strings! We are on Python 3.6 now so we just could no longer resist the temptation :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our &lt;a href="http://pybit.es/vim-tricks.html"&gt;Flake 8 Check Vim shortcut&lt;/a&gt; pays off: the code is more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep reading other blogs and books. We based these decorators on &lt;a href="https://www.blog.pythonlibrary.org/2016/06/09/python-how-to-create-an-exception-logging-decorator/"&gt;How to Create an Exception Logging Decorator&lt;/a&gt; and the almighty &lt;a href="https://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python Cookbook, Third edition&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Output 2 stacked decorators&lt;/h2&gt;
&lt;p&gt;When you run our solution it will print (fake) timings and mute/log the ZeroDivisionError exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python decorator-pb.py

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.755037784576416
div &lt;span class="m"&gt;1&lt;/span&gt;/4 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.25

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.763498067855835
div &lt;span class="m"&gt;2&lt;/span&gt;/5 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.4

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.09057903289794922
div &lt;span class="m"&gt;3&lt;/span&gt;/0 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program did not crash by the divide by 0, logging the exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tail decorators.log
...
...
&lt;span class="m"&gt;00&lt;/span&gt;:58:36 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:36 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:37 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:37 root         ERROR    div raised exception ZeroDivisionError &lt;span class="k"&gt;for&lt;/span&gt; args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;But there is more ... we got a &lt;a href="https://github.com/pybites/challenges/blob/community/14/decorator-clamytoe.py"&gt;nice PR&lt;/a&gt; with two other cool decorators: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boxit - a decorator to draw a box around text&lt;/li&gt;
&lt;li&gt;hashit - a decorator to securely hash passwords (using passlib)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Up&lt;/h2&gt;
&lt;p&gt;As you might have noticed (&lt;a href="http://pybit.es/beginning-flask.html"&gt;here&lt;/a&gt; and &lt;a href="https://twitter.com/pybites/status/851896144594583552"&gt;here&lt;/a&gt;) we are learning Flask so we thought it would be a great topic for our next challenge coming Monday. Stay tuned ...&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="decorators"></category><category term="design patterns"></category><category term="DRY"></category></entry><entry><title>Beginning Flask</title><link href="https://pybit.es/beginning-flask.html" rel="alternate"></link><published>2017-04-13T15:00:00+02:00</published><updated>2017-04-13T15:00:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-13:/beginning-flask.html</id><summary type="html">&lt;p&gt;In this post I cover the basics of Flask in language that anyone can understand.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week I wrote an &lt;a href="http://pybit.es/flask-for-loop.html"&gt;article&lt;/a&gt; showing you how to print the contents of a dict to a table using Flask and HTML.&lt;/p&gt;
&lt;p&gt;In the lead up to the post I did quite a lot of browsing, reading and researching to wrap my head around this whole Flask thing. It took me a little longer because not everything out there was in simple, human readable English. A lot of sources assume a high level of Python knowledge and not everything was explained simplistically (lots of big words!).&lt;/p&gt;
&lt;p&gt;That‚Äôs why I decided to write this article explaining the absolute basics (Hello World!) in a manner I would have liked to seen.&lt;/p&gt;
&lt;h2&gt;What is Flask?&lt;/h2&gt;
&lt;p&gt;Odds are if you‚Äôre reading this, you already know what Flask is. I‚Äôm going to explain anyway.&lt;/p&gt;
&lt;p&gt;Flask is a ‚Äúweb framework‚Äù you can use to get your Python code to appear in a web browser (I told you I‚Äôd make this simplistic!).&lt;/p&gt;
&lt;p&gt;As with most programming languages, when you begin learning Python you‚Äôll be making scripts that are completely command line based. Eventually you‚Äôll wonder how the pros use Python to make web applications. Flask is one way to do this.&lt;/p&gt;
&lt;p&gt;There‚Äôll be a Python script that imports the Flask module and when run, &lt;em&gt;generally&lt;/em&gt; passes data to a HTML file. When the web page is loaded, it runs the Python code associated with that web page.&lt;/p&gt;
&lt;h2&gt;What should you know before learning Flask?&lt;/h2&gt;
&lt;p&gt;I won‚Äôt sugar coat it. You‚Äôll have a hard time if you don‚Äôt have a sound understanding of HTML and CSS.&lt;/p&gt;
&lt;p&gt;Python wise, your app will only be as complex as the code you write so the more you want to do, the more you need to know.&lt;/p&gt;
&lt;p&gt;The HTML knowledge needs to be there though. For example, HTML forms can be tricky just on their own. When you add Python and Flask to the mix it can get downright confusing (seriously, me).&lt;/p&gt;
&lt;p&gt;You don‚Äôt have to know CSS as much I guess but everyone wants their page/app to look good right? Maybe I‚Äôm just a little shallow!&lt;/p&gt;
&lt;h2&gt;Explaining Hello World&lt;/h2&gt;
&lt;p&gt;Okay so here‚Äôs a simple Hello World Flask script you‚Äôll probably find in every Flask tutorial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world! Can I get some CSS please?!‚Äô&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright, what the heck is going on here? Let me break it down&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Simple, we‚Äôre importing the &lt;strong&gt;Flask&lt;/strong&gt; class from the &lt;em&gt;flask&lt;/em&gt; module. This is the standard import call for the Flask module. Roll with it!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app = Flask(__name__)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Let‚Äôs talk about the assignment. All we‚Äôre doing here is assigning the Flask class to a variable called app. Simple.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(&lt;strong&gt;name&lt;/strong&gt;) is the bloody confusing part. The Flask class needs to know what value is currently assigned to &lt;strong&gt;name&lt;/strong&gt;. Whenever &lt;strong&gt;name&lt;/strong&gt; is used in your code, it‚Äôs assigned the name of the module that‚Äôs currently active. The Flask class needs this information to be able to execute properly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Think of this as the URL of the web page you‚Äôre coding. You‚Äôll often hear people say ‚Äúroute‚Äù for short when talking Flask. If you wanted to create a page called &lt;em&gt;birthdays.html&lt;/em&gt;, you‚Äôd name the route &lt;em&gt;@app.route(‚Äò/birthdays‚Äô)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def hello():
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that there‚Äôs no line space between the route and this function. That‚Äôs because they‚Äôre directly linked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of the code that you add within this function will be executed when the web page is loaded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The recommended function naming convention is to give it the same name as the route. This Hello World example is thus against convention. Using the birthdays example, we‚Äôd create a function with: &lt;em&gt;def birthdays():&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return &amp;#39;Hello world! Can I get some CSS please?!‚Äô
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is an important one. &lt;strong&gt;Every Flask function needs to return something&lt;/strong&gt;. This is the data that will be returned to the web page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This return line will simply print the string &lt;em&gt;Hello world! Can I get some CSS please?!&lt;/em&gt; to the page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a more complex piece of code, you‚Äôd more likely be returning a variable or something similar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.run()
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Pretty self explanatory. This is the code that will run your Flask app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Things to Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you run your Python Flask script (same way you‚Äôd run any other Python script), Flask kicks off a local web server. It runs on the system you‚Äôre executing the code from and, by default, will allow you to browse to the page at 127.0.0.1:5000. You‚Äôll then add the web page URL to the end of the port number, e.g.: 127.0.0.1:5000/birthdays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you start executing more complex code, such as my &lt;a href="http://pybit.es/flask-for-loop.html"&gt;dict example&lt;/a&gt; from last week, you need to use Flask Templates. These use the ‚ÄúJinja2‚Äù engine (again, roll with it). This is all installed by default when you pip install flask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Flask Template is pretty much just a HTML page that your code talks to. You can make one generic such that every page on your site calls the generic page so the theme is maintained across pages. Alternatively you can code each page individually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with HTML comes in handy when you start using Templates. Your python, HTML and CSS files need to be stored according to a required Flask folder hierarchy. Check out the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;GitHub repo for my code&lt;/a&gt; last week and you‚Äôll see what I mean. It feels &lt;em&gt;way&lt;/em&gt; more familiar and less daunting if you‚Äôve organised the files for a website before.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why use Flask?&lt;/h2&gt;
&lt;p&gt;I asked myself this question a few times. Honestly, I‚Äôd say use it because it‚Äôs so simple and quick to get running. Bob and I were chatting this week about the Flask Template I made to create the HTML table and with little to no effort, he was able to take the template and use it for his new &lt;a href="http://weathercompare.herokuapp.com/"&gt;weather compare app&lt;/a&gt; (code &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My current hurdle is not Flask itself but trying to tie it in with the HTML side of things. It‚Äôs been years since I did any deep HTML coding so I‚Äôm pretty rusty. At the time of writing, I‚Äôm finding that the Python code is functional but I can‚Äôt get the HTML to wrap around it the way I want.&lt;/p&gt;
&lt;h2&gt;Examples and Resources&lt;/h2&gt;
&lt;p&gt;Check out some of these examples and resources. Reading and running other code will help get this stuff to sink in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pybit.es/flask-for-loop.html"&gt;Display a dict using Flask&lt;/a&gt; - I‚Äôm pushing my post again because it really is easy to follow. Check the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;repo&lt;/a&gt; out and try it for yourself. Edit the code and watch the table change. Learn by doing!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Bob‚Äôs Weather Compare App&lt;/a&gt; - Bob made this as part of our &lt;a href="http://pybit.es/special-100days.html"&gt;100 days of code challenge&lt;/a&gt;. It‚Äôs definitely more complex but it‚Äôs amazing to see how &lt;em&gt;little&lt;/em&gt; code you need to actually get something like this out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ZVGwqnjOKjk&amp;amp;list=PL6gx4Cwl9DGDi9F_slcQK7knjtO8TUvUs"&gt;Flask Web Development with Python Tutorial&lt;/a&gt; - This 7-part video series from The New Boston is amazing. Nice and simple. Short bites. PyBites styles!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Don‚Äôt be deterred by the learning curve. If you‚Äôre new to this, start simple and stick with it. Just a little bite every day. Start with printing static data then slowly move on to more complex ideas like printing variables and dicts. Just remember, Always Be Coding!&lt;/p&gt;
&lt;p&gt;And remember, Keep Calm and Code in Python Flask! (And HTML and CSS I guess!)&lt;/p&gt;
&lt;p&gt;‚Äî Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="decorators"></category><category term="tutorial"></category><category term="learning"></category></entry><entry><title>How to Write a Decorator with an Optional Argument?</title><link href="https://pybit.es/decorator-optional-argument.html" rel="alternate"></link><published>2017-04-11T09:00:00+02:00</published><updated>2017-04-11T09:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-04-11:/decorator-optional-argument.html</id><summary type="html">&lt;p&gt;When playing with decorators (&lt;a href="http://pybit.es/codechallenge14.html"&gt;this week's challenge&lt;/a&gt;) I got stuck: how do you write a decorator that takes an optional argument? &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt; edition to the rescue. In this post how I failed my way to the right solution.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When playing with decorators (&lt;a href="http://pybit.es/codechallenge14.html"&gt;this week's challenge&lt;/a&gt;) I got stuck: how do you write a decorator that takes an optional argument? &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt; edition to the rescue. In this post how I failed my way to the right solution.&lt;/p&gt;
&lt;p&gt;The code for this article is &lt;a href="https://github.com/pybites/blog_code/tree/master/decorator_opt_arg"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;First attempt&lt;/h2&gt;
&lt;p&gt;To add an argument to a decorator I ended up having three levels of functions (see &lt;a href="http://stackoverflow.com/questions/5929107/python-decorators-with-parameters"&gt;here&lt;/a&gt; and &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;real_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sleeping for {} seconds&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;real_decorator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works fine if we have an argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep(1)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()


$ python decorators.py
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But when I call it without an argument (which I thought would work because I set it as optional argument) it fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()

$ python decorators.py
Traceback (most recent call last):
File &amp;quot;decorators.py&amp;quot;, line 36, in &amp;lt;module&amp;gt;
    hello()
TypeError: real_decorator() missing 1 required positional argument: &amp;#39;func&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Can we use a class?&lt;/h2&gt;
&lt;p&gt;My intuition was that the above syntax was pretty complex so I went with the class decorator syntax (a nice exercise too):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sleeping for {} seconds&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped_f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again this works fine when I give it an argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep(1)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()


$ python decorators_cl.py
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But leaving the arg off it fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()


$ python decorators_cl.py
Traceback (most recent call last):
File &amp;quot;decorators_cl.py&amp;quot;, line 25, in &amp;lt;module&amp;gt;
    hello()
TypeError: __call__() missing 1 required positional argument: &amp;#39;func&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Allow for optional arguments&lt;/h2&gt;
&lt;p&gt;Luckily I had &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt; nearby. What I love about this book, apart from its technical depth, is that it offers short and concise recipes that you can start using right away. This really covered a need I had when I was writing my decorators: the ability to have them behave in certain ways.&lt;/p&gt;
&lt;p&gt;Here is the cookbook's solution modified for my sleep decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleeping for {} seconds&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code looks like magic and I am still wrapping my head around it. &lt;/p&gt;
&lt;p&gt;The key part though is the use of partial():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The partial() is used for partial function application which ‚Äúfreezes‚Äù some portion of a function‚Äôs arguments and/or keywords resulting in a new object with a simplified signature - &lt;a href="https://docs.python.org/3.6/library/functools.html#functools.partial"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I should probably write another article on this useful feature ...&lt;/p&gt;
&lt;h2&gt;It works :)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    def call_n_times(func, n=3):
        for _ in range(n):
            func()

    @sleep  # works now!
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    print(&amp;#39;\nWithout args\n---&amp;#39;)
    call_n_times(hello)


    @sleep(seconds=2)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    print(&amp;#39;\nWith one opt arg: seconds\n---&amp;#39;)
    call_n_times(hello)


    @sleep(seconds=1, msg=&amp;#39;I work so hard, resting a bit&amp;#39;)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    print(&amp;#39;\nWith two opt args: seconds and msg\n---&amp;#39;)
    call_n_times(hello)


$ python decorators_opt_arg.py

Without args
---
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world

With one opt arg: seconds
---
Sleeping for 2 seconds
hello world
Sleeping for 2 seconds
hello world
Sleeping for 2 seconds
hello world

With two opt args: seconds and msg
---
I work so hard, resting a bit
hello world
I work so hard, resting a bit
hello world
I work so hard, resting a bit
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;As mentioned our &lt;a href="http://pybit.es/codechallenge14.html"&gt;code challenge of this week&lt;/a&gt; is all about decorators. Maybe you can use what you learned in this article to write more versatile decorators.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="decorators"></category><category term="arguments"></category><category term="tricks"></category><category term="tips"></category><category term="cookbook"></category></entry><entry><title>Code Challenge 14 - Write DRY Code With Decorators</title><link href="https://pybit.es/codechallenge14.html" rel="alternate"></link><published>2017-04-10T09:00:00+02:00</published><updated>2017-04-10T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-10:/codechallenge14.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we let you practice with decorators, a nice way to abstract away common functionality. It allows you to alter the behavior of a callable without modifying the callable itself. We agree with Dan Bader that 'understanding decorators is a milestone for any serious Python programmer.' Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we let you practice with decorators, a nice way to abstract away common functionality. It allows you to alter the behavior of a callable without modifying the callable itself. We agree with Dan Bader that 'understanding decorators is a milestone for any serious Python programmer.' Enjoy!&lt;/p&gt;
&lt;h2&gt;What is a decorator?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Decorators dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the function being decorated. (&lt;a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Decorator"&gt;wiki&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's basically a wrapper and it is a &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;common design pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are new to this concept we recommend Dan's nice walk-through he published last week: &lt;a href="https://dbader.org/blog/python-decorators"&gt;Python Decorators: A Step-By-Step Introduction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another great article is RealPython's &lt;a href="https://realpython.com/blog/python/primer-on-python-decorators/"&gt;Primer on Python Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Roll your own!&lt;/h2&gt;
&lt;p&gt;In this week's challenge we invite you to come up with useful decorators for yourself or the greater community. We have included &lt;a href="https://github.com/pybites/challenges/tree/master/14/"&gt;a bit of material&lt;/a&gt; in our repo to get started. &lt;/p&gt;
&lt;p&gt;Tomorrow we will post an article on how to write decorators that take optional arguments. This caused us some pain, but we got it working. It might be useful to write more flexible decorators. Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt; and link to it in our end-of-the-week review.&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="decorators"></category><category term="design patterns"></category><category term="DRY"></category></entry><entry><title>Twitter digest 2017 week 14</title><link href="https://pybit.es/twitter_digest_201714.html" rel="alternate"></link><published>2017-04-09T09:55:00+02:00</published><updated>2017-04-09T09:55:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-09:/twitter_digest_201714.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Started watching Modern &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; LiveLessons by &lt;a href="https://twitter.com/@raymondh," target="_blank"&gt;@raymondh,&lt;/a&gt; just released on &lt;a href="https://twitter.com/@safari," target="_blank"&gt;@safari,&lt;/a&gt; awesome, learning a lot! Thanks &lt;a href="https://t.co/5WoHQJnwkU" title="https://t.co/5WoHQJnwkU" target="_blank"&gt;https://t.co/5WoHQJnwkU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/850810133378736128" data-datetime="2017-04-08T20:38:37+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cheat Sheet: Python Loops &lt;a href="https://t.co/0E3fCwN9ia" title="https://t.co/0E3fCwN9ia" target="_blank"&gt;https://t.co/0E3fCwN9ia&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://t.co/jLy8hMeAHY" title="https://t.co/jLy8hMeAHY" target="_blank"&gt;https://t.co/jLy8hMeAHY&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/850393604115881984" data-datetime="2017-04-07T17:03:29+00:00"&gt;April 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PYTHON TIPS: How to Run Python and Ruby on Heroku with Multiple Buildpacks &amp;gt;&amp;gt; &lt;a href="https://t.co/ulskG9SHJY" title="https://t.co/ulskG9SHJY" target="_blank"&gt;https://t.co/ulskG9SHJY&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Ruby" target="_blank"&gt;#Ruby&lt;/a&gt; &lt;a href="https://t.co/w5OBjjQ3iK" title="https://t.co/w5OBjjQ3iK" target="_blank"&gt;https://t.co/w5OBjjQ3iK&lt;/a&gt;&lt;/p&gt;‚Äî Python Programmers (@python_devv) &lt;a href="https://twitter.com/python_devv/status/849688734849282053" data-datetime="2017-04-05T18:22:35+00:00"&gt;April 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@marcel_dmg:" target="_blank"&gt;@marcel_dmg:&lt;/a&gt; Useful guide about preparing "AWS Certified Solutions Architect Associate" certification &lt;a href="https://twitter.com/search/#AWS" target="_blank"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/search/#Certification" target="_blank"&gt;#Certification&lt;/a&gt; &lt;a href="https://t.co/d‚Ä¶" title="https://t.co/d‚Ä¶" target="_blank"&gt;https://t.co/d‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/849744862463307776" data-datetime="2017-04-05T22:05:37+00:00"&gt;April 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;7 Best python libraries of 2017 - ( New &amp;amp; Innovative) &lt;a href="https://t.co/JuiVt1Ce3o" title="https://t.co/JuiVt1Ce3o" target="_blank"&gt;https://t.co/JuiVt1Ce3o&lt;/a&gt; via &lt;a href="https://twitter.com/@dunebook" target="_blank"&gt;@dunebook&lt;/a&gt; &lt;a href="https://t.co/NwpwqQYkrN" title="https://t.co/NwpwqQYkrN" target="_blank"&gt;https://t.co/NwpwqQYkrN&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/850775904196456448" data-datetime="2017-04-08T18:22:36+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django 1.11 released &lt;a href="https://t.co/Eq7ASnJFpx" title="https://t.co/Eq7ASnJFpx" target="_blank"&gt;https://t.co/Eq7ASnJFpx&lt;/a&gt;&lt;/p&gt;‚Äî Django (@djangoproject) &lt;a href="https://twitter.com/djangoproject/status/849300384627773441" data-datetime="2017-04-04T16:39:25+00:00"&gt;April 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Make a dictionary of 2 lists &amp;gt;&amp;gt;&amp;gt; name = ('bob','tim') &amp;gt;&amp;gt;&amp;gt; age = (35,27) &amp;gt;&amp;gt;&amp;gt; d = dict(zip(name,age)) &amp;gt;&amp;gt;&amp;gt; d {'bob': 35, 'tim': 27} by &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/849834299985625092" data-datetime="2017-04-06T04:01:00+00:00"&gt;April 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New PyBites Article: How to Build a Simple &lt;a href="https://twitter.com/search/#Slack" target="_blank"&gt;#Slack&lt;/a&gt; Bot - &lt;a href="https://t.co/aycTca3jEZ" title="https://t.co/aycTca3jEZ" target="_blank"&gt;https://t.co/aycTca3jEZ&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/849381297936007170" data-datetime="2017-04-04T22:00:56+00:00"&gt;April 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;python-alexa: A Python framework for Alexa Development &lt;a href="https://t.co/nVJN4x0jdu" title="https://t.co/nVJN4x0jdu" target="_blank"&gt;https://t.co/nVJN4x0jdu&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/850271943865454592" data-datetime="2017-04-07T09:00:03+00:00"&gt;April 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; for &lt;a href="https://twitter.com/search/#Finance," target="_blank"&gt;#Finance,&lt;/a&gt; Part I: Yahoo Finance... &lt;a href="https://t.co/VeFNZkMsEf" title="https://t.co/VeFNZkMsEf" target="_blank"&gt;https://t.co/VeFNZkMsEf&lt;/a&gt;&lt;/p&gt;‚Äî LearnDataSci (@LearnDataSci) &lt;a href="https://twitter.com/LearnDataSci/status/849702792545652736" data-datetime="2017-04-05T19:18:27+00:00"&gt;April 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Humble Bundle's New Book Collection Helps You Start... &lt;a href="https://t.co/On91MZrTZd" title="https://t.co/On91MZrTZd" target="_blank"&gt;https://t.co/On91MZrTZd&lt;/a&gt; via &lt;a href="https://twitter.com/@TheSloppyGaming" target="_blank"&gt;@TheSloppyGaming&lt;/a&gt; &lt;a href="https://t.co/DNRpmvZU59" title="https://t.co/DNRpmvZU59" target="_blank"&gt;https://t.co/DNRpmvZU59&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/850003212224614406" data-datetime="2017-04-06T15:12:12+00:00"&gt;April 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Apply a method to a list of objects in parallel using multi-processing [Score:8] &lt;a href="https://t.co/nIje0lrueY" title="https://t.co/nIje0lrueY" target="_blank"&gt;https://t.co/nIje0lrueY&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/850667795767595008" data-datetime="2017-04-08T11:13:01+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This might come in handy some time: "Managing Cron Jobs Using Python" &lt;a href="https://t.co/KmhLOBOVYp" title="https://t.co/KmhLOBOVYp" target="_blank"&gt;https://t.co/KmhLOBOVYp&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/850768957422403585" data-datetime="2017-04-08T17:55:00+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Machine Learning: The New Proving Ground for Competitive Advantage - via &lt;a href="https://twitter.com/@techreview" target="_blank"&gt;@techreview&lt;/a&gt; &lt;a href="https://t.co/f4lAiAg72J" title="https://t.co/f4lAiAg72J" target="_blank"&gt;https://t.co/f4lAiAg72J&lt;/a&gt;&lt;/p&gt;‚Äî PyData (@PyData) &lt;a href="https://twitter.com/PyData/status/849309377622310913" data-datetime="2017-04-04T17:15:09+00:00"&gt;April 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I must say this is one of my favorite git commit messages. ;) (suppressing the .idea folder) &lt;a href="https://t.co/2ZUNbkvOan" title="https://t.co/2ZUNbkvOan" target="_blank"&gt;https://t.co/2ZUNbkvOan&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/850449332914368512" data-datetime="2017-04-07T20:44:56+00:00"&gt;April 07, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="safari books"></category><category term="cheatsheet"></category><category term="ruby"></category><category term="heroku"></category><category term="aws"></category><category term="Django"></category><category term="slack"></category><category term="alexa"></category><category term="data science"></category><category term="ebook"></category><category term="cron"></category><category term="machine learning"></category><category term="git"></category></entry><entry><title>Code Challenge 13 - Highest Rated Movie Directors - Review</title><link href="https://pybit.es/codechallenge13_review.html" rel="alternate"></link><published>2017-04-08T23:59:00+02:00</published><updated>2017-04-08T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-08:/codechallenge13_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge13.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge13.html"&gt;Highest Rated Movie Directors&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;You can find our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/13/directors.py"&gt;here&lt;/a&gt;. Some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In get_movies_by_director() we use csv.DictReader to parse the csv file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(MOVIE_DATA) as f:
    for line in csv.DictReader(f):
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use a defaultdict(list) for our initial parsing of movies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m = Movie(title=movie, year=year, score=score)
directors[director].append(m)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_average_scores() returns a directors dict via a dict comprehension (note the &lt;a href="https://github.com/pybites/challenges/commit/959acf258a99730b732eb0915aa2088adf11e143"&gt;subtle refactoring&lt;/a&gt;, glad we had our tests), where keys are (director, mean score) and values their movies. We only take directors with at least MIN_MOVIES.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although Python3 has statistics.mean we rolled our own (_calc_mean) because we first extract the score from the Movie namedtupe and added rounding (although that should maybe go in the print_results function). &lt;/p&gt;
&lt;p&gt;Next time we would use statistics.mean, because the more you leverage the stdlib the better. These considerations happen when coding, reviewing your and others code, good learning. &lt;/p&gt;
&lt;p&gt;Although movies should not be 0 we are defensive by never allowing the denominator to be 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean = sum(ratings) / max(1, len(ratings))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could also write: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean = sum(ratings) / len(ratings) if ratings else 0
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print_results() then prints the desired output. The enumerate is handy to get the sequence numbers for the top NUM_TOP_DIRECTORS directors. You can give it a start with a 2nd argument, 1 in this case. &lt;/p&gt;
&lt;p&gt;We used zfill before to print 01 / 02 etc., but found out that &lt;a href="https://github.com/pybites/challenges/commit/72b4642e24058758530ea463cbd3c0fbe2dfce1d"&gt;you can tackle this in the format syntax&lt;/a&gt;. We might refactor all these formats to use F-string, it would make this a lot cleaner :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again it was nice to work on this code having tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_directors.py
tests pass
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TODOs&lt;/h2&gt;
&lt;p&gt;We realized during the challenge that you could also solve this with SQL or Pandas. We will update the solutions branch when we get around this. It would be nice to give it a try. Of course if you took these (or other) approaches feel free to share your solution &lt;a href="https://github.com/pybites/challenges/compare"&gt;opening a PR against our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;Here is &lt;a href="https://github.com/pybites/challenges/blob/community/13/directors-atakume.py"&gt;another solution by atakume&lt;/a&gt; we merged in our community branch. What we like about this solution is the use of itertools.groupby, doing the sorting outside the print_results function, and the second namedtuple which adds readability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Filmography = namedtuple(&amp;#39;Filmography&amp;#39;, &amp;#39;director movies avg_score&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Next week we will let you play with decorators, a great feature for writing DRY, reusable code. It will be fun :)&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="data analysis"></category><category term="movies"></category><category term="imdb"></category><category term="sort"></category><category term="namedtuples"></category><category term="defaultdict"></category></entry><entry><title>Flask for Loops - Printing Dict Data</title><link href="https://pybit.es/flask-for-loop.html" rel="alternate"></link><published>2017-04-06T20:38:00+02:00</published><updated>2017-04-06T20:38:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-06:/flask-for-loop.html</id><summary type="html">&lt;p&gt;In this post I demo how to create an extremely simple Flask app that prints the contents of a Dict to a web page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to the &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;, this week I took the plunge and dove into Python Flask.&lt;/p&gt;
&lt;p&gt;It‚Äôs not the easiest beast to tame but once you wrap your head around it, it‚Äôs not so bad!&lt;/p&gt;
&lt;p&gt;One of the concepts I struggled with early on was how to return more than ‚Äújust‚Äù a single string to the Flask app web page.&lt;/p&gt;
&lt;h2&gt;Python Setup&lt;/h2&gt;
&lt;p&gt;Check out the full code for this &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I decided I wanted to print out a dict of birthdays. You can see I‚Äôve created a route to a page called ‚Äòbirthdays‚Äô. The function associated with this decorator contains the dict we want to display.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;quot;/birthdays&amp;quot;)
def birthdays():
    dates = {&amp;quot;Julian&amp;quot;: 25, &amp;quot;Bob&amp;quot;: 26, &amp;quot;Dan&amp;quot;: 47, &amp;quot;Cornelius&amp;quot;: 3}
    return render_template(&amp;quot;birthdays.html&amp;quot;, dates=dates)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being Flask, we need to have a templates folder in the same directory that the main.py script is being run from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the templates folder we‚Äôll need to have a birthdays.html file for the above route to work with.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HTML Setup&lt;/h2&gt;
&lt;p&gt;With the main.py file all set up, we can focus on birthdays.html. (Again, all of this is in the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;code Repo&lt;/a&gt;!).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The simplest and most pleasing way to display this data would be in a table. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The stylesheet (style.css) we‚Äôll be using lives in another folder called ‚Äòstatic‚Äô. This folder lives at the same hierarchical level as the templates folder - go ahead and create it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an example, in style.css we have a CSS class just to give the table a slightly thicker border.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.thick-border&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt; &lt;span class="no"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
        &lt;span class="no"&gt;border-collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;collapse&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We can then create the table. The first row will be the table headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered thick-border&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flask in Action&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With the table set up we can now start populating it with the contents of the &lt;em&gt;dates&lt;/em&gt; dict from main.py.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When inserting Python code into the HTML file, we wrap it in {% %} so Flask knows to differentiate it from normal HTML code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To print out the contents of the dict, we can use a for loop. The idea of the for loop stays the same, it‚Äôs just spread out across multiple lines and wrapped in HTML. First we start with the opening of the for loop.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% for k, v in dates.items() %}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We don‚Äôt need to explicitly call &lt;em&gt;print&lt;/em&gt; to read out the values of &lt;em&gt;k&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;. We just need to choose how they‚Äôll be displayed on the page in HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You‚Äôll notice the {{ }} around the variables. This is another flag to Flask that these are Python variables and not a bit of HTML code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then have to close off the for loop with one last bit of special Flask code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% endfor %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Final Result&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This is what the code for the table should look like.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered thick-border&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;dates.items&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Here‚Äôs what the web page will look like.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Table populated by Python dict code" src="https://pybit.es/images/flask-bday-table.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The beauty is that you can add as much data (keys, values) to the dict as you want and the table will always be drawn to match the content. Give it a try!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Learning Points&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask requires that the decorator function you‚Äôre using &lt;strong&gt;returns&lt;/strong&gt; something. It could be something as simple as: &lt;em&gt;return ‚ÄòThis is a string‚Äô&lt;/em&gt;. The point is, data needs to be returned. I struggled to understand how I could return each for loop pass over the dict! After continued research and reading, I learned about the HTML templates and how you write put the Python code there instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unsurprisingly, making something that‚Äôs pleasing to the eye requires some knowledge or experience with HTML and CSS. I was pretty dusty!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the full example you‚Äôll see how it all meshes together - the static and templates folder and the main.py file living above them. Having experience with web dev makes this environment a lot easier to understand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It‚Äôs tough but extremely rewarding to move on from static return lines of just ‚Äúhello world‚Äù to displaying data. That is, moving forward, the data printed by the loop could be generated on the fly. That‚Äôs exciting!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Next up I‚Äôd like to make this interactive. Perhaps have the user enter birthdays via a web form themselves and once completed, have the birthdays print to screen in a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data really should be stored in a database or shelf too, not in a static dict.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get my CSS game on and make this baby pretty!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You‚Äôll be seeing more Flask in the coming weeks (I hope!). I‚Äôd actually like to wrap this for loop around the data set for &lt;a href="http://pybit.es/codechallenge13.html"&gt;this week‚Äôs code challenge&lt;/a&gt;‚Ä¶ hmm‚Ä¶&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;‚Äî Julian&lt;/p&gt;</content><category term="Flask"></category><category term="loops"></category><category term="python"></category><category term="decorators"></category><category term="tutorial"></category><category term="learning"></category></entry><entry><title>How we Automated our 100DaysOfCode Daily Tweet</title><link href="https://pybit.es/100days-autotweet.html" rel="alternate"></link><published>2017-04-05T23:00:00+02:00</published><updated>2017-04-05T23:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-04-05:/100days-autotweet.html</id><summary type="html">&lt;p&gt;In this article I show you a way to automatically tweet your #100DaysOfCode Challenge progress. This saves you some extra time to focus on the coding. Isn't that all what matters?&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article I show you a way to automatically tweet your #100DaysOfCode Challenge progress. This saves you some extra time to focus on the coding. Isn't that all what matters?&lt;/p&gt;
&lt;p&gt;This is day 007 of our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code&lt;/a&gt; challenge. You can follow along by forking &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;our repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;You need pytz, tweepy and requests. You can &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/007/requirements.txt"&gt;pip install -r requirements.txt&lt;/a&gt; if you cloned our repo (after cd-ing in 007). We recommend using &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtualenv&lt;/a&gt; to isolate environments.&lt;/p&gt;
&lt;p&gt;As explained &lt;a href="http://pybit.es/automate-twitter.html"&gt;in a previous article&lt;/a&gt; you need to get a Consumer Key/Secret and Access Token (Secret) from Twitter. I added those to my .bashrc which I load in via os.environ in &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/007/config.py"&gt;config.py&lt;/a&gt;. There I also started a logging handler I use to log outgoing tweets and any exceptions that may occur.&lt;/p&gt;
&lt;h2&gt;The main script&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/007/100day_autotweet.py"&gt;here&lt;/a&gt; and below what I learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As per PEP8 we import stdlib, followed by external modules and own project modules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My server (see deployment below) runs on MT tz and I wanted to talk EMEA times. &lt;a href="https://pypi.python.org/pypi/pytz"&gt;Pytz (World Timezone Definitions for Python)&lt;/a&gt; to the rescue: it made working with timezones very easy: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tz = pytz.timezone(&amp;#39;Europe/Amsterdam&amp;#39;)
now = datetime.datetime.now(tz)
start = datetime.datetime(2017, 3, 29, tzinfo=tz)  # = PyBites 100 days :)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I define some constants in all capital letters with underscores separating words (PEP8). I start to like datetime: calculating dates is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CURRENT_CHALLENGE_DAY = str((now - start).days).zfill(3)
LOG = &amp;#39;https://raw.githubusercontent.com/pybites/100DaysOfCode/master/LOG.md&amp;#39;
LOG_ENTRY = re.compile(r&amp;#39;\[(?P&amp;lt;title&amp;gt;.*?)\]\((?P&amp;lt;day&amp;gt;\d+)\)&amp;#39;)
REPO_URL = &amp;#39;https://github.com/pybites/100DaysOfCode/tree/master/&amp;#39;
TWEET_LEN = 140
TWEET_LINK_LEN = 23
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Where would we be without requests? Here I get the LOG.md file from &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;our repo&lt;/a&gt;, just a single line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_log():
    return requests.get(LOG).text.split(&amp;#39;\n&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I get the script title and day string from the line in LOG.md that matches the exact day string (today = '007'):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_day_progress(html):
    lines = [line.strip()
            for line in html
            if line.strip()]

    for line in lines:
        day_entry = line.strip(&amp;#39;|&amp;#39;).split(&amp;#39;|&amp;#39;)[0].strip()
        if day_entry == CURRENT_CHALLENGE_DAY:
            return LOG_ENTRY.search(line).groupdict()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I create the tweet. I added some code to shorten the script title if the total tweet size is too long:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;ht1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;ht2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;#100DaysOfCode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;#Python&amp;#39;&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;REPO_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s s-Atom"&gt;day&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;allowed_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;TWEET_LEN&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;TWEET_LINK_LEN&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;{} - Day {}: {} {} {}&amp;#39;&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;ht1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;ht2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;surplus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s s-Atom"&gt;allowed_len&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;surplus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;new_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[:-(&lt;/span&gt;&lt;span class="s s-Atom"&gt;surplus&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;new_title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="s s-Atom"&gt;tweet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tweet_status() sends the tweet. We use the imported api object (from config.py) to send the tweet and we log an info if success, or error if any exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tweet_status(tweet):
    try:
        api.update_status(tweet)
        logging.info(&amp;#39;Posted to Twitter&amp;#39;)
    except Exception as exc:
        logging.error(&amp;#39;Error posting to Twitter: {}&amp;#39;.format(exc))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We drive the script under main (= if script is run directly/standalone, not imported by another module). I set up some variables to allow for testing / dry runs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MacBook&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethostname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dry&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If test I use my local LOG file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    if test:
        log = os.path.basename(LOG)
        with open(log) as f:
            html = f.readlines()
    else:
        html = get_log()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If for some reason I don't get a valid return from get_day_progress() I abort the script, logging the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    m = get_day_progress(html)
    if not m:
        logging.error(&amp;#39;Error getting day progress from log&amp;#39;)
        sys.exit(1)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I create the tweet. If dry run, I just log it, else it tweets automatically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    tweet = create_tweet(m)
    if test:
        logging.info(&amp;#39;Test: tweet to send: {}&amp;#39;.format(tweet))
    else:
        tweet_status(tweet)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;On my server I had to do some magic to get it all working: source .bashrc to load in the ENV vars, export PYTHONPATH, and specify the full path to python3. &lt;a href="http://unix.stackexchange.com/a/27291"&gt;As explained here&lt;/a&gt;: "Cron knows nothing about your shell; it is started by the system, so it has a minimal environment."&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ crontab -l
...
&lt;span class="m"&gt;34&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt; * * * &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.bashrc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin/python3/lib/python3.5/site-packages &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/code/100days/007 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin/python3/bin/python3.5 100day_autotweet.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;What a coincidence: as I write this our &lt;a href="https://twitter.com/pybites/status/849721815538712576"&gt;today's progress tweet just went out&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="my automated tweet" src="https://pybit.es/images/auto-tweet.png"&gt;&lt;/p&gt;
&lt;h2&gt;Logging&lt;/h2&gt;
&lt;p&gt;The cool thing about the logging module is that you get the external packages' logging for free. When I look at the log I see a lot more than my script's logging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi 100day_autotweet.log
...
...
&lt;span class="m"&gt;14&lt;/span&gt;:34:02 tweepy.binder INFO     PARAMS: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;: b&lt;span class="s1"&gt;&amp;#39;#100DaysOfCode - Day 007: script to automatically tweet 100DayOfCode progress tweet https://github.com/pybites/100DaysOfCode/tree/master/007 #Python&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
...
many more log entries ...
...
&lt;span class="m"&gt;14&lt;/span&gt;:34:02 requests.packages.urllib3.connectionpool DEBUG    https://api.twitter.com:443 &lt;span class="s2"&gt;&amp;quot;POST /1.1/statuses/update.json?status=%23100DaysOfCode+-+Day+007%3A+script+to+automatically+tweet+100DayOfCode+progress+tweet+https%3A%2F%2Fgithub.com%2Fpybites%2F100DaysOfCode%2Ftree%2Fmaster%2F007+%23Python HTTP/1.1&amp;quot;&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="m"&gt;2693&lt;/span&gt;
&lt;span class="m"&gt;14&lt;/span&gt;:34:02 root         INFO     Posted to &lt;span class="nv"&gt;Twitter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; my message
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can mute these by raising the log level (INFO or higher) in logging.basicConfig (&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/007/config.py"&gt;config.py&lt;/a&gt;). See &lt;a href="https://docs.python.org/3/library/logging.html"&gt;the docs&lt;/a&gt; for more info.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I hope this taught you a bite of Python and it inspired you to automate your 100DaysOfCode and/or other tweets. Let us know how it goes ... Happy coding!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="twitter"></category><category term="automation"></category><category term="tools"></category><category term="100days"></category><category term="logging"></category><category term="tweepy"></category><category term="pytz"></category></entry><entry><title>How to Build a Simple Slack Bot</title><link href="https://pybit.es/simple-chatbot.html" rel="alternate"></link><published>2017-04-04T23:30:00+02:00</published><updated>2017-04-04T23:30:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-04-04:/simple-chatbot.html</id><summary type="html">&lt;p&gt;I was playing with Slack's Real Time Messaging API the other day. Building a bot is pretty easy. In this article a simple example.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was playing with Slack's Real Time Messaging API the other day. Building a bot is pretty easy. In this article a simple example.&lt;/p&gt;
&lt;h2&gt;Bots are hot&lt;/h2&gt;
&lt;p&gt;This was an interesting coding exercise, but also keep in mind its relevance. Bots are hot, &lt;a href="http://www.oreilly.com/data/free/what-are-conversational-bots.csp?imm_mid=0ef9cf&amp;amp;cmp=em-data-free-na-ainy17_nurture_em2_what_are_conversational_bots"&gt;people have become comfortable with conversational interfaces&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some commands our bot listens to" src="https://pybit.es/images/slackbot.gif"&gt;&lt;/p&gt;
&lt;p&gt;(GIF made with &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/003"&gt;100DaysOfCode day 003 script&lt;/a&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Slack API&lt;/h2&gt;
&lt;p&gt;About Slack's &lt;a href="https://api.slack.com/rtm"&gt;Real Time Messaging API&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Real Time Messaging API is a WebSocket-based API that allows you to receive events from Slack in real time and send messages as users. It's sometimes referred to as simply the "RTM API".  It is the basis for all Slack clients. It's also commonly used with the bot user integration to create helper bots for your team.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;Read &lt;a href="https://api.slack.com/bot-users"&gt;here&lt;/a&gt; about Bot Users, you need to &lt;a href="https://my.slack.com/services/new/bot"&gt;create a new bot user&lt;/a&gt; first. This will give you an API Token. Keep this private! I added mine to .bashrc to keep it out of version control. I retrieve it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;slack_client = SlackClient(os.environ.get(&amp;#39;SLACK_BOT_TOKEN&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Secondly you need to pip install slackclient, I also used &lt;a href="https://github.com/pybites/slackbot/blob/master/requirements.txt"&gt;some other modules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I took the &lt;a href="https://github.com/pybites/slackbot/blob/master/starterbot.py"&gt;starterbot code&lt;/a&gt; I found in this excellent article: &lt;a href="https://www.fullstackpython.com/blog/build-first-slack-bot-python.html"&gt;How to Build Your First Slack Bot with Python&lt;/a&gt;. This made it a lot easier because it catered for all the initial setup, listening for mentions of the bot, intercepting targeted messages.&lt;/p&gt;
&lt;p&gt;Only thing you have to do is to &lt;a href="https://github.com/pybites/slackbot/blob/master/get_botid.py"&gt;get the BOT ID&lt;/a&gt; and store it in your login script (in my case .bashrc):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python get_botid.py
Bot ID &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pybitesbot&amp;#39;&lt;/span&gt; is XYZ

&lt;span class="c1"&gt;# .bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SLACK_BOT_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ABC      &lt;span class="c1"&gt;# first step&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;BOT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XYZ               &lt;span class="c1"&gt;#¬†as retrieved from previous command&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WEATHER_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;          &lt;span class="c1"&gt;# used for one of the command scripts, see below&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Bot actions&lt;/h2&gt;
&lt;p&gt;I wrote a bunch of scripts which respond to &lt;a href="https://github.com/pybites/slackbot/tree/master/commands"&gt;different commands&lt;/a&gt;, some also as part of our &lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode challenge&lt;/a&gt;. I put them in the commands subdirectory. This structure makes it easy to add more commands over time.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://github.com/pybites/slackbot/blob/master/pybitesbot.py"&gt;main bot script&lt;/a&gt; I import all the commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;commands.mood&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_mood&lt;/span&gt;  &lt;span class="c1"&gt;# just a silly one&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;commands.special&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;celebration&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;commands.articles&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_num_posts&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;commands.challenge&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_tweet&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;commands.weather&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_weather&lt;/span&gt;  &lt;span class="c1"&gt;# bot reports more sun and later sunset Spain vs Australia (sorry Julian haha)&lt;/span&gt;

&lt;span class="c1"&gt;# and put them in a COMMANDS dict&lt;/span&gt;
&lt;span class="n"&gt;cmd_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mood&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;celebration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;num_posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;100day_tweet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;weather&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cmd_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_mood&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;celebration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_num_posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_weather&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;COMMANDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_functions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then overwrote the (provided) handle_command function to have the bot respond to various commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def handle_command(cmd, channel):

    cmd = cmd.split()
    cmd, args = cmd[0], cmd[1:]

    if cmd in COMMANDS:
        if args:
            response = COMMANDS[cmd](*args)
        else:
            response = COMMANDS[cmd]()
    else:
        response = (&amp;#39;Not sure what you mean? &amp;#39;
            &amp;#39;I can help you with these commands:\n&amp;#39;
            &amp;#39;{}&amp;#39;.format(&amp;#39;\n&amp;#39;.join(cmd_names)))

    slack_client.api_call(&amp;quot;chat.postMessage&amp;quot;, channel=channel,
                        text=response, as_user=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lastly under main this starts the loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if slack_client.rtm_connect():
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;And that's it for the code. On my server I run the bot with nohup to keep it running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nohup python3 pybitesbot.py &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Update: I found an issue where the bot stopped working, so I added &lt;a href=""&gt;a little script&lt;/a&gt; (based on this &lt;a href="http://stackoverflow.com/a/697064/1128469"&gt;SO answer&lt;/a&gt;) to respawn it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat slackbot.sh
&lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/bin/python3/bin/python3.5 pybitesbot.py&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Slack bot crashed with exit code &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;.  Respawning..&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
    sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

$ ./slackbot.sh
StarterBot connected and running!

... pressing ctrl + c

^CTraceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
File &lt;span class="s2"&gt;&amp;quot;pybitesbot.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;44&lt;/span&gt;, in &amp;lt;module&amp;gt;
    time.sleep&lt;span class="o"&gt;(&lt;/span&gt;READ_WEBSOCKET_DELAY&lt;span class="o"&gt;)&lt;/span&gt;
    KeyboardInterrupt

    Slack bot crashed with &lt;span class="nb"&gt;exit&lt;/span&gt; code &lt;span class="m"&gt;1&lt;/span&gt;.  Respawning..   &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; thanks &lt;span class="k"&gt;for&lt;/span&gt; the shell script
    StarterBot connected and running!

&lt;span class="c1"&gt;# that was for demo, I still use nohup to leave the shell&lt;/span&gt;
$ nohup slackbot.sh  &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;And there you go ... as you can see we had some fun with it the other day :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="bot smart ass I" src="https://pybit.es/images/slack_response1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bot smart ass II" src="https://pybit.es/images/slack_response2.png"&gt;&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Although this tutorial showed a simple deterministic bot, this really inspired me to think about ways we can make our pybitesbot smarter and help us automate tasks. Or what if we open up a Slack for our community and we have a bot helping people with common Python questions? That would be really cool!&lt;/p&gt;
&lt;p&gt;I will do a part 2 when we have more progress in this space ...&lt;/p&gt;
&lt;p&gt;The full code of the bot is &lt;a href="https://github.com/pybites/slackbot"&gt;here&lt;/a&gt;. We encourage you to fork it and start building your own cool bot (and tell us about it in the comments below).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="slack"></category><category term="API"></category><category term="bot"></category><category term="chatbot"></category><category term="deployment"></category><category term="shell"></category><category term="nohup"></category><category term="automation"></category></entry><entry><title>Code Challenge 13 - Highest Rated Movie Directors</title><link href="https://pybit.es/codechallenge13.html" rel="alternate"></link><published>2017-04-03T00:25:00+02:00</published><updated>2017-04-03T00:25:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-03:/codechallenge13.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's (&lt;a href="http://pybit.es/codechallenge12.html"&gt;tictactoe game&lt;/a&gt;), we'd like to sharpen your data analysis skills this week by parsing a movie data set in search for highest rated directors. Enjoy and we review solutions end of this week.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's &lt;a href="http://pybit.es/codechallenge12.html"&gt;tictactoe game&lt;/a&gt;, we'd like to sharpen your data analysis skills this week by parsing a movie data set in search for highest rated directors. Enjoy and we review solutions end of this week.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;There is this great ML article &lt;a href="https://blog.nycdatascience.com/student-works/machine-learning/movie-rating-prediction/"&gt;Predict Movie Rating&lt;/a&gt;. In this week's code challenge we use its data set to get the 20 highest rated directors based on their average movie IMDB ratings.&lt;/p&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As mentioned in the article the dataset is &lt;a href="https://raw.githubusercontent.com/sundeepblue/movie_rating_prediction/master/movie_metadata.csv"&gt;here&lt;/a&gt;, but we provided a copy in the repo's 13/ subfolder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse the movie_metadata.csv, using csv.DictReader you get a bunch of OrderedDicts from which you only need the following k,v pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OrderedDict([...
            (&amp;#39;director_name&amp;#39;, &amp;#39;Lawrence Kasdan&amp;#39;),   
            ...
            (&amp;#39;movie_title&amp;#39;, &amp;#39;Mumford\xa0&amp;#39;),
            ...
            (&amp;#39;title_year&amp;#39;, &amp;#39;1999&amp;#39;),
            ...
            (&amp;#39;imdb_score&amp;#39;, &amp;#39;6.9&amp;#39;),
            ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only consider directors with a minimum of 4 movies, otherwise you get misrepresentative data. However going to min 5 movies we miss Sergio Leone :(&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take movies of year &amp;gt;= 1960.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Print the top 20 highest rated directors with their movies ordered desc on rating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should look something like this (indeed some awesome movies here!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python directors.py

&lt;span class="m"&gt;01&lt;/span&gt;. Sergio Leone                                         &lt;span class="m"&gt;8&lt;/span&gt;.5
------------------------------------------------------------
&lt;span class="m"&gt;1966&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Good, the Bad and the Ugly¬†                    &lt;span class="m"&gt;8&lt;/span&gt;.9
&lt;span class="m"&gt;1968&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Once Upon a Time in the West¬†                      &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;1984&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Once Upon a Time in America¬†                       &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;1964&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; A Fistful of Dollars¬†                              &lt;span class="m"&gt;8&lt;/span&gt;.0

&lt;span class="m"&gt;02&lt;/span&gt;. Christopher Nolan                                    &lt;span class="m"&gt;8&lt;/span&gt;.4
------------------------------------------------------------
&lt;span class="m"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Dark Knight¬†                                   &lt;span class="m"&gt;9&lt;/span&gt;.0
&lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Inception¬†                                         &lt;span class="m"&gt;8&lt;/span&gt;.8
&lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Interstellar¬†                                      &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Dark Knight Rises¬†                             &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2006&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Prestige¬†                                      &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Memento¬†                                           &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Batman Begins¬†                                     &lt;span class="m"&gt;8&lt;/span&gt;.3
&lt;span class="m"&gt;2002&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Insomnia¬†                                          &lt;span class="m"&gt;7&lt;/span&gt;.2

&lt;span class="m"&gt;03&lt;/span&gt;. Hayao Miyazaki                                       &lt;span class="m"&gt;8&lt;/span&gt;.2
------------------------------------------------------------
&lt;span class="m"&gt;2001&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Spirited Away¬†                                     &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;1997&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Princess Mononoke¬†                                 &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Howl&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s Moving Castle¬†                              &lt;span class="m"&gt;8&lt;/span&gt;.2
&lt;span class="m"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Ponyo¬†                                             &lt;span class="m"&gt;7&lt;/span&gt;.7

&lt;span class="m"&gt;04&lt;/span&gt;. Quentin Tarantino                                    &lt;span class="m"&gt;8&lt;/span&gt;.2
------------------------------------------------------------
&lt;span class="m"&gt;1994&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Pulp Fiction¬†                                      &lt;span class="m"&gt;8&lt;/span&gt;.9
&lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Django Unchained¬†                                  &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;1992&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Reservoir Dogs¬†                                    &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;2009&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Inglourious Basterds¬†                              &lt;span class="m"&gt;8&lt;/span&gt;.3
&lt;span class="m"&gt;2003&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Kill Bill: Vol. &lt;span class="m"&gt;1&lt;/span&gt;¬†                                 &lt;span class="m"&gt;8&lt;/span&gt;.1
&lt;span class="m"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Kill Bill: Vol. &lt;span class="m"&gt;2&lt;/span&gt;¬†                                 &lt;span class="m"&gt;8&lt;/span&gt;.0
&lt;span class="m"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Hateful Eight¬†                                 &lt;span class="m"&gt;7&lt;/span&gt;.9
&lt;span class="m"&gt;1997&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Jackie Brown¬†                                      &lt;span class="m"&gt;7&lt;/span&gt;.5

...
&lt;span class="m"&gt;16&lt;/span&gt; more
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We included &lt;a href="https://github.com/pybites/challenges/tree/master/13/directors-template.py"&gt;a template&lt;/a&gt; but maybe you want to code this up from scratch and/or use your favorite power tools (Pandas, SQL, etc.)&lt;/p&gt;
&lt;p&gt;We also included &lt;a href="https://github.com/pybites/challenges/blob/master/13/test_directors.py"&gt;some tests&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt; and link to it in our end-of-the-week review.&lt;/p&gt;
&lt;h3&gt;Archive&lt;/h3&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="data analysis"></category><category term="movies"></category><category term="rating"></category></entry><entry><title>Twitter digest 2017 week 13</title><link href="https://pybit.es/twitter_digest_201713.html" rel="alternate"></link><published>2017-04-02T12:29:00+02:00</published><updated>2017-04-02T12:29:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-02:/twitter_digest_201713.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hone your &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; skills by joining us in our &lt;a href="https://twitter.com/search/#100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; challenge - &lt;a href="https://t.co/xfQpzdmmEU" title="https://t.co/xfQpzdmmEU" target="_blank"&gt;https://t.co/xfQpzdmmEU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/848083721483898880" data-datetime="2017-04-01T08:04:50+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to write a web service using Python Flask &lt;a href="https://t.co/co7Kq0Gz94" title="https://t.co/co7Kq0Gz94" target="_blank"&gt;https://t.co/co7Kq0Gz94&lt;/a&gt; by &lt;a href="https://twitter.com/@tmclaughbos" target="_blank"&gt;@tmclaughbos&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/847933285040668672" data-datetime="2017-03-31T22:07:03+00:00"&gt;March 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@marcel_dmg:" target="_blank"&gt;@marcel_dmg:&lt;/a&gt; There Are Three Different Kinds Of Companies Working On Machine Learning Today &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://t.co/e‚Ä¶" title="https://t.co/e‚Ä¶" target="_blank"&gt;https://t.co/e‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/847571671779115009" data-datetime="2017-03-30T22:10:08+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Mechanize Cheat Sheet &lt;a href="https://t.co/B8GiTUG44j" title="https://t.co/B8GiTUG44j" target="_blank"&gt;https://t.co/B8GiTUG44j&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#modules" target="_blank"&gt;#modules&lt;/a&gt; &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://t.co/8ZRh9PZz2f" title="https://t.co/8ZRh9PZz2f" target="_blank"&gt;https://t.co/8ZRh9PZz2f&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/846717943555743746" data-datetime="2017-03-28T13:37:43+00:00"&gt;March 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An introduction to Python on Android - Android Autho... &lt;a href="https://t.co/9atyyJP1RN" title="https://t.co/9atyyJP1RN" target="_blank"&gt;https://t.co/9atyyJP1RN&lt;/a&gt; via &lt;a href="https://twitter.com/@sharewithshyam" target="_blank"&gt;@sharewithshyam&lt;/a&gt; &lt;a href="https://t.co/OYktNpGs26" title="https://t.co/OYktNpGs26" target="_blank"&gt;https://t.co/OYktNpGs26&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/848095978104213504" data-datetime="2017-04-01T08:53:32+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Understanding Class and Instance Va... &lt;a href="https://t.co/RWwBy080kt" title="https://t.co/RWwBy080kt" target="_blank"&gt;https://t.co/RWwBy080kt&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/847560816052195329" data-datetime="2017-03-30T21:27:00+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Short Guide to Navigating the Jupyter Ecosystem &lt;a href="https://t.co/5IutN1sbVH" title="https://t.co/5IutN1sbVH" target="_blank"&gt;https://t.co/5IutN1sbVH&lt;/a&gt; &lt;a href="https://t.co/rRQnpZp62l" title="https://t.co/rRQnpZp62l" target="_blank"&gt;https://t.co/rRQnpZp62l&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/847964764429053953" data-datetime="2017-04-01T00:12:08+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python's" target="_blank"&gt;#Python's&lt;/a&gt; Instance, Class, and Static Methods Demystified. Awesome new blog post from the &lt;a href="https://twitter.com/@RealPython" target="_blank"&gt;@RealPython&lt;/a&gt; folks &lt;a href="https://t.co/GWSBxtXBKR" title="https://t.co/GWSBxtXBKR" target="_blank"&gt;https://t.co/GWSBxtXBKR&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/847553284516786177" data-datetime="2017-03-30T20:57:04+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Simple Guide for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Packaging &lt;a href="https://t.co/XGOO999B52" title="https://t.co/XGOO999B52" target="_blank"&gt;https://t.co/XGOO999B52&lt;/a&gt; &lt;a href="https://t.co/dQBMG3pgvx" title="https://t.co/dQBMG3pgvx" target="_blank"&gt;https://t.co/dQBMG3pgvx&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/848364700219850752" data-datetime="2017-04-02T02:41:21+00:00"&gt;April 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to extract all the emojis from text? [Score:14] &lt;a href="https://t.co/sxTf3CcxIJ" title="https://t.co/sxTf3CcxIJ" target="_blank"&gt;https://t.co/sxTf3CcxIJ&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/848288621455175680" data-datetime="2017-04-01T21:39:02+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Error Handling Cheat Sheet &amp;gt;&amp;gt; &lt;a href="https://t.co/Z5XSiMspv1" title="https://t.co/Z5XSiMspv1" target="_blank"&gt;https://t.co/Z5XSiMspv1&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learnpython" target="_blank"&gt;#learnpython&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/848384423691255813" data-datetime="2017-04-02T03:59:43+00:00"&gt;April 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Replace substrings: &amp;gt;&amp;gt;&amp;gt; s = 'old old old' &amp;gt;&amp;gt;&amp;gt; r = s.replace('old', 'new') &amp;gt;&amp;gt;&amp;gt; r 'new new new' &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/LRs0oR9Y0f" title="https://t.co/LRs0oR9Y0f" target="_blank"&gt;https://t.co/LRs0oR9Y0f&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/847297709660819458" data-datetime="2017-03-30T04:01:30+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn Scrapy - video series &lt;a href="https://t.co/kmsi6O0F4v" title="https://t.co/kmsi6O0F4v" target="_blank"&gt;https://t.co/kmsi6O0F4v&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/847523835343724545" data-datetime="2017-03-30T19:00:03+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just found out about a new twitter-like social network, &lt;a href="https://twitter.com/@djangoproject" target="_blank"&gt;@djangoproject&lt;/a&gt; powered: &lt;a href="https://t.co/UwMbNvLYpg" title="https://t.co/UwMbNvLYpg" target="_blank"&gt;https://t.co/UwMbNvLYpg&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/847977643261571073" data-datetime="2017-04-01T01:03:19+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Happy &lt;a href="https://twitter.com/search/#AprilFoolsDay!" target="_blank"&gt;#AprilFoolsDay!&lt;/a&gt; &lt;a href="https://t.co/EwdXsFktZx" title="https://t.co/EwdXsFktZx" target="_blank"&gt;https://t.co/EwdXsFktZx&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/848022361983025153" data-datetime="2017-04-01T04:01:01+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="beginners"></category><category term="Django"></category><category term="machine learning"></category><category term="mechanize"></category><category term="classes"></category><category term="Jupiter"></category><category term="cheat sheet"></category><category term="scrapy"></category><category term="data science"></category><category term="flask"></category><category term="tutorials"></category><category term="python"></category></entry><entry><title>Code Challenge 12 - Build a Tic-tac-toe Game - Review</title><link href="https://pybit.es/codechallenge12_review.html" rel="alternate"></link><published>2017-04-01T17:00:00+02:00</published><updated>2017-04-01T17:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-01:/codechallenge12_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge12.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge12.html"&gt;Build a Tic-tac-toe Game&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;You can find our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/12/tictactoe.py"&gt;here&lt;/a&gt;. This was great learning! Here are some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We went for the AI opponent to play against. Not sure if it is unbeatable, but it has some 'intelligence' because it knows when to win, block you or take the next best moves (more on this later). We need to know a score for each position which we calculate by counting the number of times each position is in a winning combination:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WINNING_COMBINATIONS = (
    (7, 8, 9), (4, 5, 6), (1, 2, 3),
    (7, 4, 1), (8, 5, 2), (9, 6, 3),
    (1, 5, 9), (7, 5, 3),
)

POSITION_VALUES = Counter(
    itertools.chain(*WINNING_COMBINATIONS)
)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like Hangman, you have to keep state, so a class worked best for us and it is important to use a suitable data structure: a list of key numbers in the order of a typical key pad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;VALID_POSITIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt;:

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VALID_POSITIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;Simple tictactoe game, board positions are like keyboard&lt;/span&gt;
&lt;span class="s1"&gt;                7 8 9&lt;/span&gt;
&lt;span class="s1"&gt;                4 5 6&lt;/span&gt;
&lt;span class="s1"&gt;                1 2 3&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kd"&gt;@clear_screen&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;:&lt;span class="kt"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;1&lt;/span&gt;:&lt;span class="kt"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The decorator is probably overkill but we use print(game) in two places so we did not want to duplicate code nor did we feel it was pure to clear the screen as part of __str__ (OK maybe we exaggerated, but the &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;decorator&lt;/a&gt; is a useful feature you probably end up using!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probably the most important method is to determine if there is a win state. is_win() loops over all winning combinations and if there is not a DEFAULT (_) in the 3 positions and they are of the same ('O' or 'X') we have a win:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_win(self):
    for combo in WINNING_COMBINATIONS:
        a, b, c = combo
        combo_vals = set([self.board[a], self.board[b], self.board[c]])
        if DEFAULT not in combo_vals and len(combo_vals) == 1:
            return True
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under main we drive the interface. It is one of the few times we choose a "for / else" construct, which some advice against. However here we liked it because there is a clear use case: if we break out of the for loop we have a win, else we ended performing all max 9 turns/moves, so we enter the for's else = game ends in 'draw'. The advantage of this approach is that we did not have to calculate the 'draw' scenario. We separated computer vs manual into 2 methods: ai_move() and manual_move():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while True:
    game = TicTacToe()

    turns = itertools.cycle([first, second])
    print(game)
    for _ in VALID_POSITIONS:
        player = next(turns)
        if player == COMPUTER:
            game.ai_move()
        else:
            game.manual_move()
        print(game)
        if game.is_win():
            print(&amp;#39;Player {} wins&amp;#39;.format(player))
            break
    else:  # for / else is frowned upon, I do like it here though!
        print(&amp;#39;Draw&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The AI bit was the most interesting part. We went not as far as the full 8 steps in &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy"&gt;tictactoe's strategy&lt;/a&gt;, yet this will give you a bit of challenge. The computer checks first if it can win (end) the game, then if the player can win, if so prevent (block) that. If none of these two situations, it takes the best next move based on the before mentioned POSITION_VALUES which is a counter so its most_common() method returns most valuable positions first. Splitting this in multiple methods makes it easier maintainable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def ai_move(self):
    self._win_or_block() or self._take_best_next_free_pos()

def _win_or_block(self):
    for combo in WINNING_COMBINATIONS:
        a, b, c = combo
        combo_vals = [self.board[a], self.board[b], self.board[c]]
        # can only use unitiated positions
        if DEFAULT not in combo_vals:
            continue
        if combo_vals.count(COMPUTER) == 2:
            return self._update_board(combo, combo_vals)
        if combo_vals.count(PLAYER) == 2:
            return self._update_board(combo, combo_vals)
    return False

def _take_best_next_free_pos(self):
    for pos, _ in POSITION_VALUES.most_common():
        if self.board[pos] == DEFAULT:
            self.board[pos] = COMPUTER
            return True
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again our full solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/12/tictactoe.py"&gt;here&lt;/a&gt;. Let us know if you have any questions or if you spot anything we could have done better.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;Here are some other ways to do it: from our &lt;a href="https://github.com/pybites/challenges/blob/community/12/tictactoe-atakume.py"&gt;community branch&lt;/a&gt; (remember you can submit code by PR!) and &lt;a href="https://redd.it/61o56j"&gt;via reddit comment&lt;/a&gt;). Reading other solutions to the same problem (as well as coding styles) is a great way to learn.&lt;/p&gt;
&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Next week you will train your data analysis skills by parsing a movie data set. It will be fun :)&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="tictactoe"></category><category term="AI"></category></entry><entry><title>100 Days of PyBites, 100 Days of Code</title><link href="https://pybit.es/special-100days.html" rel="alternate"></link><published>2017-03-29T20:04:00+02:00</published><updated>2017-03-29T20:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-29:/special-100days.html</id><summary type="html">&lt;p&gt;In celebration of PyBites being around for 100 days we‚Äôre taking on the 100 Days of Code Challenge!&lt;/p&gt;</summary><content type="html">&lt;p&gt;PyBites is 100 days old! It feels like just yesterday we submitted our &lt;a href="http://pybit.es/hello-world.html"&gt;first post&lt;/a&gt; for the world to see (pretty bland amirite?!). Good times!&lt;/p&gt;
&lt;h2&gt;Let‚Äôs Celebrate with some Code!&lt;/h2&gt;
&lt;p&gt;To celebrate, we‚Äôre going to take on the &lt;a href="https://medium.freecodecamp.com/join-the-100daysofcode-556ddb4579e4"&gt;100 Days of Code Challenge&lt;/a&gt;! &lt;/p&gt;
&lt;p&gt;We‚Äôre pretty sure we already do the bare minimum for this challenge though. Coding and learning daily right? (That‚Äôs what PyBites is all about!)&lt;/p&gt;
&lt;p&gt;As such, we‚Äôre going to put a PyBites spin on the challenge. Not only are we going to code daily but we‚Äôre going to actually write a small &lt;em&gt;script&lt;/em&gt; daily!&lt;/p&gt;
&lt;h2&gt;A Big Ask!&lt;/h2&gt;
&lt;p&gt;This is a pretty big ask given we have day jobs, families and the PyBites update schedule. That‚Äôs why the task will be split between the two of us.&lt;/p&gt;
&lt;p&gt;We‚Äôve created a &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;Github Repo&lt;/a&gt; to track our 100 days of code. Feel free to check it out starting tomorrow.&lt;/p&gt;
&lt;h2&gt;What kind of scripts?&lt;/h2&gt;
&lt;p&gt;The scripts will be wide ranging but will fall into the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scripts that scratch our own itch&lt;/li&gt;
&lt;li&gt;Automating the boring stuff (Inspired to do so by the &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;book&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;System Administration&lt;/li&gt;
&lt;li&gt;Web Scraping / APIs&lt;/li&gt;
&lt;li&gt;New Modules&lt;/li&gt;
&lt;li&gt;File Manipulation&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/issues/new"&gt;Your ideas&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complexity wise, it‚Äôs all about the solution. Some will be as simple as a Fibonacci sequence generator or a simple recursion function to search a file tree.&lt;/p&gt;
&lt;p&gt;The point is to get coding to hone our Python skills. We already cover the learning side of things with PyBites in general!&lt;/p&gt;
&lt;h2&gt;Join Us!&lt;/h2&gt;
&lt;p&gt;If you‚Äôve been thinking of doing the 100 Days of Code Challenge then why not start with us?&lt;/p&gt;
&lt;p&gt;You can follow along by forking &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;our repo&lt;/a&gt;. We‚Äôll also be &lt;a href="https://twitter.com/pybites"&gt;tweeting&lt;/a&gt; our updates daily.&lt;/p&gt;
&lt;p&gt;If getting commit credit on your GitHub account matters then you can use our &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/init.py"&gt;init script&lt;/a&gt; to create your own repo.&lt;/p&gt;
&lt;p&gt;Either way, &lt;strong&gt;THANK YOU&lt;/strong&gt; for being with us over the past 100 days! We love what we‚Äôve accomplished so far and we look forward to the next 100 days as there‚Äôs always something new to learn.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python (for 100 days)!&lt;/p&gt;
&lt;p&gt;‚Äî Julian and Bob&lt;/p&gt;
&lt;p&gt;PS: Notice the purple side bar? Just a simple Pelican theme hack ;) It's our way of celebrating special occasions!&lt;/p&gt;</content><category term="news"></category><category term="special"></category><category term="challenge"></category></entry><entry><title>5 Vim Tricks to Speed up Your Python Development</title><link href="https://pybit.es/vim-tricks.html" rel="alternate"></link><published>2017-03-28T09:00:00+02:00</published><updated>2017-03-28T09:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-28:/vim-tricks.html</id><summary type="html">&lt;p&gt;In this article 5 Vim shortcuts to speed up your Python development.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article 5 Vim shortcuts to speed up your Python development. These techniques are saving me tons of repeated cycles allowing me to better concentrate on the important: coding. &lt;/p&gt;
&lt;p&gt;Vim's learning curve might be steep, but with practice you start to &lt;a href="http://www.amazon.com/dp/1680501275/?tag=pyb0f-20"&gt;'edit text at the speed of light'&lt;/a&gt; which makes you a better developer. This is not an article about what is the best editor, there are other awesome options: Emacs, PyCharm, Sublime ... I just love Vim and use it for almost all my editing. &lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;Before diving in you need to know what a "Leader Key" is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The "Leader key" is a way of extending the power of VIM's shortcuts by using sequences of keys to perform a command. The default leader key is backslash. Therefore, if you have a map of &lt;Leader&gt;Q, you can perform that action by typing \Q. - &lt;a href="http://stackoverflow.com/questions/1764263/what-is-the-leader-in-a-vimrc-file"&gt;StackOverflow answer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I mapped mine to comma using this in my vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let mapleader = &amp;quot;,&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So when I provide mappings like ,p ,f ,a and you use another mapleader, replace my comma with your key.&lt;/p&gt;
&lt;p&gt;Regarding plugins: it's recommended to use &lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt;, a Vim plugin manager. See RealPython's &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;great introduction&lt;/a&gt; to this tool and a powerful Vim environment setup overall.&lt;/p&gt;
&lt;h2&gt;1. Save and run Python&lt;/h2&gt;
&lt;p&gt;Add this to your vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap ,p :w&amp;lt;CR&amp;gt;:!python3 %&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It first saves the output (:w), then runs (!) the current script (%)&lt;/p&gt;
&lt;p&gt;For Python 2 I got another shortcut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap ,2 :w&amp;lt;CR&amp;gt;:!python2.7 %&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also have ,v to run the Python of my active &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtual env&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap ,v :w&amp;lt;CR&amp;gt;:!venv/bin/python %&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Flake8 check&lt;/h2&gt;
&lt;p&gt;As featured in our &lt;a href="http://pybit.es/pep8.html"&gt;pep8 article&lt;/a&gt; I find it very useful to flake8 my code before committing. If you have not heard of &lt;a href="https://pypi.python.org/pypi/flake8"&gt;flake8&lt;/a&gt;, it is "the modular source code checker", a wrapper around PyFlakes, pycodestyle and Ned Batchelder‚Äôs McCabe script. You need the &lt;a href="https://github.com/nvie/vim-flake8"&gt;vim-flake8&lt;/a&gt; plugin. I invoke it with ,f - having this in my vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autocmd FileType python map &amp;lt;buffer&amp;gt; ,f :call Flake8()&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. Open Terminal / search StackOverflow in Vim&lt;/h2&gt;
&lt;p&gt;You will need the &lt;a href="https://github.com/vim-scripts/Conque-Shell"&gt;Conque&lt;/a&gt; plugin. &lt;/p&gt;
&lt;p&gt;To open a Python in vertical split I use the 'cp' shortcut, vimrc: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap cp :ConqueTermVSplit python3&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can specify any script. The advantage is that any generated output becomes editable with Vim.&lt;/p&gt;
&lt;p&gt;Some years ago &lt;a href="http://bobbelderbos.com/2013/01/search-copy-stackoverflow-data-in-vim-with-conque/"&gt;I made a script&lt;/a&gt; to query StackOverflow in a split window using Conque. I wanted to refactor that script but recently I discovered a better option: &lt;a href="https://github.com/gleitz/howdoi"&gt;howdoi&lt;/a&gt;. You can use &lt;a href="https://github.com/laurentgoudet/vim-howdoi"&gt;this plugin&lt;/a&gt; to run it inside Vim. Very cool.&lt;/p&gt;
&lt;h3&gt;4. Toggle Vim and Shell / open multiple files in vertical split / q:&lt;/h3&gt;
&lt;p&gt;I use Ctrl + Z / fg a lot to go back and forth between coding and version control. &lt;a href="http://stackoverflow.com/questions/1879219/how-to-temporarily-exit-vim-and-go-back"&gt;You can also type :sh / Ctrl + d&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;For testing I usually open script.py and test_script.py alongside each other with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi -O script.py test_script.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is why PEP8's "Limit all lines to a maximum of 79 characters" is important: no wrapping lines.&lt;/p&gt;
&lt;p&gt;Then use Ctrl + w + w to toggle between the split windows. If you want to open another file in vertical split you can run this from Vim's Command Mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:vsp file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another way to interact with the command line is via Vim's Command Mode. While writing this article I found &lt;a href="http://stackoverflow.com/questions/6920943/navigating-in-vims-command-mode"&gt;the useful q: shortcut&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other options for shell integration are &lt;a href="http://www.vim.org/scripts/script.php?script_id=2711"&gt;screen&lt;/a&gt; and &lt;a href="https://tmux.github.io"&gt;tmux&lt;/a&gt;. I'll leave that for a follow-up article ...&lt;/p&gt;
&lt;h2&gt;5.¬†Navigate files&lt;/h2&gt;
&lt;p&gt;I use &lt;a href="https://github.com/scrooloose/nerdtree"&gt;NERD tree&lt;/a&gt; which opens a nice file tree you can navigate with regular Vim strokes, I mapped it to Ctrl + x&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map &amp;lt;C-x&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another option is &lt;a href="https://github.com/wincent/command-t"&gt;Command-T&lt;/a&gt;. I was blown away the first time I saw Gary Bernhardt use it in &lt;a href="https://www.destroyallsoftware.com/screencasts"&gt;Destroy All Software&lt;/a&gt;. I had some dependency / install issues last time, I need to try it again ... &lt;/p&gt;
&lt;h2&gt;Bonus trick: run your own script, pasting its output back into Vim&lt;/h2&gt;
&lt;p&gt;Similar to the howdoi intergration I managed to call an external script and paste its output into Vim. I used &lt;a href="http://pybit.es/pyperclip.html"&gt;pyperclip&lt;/a&gt; to manage the clipboard and switched to MacVim because of clipboard support:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /usr/bin/vim --version &lt;span class="p"&gt;|&lt;/span&gt;grep clipboard
-clipboard
$ /Applications/MacVim.app/contents/MacOS/Vim --version&lt;span class="p"&gt;|&lt;/span&gt;grep clipboard
+clipboard
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the script &lt;a href="https://github.com/pybites/blog_code/blob/master/amazon/genlink.py"&gt;here&lt;/a&gt;. It takes a previously copied Amazon URL from the clipboard, converts it to an affiliation link and pastes it back to the clipboard. &lt;/p&gt;
&lt;p&gt;To run it and paste its output back into Vim I made this mapping in my vimrc: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap ,a :!genlink&amp;lt;CR&amp;gt;&amp;lt;ESC&amp;gt;&amp;quot;+p
# having genlink in PATH and pyperclip installed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"+ is the clipboard buffer.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://www.amazon.com/Practical-Vim-Edit-Speed-Thought/dp/1680501275/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1490353516&amp;amp;sr=1-1&amp;amp;keywords=practical+vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vim keys when at the start of previous line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0       # go to begin line
fh      # go to h
&amp;quot;+d$    # cut URL to clipboard
,a      # run the create link script and insert link where cursor is
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.amazon.com/dp/1680501275/?tag=pyb0f-20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How cool is that? This saves time and made me think what other repeated tasks I can automate and integrate into Vim :) &lt;/p&gt;
&lt;p&gt;If you have ideas or things you built let me know in the comments. &lt;/p&gt;
&lt;h2&gt;More Vim + Python&lt;/h2&gt;
&lt;p&gt;This only scratched the surface. Some great articles on Vim + Python: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mentioned RealPython article: &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;VIM and Python - a Match Made in Heaven&lt;/a&gt; (we got our &lt;a href="http://pybit.es/indentation_tips.html"&gt;indentation settings&lt;/a&gt; from there).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/vim.html"&gt;Full Stack Python - Vim&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://justin.abrah.ms/vim/vim_and_python.html"&gt;Vim &amp;amp; Python: Making yourself at home&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://liuchengxu.org/posts/use-vim-as-a-python-ide/"&gt;Use Vim as a Python IDE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is a good Vim book?&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/dp/1680501275/?tag=pyb0f-20"&gt;Practical Vim: Edit Text at the Speed of Thought&lt;/a&gt; from the author of &lt;a href="http://vimcasts.org"&gt;vimcasts&lt;/a&gt;, is THE book that got my Vim skills to the next level.&lt;/p&gt;
&lt;h2&gt;Two more useful shell aliases&lt;/h2&gt;
&lt;p&gt;Not Vim related, but now that we are talking shortcuts, here are two Python related ones I got in my bashrc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As soon as I start a new project I run 'pvenv' to create and start a fresh new &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtual env&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias pvenv=&amp;#39;python -m venv venv &amp;amp;&amp;amp; source venv/bin/activate&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run all unittests in the current directory: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias utest=&amp;#39;python -m unittest discover&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(although at the time of this writing I discovered &lt;a href="http://nose.readthedocs.io/en/latest/"&gt;the nosetests script&lt;/a&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="vim"></category><category term="tools"></category><category term="shortcuts"></category><category term="tricks"></category><category term="flake8"></category><category term="howdoi"></category><category term="conque"></category><category term="shell"></category><category term="virtualenv"></category><category term="nerdtree"></category><category term="pyperclip"></category></entry><entry><title>Code Challenge 12 - Build a Tic-tac-toe Game</title><link href="https://pybit.es/codechallenge12.html" rel="alternate"></link><published>2017-03-27T00:01:00+02:00</published><updated>2017-03-27T00:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-27:/codechallenge12.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's conceptual challenge (&lt;a href="http://pybit.es/codechallenge11.html"&gt;generators&lt;/a&gt;), we'd like to challenge you this week to build &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe"&gt;Tic-tac-toe&lt;/a&gt;. Every time we do games (previously &lt;a href="http://pybit.es/codechallenge02.html"&gt;Word Values&lt;/a&gt; and &lt;a href="http://pybit.es/codechallenge10.html"&gt;Hangman&lt;/a&gt;) we learn a lot. Enjoy and we review solutions end of this week.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's conceptual challenge (&lt;a href="http://pybit.es/codechallenge11.html"&gt;generators&lt;/a&gt;), we'd like to challenge you this week to build &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe"&gt;Tic-tac-toe&lt;/a&gt;. Every time we do games (previously &lt;a href="http://pybit.es/codechallenge02.html"&gt;Word Values&lt;/a&gt; and &lt;a href="http://pybit.es/codechallenge10.html"&gt;Hangman&lt;/a&gt;) we learn a lot. Enjoy and we review solutions end of this week.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;Build a command line app where you can play against a friend or the computer. We recommend the latter to do some AI: to intelligently respond to player's moves (see &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy"&gt;Strategy&lt;/a&gt;). Maybe you can add game levels to avoid the machine to be 'too smart' (see &lt;a href="https://www.google.es/search?q=tictactoe&amp;amp;oq=tictactoe"&gt;Google widget&lt;/a&gt; for example). &lt;/p&gt;
&lt;p&gt;For the best UX it's probably easiest to number the board like the keyboard's number pad: 7-8-9, 4-5-6, 1-2-3. We provided &lt;a href="https://github.com/pybites/challenges/blob/master/12/tictactoe-template.py"&gt;a template&lt;/a&gt; with some guidance, but maybe you want to start from scratch (let us know what works best for you ...)&lt;/p&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt;. We will feature creative solutions and learning in our review post.&lt;/p&gt;
&lt;h3&gt;Archive&lt;/h3&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="tictactoe"></category><category term="AI"></category></entry><entry><title>Twitter digest 2017 week 12</title><link href="https://pybit.es/twitter_digest_201712.html" rel="alternate"></link><published>2017-03-26T12:29:00+02:00</published><updated>2017-03-26T12:29:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-26:/twitter_digest_201712.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;5-8 character words: &amp;gt;&amp;gt;&amp;gt; import re &amp;gt;&amp;gt;&amp;gt; s = 'Fox jumps over RegExp.' &amp;gt;&amp;gt;&amp;gt; re.findall(r'\b(\w{5,8})\b', s) ['jumps', 'RegExp'] &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/844413330747908097" data-datetime="2017-03-22T05:00:01+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best Practices for Compatible &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 2 and 3 Code &lt;a href="https://t.co/GDORtGOmQP" title="https://t.co/GDORtGOmQP" target="_blank"&gt;https://t.co/GDORtGOmQP&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/844515912321568775" data-datetime="2017-03-22T11:47:38+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My new sounds: &lt;a href="https://twitter.com/search/#18:" target="_blank"&gt;#18:&lt;/a&gt; Python 3 has some amazing types and you can now constructively insult your shell! &lt;a href="https://t.co/Z9NcO0QacW" title="https://t.co/Z9NcO0QacW" target="_blank"&gt;https://t.co/Z9NcO0QacW&lt;/a&gt; on &lt;a href="https://twitter.com/search/#SoundCloud" target="_blank"&gt;#SoundCloud&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/844225705571500033" data-datetime="2017-03-21T16:34:27+00:00"&gt;March 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;And PyCon 2017 is now sold out! We look forward to seeing you in Portland ‚Äî and for those who can't make it, we'll record everything we can!&lt;/p&gt;‚Äî PyCon (@pycon) &lt;a href="https://twitter.com/pycon/status/844615993171292160" data-datetime="2017-03-22T18:25:19+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;pdir() vs dir() in Python. I think I'm in love. Thanks &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt; for the heads up: &lt;a href="https://t.co/RMOInOvPAf" title="https://t.co/RMOInOvPAf" target="_blank"&gt;https://t.co/RMOInOvPAf&lt;/a&gt; Covere‚Ä¶ &lt;a href="https://t.co/M3W7k0qTBW" title="https://t.co/M3W7k0qTBW" target="_blank"&gt;https://t.co/M3W7k0qTBW&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/843875714181054466" data-datetime="2017-03-20T17:23:43+00:00"&gt;March 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An simple tutorial on how to effectively use the python debugger (pdb) &lt;a href="https://t.co/fJjeTvNnrh" title="https://t.co/fJjeTvNnrh" target="_blank"&gt;https://t.co/fJjeTvNnrh&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/845426787588853760" data-datetime="2017-03-25T00:07:08+00:00"&gt;March 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Do you like &lt;a href="https://twitter.com/search/#python‚Äôs" target="_blank"&gt;#python‚Äôs&lt;/a&gt; itertools but wish there was more? more-itertools has tons of interesting functions: &lt;a href="https://t.co/HgTZyQAP34" title="https://t.co/HgTZyQAP34" target="_blank"&gt;https://t.co/HgTZyQAP34&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/845661633724796929" data-datetime="2017-03-25T15:40:19+00:00"&gt;March 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyCharm 2017.1 has been released &lt;a href="https://t.co/7TAXVeh3LA" title="https://t.co/7TAXVeh3LA" target="_blank"&gt;https://t.co/7TAXVeh3LA&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/845364603743809537" data-datetime="2017-03-24T20:00:02+00:00"&gt;March 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;from &lt;a href="https://twitter.com/@pybites:" target="_blank"&gt;@pybites:&lt;/a&gt; Reverse a string with negative stride &amp;gt;&amp;gt;&amp;gt; s = 'hello world' &amp;gt;&amp;gt;&amp;gt; ''.join(reversed(s)) 'dlrow olleh' &amp;gt;&amp;gt;&amp;gt; s[::-1] 'dlrow olleh'&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/845153205738651648" data-datetime="2017-03-24T06:00:01+00:00"&gt;March 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cheat Sheet: File Handling in Python &lt;a href="https://t.co/ebxYGh2mTp" title="https://t.co/ebxYGh2mTp" target="_blank"&gt;https://t.co/ebxYGh2mTp&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#developer" target="_blank"&gt;#developer&lt;/a&gt; &lt;a href="https://t.co/cftTGr604v" title="https://t.co/cftTGr604v" target="_blank"&gt;https://t.co/cftTGr604v&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/845245214583373824" data-datetime="2017-03-24T12:05:37+00:00"&gt;March 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django 1.11 release candidate 1 released &lt;a href="https://t.co/XYaKLsv11i" title="https://t.co/XYaKLsv11i" target="_blank"&gt;https://t.co/XYaKLsv11i&lt;/a&gt;&lt;/p&gt;‚Äî Django (@djangoproject) &lt;a href="https://twitter.com/djangoproject/status/844350212772712448" data-datetime="2017-03-22T00:49:12+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;3 Areas Where Python Has Really Caught Fire | Python Development &lt;a href="https://t.co/yezbhAcpQy" title="https://t.co/yezbhAcpQy" target="_blank"&gt;https://t.co/yezbhAcpQy&lt;/a&gt; via &lt;a href="https://twitter.com/@forgeaheadio" target="_blank"&gt;@forgeaheadio&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/844719331577606144" data-datetime="2017-03-23T01:15:57+00:00"&gt;March 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;REST framework comparisons in 2017 &lt;a href="https://t.co/ed0tSo37A9" title="https://t.co/ed0tSo37A9" target="_blank"&gt;https://t.co/ed0tSo37A9&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/845470300301086720" data-datetime="2017-03-25T03:00:02+00:00"&gt;March 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What Top Firms Ask: 100 Data Science Interview Questions &lt;a href="https://t.co/khPyqcaBWk" title="https://t.co/khPyqcaBWk" target="_blank"&gt;https://t.co/khPyqcaBWk&lt;/a&gt;&lt;/p&gt;‚Äî LearnDataSci (@LearnDataSci) &lt;a href="https://twitter.com/LearnDataSci/status/844615922316972032" data-datetime="2017-03-22T18:25:02+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Very cool article example of building Python web apps with Flask! &lt;a href="https://t.co/jG84KF7zxC" title="https://t.co/jG84KF7zxC" target="_blank"&gt;https://t.co/jG84KF7zxC&lt;/a&gt; via &lt;a href="https://twitter.com/@twilio" target="_blank"&gt;@twilio&lt;/a&gt;&lt;/p&gt;‚Äî Julian Sequeira (@_juliansequeira) &lt;a href="https://twitter.com/_juliansequeira/status/845897719596040192" data-datetime="2017-03-26T07:18:27+00:00"&gt;March 26, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="pycon"></category><category term="tips"></category><category term="debugging"></category><category term="itertools"></category><category term="pycharm"></category><category term="beginners"></category><category term="Django"></category><category term="rest"></category><category term="data science"></category><category term="flask"></category><category term="tutorials"></category><category term="python"></category></entry><entry><title>Code Challenge 11 - Generators for Fun and Profit - Review</title><link href="https://pybit.es/codechallenge11_review.html" rel="alternate"></link><published>2017-03-25T09:10:00+01:00</published><updated>2017-03-25T09:10:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-25:/codechallenge11_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge11.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge11.html"&gt;Generators for Fun and Profit&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution + learning&lt;/h2&gt;
&lt;p&gt;This was a pretty easy one, yet showing a powerful way to start thinking about generators as pipelines that can be plugged into each other.&lt;/p&gt;
&lt;p&gt;Our solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/11/generators.py"&gt;here&lt;/a&gt;. A couple of notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here you see the 'plugged into each other' part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../*/*.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^import (\w+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iglob returns an iterator which yields the paths matching a pathname pattern, glob returns a list, also fine because we are not dealing with a lot of directories. You can also use os.walk but when you have a clear pattern (i)glob is less code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use yield from (&amp;gt;= 3.3) which saves a for loop (shorter).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As &lt;a href="http://pybit.es/codechallenge03_review.html"&gt;seen before&lt;/a&gt; use collections.Counter, it's hard to beat short- and conciseness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def gen_count(modules):
    yield from Counter(modules).most_common()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use grouping to capture the match as discussed in &lt;a href="http://pybit.es/mastering-regex.html"&gt;our regex article&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# retrieves what&amp;#39;s matched in parenthesis&lt;/span&gt;

&lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^import (\w+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Community branch&lt;/h2&gt;
&lt;p&gt;We got our first solution PR which we merged onto our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;community branch&lt;/a&gt;. This is a nice way to get credit and help our community learn more. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/blob/community/11/generators-atakume.py"&gt;The solution&lt;/a&gt; was pretty similar to ours. One nice addition was to sort manually on both values and keys, most_common only sorts by values. Also the regex part was slightly different stripping off import with re.sub. It is nice to see different solutions to the same problem, you learn more.&lt;/p&gt;
&lt;h2&gt;next(Challenges)&lt;/h2&gt;
&lt;p&gt;Next week we do another game, so we expect some more complexity and variety in solutions. Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Do you like these challenges?&lt;/h2&gt;
&lt;p&gt;We hope you are enjoying this. If we can do anything better or you have ideas please &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;open a new issue&lt;/a&gt; or reach out to us. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="yield"></category><category term="Counter"></category><category term="glob"></category><category term="regex"></category></entry><entry><title>PyBites Module of the Week - ipaddress</title><link href="https://pybit.es/ipaddress.html" rel="alternate"></link><published>2017-03-23T11:30:00+01:00</published><updated>2017-03-23T11:30:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-23:/ipaddress.html</id><summary type="html">&lt;p&gt;While playing around with code for our &lt;a href="http://pybit.es/generators.html"&gt;post on generators&lt;/a&gt; we discovered the &lt;a href="https://docs.python.org/3/library/ipaddress.html"&gt;ipaddress module&lt;/a&gt;, part of the Standard Library. Such a handy little module!&lt;/p&gt;</summary><content type="html">&lt;p&gt;While playing around with code for our &lt;a href="http://pybit.es/generators.html"&gt;post on generators&lt;/a&gt; we discovered the &lt;a href="https://docs.python.org/3/library/ipaddress.html"&gt;ipaddress module&lt;/a&gt;, part of the Standard Library. Such a handy little module!&lt;/p&gt;
&lt;h2&gt;What does it do?&lt;/h2&gt;
&lt;p&gt;The ipaddress module simplifies various IP address related tasks. I‚Äôm going to outline some of the handier abilities below.&lt;/p&gt;
&lt;p&gt;It may seem a little redundant to have a module dedicated solely to IP address related tasks but believe me when I say it can save you a heap of time as an admin and programmer.&lt;/p&gt;
&lt;h2&gt;Create an IPv4 or IPv6 address&lt;/h2&gt;
&lt;p&gt;The ipaddress module allows you to automatically create an IPv4 or IPv6 address without having to specify the type of address.&lt;/p&gt;
&lt;p&gt;Just call .ip_address on ipaddress to let the modules figure it out for you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ipaddress.ip_address(&amp;#39;192.168.0.1&amp;#39;)
IPv4Address(&amp;#39;192.168.0.1‚Äô)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; ipaddress.ip_address(&amp;#39;fe80:0:0:0:200:f8ff:fe21:67cf&amp;#39;)
IPv6Address(&amp;#39;fe80::200:f8ff:fe21:67cf&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Super simple!&lt;/p&gt;
&lt;h2&gt;Defining your host interface&lt;/h2&gt;
&lt;p&gt;To describe your particular host interface on a network, you call .ip_interface. Note that this uses the now normal notation: ‚Äò192.168.0.1/24‚Äô.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ipaddress.ip_interface(&amp;#39;192.168.0.1/24&amp;#39;)
IPv4Interface(&amp;#39;192.168.0.1/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Checking your ipaddress object&lt;/h2&gt;
&lt;p&gt;Now, as Python rocks, we can then assign these values to an object/variable and play with them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Is it IPv4 or IPv6?
&amp;gt;&amp;gt;&amp;gt; ip = ipaddress.ip_address(‚Äò192.168.0.1‚Äô)
&amp;gt;&amp;gt;&amp;gt; ip.version
4
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What‚Äôs the netmask?&lt;/h2&gt;
&lt;p&gt;I hate trying to remember netmasks and how the differing notations match up. I tend to stick with the loveable IP format of 255.255.255.0 whereas others I know love to use the hate-filled 192.168.0.1/24 method. (There, I said it!).&lt;/p&gt;
&lt;p&gt;Now I never have to plug my netmasks into a shady online calculator again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; net0
IPv4Network(&amp;#39;192.168.0.0/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; net0.netmask
IPv4Address(&amp;#39;255.255.255.0&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Kaloo Kalay!&lt;/p&gt;
&lt;h2&gt;Defining and checking a network&lt;/h2&gt;
&lt;p&gt;You can also define an entire network as per the following. I‚Äôll show you why this is awesome in a second:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Define the network first
&amp;gt;&amp;gt;&amp;gt; net0 = ipaddress.ip_network(&amp;#39;192.168.0.0/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; #Now check to see how many addresses are valid for this network
&amp;gt;&amp;gt;&amp;gt; net0.num_addresses
&amp;gt;&amp;gt;&amp;gt; 256
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;List out the IP addresses for any given network&lt;/h2&gt;
&lt;p&gt;This is hands down my favourite feature of the ipaddress module for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If it hasn‚Äôt been a standard Class C (/24) network, I‚Äôve struggled to figure out the valid IP addresses for the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating a list of IP addresses for a given subnet has been a tedious process of iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here‚Äôs how the ipaddress module shows me some love:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; net0 = ipaddress.ip_network(&amp;#39;192.168.0.0/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; for i in net0.hosts():
...     print(i)
... 
192.168.0.1
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.8
192.168.0.9
&amp;lt;snip&amp;gt;
192.168.0.253
192.168.0.254
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Drool&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or we can pop net0.hosts() (a generator) into a list and manipulate it as we see fit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; iplist = list(net0.hosts())
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; f&amp;#39;Bob can take IP {iplist[57]}&amp;#39;
&amp;#39;Bob can take IP 192.168.0.58&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Playing nice with other modules&lt;/h2&gt;
&lt;p&gt;As you play around with the ipaddress module you‚Äôll find that the objects won‚Äôt play nice with other modules until converted to strings or integers. As per &lt;a href="https://docs.python.org/3/library/ipaddress.html#conversion-to-strings-and-integers"&gt;Section 21.28.2.2&lt;/a&gt; on the official Python documentation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ip = ipaddress.ip_address(&amp;#39;192.168.0.1&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; str(ip)
&amp;#39;192.168.0.1&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; int(ip)
3232235521
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It may not be the most exciting module out there but as someone who deals with many servers on a daily basis and loves to script these interactions, the ipaddress module is invaluable to me.&lt;/p&gt;
&lt;p&gt;Even if it‚Äôs just to convert netmask notation‚Ä¶&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;‚Äî Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="code"></category><category term="pybites"></category><category term="ipaddress"></category><category term="sysadmin"></category><category term="stdlib"></category></entry><entry><title>Best Practices for Compatible Python 2 and 3 Code</title><link href="https://pybit.es/python-porting.html" rel="alternate"></link><published>2017-03-22T12:42:00+01:00</published><updated>2017-03-22T12:42:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-22:/python-porting.html</id><summary type="html">&lt;p&gt;&lt;a href="http://py3readiness.org/"&gt;95% of most popular Python packages support Python 3&lt;/a&gt;. Maybe you are lucky and get to start fresh using Python 3. However as of last year &lt;a href="http://www.randalolson.com/2016/09/03/python-2-7-still-reigns-supreme-in-pip-installs/"&gt;Python 2.7 still reigns supreme in pip installs&lt;/a&gt; and at a lot of places 2.x is the only version you get to work in. I think writing Python 2 and 3 compatible code is an important skill, so lets check what it entails.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://py3readiness.org/"&gt;95% of most popular Python packages support Python 3&lt;/a&gt;. Maybe you are lucky and get to start fresh using Python 3. However as of last year &lt;a href="http://www.randalolson.com/2016/09/03/python-2-7-still-reigns-supreme-in-pip-installs/"&gt;Python 2.7 still reigns supreme in pip installs&lt;/a&gt; and a lot of places 2.x is the only version you get to work in. I think writing Python 2 and 3 compatible code is an important skill, so lets check what it entails.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 2.x is legacy, Python 3.x is the present and future of the language - &lt;a href="https://wiki.python.org/moin/Python2orPython3"&gt;Python2orPython3 wiki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Summary Best Practices&lt;/h2&gt;
&lt;p&gt;The best place to start is the HOWTO: &lt;a href="https://docs.python.org/3/howto/pyporting.html"&gt;Porting Python 2 Code to Python 3&lt;/a&gt; which nicely summarizes the important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Only care about Python 2.7 ("Python 2.6 is no longer freely supported and thus is not receiving bugfixes."). If you have to care about older Python 2.x versions use &lt;a href="https://pypi.python.org/pypi/six"&gt;six&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have good test coverage (pip install &lt;a href="https://pypi.python.org/pypi/coverage"&gt;coverage&lt;/a&gt;), You can use &lt;a href="https://pypi.python.org/pypi/tox"&gt;tox&lt;/a&gt; to test against multiple Python versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn the differences between 2 and 3, see &lt;a href="http://python-future.org/compatible_idioms.html"&gt;this nice Cheat Sheet&lt;/a&gt;. Another nice article is: &lt;a href="http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html"&gt;The key differences between Python 2.7.x and Python 3.x with examples&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use existing tools: &lt;a href="http://python-future.org/automatic_conversion.html"&gt;Futurize&lt;/a&gt;, &lt;a href="https://python-modernize.readthedocs.io/en/latest/"&gt;Python-Modernize&lt;/a&gt;, &lt;a href="https://pypi.python.org/pypi/caniusepython3"&gt;caniusepython3&lt;/a&gt;. One word of caution about code translation tools: they might lead to less idiomatic or unnecessary code. In &lt;a href="http://www.oreilly.com/programming/free/from-future-import-python.csp"&gt;Picking a Python Version: A Manifesto&lt;/a&gt; we see &lt;a href="https://docs.python.org/2/library/2to3.html"&gt;2to3&lt;/a&gt; converting a range to list(range), you probably want a range to be 'lazy'. On the other hand, in the same example a map gets converted to a list comprehension which is more readable. The point is to always manually check any automatic conversions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To test text versus binary, handled differently between 2 and 3, you can use &lt;a href="http://mypy-lang.org"&gt;mypy&lt;/a&gt;, an optional static type checker. String handling differences in 2 vs 3 probably warrant another article ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The future and syntax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;a href="http://python-future.org/imports.html"&gt;__future__ imports&lt;/a&gt; in Python 2 to provide forward-compatibility, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;absolute_import&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;print_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most well-known is the print statement in 2 becoming a function in 3. To use 3's input (instead of 2's raw_input), range (instead of 2's xrange), you can use builtins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;builtins&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;python-future is the missing compatibility layer between Python 2 and Python 3. It allows you to use a single, clean Python 3.x-compatible codebase to support both Python 2 and Python 3 with minimal overhead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href="http://python-future.org/overview.html"&gt;this overview&lt;/a&gt; for more info.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use try/except on your imports (the HOWTO prefers this over version detection code):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ConfigParser&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplejson&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write exceptions in a compatible way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# don&amp;#39;t:
except Exception, e:
# do:
except Exception as e:
# or just:
except Exception:
# don&amp;#39;t:
raise ValueError, &amp;#39;Invalid value&amp;#39;
# do:
raise ValueError(&amp;#39;Invalid value&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things like from __future__ and try/except imports can be wrapped in a compat.py module , see &lt;a href="https://github.com/kennethreitz/requests/blob/master/requests/compat.py"&gt;Requests&lt;/a&gt; or &lt;a href="https://github.com/pallets/werkzeug/blob/master/werkzeug/_compat.py"&gt;Werkzeug&lt;/a&gt; for example. I actually learned about this technique in the 'Reading Great Code' chapter of &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker‚Äôs Guide to Python&lt;/a&gt;. Armin Ronacher's &lt;a href="http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/"&gt;Porting to Python 3 Redux&lt;/a&gt; provides some more examples of what you can add to your compat module, including decorators for differences in string handling, dictionaries and iterators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The mentioned &lt;a href="http://python-future.org/compatible_idioms.html"&gt;Cheat Sheet&lt;/a&gt; sums up all compatible idioms nicely.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why it matters&lt;/h2&gt;
&lt;p&gt;It might take extra lines of code and be less idiomatic, but if on 2.x you probably have to migrate at some point. Python 2.7 &lt;a href="https://pythonclock.org/"&gt;will not be maintained past 2020&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also if you release a package, doing a bit of extra effort might increase the amount of users of your software. &lt;a href="http://www.randalolson.com/2016/09/03/python-2-7-still-reigns-supreme-in-pip-installs/"&gt;Randy Olson's pip install analysis&lt;/a&gt; made me think.&lt;/p&gt;
&lt;p&gt;This article only scratched the surface. Now is a good time to become familiar with Python porting. I learned some tricks writing this article, hopefully it gets you started too. The amount of resources available is impressive. One final site / book: &lt;a href="http://python3porting.com"&gt;Supporting Python3&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Good luck and let us know in the comments what imcompatible code you had to deal with, we like to hear your story ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="2vs3"></category><category term="tox"></category><category term="six"></category><category term="python-modernize"></category><category term="porting"></category><category term="future"></category><category term="2to3"></category><category term="coverage"></category><category term="futurize"></category><category term="caniusepython3"></category><category term="pip"></category><category term="Requests"></category><category term="Werkzeug"></category></entry><entry><title>Code Challenge 11 - Generators for Fun and Profit</title><link href="https://pybit.es/codechallenge11.html" rel="alternate"></link><published>2017-03-20T09:00:00+01:00</published><updated>2017-03-20T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-20:/codechallenge11.html</id><summary type="html">&lt;p&gt;A new week, a new 'bite' of Python coding! After &lt;a href="http://pybit.es/generators.html"&gt;last week's article on generators&lt;/a&gt; we will get you to practice a bit more with them in our new challenge. Good luck and have fun.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! &lt;/p&gt;
&lt;p&gt;After &lt;a href="http://pybit.es/generators.html"&gt;last week's article on generators&lt;/a&gt; we will get you to practice a bit more with them.&lt;/p&gt;
&lt;p&gt;Inspired by David Beazley's &lt;a href="http://www.dabeaz.com/generators/"&gt;Generator Tricks for Systems Programmers&lt;/a&gt; we ask you to turn the following unix pipeline into Python code using generators. To get a bunch of .py files you can use our challenges repo you cloned. Or use a project of your own. &lt;/p&gt;
&lt;p&gt;Note that in our experience one subprocess is not necessarily one generator, for example 'sort|uniq|sort' can be easily combined into one, as well as 'grep|sed'. See &lt;a href="https://github.com/pybites/challenges/blob/master/11/generators-template.py"&gt;our template&lt;/a&gt; if you need guidance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assuming you pulled our challenges master and are in our 11/ subdirectory &lt;/span&gt;
&lt;span class="c1"&gt;# code this unix pipeline into Python using generators &lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;../*/*&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/import //g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not familiar yet with Unix pipeline? It's pretty well explained &lt;a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;To follow along with our challenges (UPDATES)&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; which should contain everything you need to get up and running (any issue, please open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;).&lt;/p&gt;
&lt;h4&gt;Update I) Forking&lt;/h4&gt;
&lt;p&gt;We got some feedback that Forks don't lead to activity on your Github profile. One of our followers was so nice to update &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL&lt;/a&gt; (via PR (Pull Request)). Maybe you want to use the workaround under III. if the credit thing is an issue for you. See &lt;a href="https://github.com/pybites/challenges/issues/2"&gt;issue #2&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h4&gt;Update II) Submit your Solution&lt;/h4&gt;
&lt;p&gt;We made &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;a new 'community' branch&lt;/a&gt;. Another way to get credit is to submit your code via &lt;a href="https://github.com/pybites/challenges/compare"&gt;a new PR&lt;/a&gt;. We do not merge anything on our master or solutions branches, but if you ping us this way we add your solution to our new community branch (as filename 'topic-GHuser.py') and feature it in &lt;a href="http://pybit.es/pages/challenges.html"&gt;our review&lt;/a&gt; if it taught us something cool.&lt;/p&gt;
&lt;h3&gt;Code Challenges Archive&lt;/h3&gt;
&lt;p&gt;See &lt;a href="http://pybit.es/pages/challenges.html"&gt;this page&lt;/a&gt; for all code challenges so far, if you have an interesting one you'd like to see featured &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt;, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And last but not least: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="generators"></category><category term="unix"></category><category term="newquote"></category></entry><entry><title>Twitter digest 2017 week 11</title><link href="https://pybit.es/twitter_digest_201711.html" rel="alternate"></link><published>2017-03-19T15:42:00+01:00</published><updated>2017-03-19T15:42:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-19:/twitter_digest_201711.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;DataCamp: &lt;a href="https://twitter.com/search/#Pandas" target="_blank"&gt;#Pandas&lt;/a&gt; Cheat Sheet: Data Wrangling in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/zCdACatBq8" title="https://t.co/zCdACatBq8" target="_blank"&gt;https://t.co/zCdACatBq8&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/843042724689432576" data-datetime="2017-03-18T10:13:43+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Logging Tutorial &lt;a href="https://t.co/lc8gejSiWd" title="https://t.co/lc8gejSiWd" target="_blank"&gt;https://t.co/lc8gejSiWd&lt;/a&gt; - good reminder, setting up logging might save you hours of debugging later&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/843042970257555456" data-datetime="2017-03-18T10:14:41+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What's the pythonic way to use getters and setters? &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#getter-setter" target="_blank"&gt;#getter-setter&lt;/a&gt; &lt;a href="https://t.co/gn8tz9eHVK" title="https://t.co/gn8tz9eHVK" target="_blank"&gt;https://t.co/gn8tz9eHVK&lt;/a&gt;&lt;/p&gt;‚Äî PythonQnA (@PythonQnA) &lt;a href="https://twitter.com/PythonQnA/status/843226507996790784" data-datetime="2017-03-18T22:24:00+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Improve your &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; code with &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; 10 Pythonic Tips. Get your own copy here! &lt;a href="https://t.co/3UIxFAIKGr" title="https://t.co/3UIxFAIKGr" target="_blank"&gt;https://t.co/3UIxFAIKGr&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/842844930716393472" data-datetime="2017-03-17T21:07:45+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Super easy to use facial recognition api for Python (or the command line) &lt;a href="https://t.co/TXEvDtfIIX" title="https://t.co/TXEvDtfIIX" target="_blank"&gt;https://t.co/TXEvDtfIIX&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/841514230100697088" data-datetime="2017-03-14T05:00:01+00:00"&gt;March 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How does the &lt;a href="https://twitter.com/search/#Django" target="_blank"&gt;#Django&lt;/a&gt; cross site request forgery protection (CSRF) work? &lt;a href="https://t.co/pSU0X6DuP5" title="https://t.co/pSU0X6DuP5" target="_blank"&gt;https://t.co/pSU0X6DuP5&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/842778034772107264" data-datetime="2017-03-17T16:41:56+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;2017 is an off-year for &lt;a href="https://twitter.com/@pydatacarolinas" target="_blank"&gt;@pydatacarolinas&lt;/a&gt; but you can view all of last year's talks on Youtube!‚Ä¶ &lt;a href="https://t.co/S7O2JwHoL7" title="https://t.co/S7O2JwHoL7" target="_blank"&gt;https://t.co/S7O2JwHoL7&lt;/a&gt;&lt;/p&gt;‚Äî PyData (@PyData) &lt;a href="https://twitter.com/PyData/status/842782676197281794" data-datetime="2017-03-17T17:00:22+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;flango - A Django template for using Flask for the frontend, Django for the backend. &lt;a href="https://t.co/oDDjEZPKOs" title="https://t.co/oDDjEZPKOs" target="_blank"&gt;https://t.co/oDDjEZPKOs&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/842784227393507328" data-datetime="2017-03-17T17:06:32+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Set separators=(',', ':') to dump JSON more compactly. &amp;gt;&amp;gt;&amp;gt; json.dumps({'a':1, 'b':2}, separators=(',',':')) '{"a":1,"b":2}'&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/842777864193769472" data-datetime="2017-03-17T16:41:15+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Awesome intro to PyGame on &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; &lt;a href="https://t.co/tdT8ZUVIpg" title="https://t.co/tdT8ZUVIpg" target="_blank"&gt;https://t.co/tdT8ZUVIpg&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/843292694290071552" data-datetime="2017-03-19T02:47:00+00:00"&gt;March 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Simple Guide for Python Packaging ‚Äì &lt;a href="https://t.co/yupMiDHgO1" title="https://t.co/yupMiDHgO1" target="_blank"&gt;https://t.co/yupMiDHgO1&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/843168636667936768" data-datetime="2017-03-18T18:34:02+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Brute force passwords with Python [Simple Tutorial] &lt;a href="https://t.co/6jtBy0q41i" title="https://t.co/6jtBy0q41i" target="_blank"&gt;https://t.co/6jtBy0q41i&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/843206995251511296" data-datetime="2017-03-18T21:06:28+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Projects in Python: Get started with Python game development ‚òû &lt;a href="https://t.co/db95aHVb7I" title="https://t.co/db95aHVb7I" target="_blank"&gt;https://t.co/db95aHVb7I&lt;/a&gt;&lt;/p&gt;‚Äî Python Programmers (@python_devv) &lt;a href="https://twitter.com/python_devv/status/842939433414549504" data-datetime="2017-03-18T03:23:16+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I made a Raspberry Pi powered Left 4 Dead 2 stat tracker that uses several neat Python libraries to &lt;a href="https://t.co/9lQ6qUsjkl" title="https://t.co/9lQ6qUsjkl" target="_blank"&gt;https://t.co/9lQ6qUsjkl&lt;/a&gt; by &lt;a href="https://twitter.com/@hackaday" target="_blank"&gt;@hackaday&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/842890124677464064" data-datetime="2017-03-18T00:07:20+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;because we are python programmers üòÇüòÇ &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#programmer" target="_blank"&gt;#programmer&lt;/a&gt; &lt;a href="https://t.co/eyo9crPmgA" title="https://t.co/eyo9crPmgA" target="_blank"&gt;https://t.co/eyo9crPmgA&lt;/a&gt;&lt;/p&gt;‚Äî The Crazy Programmer (@thecrazyprogrmr) &lt;a href="https://twitter.com/thecrazyprogrmr/status/841308482020155394" data-datetime="2017-03-13T15:22:27+00:00"&gt;March 13, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="pypi"></category><category term="Django"></category><category term="Flask"></category><category term="Pandas"></category><category term="cheat sheet"></category><category term="stdlib"></category><category term="APIs"></category><category term="tips"></category><category term="raspberry pi"></category><category term="json"></category><category term="pygame"></category><category term="tutorials"></category></entry><entry><title>Code Challenge 10 - Build a Hangman Game - Review</title><link href="https://pybit.es/codechallenge10_review.html" rel="alternate"></link><published>2017-03-18T18:00:00+01:00</published><updated>2017-03-18T18:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-18:/codechallenge10_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge10.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge10.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solution and learning&lt;/h2&gt;
&lt;p&gt;First of all it is great to see &lt;a href="https://github.com/pybites/challenges/network"&gt;more people working on our challenges&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Games are challenging, we learned quite a bit from this one. We also saw better ways of doing things. Our solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/10/hangman-pb.py"&gt;here&lt;/a&gt;. A summary what we learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We used a class to keep state. We used two lists for secret and guessed_word. Looking at it now self.secret_word should probably be a tuple (inmutable). Handling non-ASCII in the constructor made the rest easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.secret_word = list(word.lower())
self.guessed_word = [PLACEHOLDER if c in ASCII else c
                    for c in self.secret_word]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We could probably save the extra self.num_wrong_guesses variable by just popping states of the HANG_GRAPHICS list (or use the hang_graphics() generator directly). It's a real eye opener how you pick up these kind of improvements from reading each other's code. If you pick up one habit from our challenges let it be to &lt;em&gt;start reading source&lt;/em&gt;. As somebody remarked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I like seeing the other solutions. There are definitely small things that I could have done better/more pythonically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was also fascinating to see that there are various ways to accomplish this task: to check for a win, you can compare guess with secret. We took another approach by checking for absense of PLACEHOLDER (_) in the self.guessed_word list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small details. For example we had a debug flag while developing, and we used the __str__ dunder to build up a string representation of the object. What was new though was that you can use it with 'self' as well, as in '.format(self)'. Small tricks you only pick up by actually practicing. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI: we saw other solutions clearing the screen after each guess, and showing the ASCII constant (alphabet) with guesses stripped out, bit more GUI like. Nice. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We saw an try/except block wrapped around 'input = raw_input' to support Python 2 and 3. We will study 2vs3 in more detail next week ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Process update around Forking&lt;/h2&gt;
&lt;p&gt;We got some feedback that Forks don't lead to activity on your Github profile. One of our followers was so nice to update &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL&lt;/a&gt; (via PR). Maybe you want to use the workaround under III. if the credit thing is an issue for you. See &lt;a href="https://github.com/pybites/challenges/issues/2"&gt;issue #2&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;We hope you are enjoying these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;open a new issue&lt;/a&gt; or reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="game"></category><category term="hangman"></category><category term="forks"></category><category term="dunder"></category></entry><entry><title>Generators are Awesome, Learning by Example</title><link href="https://pybit.es/generators.html" rel="alternate"></link><published>2017-03-17T09:00:00+01:00</published><updated>2017-03-17T09:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-17:/generators.html</id><summary type="html">&lt;p&gt;Learn what a Generator is and check out some different examples.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Playing around with context managers for last week‚Äôs &lt;a href="http://pybit.es/codechallenge09.html"&gt;Challenge 09&lt;/a&gt; introduced me to Python Generators and I‚Äôll be forever grateful. They‚Äôre exactly what I didn‚Äôt know I needed!&lt;/p&gt;
&lt;p&gt;First, for the uninitiated, what is a Generator? (If you‚Äôre already across Generators, feel free to skip this next part!).&lt;/p&gt;
&lt;h2&gt;What is a Generator?&lt;/h2&gt;
&lt;p&gt;Well, there‚Äôs actually not much to it. A generator is just a function that generates values specifically when called with &lt;em&gt;next()&lt;/em&gt;. Take this absolutely simple generator for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def num_gen():
...     yield 1
...     yield 2
...     yield 3
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; demo_gen = num_gen()
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
1
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
2
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
3
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we have a function &lt;em&gt;num_gen()&lt;/em&gt; which uses &lt;em&gt;yield&lt;/em&gt; to return the numbers 1, 2 and 3.&lt;/p&gt;
&lt;p&gt;Normally you‚Äôd return these numbers via some sort of loop or with 3x print() functions which would print the numbers 1, 2 and 3 all at once.&lt;/p&gt;
&lt;p&gt;With a generator however, the numbers are only returned when called using the &lt;em&gt;next()&lt;/em&gt; function. Here‚Äôs what the code does:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We take &lt;em&gt;num_gen()&lt;/em&gt; and assign it to a variable &lt;em&gt;demo_gen&lt;/em&gt; to make this easier on us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use the &lt;em&gt;next()&lt;/em&gt; function on &lt;em&gt;demo_gen&lt;/em&gt; to request the ‚Äúnext‚Äù iteration of the demo_gen function. This results in &lt;strong&gt;the first yield only&lt;/strong&gt; being returned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notice we then have to run &lt;em&gt;next(demo_gen)&lt;/em&gt; two more times to see the next iteration in the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once we‚Äôve exhausted all of the yields within &lt;em&gt;num_gen()&lt;/em&gt; running &lt;em&gt;next()&lt;/em&gt; again results in a &lt;em&gt;StopIteration&lt;/em&gt; error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The StopIteration error appears because there are no more yield statements in the function. Calling next on the generator after this does not cause it to loop over and start again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Generator Performance Gains&lt;/h2&gt;
&lt;p&gt;One of the main reasons for using a generator is to avoid having performance issues. For this example it isn‚Äôt an issue to work with our 3 numbers in memory but what if we were to be dealing with lists of millions of numbers? &lt;/p&gt;
&lt;p&gt;The performance hit for building lists of millions of numbers within memory isn‚Äôt mind blowingly bad but it‚Äôs definitely not a great practice.&lt;/p&gt;
&lt;p&gt;Generators on the other hand get around the memory hogging by only loading the code into memory that‚Äôs returned by &lt;em&gt;yield&lt;/em&gt;. That is, you‚Äôre not processing and storing the entire chunk of code/function in memory, just the next iteration you‚Äôre requesting with &lt;em&gt;next()&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Using a For Loop in a Generator&lt;/h2&gt;
&lt;p&gt;You can use Generators in all sorts of ways. Here‚Äôs one that uses a For Loop to double the value of the number I throw into the generator. I can specify how many times the loop is going to run too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def double_nums(num, loops=5):
...     for i in range(loops):
...         num += num
...         yield num
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; demo_gen = double_nums(2)
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
4
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
8
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
16
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
32
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
64
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using a While Loop within a Generator&lt;/h2&gt;
&lt;p&gt;Now let‚Äôs say we want it to indefinitely double every number but only when we want to. The generator is necessary otherwise you‚Äôd run out memory and crash your machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def num_gen(num):
...     while True:
...         num += num
...         yield num
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; demo_gen = num_gen(2)
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
4
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
8
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
16
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
32
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
64
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
128
‚Ä¶
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code will continue doubling the number but only when &lt;em&gt;next()&lt;/em&gt; asks for the number. Nothing is sitting in memory waiting to just return a number.&lt;/p&gt;
&lt;h2&gt;Some more examples: Generators for chaining&lt;/h2&gt;
&lt;p&gt;Here are some examples from our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo (solutions branch)&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get all permutations of a draw in a simple game:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _get_permutations_draw(draw):
    for i in range(1, 8):
        yield from list(itertools.permutations(draw, i))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that yield from requires &lt;a href="https://docs.python.org/3/whatsnew/3.3.html"&gt;&amp;gt;= 3.3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Related: &lt;a href="http://pybit.es/itertools-examples.html"&gt;5 cool things you can do with itertools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get similar tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_similarities(tags):
    for pair in product(tags, tags):
        pair = tuple(sorted(pair))  
        similarity = SequenceMatcher(None, *pair).ratio()
        if SIMILAR &amp;lt; similarity &amp;lt; IDENTICAL:
            yield pair
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We grep on yield in our &lt;a href="https://github.com/pybites/blog_code"&gt;blog code repo&lt;/a&gt; quite a bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A tweet pipeline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(search):
    for tweet in tweepy.Cursor(api.search,
                            q=search,
                            rpp=100,
                            result_type=&amp;quot;recent&amp;quot;,
                            include_entities=True,
                            lang=&amp;quot;en&amp;quot;).items():
        if not tweet.retweeted and &amp;#39;RT @&amp;#39; not in tweet.text:
            yield tweet
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get all our challenges repo's forks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_forks():
    page_num = 0
    while True:
        page_num += 1
        url = FORK_URL + str(page_num)
        response = requests.get(url)
        d = response.json()
        if not d:
            return
        for row in d:
            url = row[&amp;#39;html_url&amp;#39;]
            updated = row[&amp;#39;updated_at&amp;#39;]
            pushed = row[&amp;#39;pushed_at&amp;#39;]
            yield Fork(url, updated, pushed)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Using a Generator to SSH to Multiple Hosts Idea&lt;/h2&gt;
&lt;p&gt;I came up with a &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_ssh.py"&gt;useful SSH script&lt;/a&gt; for last week‚Äôs context manager challenge.&lt;/p&gt;
&lt;p&gt;It works great but it‚Äôs only for one host.&lt;/p&gt;
&lt;p&gt;A cool idea from here (that I‚Äôll probably use for work now that I think about it!) would be to make a generator to create a list of node IP addresses to use with the ssh code.&lt;/p&gt;
&lt;p&gt;The catch would be the SSH authentication for each server if your credentials aren‚Äôt the same across your fleet.&lt;/p&gt;
&lt;p&gt;Simplistically but potentially it could look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net = input(&amp;#39;Input your IP net, e.g. 192.168.0&amp;#39;)

# define the generator
def get_nodes(net):
    for i in range(1, 256):
        yield &amp;#39;{}.{}&amp;#39;.format(net, i)

# consume it
for node in get_nodes():
    print(&amp;#39;Checking IP {}&amp;#39;.format(node))
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(node, username=username, password=password)
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(&amp;#39;cat /etc/hostname&amp;#39;)
        yield ssh_stdout.readlines()
    finally:
        ssh.close()

    confirm = input(‚ÄòDo you want to continue? &amp;#39;)
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output (assuming 'net' was entered as 192.168.0):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Checking IP 192.168.0.1
-- output --
Checking IP 192.168.0.2
-- output --
Checking IP 192.168.0.3
-- output --
...
...
Checking IP 192.168.0.253
-- output --
Checking IP 192.168.0.254
-- output --
Checking IP 192.168.0.255
-- output --
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note the lack of StopIteration. This is because the for loop catches that for you).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Generators are extremely useful for keeping memory usage low. Not a huge deal for your run of the mill script at home or on your laptop but definitely worth keeping in mind and learning for your coding arsenal.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are many ways to skin a‚Ä¶ actually, we‚Äôre animal lovers here. There are many ways to code a solution! As I wrote the SSH script above I was thinking it‚Äôd be much easier to do it differently (not force the generator) but I wanted to for the sake of this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you use generators in any creative ways? Maybe you can &lt;em&gt;generate&lt;/em&gt; some interest with your solutions‚Ä¶  pun intended! &lt;a href="https://www.youtube.com/watch?v=bcYppAs6ZdI"&gt;I‚Äôm here all week!&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;next(PyBites_Generators)&lt;/h2&gt;
&lt;p&gt;The next step (ha!) is to learn ‚Äôsend' (yes, you can send data into a generator, how cool is that?!) -&amp;gt; coroutines -&amp;gt; asyncio ... So much to learn, so little time!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;‚Äî Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="code"></category><category term="pybites"></category><category term="generators"></category><category term="iteration"></category><category term="yield"></category></entry><entry><title>10 Tips to Get More out of Your Regexes</title><link href="https://pybit.es/mastering-regex.html" rel="alternate"></link><published>2017-03-15T07:45:00+01:00</published><updated>2017-03-15T07:45:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-15:/mastering-regex.html</id><summary type="html">&lt;p&gt;Regular expressions can be arcane, yet when used with care they can also be very powerful. In this post a couple of tips to get more out of your regexes when using Python's re module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Regular expressions can be arcane, yet when used with care they can also be very powerful. In this post a couple of tips to get more out of your regexes when using Python's re module.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some people, when confronted with a problem, think, "I know, I'll use regular expressions." Now they have two problems. - Jamie Zawinski&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1. Do we need a regex?&lt;/h2&gt;
&lt;p&gt;First and foremost don't overuse them, specially when you can use simple string operations.&lt;/p&gt;
&lt;p&gt;I like this comparison &lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;by Jeff Atwood&lt;/a&gt;, explaining the quote above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regular expressions are like a particularly spicy hot sauce ‚Äì to be used in moderation and with restraint only when appropriate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;regexes are powerful but use with care, some more text, lets play!&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# overkill!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a bit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;regexes are powerful but use with care, a bit more text, lets play!&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^regex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_sre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SRE_Match&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;regex&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# just use&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a bit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;regexes are powerful but use with care, a bit more text, lets play!&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;regex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. re.match() vs re.search()&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;match() checks at the start of a string and returns None if nothing is found.&lt;/li&gt;
&lt;li&gt;search() moves up the string, looking for the first occurrence of the given pattern, and returns None only if the pattern occurs nowhere in the string.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text = &amp;#39;Use match vs search appropriately&amp;#39;
&amp;gt;&amp;gt;&amp;gt; re.match(&amp;#39;search&amp;#39;, text)
# don&amp;#39;t do:
&amp;gt;&amp;gt;&amp;gt; re.match(&amp;#39;.*search&amp;#39;, text)
# better:
&amp;gt;&amp;gt;&amp;gt; re.search(&amp;#39;search&amp;#39;, text)
&amp;lt;_sre.SRE_Match object; span=(13, 19), match=&amp;#39;search&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Non-capturing parenthesis&lt;/h2&gt;
&lt;p&gt;Use (?: ) to not capture matching contents, for example lets get all links and hashtags out of the tweet below. I need the outer parenthesis for capturing and the inner parenthesis to say '# or http', latter should not capture anything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; tweet = &amp;#39;New PyBites article: Module of the Week - Requests-cache for Repeated API Calls - http://pybit.es/requests-cache.html ‚Ä¶ #python #APIs&amp;#39;
&amp;gt;&amp;gt;&amp;gt; re.findall(r&amp;#39;((?:#|http)\S+)&amp;#39;, tweet)
[&amp;#39;http://pybit.es/requests-cache.html&amp;#39;, &amp;#39;#python&amp;#39;, &amp;#39;#APIs&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I don't use (?: ) it goes wrong:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&amp;#39;((#|http)\S+)&amp;#39;, tweet)
[(&amp;#39;http://pybit.es/requests-cache.html&amp;#39;, &amp;#39;http&amp;#39;), (&amp;#39;#python&amp;#39;, &amp;#39;#&amp;#39;), (&amp;#39;#APIs&amp;#39;, &amp;#39;#&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. Always use raw string (r'&lt;your_regex&gt;')&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3.6/howto/regex.html"&gt;excellent Regex HOWTO&lt;/a&gt; gives a nice example: in order to match \section you end up writing \\\\section in your regex :( &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The solution is to use Python‚Äôs raw string notation for regular expressions; backslashes are not handled in any special way in a string literal prefixed with 'r', so r"\n" is a two-character string containing '\' and 'n', while "\n" is a one-character string containing a newline. Regular expressions will often be written in Python code using this raw string notation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regexes can be complex enough, use r'' and take escaping out of the equation.&lt;/p&gt;
&lt;h2&gt;5. Regexes are greedy!&lt;/h2&gt;
&lt;p&gt;Take this modified html from our blog: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html = &amp;quot;&amp;quot;&amp;quot;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Read more ...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Imagine we want to match the first paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m = re.search(&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;.*&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;, html)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oops, it matched too much:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m.group()
&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Read more ...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can prevent this default greediness by using the ? after the repeating metacharacter (*, +, etc) which makes it match as little text as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m = re.search(&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;.*?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;, html)
&amp;gt;&amp;gt;&amp;gt; m.group()
&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6. Backreferences are powerful&lt;/h2&gt;
&lt;p&gt;I like this example from the HOWTO: find double words in a text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = re.compile(r&amp;#39;(\b\w+)\s+\1&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; p.search(&amp;#39;Paris in the the spring&amp;#39;).group()
&amp;#39;the the&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also 8/re.sub where we use them for string replacements.&lt;/p&gt;
&lt;h2&gt;7. findall (finditer) is awesome&lt;/h2&gt;
&lt;p&gt;We used it &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt; for example to get al mm:ss timestamps of a course TOC, very cool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def search_file(file):
    file_content = open(file).read()  # should have used with
    time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)  # seems we needed literal parenthesis as part of the match
    return time_regex.findall(file_content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python js_course_time_scraper.py

&lt;span class="c1"&gt;# intermediate result from findall:&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(3:47)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(4:41)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(1:21)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(5:32)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(2:23)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(1:01)&amp;#39;&lt;/span&gt;, ...

&lt;span class="c1"&gt;# further parsing + sum&lt;/span&gt;
The course takes &lt;span class="m"&gt;6&lt;/span&gt;.841944444444445 hours to complete.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;8. String replacements&lt;/h2&gt;
&lt;p&gt;re.sub is your friend, I use it quite often, for example &lt;a href="https://github.com/pybites/challenges/blob/master/10/movies.py"&gt;for our last challenge&lt;/a&gt; to extract a movie title:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MOVIE_TITLE = re.compile(r&amp;#39;\d+\.\s+(.*)\s\(.*&amp;#39;).sub

def get_movie():
    with open(&amp;#39;movies.txt&amp;#39;) as f:
        rand_line = random.choice(f.readlines())
        return MOVIE_TITLE(r&amp;#39;\1&amp;#39;, rand_line.rstrip())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use subn to also get the number of replacements done. Here for example it stripped 6 html tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; html
&amp;#39;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Read more ...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&amp;#39;
&amp;gt;&amp;gt;&amp;gt; def strip_html(text):
...     return re.subn(r&amp;#39;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;[^&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;]+?&amp;gt;&amp;#39;, &amp;#39;&amp;#39;, text)  # non-greediness again
...
&amp;gt;&amp;gt;&amp;gt; strip_html(html)
(&amp;#39;Today a quick article on a nice caching module when working with APIs.Read more ...&amp;#39;, 6)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;re.sub even can take a function, nice example from &lt;a href="https://docs.python.org/2/library/re.html"&gt;the documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def repl(m):
...     inner_word = list(m.group(2))
...     random.shuffle(inner_word)
...     return m.group(1) + &amp;quot;&amp;quot;.join(inner_word) + m.group(3)
&amp;gt;&amp;gt;&amp;gt; text = &amp;quot;Professor Abdolmalek, please report your absences promptly.&amp;quot;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&amp;quot;(\w)(\w+)(\w)&amp;quot;, repl, text)
&amp;#39;Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;9. Compilation flags / modifiers&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://docs.python.org/3.6/howto/regex.html#compilation-flags"&gt;this table&lt;/a&gt;: apart from re.I (IGNORECASE), I don't use them often, but they can be very handy when your match spans various lines or working with other character sets.&lt;/p&gt;
&lt;p&gt;The VERBOSE (X) flag can make a regex much more readable as nicely shown &lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;in Jeff Atwood's article&lt;/a&gt; or taking this example from the &lt;a href="https://docs.python.org/3.6/howto/regex.html"&gt;mentioned HOWTO&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pat = re.compile(r&amp;quot;&amp;quot;&amp;quot;
\s*                 # Skip leading whitespace
(?P&amp;lt;header&amp;gt;[^:]+)   # Header name
\s* :               # Whitespace, and a colon
(?P&amp;lt;value&amp;gt;.*?)      # The header&amp;#39;s value -- *? used to
                    # lose the following trailing whitespace
\s*$                # Trailing whitespace to end-of-line
&amp;quot;&amp;quot;&amp;quot;, re.VERBOSE)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;10. Python's unique naming style&lt;/h2&gt;
&lt;p&gt;Another readability feature is Python's specific regex syntax for named groups. This allows you to grab matches by key instead of number. I have not used this much, but writing one now I really like this so planning to adopt this syntax: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; bio = &amp;#39;&amp;#39;&amp;#39;
... name: Bob Belderbos
... country: Spain
... language: Python&amp;#39;&amp;#39;&amp;#39;

&amp;gt;&amp;gt;&amp;gt; m = re.search(r&amp;#39;name: (?P&amp;lt;name&amp;gt;.*)\ncountry: (?P&amp;lt;country&amp;gt;.*)\nlanguage: (?P&amp;lt;lang&amp;gt;.*)&amp;#39;, bio)
&amp;gt;&amp;gt;&amp;gt; m.group(&amp;#39;name&amp;#39;)
&amp;#39;Bob Belderbos&amp;#39;
&amp;gt;&amp;gt;&amp;gt; m.groupdict()
{&amp;#39;name&amp;#39;: &amp;#39;Bob Belderbos&amp;#39;, &amp;#39;country&amp;#39;: &amp;#39;Spain&amp;#39;, &amp;#39;lang&amp;#39;: &amp;#39;Python&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.6/howto/regex.html"&gt;Regular Expression HOWTO doc&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.6/library/re.html"&gt;Docs: 6.2. re ‚Äî Regular expression operations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2mHe00T"&gt;Wesley Chun's book Core Python Applications Programming&lt;/a&gt; - Chapter 1. Regular Expressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;Codinghorror article: Regular Expressions: Now You Have Two Problems&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To go really deep: &lt;a href="http://amzn.to/2n5AFYh"&gt;Mastering Regular Expressions&lt;/a&gt; is THE book on regular expressions, an awesome reference. Note though that language specific chapters include Perl/Java/.NET/PHP, not Python. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lookahead assertions: I have not needed those yet, but they have their use cases. They finally 'clicked' reading &lt;a href="https://docs.python.org/3.6/howto/regex.html#lookahead-assertions"&gt;the example of the HOWTO&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope you picked up something useful from this article. Use the comments below to share any cool regexes you use on a regular basis. &lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;h2&gt;Update Reddit&lt;/h2&gt;
&lt;p&gt;Thanks for &lt;a href="https://redd.it/5ziccw"&gt;the upvotes&lt;/a&gt;, some useful feedback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To test your regexes you can use &lt;a href="https://regex101.com/#python"&gt;regex101&lt;/a&gt; or &lt;a href="http://www.myezapp.com/apps/dev/regexp/show.ws"&gt;this site&lt;/a&gt; for explaining how a pattern is being matched. See the Reddit thread for some other ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Above HMTL examples are to show regex, but in real life you should use a parser (plenty of &lt;a href="https://www.google.com/search?q=html+parser+python&amp;amp;oq=html+parser+&amp;amp;aqs=chrome.0.0l2j69i57j0l3.2035j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;options&lt;/a&gt;), see also SO &lt;a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454"&gt;"You can't parse HTML with regex"&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/regex/"&gt;regex 2017.02.08&lt;/a&gt; is an alternative regex module, a superset of re.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Update June 2017&lt;/h2&gt;
&lt;p&gt;There was a gentle intro to regex at PyCon 2017 by Al Sweigart: &lt;em&gt;Yes, It's Time to Learn Regular Expressions&lt;/em&gt;:&lt;/p&gt;
&lt;div class="container"&gt;
    &lt;iframe src="https://www.youtube.com/embed/abrcJ9MpF60" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="regex"></category><category term="tips"></category><category term="parsing"></category><category term="regular expressions"></category><category term="findall"></category></entry><entry><title>PyBites Module of the Week - Requests-cache for Repeated API Calls</title><link href="https://pybit.es/requests-cache.html" rel="alternate"></link><published>2017-03-14T08:00:00+01:00</published><updated>2017-03-14T08:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-14:/requests-cache.html</id><summary type="html">&lt;p&gt;Today a quick article on a nice caching module when working with APIs: &lt;a href="https://pypi.python.org/pypi/requests-cache"&gt;Requests-cache&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today a quick article on a nice caching module when working with APIs: &lt;a href="https://pypi.python.org/pypi/requests-cache"&gt;Requests-cache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I stumbled upon this &lt;a href="https://realpython.com/blog/python/caching-external-api-requests/"&gt;excellent article by RealPython&lt;/a&gt; when looking for a solution to limit API requests. I needed this when I was playing with the Github API to check &lt;a href="https://github.com/pybites/blog_code/blob/master/forks/commits.py"&gt;changes to forks of our Challenges repo&lt;/a&gt; (you can also see this in the repo, under Graphs &amp;gt; Network, but I was just playing around).&lt;/p&gt;
&lt;p&gt;This is not a script that would typically need caching, because I probably would run it once a week and then it would make just a couple of requests (at this time: ~100 forks / 30 results per call). However when I was coding this up, I did not want to call the API over and over again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For unauthenticated requests, the rate limit allows you to make up to 60 requests per hour. 
&lt;a href="https://developer.github.com/v3/#rate-limiting"&gt;Github API documentation&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was also a good exercise to test this module out for a future use case where this does matter.&lt;/p&gt;
&lt;h2&gt;Using requests_cache&lt;/h2&gt;
&lt;p&gt;First I thought: lets write the output to a file. However that adds more code. Maybe use a decorator to sleep between requests? However that slows down my coding/testing. As usual somebody already invented the wheel. &lt;/p&gt;
&lt;p&gt;Enter Requests-cache. It has an easy / friendly interface:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests_cache&lt;/span&gt;

&lt;span class="n"&gt;requests_cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cache_filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backend&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expire_after&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expiration_in_seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;where backend has &lt;a href="http://requests-cache.readthedocs.io/en/latest/user_guide.html#persistence"&gt;these options&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Verify with curl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start API rate limit (already did some calls):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i https://api.github.com/users/whatever &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt;grep &lt;span class="s1"&gt;&amp;#39;X-RateLimit-Remaining:&amp;#39;&lt;/span&gt;
X-RateLimit-Remaining: &lt;span class="m"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First time around: cache result. DB got created. Cost = 6 calls (1x curl, 5x by script)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python commits.py &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /dev/null
$ lt cache.sqlite
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; bbelderb  staff   516K Mar &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;08&lt;/span&gt;:03 cache.sqlite
$ curl -i https://api.github.com/users/whatever &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt;grep &lt;span class="s1"&gt;&amp;#39;X-RateLimit-Remaining:&amp;#39;&lt;/span&gt;
X-RateLimit-Remaining: &lt;span class="m"&gt;36&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second call = cached, cost down to 1 (= curl)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python commits.py &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /dev/null
$ curl -i https://api.github.com/users/whatever &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class="p"&gt;|&lt;/span&gt;grep &lt;span class="s1"&gt;&amp;#39;X-RateLimit-Remaining:&amp;#39;&lt;/span&gt;
X-RateLimit-Remaining: &lt;span class="m"&gt;35&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Keep in mind&lt;/h2&gt;
&lt;p&gt;Two noteworthy things that were commented on mentioned article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check the documentation of the API you are working with. Maybe they already provide a way to use caching. In case of the GH API this would be &lt;a href="https://developer.github.com/v3/#conditional-requests"&gt;Conditional requests&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Making a conditional request and receiving a 304 response does not count against your Rate Limit, so we encourage you to use it whenever possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Something to try on the next iteration ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might want to define an output directory for the cache file instead of the default current directory to not end up with multiple files if working from a different folder. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More info&lt;/h2&gt;
&lt;p&gt;See the module's &lt;a href="http://requests-cache.readthedocs.io/en/latest/index.html"&gt;documentation&lt;/a&gt; for more info. &lt;/p&gt;
&lt;p&gt;Have you used this module? And/or what do you use for caching API requests? &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="requests"></category><category term="cache"></category><category term="APIs"></category><category term="package"></category></entry><entry><title>Code Challenge 10 - Build a Hangman Game</title><link href="https://pybit.es/codechallenge10.html" rel="alternate"></link><published>2017-03-13T00:32:00+01:00</published><updated>2017-03-13T00:32:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-13:/codechallenge10.html</id><summary type="html">&lt;p&gt;A new week, a new 'bite' of Python coding! This week we will build a Hangman game. Good luck and have fun.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! &lt;/p&gt;
&lt;p&gt;This week we are going to code the well-known &lt;a href="http://www.wikihow.com/Play-Hangman"&gt;Hangman game&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;We think this is a nice challenge because you have to think about design, iteration, working with various data structures, keep state (class?), etc. &lt;/p&gt;
&lt;p&gt;We provide you with some graphs and the topic will be movies: you get a top 100 of movies in a text file and code to load them into your program. &lt;/p&gt;
&lt;p&gt;For the rest we kept the template pretty empty to not force you too much into one direction.&lt;/p&gt;
&lt;p&gt;Of course if you have questions use the comments below. End of this week we discuss our solution and we hope we all learn a lot from each other.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use persistence to keep track of scores (invent your own system) and report when the user breaks a new record.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We focus on the logic so command line is the required interface, however if you like to wrap this into a GUI, feel free ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;To keep it 'DRY' we abstracted the instructions out into an INSTALL.md page in our repo, see &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;. New or returning visitor, you should have all you need to get up and running.&lt;/p&gt;
&lt;p&gt;And remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;h3&gt;Code Challenges Archive&lt;/h3&gt;
&lt;p&gt;See &lt;a href="http://pybit.es/pages/challenges.html"&gt;this page&lt;/a&gt; for all code challenges so far, if you have an interesting one you'd like to see featured &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="hangman"></category><category term="movies"></category><category term="github"></category></entry><entry><title>Twitter digest 2017 week 10</title><link href="https://pybit.es/twitter_digest_201710.html" rel="alternate"></link><published>2017-03-12T00:01:00+01:00</published><updated>2017-03-12T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-12:/twitter_digest_201710.html</id><summary type="html">&lt;p&gt;During the weekend we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; Notes from chat with &lt;a href="https://twitter.com/@treyhunner" target="_blank"&gt;@treyhunner&lt;/a&gt; and &lt;a href="https://twitter.com/@etmoore" target="_blank"&gt;@etmoore&lt;/a&gt; "Habits for effective Python" learning &amp;gt;&amp;gt; &lt;a href="https://t.co/E74JwSL55I" title="https://t.co/E74JwSL55I" target="_blank"&gt;https://t.co/E74JwSL55I&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#le‚Ä¶" target="_blank"&gt;#le‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840661901692547077" data-datetime="2017-03-11T20:33:10+00:00"&gt;March 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;CPython internals: A ten-hour codewalk through the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; interpreter source code &lt;a href="https://t.co/VY1vJMs2I4" title="https://t.co/VY1vJMs2I4" target="_blank"&gt;https://t.co/VY1vJMs2I4&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840495935645978624" data-datetime="2017-03-11T09:33:41+00:00"&gt;March 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Interesting example / stack (cc &lt;a href="https://twitter.com/@mschilling" target="_blank"&gt;@mschilling&lt;/a&gt; swagger) &lt;a href="https://t.co/dwD6n48mlx" title="https://t.co/dwD6n48mlx" target="_blank"&gt;https://t.co/dwD6n48mlx&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840492917940736000" data-datetime="2017-03-11T09:21:41+00:00"&gt;March 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Interesting, how to make cleaner code reducing for loops &lt;a href="https://t.co/Ny2JefgBKd" title="https://t.co/Ny2JefgBKd" target="_blank"&gt;https://t.co/Ny2JefgBKd&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840341142705188864" data-datetime="2017-03-10T23:18:35+00:00"&gt;March 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Introducing Python Fire, a library for automatically g... &lt;a href="https://t.co/myR00Mt6V0" title="https://t.co/myR00Mt6V0" target="_blank"&gt;https://t.co/myR00Mt6V0&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pypi" target="_blank"&gt;#pypi&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840332684220104704" data-datetime="2017-03-10T22:44:59+00:00"&gt;March 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tips to Become a Better &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Developer cheat sheet. Get your own &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/G8zezP8BI2" title="https://t.co/G8zezP8BI2" target="_blank"&gt;https://t.co/G8zezP8BI2&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839978023571058688" data-datetime="2017-03-09T23:15:41+00:00"&gt;March 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@restframework:" target="_blank"&gt;@restframework:&lt;/a&gt; ‚ú®Django REST framework 3.6 has now been released!‚ú®

* Interactive API docs.
* JavaScript client library.

&lt;a href="https://t.co/f‚Ä¶" title="https://t.co/f‚Ä¶" target="_blank"&gt;https://t.co/f‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839918488428941312" data-datetime="2017-03-09T19:19:07+00:00"&gt;March 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; A conversation about effective code reviews with &lt;a href="https://twitter.com/@d0ugal," target="_blank"&gt;@d0ugal,&lt;/a&gt; it's &lt;a href="https://twitter.com/search/#102" target="_blank"&gt;#102&lt;/a&gt; at &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt;  &lt;a href="https://t.co/DROVpNmTiY" title="https://t.co/DROVpNmTiY" target="_blank"&gt;https://t.co/DROVpNmTiY&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839735176171294720" data-datetime="2017-03-09T07:10:42+00:00"&gt;March 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pythonbytes:" target="_blank"&gt;@pythonbytes:&lt;/a&gt; Here's &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; &lt;a href="https://twitter.com/search/#16:" target="_blank"&gt;#16:&lt;/a&gt; Postmodern Python and Open-source Financial Awards &lt;a href="https://t.co/CTl8yNfkSk" title="https://t.co/CTl8yNfkSk" target="_blank"&gt;https://t.co/CTl8yNfkSk&lt;/a&gt; cc &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839145999834759168" data-datetime="2017-03-07T16:09:31+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PyDataMad:" target="_blank"&gt;@PyDataMad:&lt;/a&gt; The next &lt;a href="https://twitter.com/@PyData" target="_blank"&gt;@PyData&lt;/a&gt; in Spain will be held in Barcelona. May 19th-21st at &lt;a href="https://twitter.com/@ESADE" target="_blank"&gt;@ESADE&lt;/a&gt;  &lt;a href="https://t.co/KePE7QsIo6" title="https://t.co/KePE7QsIo6" target="_blank"&gt;https://t.co/KePE7QsIo6&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839145487739531265" data-datetime="2017-03-07T16:07:29+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice trick, similarly we use shell shortcut $_ - it all saves time! &lt;a href="https://t.co/uhUUOs2Baq" title="https://t.co/uhUUOs2Baq" target="_blank"&gt;https://t.co/uhUUOs2Baq&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839066216744513536" data-datetime="2017-03-07T10:52:29+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ContinuumIO:" target="_blank"&gt;@ContinuumIO:&lt;/a&gt; Most &lt;a href="https://twitter.com/search/#AnacondaCON" target="_blank"&gt;#AnacondaCON&lt;/a&gt; 2017 videos are now on YouTube! Check out the playlist: &lt;a href="https://t.co/R13Mq3c0x4" title="https://t.co/R13Mq3c0x4" target="_blank"&gt;https://t.co/R13Mq3c0x4&lt;/a&gt; &lt;a href="https://t.co/LFQvIJYEbG" title="https://t.co/LFQvIJYEbG" target="_blank"&gt;https://t.co/LFQvIJYEbG&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839065750576975874" data-datetime="2017-03-07T10:50:38+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Time is scarce, save cycles: 5 nice &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Development Setup Tips and &lt;a href="https://twitter.com/search/#tools" target="_blank"&gt;#tools&lt;/a&gt; to Boost Your &lt;a href="https://twitter.com/search/#Productivity" target="_blank"&gt;#Productivity&lt;/a&gt; &lt;a href="https://t.co/zPNLCKYNnA" title="https://t.co/zPNLCKYNnA" target="_blank"&gt;https://t.co/zPNLCKYNnA&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839045900769054720" data-datetime="2017-03-07T09:31:46+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; Flatten a list of lists with sum

&amp;gt;&amp;gt;&amp;gt; sum([[1, 2], [3], [4, 5], [6, 7, 8]], [])
[1, 2, 3, 4, 5, 6, 7, 8]

tip by &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/search/#‚Ä¶" target="_blank"&gt;#‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/838733068462616577" data-datetime="2017-03-06T12:48:41+00:00"&gt;March 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's official! PyPI has hit 100,000 packages! Woohoo!! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#milestone" target="_blank"&gt;#milestone&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/jqDoWsjfyR" title="https://t.co/jqDoWsjfyR" target="_blank"&gt;https://t.co/jqDoWsjfyR&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/838178449999081472" data-datetime="2017-03-05T00:04:49+00:00"&gt;March 05, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="pypi"></category><category term="productivity"></category><category term="Django"></category><category term="Fire"></category><category term="Anaconda"></category><category term="cheat sheet"></category><category term="stdlib"></category><category term="CPython"></category><category term="microservices"></category><category term="APIs"></category><category term="tips"></category></entry><entry><title>Code Challenge 09 - The With Statement and Context Managers - Review</title><link href="https://pybit.es/codechallenge09_review.html" rel="alternate"></link><published>2017-03-11T09:00:00+01:00</published><updated>2017-03-11T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-11:/codechallenge09_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge09.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge09.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;Admittedly, when Bob and I discussed this challenge, I was a little intimidated. I'd never actually dealt with any of these concepts before! That said, I'm so glad we put this one out there!&lt;/p&gt;
&lt;p&gt;If it wasn't for the challenge, I wouldn't have learned nearly as much as I did.&lt;/p&gt;
&lt;p&gt;Given my current job role, I decided that it'd be fun to try and wrap a context manager around SSH functionality. This was a perfect choice given you need to specifically call .close() to close off the SSH session. If not, it just stays open indefinitely (or until timeout).&lt;/p&gt;
&lt;p&gt;All up, I had to solidify my understanding of generators, context managers and ssh within Python.
In a venv, I installed the &lt;a href="http://www.paramiko.org/"&gt;paramiko SSH package&lt;/a&gt; and went from there.&lt;/p&gt;
&lt;p&gt;After figuring out how to get the SSH connection going, I then spent the time bundling it all up within the context manager. &lt;a href="https://dbader.org/blog/python-context-managers-and-with-statement"&gt;Dan Bader's post&lt;/a&gt;; the &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;pep-0343 doc&lt;/a&gt; and a few Googled questions on Stack Overflow helped sort me out.&lt;/p&gt;
&lt;p&gt;See the full code &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_ssh.py"&gt;here&lt;/a&gt;. Not only does it work, but I'm also now using at home with my NAS!&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;This was a nice challenge. I got inspired by the DB rollback example of &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I wanted to see if I could use some existing code so I re-used the &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/test_app.py"&gt;test code&lt;/a&gt; of my &lt;a href="http://pybit.es/simple-flask-api.html"&gt;Simple Flask API article&lt;/a&gt;. Just as an exercise, in real life I actually like the setUp/tearDown sandwich unittest already provides. &lt;/p&gt;
&lt;p&gt;What I really liked was that I got to think about different ways to implement this: &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_testdb_class.py"&gt;class&lt;/a&gt; vs &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_testdb.py"&gt;contextmanager&lt;/a&gt;. All this experimentation led to some good learning.&lt;/p&gt;
&lt;p&gt;And I got to use pytest which I really want to explore further :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) [bbelderb@macbook 09 (solutions)]$ pytest with_tes*
=== test session starts ===
...

with_testdb.py ..
with_testdb_class.py ..

=== 4 passed in 0.01 seconds ===
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="with"></category><category term="contextmanagers"></category><category term="Paramiko"></category><category term="pytest"></category></entry><entry><title>Simple API Part 2 - Building a Deep Work Logger with Flask, Slack and Google Docs</title><link href="https://pybit.es/flask-api-part2.html" rel="alternate"></link><published>2017-03-10T18:00:00+01:00</published><updated>2017-03-10T18:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-10:/flask-api-part2.html</id><summary type="html">&lt;p&gt;After &lt;a href="http://pybit.es/simple-flask-api.html"&gt;Simple API - part 1&lt;/a&gt; a more practical app in this part 2 tutorial: a Deep Work logger integrating Google docs and Slack, including deployment of the app to Heroku.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After &lt;a href="http://pybit.es/simple-flask-api.html"&gt;Simple API - part 1&lt;/a&gt; a more practical app in this part 2 tutorial: a Deep Work logger integrating Google docs and Slack, including deployment of the app to Heroku.&lt;/p&gt;
&lt;p&gt;Sometimes you come across an article you think: "I definitely need to play with this!", enter &lt;a href="https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html"&gt;Google Spreadsheets and Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to make a Flask app to log the amount of deep work. Why? Read &lt;a href="http://amzn.to/2ngahen"&gt;the book&lt;/a&gt;, in short: it is a powerful success habit.&lt;/p&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;So we have the API = Flask, the back-end = Google Docs. What about the interface? &lt;/p&gt;
&lt;p&gt;I wanted something for both laptop and mobile = Slack. Enter the &lt;a href="https://api.slack.com/slash-commands"&gt;Slack API / Slash Commands&lt;/a&gt;. I defined this super basic interface: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/dw &amp;lt;time&amp;gt; (&amp;lt;activity&amp;gt;)
- /dw is the slack command
- time can be an int (hour) or more specifically hh:mm
- activity is optional, if not provided it defaults to the name of the channel
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step by step&lt;/h2&gt;
&lt;p&gt;Here is roughly what I did. I document it here so you can start building something similar to scratch your own itch. The code so far is &lt;a href="https://github.com/pybites/deepwork/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To be able to write to a Google Doc follow &lt;a href="https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html"&gt;Google Spreadsheets and Python&lt;/a&gt; to create an app via the Google API and obtain the client_secret.json file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pip install flask and pygsheets, implement GET and POST, again more details &lt;a href="https://github.com/pybites/deepwork/blob/master/api.py"&gt;here&lt;/a&gt;. I used Flask's &lt;a href="http://flask.pocoo.org/snippets/8/"&gt;HTTP Basic Auth snippet&lt;/a&gt; to protect the GET. For the POST I verify the Slack token. As &lt;a href="https://12factor.net/config"&gt;good practice&lt;/a&gt; I stored user/pw in (OS) env variables. I defined some helpers in &lt;a href="https://github.com/pybites/deepwork/blob/master/backend.py"&gt;backend.py&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the app to Heroku (Free plan), I was so glad &lt;a href="http://bobbelderbos.com/2016/12/learning-flask-building-quote-app/"&gt;I took notes&lt;/a&gt; some time ago (section "Deployment to Heroku"). I captured the steps as good as I could &lt;a href="https://github.com/pybites/deepwork/blob/master/heroku.md"&gt;here&lt;/a&gt; (I will adjust next time I deploy an app to Heroku).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploying an app is a challenge in itself. For example how do you get the client_secret.json file in Heroku? I had to go with &lt;a href="http://stackoverflow.com/questions/7908667/how-to-deploy-heroku-app-with-secret-yaml-configuration-file-without-committing"&gt;this (not ideal) workaround&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# put client_secret.json in .gitignore on master
# commit it to secret-branch you keep between localhost and Heroku (not Github)
...
$ git push heroku secret-branch:master
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://api.slack.com/apps?new_app=1"&gt;Create a Slack app&lt;/a&gt;, then a &lt;a href="https://my.slack.com/services/new/slash-commands"&gt;Slash Command&lt;/a&gt; where I defined: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command: /dw&lt;/li&gt;
&lt;li&gt;URL = API endpoint on Heroku&lt;/li&gt;
&lt;li&gt;Method = POST&lt;/li&gt;
&lt;li&gt;Token = generated, I put that in env variable SLACK_DW_CMD_TOKEN above&lt;/li&gt;
&lt;li&gt;You can set an Autocomplete help text which is useful to your team&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is the payload Slack sends to your API for consumption: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;token=xyz
team_id=T0001
team_domain=example
channel_id=C123
channel_name=deepwork
user_id=U123
user_name=bbelderbos  -&amp;gt; cool: the app can be used by the whole team on Slack
command=/dw
text=your_entered_text
response_url=https://hooks.slack.com/commands/1234/5678
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the parsing of it in the &lt;em&gt;&lt;a href="https://github.com/pybites/deepwork/blob/master/api.py"&gt;post_entry&lt;/a&gt;&lt;/em&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The app in action&lt;/h2&gt;
&lt;p&gt;&lt;img alt="the complete flow" src="https://pybit.es/images/slackapi.png"&gt;&lt;/p&gt;
&lt;h2&gt;Lessons learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scratch your own itch. This was a nice exercise to integrate with apps I often use. It taught me a lot because I got stuck so had to debug. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example Slack does not seem to use JSON so in my Flask I had to change request.json to request.form, using &lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt; speeded up the debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I lost quite some time struggling with gspread (used in the mentioned Twilio article) which was way too slow (2 min for a POST request?!), using &lt;a href="https://github.com/nithinmurali/pygsheets"&gt;pygsheets&lt;/a&gt; response times went down to 1-2 seconds or less which made Slack, Heroku and me happy. Lesson: fail fast and small, compare different libraries, and obviously read article comments first before trying!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Flask"></category><category term="Slack"></category><category term="Google docs"></category><category term="Heroku"></category><category term="APIs"></category><category term="pygsheets"></category><category term="git"></category><category term="commands"></category><category term="productivity"></category><category term="learning"></category></entry><entry><title>Comparing Lists with Difflib</title><link href="https://pybit.es/comparing_lists.html" rel="alternate"></link><published>2017-03-08T10:00:00+01:00</published><updated>2017-03-08T10:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-08:/comparing_lists.html</id><summary type="html">&lt;p&gt;Learn to compare blocks of text with the difflib module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love finding new things, especially when they end up saving you a boat load of time and effort! I was looking for a way to compare two lists as the code I had seemed quite clunky. Surely there had to be a better way out there! That's when I discovered difflib.&lt;/p&gt;
&lt;h2&gt;The Julian Way&lt;/h2&gt;
&lt;p&gt;I'll show you how I was approaching the problem first. Don't judge me!&lt;/p&gt;
&lt;p&gt;First, the two blocks of text (made these lists up on the spot):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1 = &amp;quot;&amp;quot;&amp;quot;Julian&amp;#39;s to-do list:
1. Be awesome.
2. Pybites.
3. Enjoy a beer.&amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; text2 = &amp;quot;&amp;quot;&amp;quot;Bob&amp;#39;s to-do list:
1. Be awesome!
2. PyBites.
3. Enjoy a beer.&amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then split the these blocks up into strings using &lt;em&gt;splitlines()&lt;/em&gt;. This returns a list containing each line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1_split = text1.splitlines()
&amp;gt;&amp;gt;&amp;gt; text2_split = text2.splitlines()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where I got stuck. I came up with a for loop that checked to see if items from the &lt;em&gt;text1_split&lt;/em&gt; list were in the &lt;em&gt;text2_split&lt;/em&gt; list. There's an if statement for the checking:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for i in text1_split:
    if i in text2_split:
        print(&amp;quot;&amp;#39;%s&amp;#39; is in both lists!&amp;quot; % (i))
    else:
        print(&amp;quot;&amp;#39;%s&amp;#39; is NOT in both lists!&amp;quot; % (i))


&amp;#39;Julian&amp;#39;s to-do list:&amp;#39; is NOT in both lists!
&amp;#39;1. Be awesome.&amp;#39; is NOT in both lists!
&amp;#39;2. Pybites.&amp;#39; is NOT in both lists!
&amp;#39;3. Enjoy a beer.&amp;#39; is in both lists!
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that it doesn't tell me what's in &lt;em&gt;text2_split&lt;/em&gt;. All it's confirming is whether the items in &lt;em&gt;text1_split&lt;/em&gt; exist in &lt;em&gt;text2_split&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;The code was already getting out of hand. From here I'd need to add code to tell me what's in &lt;em&gt;text2_split&lt;/em&gt; if there isn't a match and what the differences are. 
Enter difflib.&lt;/p&gt;
&lt;h2&gt;Difflib to the Rescue!&lt;/h2&gt;
&lt;p&gt;Before I show you the command, I'll just say that difflib is actually quite expansive, ie, there's a lot you can do with it. This post is just about the &lt;em&gt;Differ()&lt;/em&gt; class.&lt;/p&gt;
&lt;p&gt;As before, you have to split the blocks of text into a list of strings/lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1_split = text1.splitlines()
&amp;gt;&amp;gt;&amp;gt; text2_split = text2.splitlines()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then call &lt;em&gt;Differ().compare()&lt;/em&gt; to do the comparison. I store the result of the command in the &lt;em&gt;diff&lt;/em&gt; variable. Finally, I print the output, joining the lines with a new line to make it readable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; diff = difflib.Differ().compare(text1_split, text2_split)
&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;\n&amp;#39;.join(diff))
- Julian&amp;#39;s to-do list:
? ^^^^^^

+ Bob&amp;#39;s to-do list:
? ^^^

- 1. Be awesome.
?              ^

+ 1. Be awesome!
?              ^

- 2. Pybites.
?      ^

+ 2. PyBites.
?      ^

  3. Enjoy a beer.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look familiar? If you're a Linux/Unix fan you'll have likely come across the &lt;em&gt;diff&lt;/em&gt; command, in which case you'll have no problem reading this!&lt;/p&gt;
&lt;p&gt;What you're seeing here is the differences between each list.&lt;/p&gt;
&lt;p&gt;The key to reading the above:&lt;/p&gt;
&lt;p&gt;'- ' indicates the difference is in the first list. In this case, the letters "Julian".&lt;/p&gt;
&lt;p&gt;'+ ' indicates the difference is in the second list. In this case, the letters "Bob".&lt;/p&gt;
&lt;p&gt;'? ' draws your attention to anything that doesn't appear in either list. It appears under every line here (except the last) because the new line we inserted wasn't originally there.&lt;/p&gt;
&lt;p&gt;'  ' (a blank space) indicates that this line is a perfect match and is in both lists. In this case, line item "3. Enjoy a beer.".&lt;/p&gt;
&lt;p&gt;The ^ (caret) symbol appears underneath the differing characters. Note the ^ under the lower and upper case B in the second line item.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is only the tip of the iceberg as Difflib is pretty big. In fact, we used the difflib.SequenceMatcher class in our &lt;a href="http://pybit.es/codechallenge03_review.html"&gt;Code Challenge 03 - PyBites blog tag analysis&lt;/a&gt; to look for similarities between our blog tags.&lt;/p&gt;
&lt;p&gt;It's one of those handy stdlib modules you stumble across that can change how you code (another example we wrote about is &lt;a href="http://pybit.es/collections-deque.html"&gt;deque&lt;/a&gt;). I think it's brilliant!&lt;/p&gt;
&lt;p&gt;Read more on difflib &lt;a href="https://docs.python.org/3/library/difflib.html"&gt;here&lt;/a&gt; or use help(difflib) from the Python shell.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="stdlib"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category><category term="pythonic"></category></entry><entry><title>Don't let mutability of compound objects fool you!</title><link href="https://pybit.es/mutability.html" rel="alternate"></link><published>2017-03-07T11:00:00+01:00</published><updated>2017-03-07T11:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-07:/mutability.html</id><summary type="html">&lt;p&gt;In this article I explain the difference between shallow versus deep copy with a working example. It's an important concept when working with compound objects.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post I wanted to expand a bit on mutability. As already indicated &lt;a href="http://pybit.es/py-mistakes.html"&gt;here&lt;/a&gt; and &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments"&gt;here&lt;/a&gt; using mutable default values for methods gets you into trouble. &lt;/p&gt;
&lt;p&gt;Last week I had a similar issue with mutability when writing test code for &lt;a href="http://pybit.es/simple-flask-api.html"&gt;our simple Flask API post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only challenge was the isolation of each unit test: I had to do copy the app.items to a backup variable in setUp (a deepcopy to not leave references around) and pass it back in tearDown. ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is important to become familiar with shallow vs deep copy when dealing with compound (nested) objects!&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3.6/library/copy.html"&gt;documentation&lt;/a&gt; explains it well: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.&lt;/li&gt;
&lt;li&gt;A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our API exercise app.items was a list of dicts, so I needed deepcopy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def setUp(self):
    self.backup_items = deepcopy(app.items)  
    ...

...

def tearDown(self):
    # reset app.items to initial state
    app.items = self.backup_items
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I even ended up adding a test in &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/test_app.py"&gt;the &lt;em&gt;test_update&lt;/em&gt; method&lt;/a&gt; to make sure the backup did not get corrupted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;..&lt;/span&gt;
&lt;span class="cp"&gt;..&lt;/span&gt;
self.assertEqual(data[&amp;#39;item&amp;#39;][&amp;#39;value&amp;#39;], 30)
# proof need for deepcopy in setUp: update app.items should not affect self.backup_items
# this fails when you use shallow copy
self.assertEqual(self.backup_items[2][&amp;#39;value&amp;#39;], 20)  # 20 == org value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See REPL output to clarify this further: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; items = [
...     {
...         &amp;#39;id&amp;#39;: 1,
...         &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;,
...         &amp;#39;value&amp;#39;: 1000
...     },
...     {
...         &amp;#39;id&amp;#39;: 2,
...         &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;,
...         &amp;#39;value&amp;#39;: 300,
...     },
...     {
...         &amp;#39;id&amp;#39;: 3,
...         &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;,
...         &amp;#39;value&amp;#39;: 20,
...     },
... ]

&amp;gt;&amp;gt;&amp;gt; items
[{&amp;#39;id&amp;#39;: 1, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]
&amp;gt;&amp;gt;&amp;gt; items2 = items[:]  # shallow copy
&amp;gt;&amp;gt;&amp;gt; items2
[{&amp;#39;id&amp;#39;: 1, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]
&amp;gt;&amp;gt;&amp;gt; items2 == items
True

&amp;gt;&amp;gt;&amp;gt; items[0][&amp;#39;id&amp;#39;] = 5
# oops the items2 copy got updated as well!
# -&amp;gt; id of first item got corrupted (5 != 1)

&amp;gt;&amp;gt;&amp;gt; items2 == items
True

&amp;gt;&amp;gt;&amp;gt; items2  
[{&amp;#39;id&amp;#39;: 5, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]
&amp;gt;&amp;gt;&amp;gt; items
[{&amp;#39;id&amp;#39;: 5, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]

# same for copying with list constructor, another shallow copy it turns out
&amp;gt;&amp;gt;&amp;gt; items2 = list(items)
&amp;gt;&amp;gt;&amp;gt; items2 == items
True

&amp;gt;&amp;gt;&amp;gt; items
[{&amp;#39;id&amp;#39;: 5, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]
&amp;gt;&amp;gt;&amp;gt; items2
[{&amp;#39;id&amp;#39;: 5, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]

&amp;gt;&amp;gt;&amp;gt; items[0][&amp;#39;id&amp;#39;] = 6

# oops
&amp;gt;&amp;gt;&amp;gt; items2 == items
True

#¬†again both data structures&amp;#39; first item were updated
&amp;gt;&amp;gt;&amp;gt; items
[{&amp;#39;id&amp;#39;: 6, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]
&amp;gt;&amp;gt;&amp;gt; items2
[{&amp;#39;id&amp;#39;: 6, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]

# now the right way
&amp;gt;&amp;gt;&amp;gt; from copy import deepcopy
&amp;gt;&amp;gt;&amp;gt; items2 = deepcopy(items)
&amp;gt;&amp;gt;&amp;gt; items == items2
True
&amp;gt;&amp;gt;&amp;gt; items[0][&amp;#39;id&amp;#39;] = 7

# cool
&amp;gt;&amp;gt;&amp;gt; items == items2
False

# backup items2 intact
&amp;gt;&amp;gt;&amp;gt; items
[{&amp;#39;id&amp;#39;: 7, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]
&amp;gt;&amp;gt;&amp;gt; items2
[{&amp;#39;id&amp;#39;: 6, &amp;#39;name&amp;#39;: &amp;#39;laptop&amp;#39;, &amp;#39;value&amp;#39;: 1000}, {&amp;#39;id&amp;#39;: 2, &amp;#39;name&amp;#39;: &amp;#39;chair&amp;#39;, &amp;#39;value&amp;#39;: 300}, {&amp;#39;id&amp;#39;: 3, &amp;#39;name&amp;#39;: &amp;#39;book&amp;#39;, &amp;#39;value&amp;#39;: 20}]i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See another example taken from &lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt; shown on &lt;a href="https://redd.it/5xqwa8"&gt;this Reddit thread&lt;/a&gt; which inspired me to write this up. &lt;/p&gt;
&lt;p&gt;I hope this saves some of you Python developers a debugging headache some day :)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="list"></category><category term="mutable"></category><category term="copy"></category><category term="deepcopy"></category></entry><entry><title>Code Challenge 09 - The With Statement and Context Managers</title><link href="https://pybit.es/codechallenge09.html" rel="alternate"></link><published>2017-03-06T09:50:00+01:00</published><updated>2017-03-06T09:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-06:/codechallenge09.html</id><summary type="html">&lt;p&gt;A new week, more coding! This week we have a free form exercise. This week you will implement your own Context Manager (= support with on your object).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A new week, time for some coding! &lt;/p&gt;
&lt;p&gt;This week we have a free form exercise. After reading &lt;a href="https://dbader.org/blog/python-context-managers-and-with-statement"&gt;Dan's great article on the with statement&lt;/a&gt; we thought it would be cool to ask our PyBites community to come up with creative uses of the with statement. This week you get to implement your own Context Manager.&lt;/p&gt;
&lt;p&gt;You can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define a class implementing the __enter__ and __exit__ methods. Dan shows an Indenter class as example in his article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the nice &lt;a href="https://docs.python.org/3.6/library/contextlib.html#contextlib.contextmanager"&gt;@contextmanager decorator&lt;/a&gt; shortcut. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;h3&gt;Other resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.6/reference/compound_stmts.html#with"&gt;with statement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343 -- The "with" Statement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/contextlib.html"&gt;contextlib ‚Äî Utilities for with-statement contexts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/"&gt;Python with Context Managers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If beginner you might need to read up on some more advanced concepts: &lt;a href="https://wiki.python.org/moin/Generators"&gt;Generators&lt;/a&gt; and &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;Decorators&lt;/a&gt;, also covered in chapters 3 and 7 of the &lt;a href="http://book.pythontips.com/en/latest/index.html"&gt;Python tips book&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 09
# open withlove.py (just a blank file for this challenge)
#¬†code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="with"></category><category term="contextlib"></category><category term="contextmanagers"></category><category term="decorators"></category><category term="generators"></category></entry><entry><title>Code Challenge 08 - House Inventory Tracker - Review</title><link href="https://pybit.es/codechallenge08_review.html" rel="alternate"></link><published>2017-03-05T09:00:00+01:00</published><updated>2017-03-05T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-05:/codechallenge08_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge08.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge08.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;The simplicity of this challenge is what made it fun for me. The challenge was in deciding how to store and manage the data in the most effective (and hopefully Pythonic!) way.&lt;/p&gt;
&lt;p&gt;I decided to go with multiple dicts: dicts for each room and then one main dict for the list of rooms.&lt;/p&gt;
&lt;p&gt;Code wise, the challenge was to then properly list out the required keys and values of each dict when required. I did this using nested for loops in the &lt;em&gt;print_contents()&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;I also added in a quick function to get the value of each room in total. It was satisfying seeing the result of sum(v.values()) appear! See output below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python inventory_julian.py

Study
computer: &lt;span class="nv"&gt;$1200&lt;/span&gt;
lg flatron monitor: &lt;span class="nv"&gt;$300&lt;/span&gt;
samsung monitor: &lt;span class="nv"&gt;$500&lt;/span&gt;
desk: &lt;span class="nv"&gt;$400&lt;/span&gt;
guitar: &lt;span class="nv"&gt;$500&lt;/span&gt;

Living Room
couch: &lt;span class="nv"&gt;$1000&lt;/span&gt;
tv: &lt;span class="nv"&gt;$3000&lt;/span&gt;
playstation: &lt;span class="nv"&gt;$500&lt;/span&gt;
speakers: &lt;span class="nv"&gt;$600&lt;/span&gt;
beanbag: &lt;span class="nv"&gt;$30&lt;/span&gt;

Master Bedroom
bed: &lt;span class="nv"&gt;$400&lt;/span&gt;
mattress: &lt;span class="nv"&gt;$1000&lt;/span&gt;
chair: &lt;span class="nv"&gt;$180&lt;/span&gt;
drawers: &lt;span class="nv"&gt;$250&lt;/span&gt;
lamp: &lt;span class="nv"&gt;$20&lt;/span&gt;

Totals:
Study: &lt;span class="nv"&gt;$2900&lt;/span&gt;
Living Room: &lt;span class="nv"&gt;$5130&lt;/span&gt;
Master Bedroom: &lt;span class="nv"&gt;$1850&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code &lt;a href="https://github.com/pybites/challenges/blob/solutions/08/inventory_julian.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I had fun making an interactive version for this. This forced me to think about user input validation: name of item is required, value requires an int.
There might be a bit repetition in resulting &lt;em&gt;get_name&lt;/em&gt; and &lt;em&gt;get_value&lt;/em&gt;, they both ask for user input, yet do different validations. 
Maybe something to wrap in a validation class ...&lt;/p&gt;
&lt;p&gt;Nice constructs I could use: defaultdict, namedtuple and format printing.&lt;/p&gt;
&lt;p&gt;Before I would have mixed calculation and printing, now I isolating the summing in &lt;em&gt;calc_totals&lt;/em&gt; function which makes it a bit cleaner. 
See output below - I changed the NUM_ITEMS constant to 2 for shorter output (could make it a command line arg ...)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python inventory_bob.py

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room study:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: monitor
- Enter the value of the item: &lt;span class="m"&gt;200&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: laptop
- Enter the value of the item: &lt;span class="m"&gt;1000&lt;/span&gt;

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room living_room:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: sofa
- Enter the value of the item: &lt;span class="m"&gt;600&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: tv
- Enter the value of the item: &lt;span class="m"&gt;500&lt;/span&gt;

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room master_bedroom:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: bed
- Enter the value of the item: &lt;span class="m"&gt;1000&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: couch
- Enter the value of the item: &lt;span class="m"&gt;400&lt;/span&gt;

* Room: study
monitor        :   &lt;span class="m"&gt;200&lt;/span&gt;
laptop         :  &lt;span class="m"&gt;1000&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1200&lt;/span&gt;

* Room: living_room
sofa           :   &lt;span class="m"&gt;600&lt;/span&gt;
tv             :   &lt;span class="m"&gt;500&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1100&lt;/span&gt;

* Room: master_bedroom
bed            :  &lt;span class="m"&gt;1000&lt;/span&gt;
couch          :   &lt;span class="m"&gt;400&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1400&lt;/span&gt;

----
Total          :  &lt;span class="m"&gt;3700&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code &lt;a href="https://github.com/pybites/challenges/blob/solutions/08/inventory_bob.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bonus: simple API&lt;/h3&gt;
&lt;p&gt;This was also a good occasion to make a simple API with Flask, which we practiced &lt;a href="http://pybit.es/simple-flask-api.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="inventory"></category><category term="Flask"></category><category term="APIs"></category><category term="data structures"></category></entry><entry><title>Twitter digest 2017 week 09</title><link href="https://pybit.es/twitter_digest_201709.html" rel="alternate"></link><published>2017-03-04T08:30:00+01:00</published><updated>2017-03-04T08:30:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-04:/twitter_digest_201709.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice article, saved for future reference:

A Simple Guide for Python Packaging‚Äù by &lt;a href="https://twitter.com/@flyfengjie" target="_blank"&gt;@flyfengjie&lt;/a&gt; &lt;a href="https://t.co/iRHEuIGwnS" title="https://t.co/iRHEuIGwnS" target="_blank"&gt;https://t.co/iRHEuIGwnS&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837926382701277184" data-datetime="2017-03-04T07:23:12+00:00"&gt;March 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Postmodern Error Handling in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.6 &lt;a href="https://t.co/IInRMDGP29" title="https://t.co/IInRMDGP29" target="_blank"&gt;https://t.co/IInRMDGP29&lt;/a&gt; - nice article highlighting enums, typed NamedTuples, type annotations&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837923650745602049" data-datetime="2017-03-04T07:12:20+00:00"&gt;March 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonTopNews:" target="_blank"&gt;@PythonTopNews:&lt;/a&gt; What one thing took your Python to the next level : Python &lt;a href="https://t.co/1KTMYo35Nq" title="https://t.co/1KTMYo35Nq" target="_blank"&gt;https://t.co/1KTMYo35Nq&lt;/a&gt; via &lt;a href="https://twitter.com/@pycoders" target="_blank"&gt;@pycoders&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837789521827737601" data-datetime="2017-03-03T22:19:22+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@raymondh:" target="_blank"&gt;@raymondh:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; data analytics victory. &lt;a href="https://twitter.com/@TreyPruitt" target="_blank"&gt;@TreyPruitt&lt;/a&gt; best estimated when &lt;a href="https://twitter.com/search/#pypi" target="_blank"&gt;#pypi&lt;/a&gt; would roll over 100,000 packages next week: &lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837785994095181825" data-datetime="2017-03-03T22:05:20+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; My new sounds: &lt;a href="https://twitter.com/search/#101:" target="_blank"&gt;#101:&lt;/a&gt; Adding a full featured Python environment to Visual Studio Code &lt;a href="https://t.co/5zGSLNtZ7j" title="https://t.co/5zGSLNtZ7j" target="_blank"&gt;https://t.co/5zGSLNtZ7j&lt;/a&gt; on &lt;a href="https://twitter.com/search/#SoundCloud" target="_blank"&gt;#SoundCloud&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837783077363527681" data-datetime="2017-03-03T21:53:45+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; In &lt;a href="https://twitter.com/search/#python3" target="_blank"&gt;#python3&lt;/a&gt; a, *b, c = [1, 2, 3, 4, 5] unpacks as follows
&amp;gt;&amp;gt;&amp;gt; a
1
&amp;gt;&amp;gt;&amp;gt; b
[2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; c
5&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837782731035672576" data-datetime="2017-03-03T21:52:22+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Programming Language LiveLessons - excellent beyond basics &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; course, thanks &lt;a href="https://twitter.com/@dabeaz," target="_blank"&gt;@dabeaz,&lt;/a&gt; learning a lot - &lt;a href="https://t.co/tjsWJbzmFk" title="https://t.co/tjsWJbzmFk" target="_blank"&gt;https://t.co/tjsWJbzmFk&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837371748412719104" data-datetime="2017-03-02T18:39:17+00:00"&gt;March 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@NumFOCUS:" target="_blank"&gt;@NumFOCUS:&lt;/a&gt; Level up your knowledge‚ÄîWe have over 700 great &lt;a href="https://twitter.com/search/#pydata" target="_blank"&gt;#pydata&lt;/a&gt; talks hosted on the &lt;a href="https://twitter.com/@PyData" target="_blank"&gt;@PyData&lt;/a&gt; youtube channel! Subscribe: &lt;a href="https://t.co/w‚Ä¶" title="https://t.co/w‚Ä¶" target="_blank"&gt;https://t.co/w‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837356203617447937" data-datetime="2017-03-02T17:37:30+00:00"&gt;March 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Python Weekly - Issue 284 
&lt;a href="https://t.co/nmX7viqISj" title="https://t.co/nmX7viqISj" target="_blank"&gt;https://t.co/nmX7viqISj&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; &lt;a href="https://twitter.com/search/#neuralnetwork" target="_blank"&gt;#neuralnetwork&lt;/a&gt; &lt;a href="https://twitter.com/search/#tensorflow" target="_blank"&gt;#tensorflow&lt;/a&gt; &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#p‚Ä¶" target="_blank"&gt;#p‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837356110000586753" data-datetime="2017-03-02T17:37:08+00:00"&gt;March 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brianokken:" target="_blank"&gt;@brianokken:&lt;/a&gt; Packaging, distribution, async, pandas, pytest, getting news &amp;amp; Guido on &lt;a href="https://t.co/oTEUALvqpV" title="https://t.co/oTEUALvqpV" target="_blank"&gt;https://t.co/oTEUALvqpV&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837032333245046784" data-datetime="2017-03-01T20:10:34+00:00"&gt;March 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Had fun writing this article on the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; fun that's trending on Twitter! &lt;a href="https://t.co/PvME6U5fup" title="https://t.co/PvME6U5fup" target="_blank"&gt;https://t.co/PvME6U5fup&lt;/a&gt; Stay humble Pythonistas!&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/836890100399210496" data-datetime="2017-03-01T10:45:23+00:00"&gt;March 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@William_Holroyd:" target="_blank"&gt;@William_Holroyd:&lt;/a&gt; The Hitchhiker's Guide to Python from &lt;a href="https://twitter.com/@OReillyMedia" target="_blank"&gt;@OReillyMedia&lt;/a&gt; &lt;a href="https://twitter.com/@kennethreitz" target="_blank"&gt;@kennethreitz&lt;/a&gt; &lt;a href="https://twitter.com/@tanyaschlusser" target="_blank"&gt;@tanyaschlusser&lt;/a&gt; is the best beginners language ecosy‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/836496286136299521" data-datetime="2017-02-28T08:40:30+00:00"&gt;February 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice new article by &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt;  - Context Managers and the ‚Äúwith‚Äù Statement in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/q2b21rAFXa" title="https://t.co/q2b21rAFXa" target="_blank"&gt;https://t.co/q2b21rAFXa&lt;/a&gt; (including exercises)&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/836469979214143488" data-datetime="2017-02-28T06:55:58+00:00"&gt;February 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@testpodcast:" target="_blank"&gt;@testpodcast:&lt;/a&gt; 27: Mahmoud Hashemi : unit, integration, and system&amp;nbsp;testing &lt;a href="https://t.co/pIfPd4xAoU" title="https://t.co/pIfPd4xAoU" target="_blank"&gt;https://t.co/pIfPd4xAoU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835915761478733825" data-datetime="2017-02-26T18:13:42+00:00"&gt;February 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; Haha, this is awesome üëè "The Zen of Python" illustrated as a web comic &lt;a href="https://t.co/2zkI7CzpK8" title="https://t.co/2zkI7CzpK8" target="_blank"&gt;https://t.co/2zkI7CzpK8&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835574841860218880" data-datetime="2017-02-25T19:39:01+00:00"&gt;February 25, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="contextmanagers"></category><category term="3.6"></category><category term="pypi"></category><category term="training"></category><category term="tuples"></category><category term="pydata"></category><category term="testing"></category><category term="zen"></category><category term="pyfun"></category></entry><entry><title>How To Build a Simple API with Flask and Unit Test it</title><link href="https://pybit.es/simple-flask-api.html" rel="alternate"></link><published>2017-03-03T21:00:00+01:00</published><updated>2017-03-03T21:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-03:/simple-flask-api.html</id><summary type="html">&lt;p&gt;In this post I will create a simple API with Flask and test it with curl and unit testing its HTTP methods.&lt;/p&gt;</summary><content type="html">&lt;p&gt;REST has gained lot of popularity and is virtually the default architectural style for designing and implementing RESTful web services. &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Wikipedia&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Representational state transfer (REST) or RESTful Web services are one way of providing interoperability between computer systems on the Internet. REST-compliant Web services allow requesting systems to access and manipulate textual representations of Web resources using a uniform and predefined set of stateless operations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementing REST APIs in Flask is relatively easy. As &lt;a href="http://pybit.es/codechallenge08.html"&gt;this week's challenge&lt;/a&gt; is a House Inventory Tracker, lets do &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; on room items.&lt;/p&gt;
&lt;p&gt;Note this post uses the simplest possible example, and focuses on the testing. I use an in-memory list for storage. In real life you probably want a DB, although you could also use a &lt;a href="https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html"&gt;Google Spreadsheet and Python&lt;/a&gt;. Security / authentication is critical too, see Miguel Grinberg's excellent &lt;a href="https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask"&gt;Designing a RESTful API with Python and Flask&lt;/a&gt; how to implement that.&lt;/p&gt;
&lt;h2&gt;Get ready&lt;/h2&gt;
&lt;p&gt;First &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;create a virtualenv&lt;/a&gt; and do pip install flask&lt;/p&gt;
&lt;h2&gt;API code and endpoints&lt;/h2&gt;
&lt;p&gt;To create a simple API you implement one or more &lt;a href="http://www.restapitutorial.com/lessons/httpmethods.html"&gt;HTTP methods&lt;/a&gt;, in this case the following endpoints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/api/v1.0/items&amp;#39;, methods=[&amp;#39;GET&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items/&amp;lt;int:id&amp;gt;&amp;#39;, methods=[&amp;#39;GET&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items&amp;#39;, methods=[&amp;#39;POST&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items/&amp;lt;int:id&amp;gt;&amp;#39;, methods=[&amp;#39;PUT&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items/&amp;lt;int:id&amp;gt;&amp;#39;, methods=[&amp;#39;DELETE&amp;#39;])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full code &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/app.py"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Testing part I) - manually with curl&lt;/h2&gt;
&lt;p&gt;I first put some curl commands in a &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/curl.py"&gt;test script&lt;/a&gt;, isn't it cool you can just use curl to test your new shiny API?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python curl.py

&lt;span class="c1"&gt;# get items&lt;/span&gt;

curl -i http://127.0.0.1:5000/api/v1.0/items
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...

&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;laptop&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1000&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,

...
...

&lt;span class="c1"&gt;#¬†add item with proper values&lt;/span&gt;

curl -i -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -X POST -d  &lt;span class="s1"&gt;&amp;#39;{&amp;quot;name&amp;quot;:&amp;quot;monitor&amp;quot;, &amp;quot;value&amp;quot;: 200}&amp;#39;&lt;/span&gt; http://127.0.0.1:5000/api/v1.0/items
HTTP/1.0 &lt;span class="m"&gt;201&lt;/span&gt; CREATED
...

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;4&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monitor&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;200&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
...
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It surely is! However you have to read the output every time you test. Not cool :(&lt;/p&gt;
&lt;h2&gt;Testing part II) - automation with unittest&lt;/h2&gt;
&lt;p&gt;Here the whole exercise became pretty interesting, how to unit test an API?! &lt;/p&gt;
&lt;p&gt;Flask facilitates a nice method you can use in your setUp (= repeats for each unit test):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;test_client(use_cookies=True, **kwargs)&lt;/p&gt;
&lt;p&gt;Creates a test client for this application. For information about unit testing head over to &lt;a href="http://flask.pocoo.org/docs/0.12/testing/"&gt;Testing Flask Applications&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can test response codes and of course see how the data (list of items in this case) changes after each request. &lt;/p&gt;
&lt;p&gt;The only challenge was the isolation of each unit test: I had to do copy the app.items to a backup variable in setUp (a &lt;a href="https://docs.python.org/3.6/library/copy.html"&gt;deepcopy&lt;/a&gt; to not leave references around) and pass it back in tearDown. Similarly for a DB back-end you would probably construct and drop a test table to have a clean slate for every test. &lt;/p&gt;
&lt;p&gt;The full unit tests are &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/test_app.py"&gt;here&lt;/a&gt;, summary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_get_all(self): ...
def test_get_one(self): ...
def test_item_not_exist(self): ...
def test_post(self): ...
def test_update(self): ...
def test_update_error(self): ...
def test_delete(self): ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This whole exercise took me some time but it was great learning, not something you get from just reading about it! And this can serve as a template when testing other APIs.&lt;/p&gt;
&lt;h2&gt;next(API)&lt;/h2&gt;
&lt;p&gt;Since listening to &lt;a href="https://www.manning.com/books/soft-skills"&gt;Soft Skills&lt;/a&gt; I want to do some time logging to increase my productivity. &lt;/p&gt;
&lt;p&gt;What if I can have a simple API where I can send log entries of 'deep work time x spent on activity y' via a &lt;a href="https://api.slack.com/custom-integrations/outgoing-webhooks"&gt;Slack Webhook&lt;/a&gt; to a DB or earlier mentioned Google Spreadsheet?&lt;/p&gt;
&lt;p&gt;At the time of writing this article I stumbled upon &lt;a href="http://flask-restful-cn.readthedocs.io/en/0.3.5/quickstart.html#a-minimal-api"&gt;Flask-RESTful&lt;/a&gt; which should make this even easier (more elegant). So stay tuned for a part II ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="APIs"></category><category term="Flask"></category><category term="REST"></category><category term="curl"></category><category term="testing"></category><category term="unittest"></category><category term="inventory"></category></entry><entry><title>Pythonic String Formatting</title><link href="https://pybit.es/string-formatting.html" rel="alternate"></link><published>2017-03-02T08:00:00+01:00</published><updated>2017-03-02T08:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-02:/string-formatting.html</id><summary type="html">&lt;p&gt;The formatting of strings has been a hot topic in Python and something that I struggled with at the beginning. It's quite interesting to see how it's evolved over time to be what it is today!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Formatting strings was one of the things that really hurt my head when I started learning Python. Everyone did it differently!&lt;/p&gt;
&lt;p&gt;After doing Michael Kennedy's &lt;a href="http://pybit.es/pythonic-code-course-rewiew.html"&gt;&lt;em&gt;Write Pythonic Code Like a Seasoned Developer&lt;/em&gt;&lt;/a&gt; course, I was inspired to write about the different ways you could format a string in Python. Mainly because the method we've all deemed &lt;strong&gt;wrong&lt;/strong&gt; (or at least, "least Pythonic") is the way I started off doing it!&lt;/p&gt;
&lt;h2&gt;The Terribly Unpythonic Method&lt;/h2&gt;
&lt;p&gt;Okay let's get this out of the way first. Here's how I formatted a string when I first started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; country = &amp;quot;Australia&amp;quot;
&amp;gt;&amp;gt;&amp;gt; level = 11
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of &amp;quot; + country + &amp;quot; is &amp;quot; + str(level) + &amp;quot;.&amp;quot;)
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll be honest, I was just glad I could get text to print! It's pretty terrible isn't it? Having to display &lt;em&gt;level&lt;/em&gt; as a string with &lt;em&gt;str()&lt;/em&gt; sends shivers down my spine now.&lt;/p&gt;
&lt;h2&gt;Using the String Format Operator&lt;/h2&gt;
&lt;p&gt;When Bob first showed me code that contained the string format operator I could have died. Not because it was awesome but because as a newbie, I had no idea what the heck I was even reading! Using the same variables and types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of %s is %d.&amp;quot; % (country, level))
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What the heck are % signs doing within a string? And how are they being substituted and not being displayed as is?&lt;/p&gt;
&lt;p&gt;It's pretty simple! What the code is doing is substituting the %s and %d for the values specified in the brackets after the string.&lt;/p&gt;
&lt;p&gt;That is, %s is substituted with &lt;em&gt;country&lt;/em&gt; and %d with &lt;em&gt;level&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It was great until I realised that the %s was only to be used to specify a string type variable and %d to specify a decimal. (There are more options to choose from of course!).&lt;/p&gt;
&lt;p&gt;The reason this is a pain is that you'll need to remember the type of every variable you're going to print and get the order right in your print statement. Not a huge fan.&lt;/p&gt;
&lt;h2&gt;Replacement Fields&lt;/h2&gt;
&lt;p&gt;This is my favourite one. Replacement fields!&lt;/p&gt;
&lt;p&gt;Replacement fields expand on the format operator by taking the thinking out of the equation (always a good thing for me!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of {} is {}.&amp;quot;.format(country, level))
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar to the format operator, we put the replacement fields &lt;em&gt;{}&lt;/em&gt; where we'd like the variable output to be in the string. The difference? We no longer need to remember what the &lt;strong&gt;type&lt;/strong&gt; of the variable is! &lt;/p&gt;
&lt;p&gt;It's all taken care of by &lt;em&gt;.format()&lt;/em&gt; which will display your variable using the appropriate format. So very cool and painless!&lt;/p&gt;
&lt;p&gt;Pythonic goodness!&lt;/p&gt;
&lt;h2&gt;Python 3.6 f-strings&lt;/h2&gt;
&lt;p&gt;f-strings were introduced &lt;a href="http://pybit.es/3.6_new.html"&gt;in Python 3.6&lt;/a&gt; and are pretty new to me but that doesn't stop them from being awesome! Check this out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f&amp;quot;The awesomeness level of {country} is {level}.&amp;quot;
&amp;#39;The awesomeness level of Australia is 11.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How incredible is that? The variables are called in the string output directly within the replacement fields. You no longer need to manually call format()!&lt;/p&gt;
&lt;p&gt;Even more Pythonic goodness!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Being quite new to Python means I'm more likely to use the latest and greatest method of formatting strings which actually makes things more difficult. I now want to go back through my old code and update it with the newer, more Pythonic methods.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pythonic string formatting summarized" src="https://pybit.es/images/pythonic-string-formatting.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I want to hear more about how other programmers format their output strings. It's a topic that's interested me purely because of the strong opinion out there!&lt;/p&gt;
&lt;p&gt;How do you do it?&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category><category term="pythonic"></category></entry><entry><title>I have been coding in Python for years and I still ...</title><link href="https://pybit.es/python-lookup.html" rel="alternate"></link><published>2017-03-01T09:00:00+01:00</published><updated>2017-03-01T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-01:/python-lookup.html</id><summary type="html">&lt;p&gt;A quick post on a fun trend we saw on Twitter this morning: people posting how long they coded for and what they still had to lookup. Some of this is tongue in cheek of course, but the point is that programming is not easy. Secondly there is no shame in looking things up, we all do it! What do fellow Pythonistas say?&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick post on a fun trend we saw on Twitter this morning: people posting how long they coded for and what they still had to lookup. Some of this is tongue in cheek of course, but the point is that programming is not easy. Secondly there is no shame in looking things up, we all do it! What do fellow Pythonistas say?&lt;/p&gt;
&lt;p&gt;It seems to have started here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, my name is Tim. I'm a lead at Google with over 30 years coding experience and I need to look up how to get length of a python string. &lt;a href="https://twitter.com/tdierks/status/835912924329836545"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or maybe even here: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don't do riddles. &lt;a href="https://twitter.com/dhh/status/834146806594433025"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt; to the rescue, as Pythonista Luciano Ramalho tweets: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, my name is Luciano, I've been coding for almost 40 years now, and I believe StackOverflow is the best thing since array bounds checking. &lt;a href="https://twitter.com/ramalhoorg/status/836319368216739842"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Pythonistas&lt;/h3&gt;
&lt;p&gt;Some fun examples &lt;a href="https://twitter.com/search?f=tweets&amp;amp;q=my%20name%20is%20python&amp;amp;src=typd"&gt;here&lt;/a&gt; (Python bloggers, take note ...). &lt;/p&gt;
&lt;p&gt;We definitely have been here:&lt;/p&gt;
&lt;p&gt;CSV files cannot be written without Google:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still google to read/write csv files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Logging (setup) is hard!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still copy paste from the logging cookbook. #python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What was the difference again between json dump and load? And when to add the extra -s?!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been using Python for more than 4 years and still forget the difference between json dump(s) and load(s) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Negative slicing, maybe not so clear to the next maintainer of your code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been doing Python for a few years now. I have to check the docs when I need list slicing with negative indexes. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily we have the REPL, just type python + enter, and play:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... using Python since 2001. I still keep many tabs of stdlib docs open, and check often in a REPL as a normal worflow. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;True, writing a book or blog you still have to look up stuff:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I wrote a widely read book about Intermediate Python and I still have to use Stackoverflow and Google while coding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep, we looked this one up too last week: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always confuse .sort() with sorted().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can't remember map parameter order either, list comprehensions do fit in our memory (and are more elegant) :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... still can't remember if its map(fn, iterable) or map(iterable, fn) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The tedioust Python code to write indeed, we always need to copy it from somewhere ;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always copy if __name__ == "__main__" from another Python script because I cannot count the underscores &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regex stuff (re module) is hard to do from memory (specially group() vs groups() on a matched object!):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I need to check docs on pretty much everything in the 're' lib before using it &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We share the feeling, we too have to lookup datetime docs everytime we work with dates:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I can't use date and timezone properly without google &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of these things you open a quick REPL session for:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still have to use the REPL to figure out how slices work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh and don't forget the whitespace, luckily it's simple to set (and forget) in Vim:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I can't write python without something to manage my whitespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whitespace, ouch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... contributor to many scientific python projects, and I just spent 40 min debugging because I had an extra space on one line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;*nix fun&lt;/h3&gt;
&lt;p&gt;This happens all the time to us too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always forget about the crontab's entry time order and need to lookup at the man page. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...  I'm using bash since 15 years but still have to Google the syntax of 'find -exec' every time I use it. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To have a laugh you can read more generic programming examples &lt;a href="https://twitter.com/search?f=tweets&amp;amp;q=my%20name%20is%20years%20still&amp;amp;src=typd"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;PyBites favorite:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been coding in Python for 4 years now and I still haven't learned any better languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;And you?&lt;/h3&gt;
&lt;p&gt;You can share your experience with us &lt;a href="http://twitter.com/home?status=@pybites I have been coding in %23Python for n years and I still ... " target="_blank"&gt;via Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="learning"></category><category term="twitter"></category><category term="pyfun"></category><category term="stackoverflow"></category></entry><entry><title>Code Challenge 08 - House Inventory Tracker</title><link href="https://pybit.es/codechallenge08.html" rel="alternate"></link><published>2017-02-27T00:01:00+01:00</published><updated>2017-02-27T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-27:/codechallenge08.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will create an app to keep track of a house inventory.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A new week, time for some coding! Here's the idea - we're keeping it simple.&lt;/p&gt;
&lt;p&gt;Having home and contents insurance requires you to accurately indicate the value of the items in your house. The idea came to me when doing this for myself. &lt;/p&gt;
&lt;p&gt;What if I could write a simple program that allowed me to create a list of rooms in my house and for each room a list of items along with their dollar values? &lt;/p&gt;
&lt;h3&gt;House Inventory Tracker Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a list of rooms (doesn't have to use the list type).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each room in your rooms list needs to contain at least 5 items (ie, TV, couch, table, etc) and the relative dollar value of each item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script you will write will print out each room along with the individual items and values. This needs to be properly formatted, eg: no printing a dict as is.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;These are bonus features. Not required but cool to try if you're interested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create some sort of program shell with a menu system around this. ie, "Which room would you like to list out?"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're really game, allow users to create rooms and update information. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You could even make an API with Flask or your preferred framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Print the total dollar value of each room and the entire house.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have persistent storage of the data. sqlite3 = stdlib and light-weight, but feel free to use your preferred DB / module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 08
# open inventory.py (just a blank file for this challenge)
#¬†code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="app"></category><category term="inventory"></category><category term="APIs"></category><category term="Flask"></category></entry><entry><title>Code Challenge 07 - Twitter Sentiment Analysis - Review</title><link href="https://pybit.es/codechallenge07_review.html" rel="alternate"></link><published>2017-02-26T00:50:00+01:00</published><updated>2017-02-26T00:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-26:/codechallenge07_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge07.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge07.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solution / learning&lt;/h2&gt;
&lt;h3&gt;Getting the data&lt;/h3&gt;
&lt;p&gt;First we let the &lt;a href="https://github.com/pybites/challenges/blob/solutions/07/getting_data.py"&gt;data gathering script we provided&lt;/a&gt; run for 5 days and 10 hours. As promised we would do the analysis on &lt;a href="http://www.imdb.com/title/tt4465564/"&gt;50 shades of darker&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nohup python getting_data.py &lt;span class="m"&gt;50&lt;/span&gt; shades darker &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It ran Mon Feb 20 09:13 - Sat Feb 25 19:25 and collected &amp;gt; 10K tweets, storing them in data_1487581986.json&lt;/p&gt;
&lt;p&gt;We kept it simple, question to be answered: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there overly positive or negative talk about 50 shades of darker on Twitter?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Enter TextBlob&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt; is a Python (2 and 3) library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It makes sentiment analysis very easy. &lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;Our script is &lt;a href="https://github.com/pybites/challenges/blob/solutions/07/sentiment.py"&gt;here&lt;/a&gt;. What we did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Import required libraries: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textblob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to follow along, create a virtual env and do a pip install -r requirements.txt (from subdirectory 07, after having cloned the challenges repo).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each retrieved tweet (and its meta data) was stored as json by the data collector script. This generator retrieves them from the input file (further down):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(input_file):
    with open(input_file) as f:
        for line in f.readlines():
            yield json.loads(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://textblob.readthedocs.io/en/dev/quickstart.html"&gt;TextBlob Quickstart&lt;/a&gt; offers an easy API for sentiment analysis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sentiment property returns a namedtuple of the form Sentiment(polarity, subjectivity). The polarity score is a float within the range [-1.0, 1.0].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we defined:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_sentiment(polarity):
    if polarity &amp;lt; 0:
        return &amp;quot;negative&amp;quot;
    elif polarity == 0:
        return &amp;quot;neutral&amp;quot;
    else:
        return &amp;quot;positive&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We pass the script the data_1487581986.json file we collected on our server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    if len(sys.argv) &amp;lt; 2:
        print(&amp;#39;please provide json data file&amp;#39;)
        sys.exit(1)

    input_file = sys.argv[1]

    tweets = get_tweets(input_file)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use a defaultdict to store the sentiments. We use a collections.defaultdict + set here (over the simpler collections.Counter) for two reasons: 1. ignore duplicate tweets, 2. store the texts for further inspection (see further down).&lt;/p&gt;
&lt;p&gt;This really shows the magic of external libraries and a nice API: few lines of code, hiding complexity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    sentiments = defaultdict(set)

    for tw in tweets:
        text = dict(tw)[&amp;#39;text&amp;#39;].lower()
        blob = TextBlob(text)
        sent = get_sentiment(blob.sentiment.polarity)
        sentiments[sent].add(text)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate percentages and print the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    total = sum(len(i) for i in sentiments.values())

    perc_pos = len(sentiments[&amp;quot;positive&amp;quot;]) / total * 100
    perc_neg = len(sentiments[&amp;quot;negative&amp;quot;]) / total * 100
    perc_neu = len(sentiments[&amp;quot;neutral&amp;quot;]) / total * 100

    print(&amp;quot;Analyzed {} tweets&amp;quot;.format(total))
    print(&amp;quot;Positive: {:.2f}%&amp;quot;.format(perc_pos))
    print(&amp;quot;Negative: {:.2f}%&amp;quot;.format(perc_neg))
    print(&amp;quot;Neutral: {:.2f}%&amp;quot;.format(perc_neu))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The verdict&lt;/h3&gt;
&lt;p&gt;People talk mostly positive about the movie:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; python sentiment.py data_1487581986.json
Analyzed &lt;span class="m"&gt;10053&lt;/span&gt; tweets
Positive: &lt;span class="m"&gt;33&lt;/span&gt;.85%
Negative: &lt;span class="m"&gt;13&lt;/span&gt;.86%
Neutral: &lt;span class="m"&gt;52&lt;/span&gt;.29%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Would be nice to break this down further, maybe by region. We wanted to look at gender, but this data was not provided by the Twitter API. &lt;/p&gt;
&lt;h3&gt;Some anonymous examples&lt;/h3&gt;
&lt;p&gt;We peaked at some tweets for validation. As you see it's not 100% correct (doubts marked with '?'), but it does give you a good indication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;neutral
-- 50 shades darker though.. oouuu. üôÜüèΩ
-- ‚ù§ü§¥üèº‚ù§ ‚Äî watching 50 shades darker...
-- still don&amp;#39;t know what to think of 50 shades darkerü§îü§î
---

positive
-- can&amp;#39;t get over how amazing 50 shades darker is üòç
-- i enjoyed 50 shades darker very much
?-- that 50 shades darker was kind of sorry
---

negative
?-- still haven&amp;#39;t seen 50 shades darker :(  
-- 50 shades darker might be the worst movie i&amp;#39;ve ever seen ...
-- 50 shades darker was terrible god i wish i could get those 2 hours back
---
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://realpython.com/blog/python/twitter-sentiment-python-docker-elasticsearch-kibana/"&gt;This great article by Real Python&lt;/a&gt; shows another Twitter Sentiment Analysis example adding Docker, Elasticsearch, Kibana to the mix. &lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="Twitter"></category><category term="sentiment"></category><category term="TextBlob"></category></entry><entry><title>Twitter digest 2017 week 08</title><link href="https://pybit.es/twitter_digest_201708.html" rel="alternate"></link><published>2017-02-25T01:20:00+01:00</published><updated>2017-02-25T01:20:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-25:/twitter_digest_201708.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; "New in &lt;a href="https://twitter.com/search/#python3.6" target="_blank"&gt;#python3.6&lt;/a&gt; - formatted string literals:
&amp;gt;&amp;gt;&amp;gt; name = Fred
&amp;gt;&amp;gt;&amp;gt; f'His name is {name}'
His name is Fred

More: &lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835100947844055040" data-datetime="2017-02-24T12:15:56+00:00"&gt;February 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; Use _ in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; console to retrieve the result of the last statement
&amp;gt;&amp;gt;&amp;gt; 3 + 4
7
&amp;gt;&amp;gt;&amp;gt; _ * 3
21
For other uses, see: &lt;a href="https:/‚Ä¶" title="https:/‚Ä¶" target="_blank"&gt;https:/‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835100903350894592" data-datetime="2017-02-24T12:15:45+00:00"&gt;February 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonLibHunt:" target="_blank"&gt;@PythonLibHunt:&lt;/a&gt; Awesome &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Weekly &lt;a href="https://twitter.com/search/#41" target="_blank"&gt;#41&lt;/a&gt; is out &lt;a href="https://t.co/QeDNiVLRzI" title="https://t.co/QeDNiVLRzI" target="_blank"&gt;https://t.co/QeDNiVLRzI&lt;/a&gt;
Featuring &lt;a href="https://twitter.com/@djangoproject" target="_blank"&gt;@djangoproject&lt;/a&gt; &lt;a href="https://twitter.com/@djangostars" target="_blank"&gt;@djangostars&lt;/a&gt; &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835027676930920448" data-datetime="2017-02-24T07:24:46+00:00"&gt;February 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt;  thanks a lot guys for mentioning our python resources article and PyBites blog, really appreciated&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834892403265925121" data-datetime="2017-02-23T22:27:15+00:00"&gt;February 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Special &lt;a href="https://twitter.com/@talkpython:" target="_blank"&gt;@talkpython:&lt;/a&gt; &lt;a href="https://twitter.com/search/#100:" target="_blank"&gt;#100:&lt;/a&gt; Python past, present, and future with &lt;a href="https://twitter.com/@gvanrossum" target="_blank"&gt;@gvanrossum&lt;/a&gt; &lt;a href="https://t.co/pAfyMrLnOM" title="https://t.co/pAfyMrLnOM" target="_blank"&gt;https://t.co/pAfyMrLnOM&lt;/a&gt; Thank you everyone for‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834606872715997184" data-datetime="2017-02-23T03:32:39+00:00"&gt;February 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; Just blogged: New Talk Python course: Consuming HTTP services in Python &lt;a href="https://t.co/Y4DKuFWqZJ" title="https://t.co/Y4DKuFWqZJ" target="_blank"&gt;https://t.co/Y4DKuFWqZJ&lt;/a&gt; &lt;a href="https://t.co/VvvjtcMdEe" title="https://t.co/VvvjtcMdEe" target="_blank"&gt;https://t.co/VvvjtcMdEe&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834606825001611264" data-datetime="2017-02-23T03:32:27+00:00"&gt;February 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; üì∫üêç Python Tricks &lt;a href="https://twitter.com/search/#6:" target="_blank"&gt;#6:&lt;/a&gt; Understanding &lt;a href="https://twitter.com/@classmethod," target="_blank"&gt;@classmethod,&lt;/a&gt; &lt;a href="https://twitter.com/@staticmethod," target="_blank"&gt;@staticmethod,&lt;/a&gt; and Regular Methods &lt;a href="https://t.co/dzAdfzofZC" title="https://t.co/dzAdfzofZC" target="_blank"&gt;https://t.co/dzAdfzofZC&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834327854833889281" data-datetime="2017-02-22T09:03:56+00:00"&gt;February 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; great article, nice related history lesson: &lt;a href="https://t.co/82bJPsnphM" title="https://t.co/82bJPsnphM" target="_blank"&gt;https://t.co/82bJPsnphM&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833903382989512705" data-datetime="2017-02-21T04:57:14+00:00"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@djdanzilio:" target="_blank"&gt;@djdanzilio:&lt;/a&gt; OH: Python is so easy. You just write pseudocode and indent until it runs.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833892102752915456" data-datetime="2017-02-21T04:12:24+00:00"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip ‚òùÔ∏è
Like namedtuple? You'll love NamedTuple! üòÑ
class Name(NamedTuple):
first: str
last: str
&lt;a href="https://t.co‚Ä¶" title="https://t.co‚Ä¶" target="_blank"&gt;https://t.co‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833891246947127297" data-datetime="2017-02-21T04:09:00+00:00"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; sum can take a generator:
sum(LETTER_SCORES.get(char.upper(), 0) for char in word)
Tip by &lt;a href="https://twitter.com/@pybites." target="_blank"&gt;@pybites.&lt;/a&gt; Thanks! &lt;a href="https://t.co/Cn‚Ä¶" title="https://t.co/Cn‚Ä¶" target="_blank"&gt;https://t.co/Cn‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833640394630033408" data-datetime="2017-02-20T11:32:13+00:00"&gt;February 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Code readability &lt;a href="https://t.co/GiRyjevWly" title="https://t.co/GiRyjevWly" target="_blank"&gt;https://t.co/GiRyjevWly&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833402718924451840" data-datetime="2017-02-19T19:47:46+00:00"&gt;February 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Python 3, created via PEP 3000, is exactly 3,000 days old today. Take a moment to celebrate! Thanks for the heads up &lt;a href="https://twitter.com/@cclau‚Ä¶" target="_blank"&gt;@cclau‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833400185925550080" data-datetime="2017-02-19T19:37:42+00:00"&gt;February 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Scientists make huge dataset of nearby stars available to public &lt;a href="https://t.co/4Gg72kcTHV" title="https://t.co/4Gg72kcTHV" target="_blank"&gt;https://t.co/4Gg72kcTHV&lt;/a&gt; &lt;a href="https://twitter.com/@Pybonacci" target="_blank"&gt;@Pybonacci&lt;/a&gt; &lt;a href="https://twitter.com/@astrojuanlu" target="_blank"&gt;@astrojuanlu&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833264349137477634" data-datetime="2017-02-19T10:37:56+00:00"&gt;February 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsafaribooks:" target="_blank"&gt;@newsafaribooks:&lt;/a&gt; The Python 3 Standard Library by Example, Second Edition &lt;a href="https://twitter.com/search/#AddisonWesleyProfessional" target="_blank"&gt;#AddisonWesleyProfessional&lt;/a&gt; &lt;a href="https://t.co/FVvNBvfCSr" title="https://t.co/FVvNBvfCSr" target="_blank"&gt;https://t.co/FVvNBvfCSr&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833070218457001984" data-datetime="2017-02-18T21:46:32+00:00"&gt;February 18, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="Guido"></category><category term="namedtuples"></category><category term="tips"></category><category term="books"></category><category term="stdlib"></category><category term="data"></category></entry><entry><title>Write Pythonic Code Like a Seasoned Developer Review</title><link href="https://pybit.es/pythonic-code-course-rewiew.html" rel="alternate"></link><published>2017-02-23T20:30:00+01:00</published><updated>2017-02-23T20:30:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-23:/pythonic-code-course-rewiew.html</id><summary type="html">&lt;p&gt;Review of Michael Kennedy's Brilliant Pythonic Code Course&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I'd hit a point in my Python learning where reading books, posts, github, etc  just wasn't cutting it. Sometimes the self-learning experience can slow down and you start stagnating. I decided it was time to try learning from some video courses.&lt;/p&gt;
&lt;p&gt;At first I started watching YouTube videos but was eventually (and luckily!) introduced to the &lt;a href="https://training.talkpython.fm"&gt;Talk Python Training Courses&lt;/a&gt; by Michael Kennedy, host of the &lt;a href="https://talkpython.fm"&gt;Talk Python Podcast&lt;/a&gt;. Needless to say, I was so impressed I had to write about it!&lt;/p&gt;
&lt;h2&gt;Write Pythonic Code Like a Seasoned Developer&lt;/h2&gt;
&lt;p&gt;I'll start by calling out that Michael has 4 courses on offer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_python_jumpstart/python-language-jumpstart-building-10-apps"&gt;Python Jumpstart by Building 10 Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business"&gt;Python for Entrepreneurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_http_reset_client_course/consuming-http-and-soap-services-in-python-with-json-xml-and-screen-scraping"&gt;Consuming HTTP Services in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a beginner, I actually should have started with the &lt;em&gt;Python Jumpstart&lt;/em&gt; course as it's definitely of the "Learn Python" variant but I just couldn't look past the &lt;em&gt;Write Pythonic Code&lt;/em&gt; option!&lt;/p&gt;
&lt;h2&gt;No BS&lt;/h2&gt;
&lt;p&gt;The first thing you'll notice when you kick off Michael's course is that there's no fluff and that's why I absolutely &lt;strong&gt;love&lt;/strong&gt; it. After the initial set up of the environment, he drops you straight into PEP8 recommended styling.&lt;/p&gt;
&lt;p&gt;There is no lecturing, there's just code and it's amazing. Every single concept is backed up by real and "live" examples. Michael even leaves certain, relatable mistakes in the course just to demonstrate how easy it is to make them.&lt;/p&gt;
&lt;h2&gt;The Content&lt;/h2&gt;
&lt;p&gt;In these first 13 minutes I learned &lt;em&gt;so&lt;/em&gt; many techniques and best practices.&lt;/p&gt;
&lt;p&gt;Quite a few times I found myself cursing that it had taken me weeks to learn what Michael was demonstrating in meer minutes.&lt;/p&gt;
&lt;p&gt;The beauty of the course however lies in the fact that you're not spoon fed everything. You're expected to have prior knowledge of concepts such as Python Classes, data structures and so on.&lt;/p&gt;
&lt;p&gt;The courses teaches you to do exactly what the title implies: &lt;em&gt;To Write Pythonic Code&lt;/em&gt;. Plain and simple! You will learn the most Pythonic way to merge dictionaries, format strings and write loops (just to name a few).&lt;/p&gt;
&lt;p&gt;It sounds simplistic but it's actually quite in depth. I was really impressed at how deep Michael dives with some of his explanations!&lt;/p&gt;
&lt;h2&gt;Teaching Style&lt;/h2&gt;
&lt;p&gt;This brings me to the teaching style. There are two kinds of teachers, the type that will bore you to death with slides and monotony, and then there are the ones that teach in such a way that you're excited to learn.&lt;/p&gt;
&lt;p&gt;That's Michael.&lt;/p&gt;
&lt;p&gt;Like I said, every concept is backed by oodles of code examples. Michael "live" types the code - &lt;em&gt;so&lt;/em&gt; much better than static slides.&lt;/p&gt;
&lt;p&gt;My favourite thing is that he demonstrates the multiple ways you can write the same block of code.&lt;/p&gt;
&lt;p&gt;For example, in numerous instances he shows you how to write the code in a "Bad C-Style" way, then shows you the "less Pythonic" method, followed by the amazingly Pythonic super way.&lt;/p&gt;
&lt;p&gt;Seeing this progression from "bad" to Pythonic really helps to cement the concepts.&lt;/p&gt;
&lt;h2&gt;Familiarity&lt;/h2&gt;
&lt;p&gt;I feel I should mention that as I listen to the &lt;em&gt;Talk Python To Me&lt;/em&gt; podcast, there's a sense of familiarity. I don't feel like I'm taking a course from some stranger but rather from someone I know.&lt;/p&gt;
&lt;p&gt;I've listened to Michael for hours on end through the podcast which really helps with the engagement. (The occasional joke also contributes!). It's pretty cool and definitely not creepy at all okay?!&lt;/p&gt;
&lt;h2&gt;Where are the Examples?&lt;/h2&gt;
&lt;p&gt;You might be wondering why I haven't provided any examples to back up my judgement.
The reality is, Michael's clearly put a &lt;strong&gt;lot&lt;/strong&gt; of hard work into this course (it's &lt;em&gt;extremeley&lt;/em&gt; polished) so copying any of his code examples here would be doing him a disservice.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Clearly I'm a fan. I've seen online courses for Python before and quite a few have left me wanting but not this one.&lt;/p&gt;
&lt;p&gt;I wish I'd stumbled upon &lt;em&gt;Write Pythonic Code Like a Seasoned Developer&lt;/em&gt; a lot earlier.&lt;/p&gt;
&lt;p&gt;When it comes to writing Pythonic code, if you want to learn the how and also the &lt;em&gt;why&lt;/em&gt; then this is the course for you.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Here are some resources you might find helpful relative to this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer Course URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael's &lt;a href="https://talkpython.fm/"&gt;Talk Python to Me Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael Kennedy and Brian Okken's &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="training"></category><category term="courses"></category><category term="review"></category><category term="learning"></category></entry><entry><title>5 tips to speed up your Python code</title><link href="https://pybit.es/faster-python.html" rel="alternate"></link><published>2017-02-21T09:00:00+01:00</published><updated>2017-02-21T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-02-21:/faster-python.html</id><summary type="html">&lt;p&gt;In this post I will give you 5 tips to speed up your code.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is about native Python, not &lt;a href="https://en.wikipedia.org/wiki/List_of_compilers#Python_compilers"&gt;compilers&lt;/a&gt; nor &lt;a href="https://docs.python.org/3/library/concurrency.html"&gt;concurrency&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First off: optimizing usually is not your primary concern, writing readable code is. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Premature optimization is the root of all evil. (Donald Knuth)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However a lot of the tips I investigated below go hand-in-hand with writing good, Pythonic code. &lt;/p&gt;
&lt;p&gt;Here are 5 important things to keep in mind in order to write efficient Python code.&lt;/p&gt;
&lt;h2&gt;1. Know the basic data structures&lt;/h2&gt;
&lt;p&gt;As already mentioned &lt;a href="http://pybit.es/collections-deque.html"&gt;here&lt;/a&gt; dicts and sets use hash tables so have O(1) lookup performance.  As the &lt;a href="http://docs.python-guide.org/en/latest/writing/style/"&gt;The Hitchhiker's Guide&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... it is often a good idea to use sets or dictionaries instead of lists in cases where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The collection will contain a large number of items&lt;/li&gt;
&lt;li&gt;You will be repeatedly searching for items in the collection&lt;/li&gt;
&lt;li&gt;You do not have duplicate items.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;For a performance cheat sheet for al the main data types refer to &lt;a href="https://wiki.python.org/moin/TimeComplexity"&gt;TimeComplexity&lt;/a&gt;. For a nice, accessible and visual book on algorithms see &lt;a href="http://pybit.es/grokking_algorithms.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Update: in the first iteration of this article I did a 'value in set(list)' but this is actually expensive because you have to do the list-to-set cast. The suggested set(a) &amp;amp; set(b) instead of double-for-loop has this same problem. Thanks for pointing this out &lt;a href="https://redd.it/5vapzt"&gt;on Reddit&lt;/a&gt;. There were some more comments there which I will update in this article for completeness and correctness.&lt;/p&gt;
&lt;h2&gt;2. Reduce memory footprint&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;msg = &amp;#39;line1\n&amp;#39;
msg += &amp;#39;line2\n&amp;#39;
msg += &amp;#39;line3\n&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is inefficient because a new string gets created upon each pass. Use a list and join it together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;msg = [&amp;#39;line1&amp;#39;, &amp;#39;line2&amp;#39;, &amp;#39;line3&amp;#39;]
&amp;#39;\n&amp;#39;.join(msg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly avoid the + operator on strings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# slow
msg = &amp;#39;hello &amp;#39; + my_var + &amp;#39; world&amp;#39;

# faster
msg = &amp;#39;hello %s world&amp;#39; % my_var

# or better:
msg = &amp;#39;hello {} world&amp;#39;.format(my_var)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pythonic code is not only more readable but also faster, another example: 'if variable:' is faster than the un-idiomatic 'if variable == True:' &lt;/p&gt;
&lt;p&gt;Other memory saving techniques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;probably best known are generators which result in the lazy (on demand) generation of values, which translates to lower memory usage. Good news is that in Python 3 range, d.items() etc return generators (in Python 2 use xrange, d.iteritems() respectively). Another good reason to switch to Python 3 :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list.sort() is in place vs sorted() which makes a copy. Honestly I have mostly used latter, but it might matter if your data set grows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/reference/datamodel.html"&gt;__slots__&lt;/a&gt;: 'the __slots__ declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because __dict__ is not created for each instance', so this is really useful if you have a lot of instances (here is a &lt;a href="http://tech.oyster.com/save-ram-with-python-slots/"&gt;real-world example&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Use builtin functions and libraries&lt;/h2&gt;
&lt;p&gt;Builtin functions like sum, max, any, map, etc are implemented in C. They are very efficient and well tested. Use them!&lt;/p&gt;
&lt;p&gt;Example borrowed from this &lt;a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips"&gt;great wiki&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newlist = []
for word in oldlist:
    newlist.append(word.upper())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;newlist = map(str.upper, oldlist)  # wiki cites map as a for loop moved into C code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For readability I much prefer a list comprehension though. And as another redditor commented a list comprehension is just as fast as list(map(x)) and a generator comprehension is just as fast as map(x).&lt;/p&gt;
&lt;p&gt;Guido's &lt;a href="https://www.python.org/doc/essays/list2str/"&gt;Python Patterns - An Optimization Anecdote&lt;/a&gt; is a great read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you feel the need for speed, go for built-in functions - you can't beat a loop written in C. Check the library manual for a built-in function that does what you want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another example of using builtins is the &lt;a href="https://docs.python.org/2/library/collections.html"&gt;collections&lt;/a&gt; module which offers Pythonic and efficient data structures (deque, defaultdict, Counter, etc):&lt;/p&gt;
&lt;p&gt;For example defaultdict ('list as the default_factory' example from documentation):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s = [(&amp;#39;yellow&amp;#39;, 1), (&amp;#39;blue&amp;#39;, 2), (&amp;#39;yellow&amp;#39;, 3), (&amp;#39;blue&amp;#39;, 4), (&amp;#39;red&amp;#39;, 1)]
&amp;gt;&amp;gt;&amp;gt; d = defaultdict(list)
&amp;gt;&amp;gt;&amp;gt; for k, v in s:
...     d[k].append(v)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or use Counter, just one line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Counter(&amp;#39;mississippi&amp;#39;)
Counter({&amp;#39;i&amp;#39;: 4, &amp;#39;s&amp;#39;: 4, &amp;#39;p&amp;#39;: 2, &amp;#39;m&amp;#39;: 1})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As Jack Diederich says in &lt;a href="https://www.youtube.com/watch?v=o9pEzgHorH0"&gt;this great talk&lt;/a&gt; :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hate code and I want as little of it as possible in our product.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;4. Move calculations outside the loop&lt;/h2&gt;
&lt;p&gt;If you have a big iterator and you need to do some regex matching, for example match a date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i in big_it:
    m = re.search(r&amp;#39;\d{2}-\d{2}-\d{4}&amp;#39;, i)
    if m:
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Better to compile the regex once and use that 'cached' version in the loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date_regex = re.compile(r&amp;#39;\d{2}-\d{2}-\d{4}&amp;#39;)

for i in big_it:
    m = date_regex.search(i)
    if m:
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Update: another redditor commented: "it's by the mercy of the interpreter's implementation, most (including the common CPython) have their own cache for a certain number of regexes, so it probably wouldn't cause any extra time.".&lt;/p&gt;
&lt;p&gt;More generically evaluate as much as possible outside the loop!&lt;/p&gt;
&lt;p&gt;Another trick is to asign a function (calculation) to a local variable:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python accesses local variables much more efficiently than global variables. (&lt;a href="[PerformanceTips wiki](https://wiki.python.org/moin/PythonSpeed/PerformanceTips)"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myfunc = myObj.func
fcor i in range(n):
    myfunc(i) # faster than myObj.func(i)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the subject of caching, for memoization (an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again) you can use the &lt;a href="https://docs.python.org/3/library/functools.html#functools.lru_cache"&gt;functools.lru_cache decorator&lt;/a&gt;. LRU = &lt;a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29"&gt;Least Recently Used&lt;/a&gt; and a good use case is fetching data from the web (&lt;a href="https://docs.python.org/3/library/functools.html#functools.lru_cache"&gt;the docs page&lt;/a&gt; has an example of LRU cache for static web content).&lt;/p&gt;
&lt;h2&gt;5. Keep your code base small&lt;/h2&gt;
&lt;p&gt;Common sense but still: be conscious what you put in the module vs main level (latter being below the __main__ statement). When you import a module potentially a lot of code runs and can slow down your program! &lt;/p&gt;
&lt;p&gt;Reduce the amounts of if/elif/and/or. An interesting example I learned from &lt;a href="https://www.youtube.com/watch?v=YjHsOrOOSuI"&gt;this great talk&lt;/a&gt;: the ask forgiveness code style might run faster because it eliminates the need for the if check.&lt;/p&gt;
&lt;p&gt;Update: on the mentioned Reddit thread we got some feedback on try/except vs 'if os.path.isfile', latter might actually be better. &lt;/p&gt;
&lt;h2&gt;How to spot performance issues?&lt;/h2&gt;
&lt;p&gt;Humans are pretty bad at guessing, I can tell ... once I wanted to optimize a Python script I built that did heavy text parsing but took a bit of time. Profiling the code it was caused by a different part than I had intuitively thought!&lt;/p&gt;
&lt;p&gt;You can use &lt;a href="https://docs.python.org/3.6/library/profile.html"&gt;a profiler&lt;/a&gt;, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m cProfile [-o output_file] [-s sort_order] myscript.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To time your code, see &lt;a href="http://stackoverflow.com/questions/7370801/measure-time-elapsed-in-python"&gt;this SO thread&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Again Guido's &lt;a href="https://www.python.org/doc/essays/list2str/"&gt;Python Patterns - An Optimization Anecdote&lt;/a&gt; is a great read.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference: &lt;a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips"&gt;Performance tips wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://wiki.python.org/moin/TimeComplexity"&gt;TimeComplexity reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentioned talk &lt;a href="https://www.youtube.com/watch?v=YjHsOrOOSuI"&gt;Writing faster Python&lt;/a&gt; by Sebastian Witowski.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Book on the subject: &lt;a href="http://amzn.to/2mKYrVZ"&gt;High Performance Python: Practical Performant Programming for Humans&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What are your favorite tricks to speed up your Python code?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="performance"></category><category term="data structures"></category><category term="pythonic"></category><category term="generators"></category><category term="map"></category><category term="builtin"></category><category term="algorithms"></category><category term="regex"></category><category term="patterns"></category></entry><entry><title>Code Challenge 07 - Twitter Sentiment Analysis</title><link href="https://pybit.es/codechallenge07.html" rel="alternate"></link><published>2017-02-20T00:01:00+01:00</published><updated>2017-02-20T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-20:/codechallenge07.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will do a sentiment analysis of a recently released movie, is it well received or not?&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Perform a sentiment analysis on a popular topic on Twitter&lt;/h3&gt;
&lt;p&gt;A new week, more coding! You are free to pick a topic. This can be a trend, news or movie. We will take latter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do Tweeters react on &lt;a href="http://www.imdb.com/title/tt4465564/?ref_=nv_sr_1"&gt;Fifty Shades Darker&lt;/a&gt;, positive or negative?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Register an Twitter app if not done already to get keys, put those in config.py (copying the config-template.py)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual environment and pip install Twython (to follow along with our approach just do pip install -r requirements.txt)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have provided a getting_data.py script (from &lt;a href="https://github.com/joelgrus/data-science-from-scratch/blob/master/code-python3/getting_data.py"&gt;Joel Grus&lt;/a&gt;) that uses the Twitter &lt;a href="https://dev.twitter.com/streaming/overview"&gt;Streaming APIs&lt;/a&gt; to collect tweets, run it as follows. It takes 1000 tweets, adjust as necessary (this is also an experiment for us!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python getting_data.py Fifty Shades Darker
&lt;span class="c1"&gt;# replacing with your topic of interest&lt;/span&gt;
&lt;span class="c1"&gt;#¬†generates data_unix_timestamp.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you prefer Tweepy, you can use this &lt;a href="https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/"&gt;article/ script&lt;/a&gt; (and pip install that library ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script you will write is sentiment.py, it contains some code to read the stored json back in memory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python sentiment.py data_1487544849.json
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean up the data, we did some of this in &lt;a href="http://pybit.es/codechallenge05_review.html"&gt;part 2&lt;/a&gt; of this challenge series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sentiment analysis ... is the audience positive or negative? We will try &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt; for this, use any (Python) tools you prefer ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 07
$ cp sentiment-template.py sentiment.py
# if you want to follow along with our recommended libraries (assuming py &amp;gt;= 3.3)
$ python -m venv venv 
$ source venv/bin/activate&amp;#39;
$ pip install -r requirements.txt
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category></entry><entry><title>Twitter digest 2017 week 07</title><link href="https://pybit.es/twitter_digest_201707.html" rel="alternate"></link><published>2017-02-18T09:17:00+01:00</published><updated>2017-02-18T09:17:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-18:/twitter_digest_201707.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tiny Python 3.6 notebook - &lt;a href="https://t.co/DhkDN4wz1E" title="https://t.co/DhkDN4wz1E" target="_blank"&gt;https://t.co/DhkDN4wz1E&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832851596052688896" data-datetime="2017-02-18T07:17:48+00:00"&gt;February 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Using functional programming in Python like a boss: Generators, Iterators and Decorators  &lt;a href="https://t.co/nGKjeKaI1V" title="https://t.co/nGKjeKaI1V" target="_blank"&gt;https://t.co/nGKjeKaI1V&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832659700776787969" data-datetime="2017-02-17T18:35:17+00:00"&gt;February 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dabeaz:" target="_blank"&gt;@dabeaz:&lt;/a&gt; Well, work has recently started...    &lt;a href="https://t.co/fu5mGsv0hN" title="https://t.co/fu5mGsv0hN" target="_blank"&gt;https://t.co/fu5mGsv0hN&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832659410543529984" data-datetime="2017-02-17T18:34:08+00:00"&gt;February 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Python Weekly - Issue 282 &lt;a href="https://t.co/2xkYbTXDW7" title="https://t.co/2xkYbTXDW7" target="_blank"&gt;https://t.co/2xkYbTXDW7&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://twitter.com/search/#keras" target="_blank"&gt;#keras&lt;/a&gt; &lt;a href="https://twitter.com/search/#opencv" target="_blank"&gt;#opencv&lt;/a&gt; &lt;a href="https://twitter.com/search/#pyflame" target="_blank"&gt;#pyflame&lt;/a&gt; &lt;a href="https://twitter.com/search/#tensorflow" target="_blank"&gt;#tensorflow&lt;/a&gt; &lt;a href="https://twitter.com/search/#spark" target="_blank"&gt;#spark&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; &lt;a href="https://twitter.com/search/#ip‚Ä¶" target="_blank"&gt;#ip‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832332113307385857" data-datetime="2017-02-16T20:53:34+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; ‚ÄúOh no! This package is Python 2 only‚Äù by &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; &lt;a href="https://t.co/DQrRi5mVfH" title="https://t.co/DQrRi5mVfH" target="_blank"&gt;https://t.co/DQrRi5mVfH&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832331244490911744" data-datetime="2017-02-16T20:50:07+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The definitive guide on how to use static, class or abstract methods in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/n8imiKdlqv" title="https://t.co/n8imiKdlqv" target="_blank"&gt;https://t.co/n8imiKdlqv&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832323736409882625" data-datetime="2017-02-16T20:20:17+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Guido's King's Day Speech - wonderful talk: &lt;a href="https://t.co/Zrp7Uo79BP" title="https://t.co/Zrp7Uo79BP" target="_blank"&gt;https://t.co/Zrp7Uo79BP&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832158536712986624" data-datetime="2017-02-16T09:23:50+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#99" target="_blank"&gt;#99&lt;/a&gt; Morepath: Super Powered Python Web Framework &lt;a href="https://t.co/3xPnSAjqBB" title="https://t.co/3xPnSAjqBB" target="_blank"&gt;https://t.co/3xPnSAjqBB&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832152565630406657" data-datetime="2017-02-16T09:00:06+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;nice one, had not used print like this before &lt;a href="https://t.co/b3mbLZT7DY" title="https://t.co/b3mbLZT7DY" target="_blank"&gt;https://t.co/b3mbLZT7DY&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832148331103133698" data-datetime="2017-02-16T08:43:17+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt; d = collections.deque(range(10))
&amp;gt;&amp;gt;&amp;gt; d.rotate(2)
&amp;gt;&amp;gt;&amp;gt; print(d)
‚Äã
deque([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])
&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832148063028387840" data-datetime="2017-02-16T08:42:13+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ramalhoorg:" target="_blank"&gt;@ramalhoorg:&lt;/a&gt; Legit is a complementary command-line interface for Git, optimized for workflow simplicity. By &lt;a href="https://twitter.com/@kennethreitz." target="_blank"&gt;@kennethreitz.&lt;/a&gt; &lt;a href="https://t.co/‚Ä¶" title="https://t.co/‚Ä¶" target="_blank"&gt;https://t.co/‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831947828679278593" data-datetime="2017-02-15T19:26:33+00:00"&gt;February 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#13" target="_blank"&gt;#13&lt;/a&gt; Python making the move to GitHub and Dropbox is stepping back from Pyston &lt;a href="https://t.co/Z4iGIQjbZv" title="https://t.co/Z4iGIQjbZv" target="_blank"&gt;https://t.co/Z4iGIQjbZv&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831790197562019843" data-datetime="2017-02-15T09:00:11+00:00"&gt;February 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Writing Clean Python With Namedtuples &lt;a href="https://t.co/OUx89PN8mL" title="https://t.co/OUx89PN8mL" target="_blank"&gt;https://t.co/OUx89PN8mL&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831427802045968385" data-datetime="2017-02-14T09:00:09+00:00"&gt;February 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; "Problem Solving with Algorithms and Data Structures using Python" &lt;a href="https://t.co/7RIyNZKQre" title="https://t.co/7RIyNZKQre" target="_blank"&gt;https://t.co/7RIyNZKQre&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831231247242362882" data-datetime="2017-02-13T19:59:07+00:00"&gt;February 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Brett Slatkin - Refactoring Python: Why and how to restructure your code... &lt;a href="https://t.co/wd6yUQipf0" title="https://t.co/wd6yUQipf0" target="_blank"&gt;https://t.co/wd6yUQipf0&lt;/a&gt; - great talk&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830535920654884865" data-datetime="2017-02-11T21:56:08+00:00"&gt;February 11, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="3.6"></category><category term="functional programming"></category><category term="2vs3"></category><category term="git"></category><category term="github"></category><category term="guido"></category><category term="oop"></category><category term="namedtuples"></category><category term="algorithms"></category><category term="refactoring"></category></entry><entry><title>Code Challenge 06 - PyPI 100K Packages Prediction - Review</title><link href="https://pybit.es/codechallenge06_review.html" rel="alternate"></link><published>2017-02-17T16:00:00+01:00</published><updated>2017-02-17T16:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-17:/codechallenge06_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge06.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge06.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solutions / learning&lt;/h2&gt;
&lt;h3&gt;1. Moving average using PyPI's RSS&lt;/h3&gt;
&lt;p&gt;My first approach was to take the &lt;a href="https://pypi.python.org/pypi?%3Aaction=packages_rss"&gt;PyPI New RSS feed&lt;/a&gt; and take the average of time between adding packages. The script is &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi100k.py"&gt;here&lt;/a&gt;. The problem though is that the RSS feed has only 40 items, not much data. However when I put it in a cronjob and left it running for a week I got pretty similar results: it will happen somewhere at the beginning of March:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# grep Result pypi.log |sed &amp;#39;s/,.* \[Main.*: /   /g&amp;#39;
2017-02-09 16:09:13   2017-02-25 13:52:23.701848
2017-02-10 15:57:03   2017-02-26 03:50:38.528795
2017-02-11 15:57:03   2017-03-09 23:10:14.631885
2017-02-12 15:57:03   2017-03-05 22:31:50.575452
2017-02-13 15:57:03   2017-02-27 07:02:47.599206
2017-02-14 15:57:03   2017-02-21 20:41:34.775090
2017-02-15 15:57:03   2017-02-25 00:01:30.304754
2017-02-16 15:57:03   2017-03-01 12:52:38.659931
2017-02-17 08:00:33   2017-03-01 09:38:01.360349
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another source to use if you go this route is &lt;a href="https://wiki.python.org/moin/PyPIXmlRpc"&gt;PyPI's XML-RPC methods&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. Using scipy.interpolate on Webarchive data&lt;/h3&gt;
&lt;p&gt;I was pointed to the &lt;a href="http://web.archive.org/web/20131025235716/https://pypi.python.org/pypi"&gt;Web Archive&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/learnpython/comments/5trx9z/challenge_when_does_pypi_reach_100k_packages/"&gt;Reddit&lt;/a&gt;. This is how you get snapshots of the PyPI page over time == a set of date points and how many packages there were at each time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m venv venv &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; source venv/bin/activate
$ pip install waybackpack
# take 4 years of data (half a GB, delete when done)
$ waybackpack https://pypi.python.org/pypi -d pypi-snapshots --from-date 20130214 --to-date 20170214
# few days went by, adjusted end date to 20170217 today
#
# prep the data
$ cd pypi-snapshots
# sometimes unix is all you need ;)
$ find . -name &amp;#39;pypi&amp;#39;|xargs grep &amp;quot;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;[0-9][0-9]*&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;&amp;quot;| perl -pe &amp;#39;s/.*?(\d+)\/.*&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;(\d+)&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;\/strong&amp;gt;/\1:\2/g&amp;#39; &amp;gt; ../data.txt
$ head -2 data.txt
20130214002304:28061
20130216031420:28108
$ tail -2 data.txt
20170215124232:98825
20170216124236:98907
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This data (and all scripts) are on our &lt;a href="https://github.com/pybites/challenges/tree/solutions/06"&gt;solutions branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I made &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi_pred_webarchive.ipynb"&gt;this notebook&lt;/a&gt; with the analysis. I used &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline"&gt;scipy.interpolate - UnivariateSpline&lt;/a&gt; to do the extrapolation, I found this &lt;a href="http://stackoverflow.com/questions/2745329/how-to-make-scipy-interpolate-give-an-extrapolated-result-beyond-the-input-range"&gt;here&lt;/a&gt; (Joma's answer).&lt;/p&gt;
&lt;h2&gt;My prediction&lt;/h2&gt;
&lt;p&gt;As you can see from the notebook I am getting: 1st of March 8:37 PM. First of the month, nice date. And consistent with the first method.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the result" src="https://pybit.es/images/pypi100k.png"&gt;&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we return to the Twitter API to do a sentiment analysis! Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Update 9th of March 2016&lt;/h2&gt;
&lt;p&gt;OK so turns out the 1st of March was a bit optimistic, predicting is hard :)&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://twitter.com/raymondh/status/836826095026647042"&gt;best / winning solution&lt;/a&gt; with nice Bokeh visuals can be found &lt;a href="https://pypi-package-count.herokuapp.com/"&gt;here&lt;/a&gt;. Although it displays the current date now, it had the right predicted date of the 4th of March before 100K was reached. &lt;/p&gt;
&lt;p&gt;PyBites celebrated closely after hitting this important milestone:&lt;/p&gt;
&lt;script src='//platform.twitter.com/widgets.js'&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's official! PyPI has hit 100,000 packages! Woohoo!! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#milestone" target="_blank"&gt;#milestone&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/jqDoWsjfyR" title="https://t.co/jqDoWsjfyR" target="_blank"&gt;https://t.co/jqDoWsjfyR&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/838178449999081472" data-datetime="2017-03-05T00:04:49+00:00"&gt;March 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt="printscreen of milestone" src="https://pbs.twimg.com/media/C6HQjnMUwAEjBhK.png"&gt;&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category><category term="scipy"></category><category term="numpy"></category><category term="matplotlib"></category></entry><entry><title>How to Order Dict Output in Python</title><link href="https://pybit.es/dict-ordering.html" rel="alternate"></link><published>2017-02-16T23:00:00+01:00</published><updated>2017-02-16T23:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-16:/dict-ordering.html</id><summary type="html">&lt;p&gt;Learn how to order the output of a Python Dict&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dicts are awesome, even for a beginner like me. What isn't so awesome is trying to figure out how to list out their contents for the first time! Lists are easy enough but how on earth do you list out the key/value contents of a dict, let alone in any sort of order?&lt;/p&gt;
&lt;h2&gt;Listing the Contents of a Dict&lt;/h2&gt;
&lt;p&gt;Let's start by simply listing out the dict contents. In the below example I have a dict stored in the &lt;em&gt;ages&lt;/em&gt; variable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I'm not having a mid-life crisis. I'm quite aware that I'm no longer 20.&lt;/p&gt;
&lt;p&gt;Disclaimer 2: I'm being generous when I say Bob is 23. Sorry Bob!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ages = {&amp;#39;julian&amp;#39;: 20, &amp;#39;bob&amp;#39;: 23, &amp;#39;zack&amp;#39;: 3, &amp;#39;anthony&amp;#39;: 95, &amp;#39;daniel&amp;#39;: 41}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in ages.items():
    print(k, v)

julian 20
bob 23
zack 3
anthony 95
daniel 41
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First we create the dict. For the sake of this example I've made sure the keys and the values are not in alphabetical or numerical order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The for loop iterates over the keys, &lt;em&gt;k&lt;/em&gt; and values, &lt;em&gt;v&lt;/em&gt; in &lt;em&gt;ages.items&lt;/em&gt;. Each key/value pair in a dict is called an &lt;strong&gt;item&lt;/strong&gt; thus we use .items().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We print the key and value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the output is in the same "order" as it was inside the dict. It wasn't automatically ordered alphabetically or numerically.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Using a Lambda to Order the Output in Alphabetical Order&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you're unsure of what a Lambda is, I strongly urge you to read &lt;a href="https://dbader.org/blog/python-lambda-functions"&gt;this article by Dan Bader&lt;/a&gt;. It was my source for learning what they were and how to use them. It's a great post!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The previous output is great but what if I wanted to print the &lt;em&gt;ages&lt;/em&gt; data in alphabetical order? Not only do I need to sort it by the letter but also make sure I point my sorting method at the &lt;strong&gt;key&lt;/strong&gt; in the dict. I can do this with a lambda!&lt;/p&gt;
&lt;p&gt;First, let's sort it alphabetically with the help of a lambda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[0])
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, note that we're going to use &lt;em&gt;sorted&lt;/em&gt;. This will sort everything between the () in ascending order. Run &lt;em&gt;help(sorted)&lt;/em&gt; to see the available options to &lt;em&gt;sorted&lt;/em&gt;. You'll see that we can specify a key function to help sort the data. (See more about Python's Help function &lt;a href="http://pybit.es/python-help.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;ages.items()&lt;/em&gt; is called to break the &lt;em&gt;ages&lt;/em&gt; dict up into the five individual &lt;strong&gt;items&lt;/strong&gt;. Note that these "items" I'm referring to are actually tuples!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then use a lambda function as the key to help sort. &lt;em&gt;lambda x&lt;/em&gt; at this point will be the individual &lt;strong&gt;item&lt;/strong&gt; in &lt;em&gt;ages.items()&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function of &lt;em&gt;lambda x&lt;/em&gt; is to sort by &lt;em&gt;x[0]&lt;/em&gt; The contents of x[] is the key/value pair in the dict. For example, {'julian', 20}. The 0 indicates the first position in the pair, the key, which in this case is the name 'julian'.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output is then sorted by the key position in ascending, alphabetical order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: The output of &lt;em&gt;sorted()&lt;/em&gt; is a new list. The &lt;em&gt;ages&lt;/em&gt; dict was not altered, a new list was generated and can thus be stored (hint hint!).&lt;/p&gt;
&lt;h2&gt;Sorting the Output in Numerical Order&lt;/h2&gt;
&lt;p&gt;Now for the flip side. What if I wanted to sort it in numerical order which would be by the &lt;strong&gt;value&lt;/strong&gt; in this case?&lt;/p&gt;
&lt;p&gt;Identical as the above sort with one tiny change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[1])
[(&amp;#39;zack&amp;#39;, 3), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;anthony&amp;#39;, 95)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yep! All we do is change the lambda x function to point at position &lt;em&gt;x[1]&lt;/em&gt;, the value.&lt;/p&gt;
&lt;h2&gt;Sorting in Reverse!&lt;/h2&gt;
&lt;p&gt;Sorting that output in reverse is quite simple as well. We use the &lt;em&gt;reverse&lt;/em&gt; flag that &lt;em&gt;sorted()&lt;/em&gt; so handily supports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Reverse/Descending Name Sort
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[0], reverse=True)
[(&amp;#39;zack&amp;#39;, 3), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;anthony&amp;#39;, 95)]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; #Reverse/Descending Age Sort
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[1], reverse=True)
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Storing the Sorted Output in a Dict&lt;/h2&gt;
&lt;p&gt;You'll have noticed that we still have the output in a list and haven't used &lt;em&gt;print()&lt;/em&gt; yet. There's a reason for that.&lt;/p&gt;
&lt;p&gt;The thing is, it's a lot harder and less Pythonic to print the output of a dict as a list, then iterate over that to get our friendlier &lt;em&gt;print()&lt;/em&gt; output.&lt;/p&gt;
&lt;p&gt;It'd be much better to iterate over the output like we did at the start of this post but to do that, our &lt;em&gt;sorted()&lt;/em&gt; output would need to be a dict. How do we do that if we know &lt;em&gt;sorted()&lt;/em&gt; always returns a list?&lt;/p&gt;
&lt;p&gt;Easy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dict(sorted(ages.items(), key=lambda x: x[0]))
{&amp;#39;anthony&amp;#39;: 95, &amp;#39;bob&amp;#39;: 23, &amp;#39;daniel&amp;#39;: 41, &amp;#39;julian&amp;#39;: 20, &amp;#39;zack&amp;#39;: 3}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We simply call dict on the output of &lt;em&gt;sorted()&lt;/em&gt;. How cool is that? The output is now a dict!&lt;/p&gt;
&lt;h2&gt;Printing the Final Result&lt;/h2&gt;
&lt;p&gt;The moment of truth. Let's print the sorted dict output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; alpha = dict(sorted(ages.items(), key=lambda x: x[0]))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in alpha.items():
    print(k, v)

anthony 95
bob 23
daniel 41
julian 20
zack 3
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; num = dict(sorted(ages.items(), key=lambda x: x[1]))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in num.items():
    print(k, v)

zack 3
julian 20
bob 23
daniel 41
anthony 95
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Is it Really Sorted Though?&lt;/h2&gt;
&lt;p&gt;Have we &lt;em&gt;really&lt;/em&gt; sorted the dict? Here's what we've done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iterated over a dict.&lt;/li&gt;
&lt;li&gt;Sorted the items within the dict into a List.&lt;/li&gt;
&lt;li&gt;"Converted" that list to a dict.&lt;/li&gt;
&lt;li&gt;Assigned the new dict with alphabetically sorted items to a variable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Dicts are unordered data structures.&lt;/strong&gt; This new dict, &lt;em&gt;alpha&lt;/em&gt;, while containing alphabetically sorted data, is still, technically, unordered.&lt;/p&gt;
&lt;p&gt;Can we order it? Sort of. This is where we can use &lt;em&gt;OrderedDict&lt;/em&gt; which is part of the Python stdlib module, &lt;em&gt;collections&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;anthony&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;
&lt;span class="n"&gt;bob&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="n"&gt;daniel&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;
&lt;span class="n"&gt;julian&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;zack&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output is ultimately the same with one exception. In the background, the dict &lt;em&gt;alpha&lt;/em&gt; will remember the &lt;em&gt;order&lt;/em&gt; of the keys as they were inserted.&lt;/p&gt;
&lt;p&gt;While this will work without OrderedDict, there's no &lt;em&gt;guarantee&lt;/em&gt; that keys will keep the same order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read more on OrderedDicts &lt;a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Bonus: Substituting the Lambda for Readability&lt;/h2&gt;
&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; leave things as they are but let's make this a little more readable by storing the lambda function in a variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; get_alpha = lambda x: x[0]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=get_alpha)
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not too bad! We could also do that for the numerical sort by making a &lt;em&gt;get_num&lt;/em&gt; variable!&lt;/p&gt;
&lt;h2&gt;Bonus: Printing the Highest/Lowest Dict Item&lt;/h2&gt;
&lt;p&gt;Okay this is way out of scope for this post but I got playing and figured I'd add it in for good measure.&lt;/p&gt;
&lt;p&gt;What if I wanted to list out the oldest chap in this list? Well, we don't need to sort anything, we just need to know the &lt;em&gt;max&lt;/em&gt; number/age right? (For readability, I'm substituting the &lt;strong&gt;value&lt;/strong&gt; lambda from the previous examples with &lt;em&gt;get_num&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; max(ages.items(), key=get_num)
(&amp;#39;anthony&amp;#39;, 95)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also pull the youngest/lowest entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; min(ages.items(), key=get_num)
(&amp;#39;zack&amp;#39;, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Bonus: Wrap it all up in a def&lt;/h2&gt;
&lt;p&gt;Okay last one, I swear!&lt;/p&gt;
&lt;p&gt;Why don't we put all of this into a function that we can call easily at any time? I mean, it'd be nice to have the ability to reuse this code on any dict we want to sort alphabetically or numerically right?&lt;/p&gt;
&lt;p&gt;Keep in mind the below is assuming the dict key is the string we're sorting by. If we tried to give it a dict where the key was a number and the value was a string it would sort it by the key/number.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def alpha_sort(some_dict):
...     alpha = OrderedDict(sorted(some_dict.items(), key=lambda x: x[0]))
...     for k, v in alpha.items():
...         print(k,v)
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; alpha_sort(ages)
anthony 95
bob 23
daniel 41
julian 20
zack 3
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then use this same &lt;em&gt;alpha_sort&lt;/em&gt; function on any similarly constructed dict we want!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Top 5 pet peeves
&amp;gt;&amp;gt;&amp;gt; alpha_sort(pet_peeves)
Bad Drivers 2
Laziness 3
Predictable TV Shows 4
Rude People 1
Telemarketers 5
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Not really my top 5 pet peeves!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;How great is Python? If you have any other ideas or comments regarding ordering the output of a dict, please let me know! Always be Learning!&lt;/p&gt;
&lt;h2&gt;Update comments Reddit&lt;/h2&gt;
&lt;p&gt;Some good discussion &lt;a href="https://www.reddit.com/r/learnpython/comments/5v3kks/ordering_dict_output/?st=izdve470&amp;amp;sh=6797b6e3"&gt;on Reddit&lt;/a&gt;. Thanks ManyInterests and nadrimajstor for suggesting itemgetter!&lt;/p&gt;
&lt;p&gt;Here is an example how you can use it for sorting instead of lambda: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anthony&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;daniel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sort_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sort_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;daniel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthony&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="dicts"></category><category term="data structures"></category></entry><entry><title>Shelve It!</title><link href="https://pybit.es/shelve-it.html" rel="alternate"></link><published>2017-02-14T00:48:00+01:00</published><updated>2017-02-14T00:48:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-14:/shelve-it.html</id><summary type="html">&lt;p&gt;Shelve basics and a question on how best to manage importing the DB.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When Bob first spoke about Python Shelves a while ago, I thought he'd gone bonkers. This was mainly because he was talking about his "Python shelve" storing book data in a script he was writing. &lt;/p&gt;
&lt;p&gt;"How the heck did you get a bookshelf in Python?!", I wondered. Little did I know he was talking about an awesome, persistent storage option.&lt;/p&gt;
&lt;p&gt;My first foray into Python shelves was actually rather painless (for me). I was impressed by how simple they were. They were almost as simple as opening and working text files.&lt;/p&gt;
&lt;h2&gt;Creating a Shelf File&lt;/h2&gt;
&lt;p&gt;A quick overview for the uninitiated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Julian&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Break it down!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We import the shelve module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;shelve.open('data')&lt;/em&gt; opens (or creates in this case as it doesn't exist yet) a database .db file called &lt;em&gt;data&lt;/em&gt;. This is assigned to the &lt;em&gt;db&lt;/em&gt; variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a variable called &lt;em&gt;name&lt;/em&gt; and it assign it the name Julian (so vain!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interesting part. We now assign the &lt;em&gt;name&lt;/em&gt; variable (containing 'Julian') to the key &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We close off our access to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the &lt;em&gt;name&lt;/em&gt; variable has been stored in a shelf called &lt;em&gt;data.db&lt;/em&gt;. This .db file, by default, is located in the same directory that your script is run from.&lt;/p&gt;
&lt;h2&gt;UnShelve It!&lt;/h2&gt;
&lt;p&gt;It's not actually called unshelving. Just roll with it.&lt;/p&gt;
&lt;p&gt;To read the data back in, we do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The read in of the data here is the 3rd line of code. In this line we take the object stored in &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf and assign it to &lt;em&gt;name&lt;/em&gt;. The string in &lt;em&gt;name&lt;/em&gt; (Julian) is then printed.&lt;/p&gt;
&lt;h2&gt;Noteworthy&lt;/h2&gt;
&lt;p&gt;The above is super basic of course. Shelves become really useful when we start storing lists and dicts in them.&lt;/p&gt;
&lt;p&gt;There is a catch though. Any data you read in from the shelf is not automatically updated in the shelf if changed by your script. Using the above script, after reading in &lt;em&gt;db_names&lt;/em&gt;, if we were to change the name variable to contain 'Bob' instead of 'Julian', that update would not be pushed back to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;p&gt;To enable automatic writing to the shelf you can open the shelf with "writeback" enabled:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db = shelve.open(&amp;#39;data&amp;#39;, writeback=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this can be super handy, it can be a bit of a memory hog if you're not careful. Any changes being made during execution are stored in cache until the shelf file is closed with &lt;em&gt;.close()&lt;/em&gt;. This is when they're written to the shelf file.&lt;/p&gt;
&lt;h2&gt;The Wall I Hit with Shelves&lt;/h2&gt;
&lt;p&gt;My biggest hurdle with regards to shelves was how to manage a script that was importing the shelf data when it was only being run for the first time. That is, before the db file had even been populated with data.&lt;/p&gt;
&lt;p&gt;If I try to run the above code to read in data before &lt;em&gt;db_names&lt;/em&gt; even exists, I'll get an error.&lt;/p&gt;
&lt;p&gt;I wasn't actually too sure how to approach this. Should I:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Have some sort of configuration/setup script that runs separately before running the main program?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have a bunch of if statements?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a cli based menu system that allows the user to choose when to add items?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with all things Python, I found I was &lt;em&gt;try&lt;/em&gt;-ing (pun intended!) too hard. It was as simple as using &lt;em&gt;try&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name = []

while True:
    try:
        with shelve.open(&amp;#39;data&amp;#39;) as db:
            name = db[&amp;#39;db_names&amp;#39;]
            break
    except:
        print(&amp;quot;Please enter a  name to begin: &amp;quot;)
        name.append(input())
        break 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works too!&lt;/p&gt;
&lt;p&gt;This situation got me thinking though. There's more than one way to skin a... &lt;em&gt;ahem&lt;/em&gt;... potato?&lt;/p&gt;
&lt;p&gt;How would you Pythonistas handle this? What sort of approach do you take when it comes to dealing with shelves?&lt;/p&gt;
&lt;p&gt;For now I'll stick with &lt;em&gt;try&lt;/em&gt; but I'm keen to know what you think.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="shelve"></category><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="database"></category></entry><entry><title>Code Challenge 06 - PyPI 100K Packages Prediction</title><link href="https://pybit.es/codechallenge06.html" rel="alternate"></link><published>2017-02-13T08:40:00+01:00</published><updated>2017-02-13T08:40:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-13:/codechallenge06.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will make a prediction when PyPI will reach the 100.000 packages milestone.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;A milestone right around the corner&lt;/h3&gt;
&lt;p&gt;A new week, more coding! &lt;/p&gt;
&lt;p&gt;We are grabbing this challenge from &lt;a href="https://twitter.com/raymondh/status/829474817082433536"&gt;Raymond Hettinger's tweet&lt;/a&gt; (EAFP):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python data extrapolation contest: Tweet your prediction of the exact date and time(UTC) that http://pypi.python.org  hits 100,000 packages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The submitted answers (tweet replies) were very different which made us curious. As it's a prediction there won't be one right answer of course. We challenge you to find a data set to make your prediction. We are curious what you will come up with ...&lt;/p&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# cp pypi100k-template.py pypi100k.py
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category></entry><entry><title>Twitter digest 2017 week 06</title><link href="https://pybit.es/twitter_digest_201706.html" rel="alternate"></link><published>2017-02-11T09:27:00+01:00</published><updated>2017-02-11T09:27:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-11:/twitter_digest_201706.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build Your First Python and Django Application &lt;a href="https://t.co/3N8FgBn6mZ" title="https://t.co/3N8FgBn6mZ" target="_blank"&gt;https://t.co/3N8FgBn6mZ&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830181106326654976" data-datetime="2017-02-10T22:26:14+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Color quantization using k-means  &lt;a href="https://twitter.com/search/#Data" target="_blank"&gt;#Data&lt;/a&gt; Mining &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830180688146157570" data-datetime="2017-02-10T22:24:34+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Excel Tutorial: The Definitive Guide &lt;a href="https://t.co/z7fOQjCABG" title="https://t.co/z7fOQjCABG" target="_blank"&gt;https://t.co/z7fOQjCABG&lt;/a&gt; via &lt;a href="https://twitter.com/@DataCamp" target="_blank"&gt;@DataCamp&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830180426228625410" data-datetime="2017-02-10T22:23:32+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Python Weekly - Issue 281 &lt;a href="https://t.co/8o10gQwue8" title="https://t.co/8o10gQwue8" target="_blank"&gt;https://t.co/8o10gQwue8&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://twitter.com/search/#flask" target="_blank"&gt;#flask&lt;/a&gt; &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#slack" target="_blank"&gt;#slack&lt;/a&gt; &lt;a href="https://twitter.com/search/#tensorflow" target="_blank"&gt;#tensorflow&lt;/a&gt; &lt;a href="https://twitter.com/search/#scipy" target="_blank"&gt;#scipy&lt;/a&gt; &lt;a href="https://twitter.com/search/#matp‚Ä¶" target="_blank"&gt;#matp‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829925695937581056" data-datetime="2017-02-10T05:31:19+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; A Simple Trending Products Recommendation Engi... &lt;a href="https://t.co/kYuz1278Fd" title="https://t.co/kYuz1278Fd" target="_blank"&gt;https://t.co/kYuz1278Fd&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829924850516889600" data-datetime="2017-02-10T05:27:58+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; Google's (comprehensive) code style guide for Python &lt;a href="https://t.co/raPEwHJ0NL" title="https://t.co/raPEwHJ0NL" target="_blank"&gt;https://t.co/raPEwHJ0NL&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829924706903994370" data-datetime="2017-02-10T05:27:24+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/pw64b7E6m2" title="https://t.co/pw64b7E6m2" target="_blank"&gt;https://t.co/pw64b7E6m2&lt;/a&gt; think python 2nd ed (py3)&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829819539122688002" data-datetime="2017-02-09T22:29:30+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@raymondh:" target="_blank"&gt;@raymondh:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip:  ASCII table
pprint(list(zip(range(32, 127), map(chr, range(32, 127)))))&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829622429647503360" data-datetime="2017-02-09T09:26:15+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Wow! Awesome video. &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; &lt;a href="https://twitter.com/@_juliansequeira" target="_blank"&gt;@_juliansequeira&lt;/a&gt; check this out &lt;a href="https://t.co/y6xBeoaXoH" title="https://t.co/y6xBeoaXoH" target="_blank"&gt;https://t.co/y6xBeoaXoH&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829622138911019009" data-datetime="2017-02-09T09:25:06+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#98" target="_blank"&gt;#98&lt;/a&gt; Adding concurrency to Django with Django Channels &lt;a href="https://t.co/NHBYmxAS4F" title="https://t.co/NHBYmxAS4F" target="_blank"&gt;https://t.co/NHBYmxAS4F&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829615853989568512" data-datetime="2017-02-09T09:00:07+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Working with iterables: itertools &amp;amp; more &lt;a href="https://t.co/yPoCfaOItK" title="https://t.co/yPoCfaOItK" target="_blank"&gt;https://t.co/yPoCfaOItK&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829253522822668288" data-datetime="2017-02-08T09:00:21+00:00"&gt;February 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#12" target="_blank"&gt;#12&lt;/a&gt; Expanding your Python mental model and serving millions of requests per second with Python &lt;a href="https://t.co/gssoadNjIG" title="https://t.co/gssoadNjIG" target="_blank"&gt;https://t.co/gssoadNjIG&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829253486713962497" data-datetime="2017-02-08T09:00:12+00:00"&gt;February 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice article &lt;a href="https://twitter.com/@SuConant" target="_blank"&gt;@SuConant&lt;/a&gt; - bookmarked a couple of courses &lt;a href="https://t.co/gRx0wzCe3P" title="https://t.co/gRx0wzCe3P" target="_blank"&gt;https://t.co/gRx0wzCe3P&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829072065512734720" data-datetime="2017-02-07T20:59:18+00:00"&gt;February 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Tricks &lt;a href="https://twitter.com/search/#5:" target="_blank"&gt;#5:&lt;/a&gt; String Conversion in Python (__str__ vs __repr__) &lt;a href="https://t.co/1XoX1Hh75R" title="https://t.co/1XoX1Hh75R" target="_blank"&gt;https://t.co/1XoX1Hh75R&lt;/a&gt; - well explained!&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829013385547227137" data-datetime="2017-02-07T17:06:08+00:00"&gt;February 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Lambda Functions in Python: What Are They Good For? &lt;a href="https://t.co/D9PqD4wxhn" title="https://t.co/D9PqD4wxhn" target="_blank"&gt;https://t.co/D9PqD4wxhn&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/828891098332356613" data-datetime="2017-02-07T09:00:12+00:00"&gt;February 07, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="Excel"></category><category term="Django"></category><category term="k-means"></category><category term="iterators"></category><category term="magicmethods"></category><category term="lambda"></category></entry><entry><title>Code Challenge 05 - Twitter data analysis Part 2: Similar Tweeters - Review</title><link href="https://pybit.es/codechallenge05_review.html" rel="alternate"></link><published>2017-02-10T23:00:00+01:00</published><updated>2017-02-10T23:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-10:/codechallenge05_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge05.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge05.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;This week's challenge was really hard. We looked at &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt; to calculate similarity between Twitter users.&lt;/p&gt;
&lt;p&gt;Below what we got. Any feedback welcome. Code is &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we tweaked usertweets.py from last week to download 200 tweets of 15 users and store them as csv files in the data/ subdirectory. Users are mostly Pythonistas, but also some unrelated. We changed the solution a bit: instead of comparing only two users, we rank similarity of one user of the set against all others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We load all tweets per user in with get_user_tokens() and tokenize them with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tokenize_text(words):
    words = [word for word in words if len(word) &amp;gt; 4 and word not in STOPWORDS]
    words = [word for word in words if _is_ascii(word)]
    words = [word for word in words if not IS_LINK_OBJ.search(word)]
    return words
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where IS_LINK_OBJ discards links and mentions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IS_LINK_OBJ = re.compile(r&amp;#39;^(?:@|https?://)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get stopwords from nltk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;
&lt;span class="n"&gt;STOPWORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The underscore methods are helpers. We assigned lambdas to variables, but flake8 complained, so better methods :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then we use Gensim to compare a user against the set. This took quite some effort, hopefully our method is correct, the results (see further down) look promosing. We partially used &lt;a href="http://stackoverflow.com/questions/22433884/python-gensim-how-to-calculate-document-similarity-using-the-lda-model"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gensim&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;du&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# globbing csv files in data/ or provided with sys.argv[1:]&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;du&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldamodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LdaModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;id2word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatrixSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_bow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_bow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_lda&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full code &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interestingly this model worked kind of ok, but got different results upon running and not much polarity. It turned out that the sample Twitter set (200 tweets per user) was too small, so we created a data/new directory and used &lt;a href="https://gist.github.com/yanofsky/5436496"&gt;yanofsky's awesome tweet_dumper&lt;/a&gt; to get 3200 tweets per user. &lt;/p&gt;
&lt;p&gt;Data set before vs after:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wc -l *&lt;span class="p"&gt;|&lt;/span&gt;grep total
    &lt;span class="m"&gt;3618&lt;/span&gt; total
$ wc -l new/*&lt;span class="p"&gt;|&lt;/span&gt;grep total
   &lt;span class="m"&gt;45573&lt;/span&gt; total
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This did not make sense due to small data set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python similar_tweeters.py Pybonacci
cine_tv_es &lt;span class="m"&gt;0&lt;/span&gt;.999743 -&amp;gt; nothing to &lt;span class="k"&gt;do&lt;/span&gt; yet almost &lt;span class="m"&gt;1&lt;/span&gt;.0 ?!
github &lt;span class="m"&gt;0&lt;/span&gt;.999743
gvanrossum &lt;span class="m"&gt;0&lt;/span&gt;.455312
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the new data set, although the script takes longer to run, now the results are much better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# not much Python: 
$ python similar_tweeters.py paugasol
jsonmez 0.739746
Schwarzenegger 0.739746
tferriss 0.739746
cine_tv_es 0.631373
gvanrossum 0.631373
treyhunner 0.631373
bbelderbos 0.206394
dbader_org 0.206394
newsafaribooks 0.206394
techmoneykids 0.113994
github 0.0983753
lifehacker 0.0983753
pybites 0.056072
importpython 0.0432182
PythonEggs 0.0432182
raymondh 0.0432182

# more Py
$ python similar_tweeters.py pybites
dbader_org 0.936956
importpython 0.936956
PythonEggs 0.936956
tferriss 0.936956 -&amp;gt; not sure about this one
bbelderbos 0.367078
techmoneykids 0.340996
github 0.320053
newsafaribooks 0.320053
gvanrossum 0.138829
jsonmez 0.138829
lifehacker 0.138829
Schwarzenegger 0.138829
treyhunner 0.138829
raymondh 0.0201458
cine_tv_es 0.0
paugasol 0.0

# results change upon second run - comment if you know why / how to fix or improve?
$ python similar_tweeters.py pybites
importpython 0.890289
newsafaribooks 0.890289
PythonEggs 0.890289
bbelderbos 0.506814
techmoneykids 0.443702
jsonmez 0.426503
paugasol 0.426503
Schwarzenegger 0.426503
tferriss 0.426503
github 0.138233
gvanrossum 0.138233
treyhunner 0.138233
dbader_org 0.100782 -&amp;gt; was high last run ?!
lifehacker 0.0658598
raymondh 0.0658598
cine_tv_es 0.0451122
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running one more, my personal Twitter. Also a lot of Python at the top, jsonmez/ tferriss/ pybites I have mentioned/retweeted more than once. This looks pretty good ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python similar_tweeters.py bbelderbos
dbader_org &lt;span class="m"&gt;0&lt;/span&gt;.985021
gvanrossum &lt;span class="m"&gt;0&lt;/span&gt;.985021
importpython &lt;span class="m"&gt;0&lt;/span&gt;.985021
jsonmez &lt;span class="m"&gt;0&lt;/span&gt;.985021
pybites &lt;span class="m"&gt;0&lt;/span&gt;.985021
PythonEggs &lt;span class="m"&gt;0&lt;/span&gt;.985021
tferriss &lt;span class="m"&gt;0&lt;/span&gt;.985021
treyhunner &lt;span class="m"&gt;0&lt;/span&gt;.985021
techmoneykids &lt;span class="m"&gt;0&lt;/span&gt;.275167
newsafaribooks &lt;span class="m"&gt;0&lt;/span&gt;.149423
paugasol &lt;span class="m"&gt;0&lt;/span&gt;.149423
Schwarzenegger &lt;span class="m"&gt;0&lt;/span&gt;.149423
raymondh &lt;span class="m"&gt;0&lt;/span&gt;.142598
cine_tv_es &lt;span class="m"&gt;0&lt;/span&gt;.064402
github &lt;span class="m"&gt;0&lt;/span&gt;.064402
lifehacker &lt;span class="m"&gt;0&lt;/span&gt;.0570781
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was not an easy challenge! However we learned a lot: our first NLP exploration, playing with a relatively complex library and discovering the data science part of it: the quality of your input data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we pause a bit from Twitter doing something new and original on Monday, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="nlp"></category><category term="Twitter"></category><category term="twitterapi"></category><category term="gensim"></category><category term="nltk"></category></entry><entry><title>From beginner to pro: Python books, videos and resources</title><link href="https://pybit.es/python-resources.html" rel="alternate"></link><published>2017-02-07T06:00:00+01:00</published><updated>2017-02-07T06:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-07:/python-resources.html</id><summary type="html">&lt;p&gt;A list of useful Python resources to boost up your skills.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article a list of useful Python resources to boost up your skills. It goes without saying that the best way to get better in Python is to read and write a lot of code. However these resources can definitely help fill in the knowledge gaps.&lt;/p&gt;
&lt;h2&gt;To get started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/"&gt;The Python Tutorial&lt;/a&gt;: official, quick-start tour to the language, introduces the standard library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lVnTJP"&gt;Head first Python, 2nd ed&lt;/a&gt;: detailed explanation of the language, lot of practical examples and as head first provides a lot of visual aid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jessica McKellar's &lt;a href="http://shop.oreilly.com/product/110000448.do"&gt;Introduction to Python&lt;/a&gt; and &lt;a href="http://shop.oreilly.com/product/0636920049852.do"&gt;Intermediate Python Programming&lt;/a&gt; are awesome. I recommended these videos to a new Pythonista at work and he already thanked me: clear, concise, fun and practical examples, for him the concepts really started to make sense watching these videos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Michael Kennedy has &lt;a href="https://training.talkpython.fm/"&gt;a growing set of awesome trainings&lt;/a&gt;: &lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer&lt;/a&gt; teaches you a lot of Python features and more importantly how to write Pythonic code. See &lt;a href="http://pybit.es/pythonic-code-course-rewiew.html"&gt;our review&lt;/a&gt;, for us it's kind of the manual we wish we'd had when we started! To learn by building cool projects, check out his &lt;a href="https://training.talkpython.fm/courses/explore_python_jumpstart/python-language-jumpstart-building-10-apps"&gt;Python Jumpstart by Building 10 Apps&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.diveintopython3.net/"&gt;Dive into Python&lt;/a&gt;: this is another excellent introduction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to learn by practical projects, take a look at &lt;a href="http://amzn.to/2lxrPiK"&gt;Automate the boring stuff&lt;/a&gt; which we reviewed &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;here&lt;/a&gt;, the author also has &lt;a href="https://inventwithpython.com/"&gt;a free tutorial on games&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lV8rgL"&gt;Learn Python the Hard Way&lt;/a&gt; takes another approach by having your hands at the keyboard, working through progressively more difficult code examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fundamentals done, get better&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's guide to Python&lt;/a&gt;: this is a great work, it teaches Python best practices, comunnity tools, and is quite unique in that it teaches by looking at the source code of top-notch open source projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt;: on to become a classic. This is one of the best Python books out there. This gem has so much knowledge, best practices, and deep understanding of Python embedded. I read it last summer (somebody at PyData recommended it to me) and it is THE book that got me to the next level.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxsIba"&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/a&gt;: I like the effective series for its recipe format. Very knowledgeable author, this book teaches you how to write Pythonic code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxxiq1"&gt;Core Python Applications Programming&lt;/a&gt;: teaches concepts through real-world applications. Lot of code, covers a lot: Google App Engine, APIs, Database / web programming, even MS office programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://thehackerguidetopython.com/"&gt;The hacker's guide to Python&lt;/a&gt;: I bought this ebook last week after being impressed reading the free functional programming chapter, not done yet, but already found some great insights, not easily found in other resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://powerfulpython.com/"&gt;Powerful Python&lt;/a&gt;: good tutorial on advanced concepts like decorators, OOP design patterns, automated testing. The accompanying video shows you how to make a RESTful API using TDD, very interesting / useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two Packt books that I read parts of and explain more advanced topics very well: &lt;a href="http://amzn.to/2lVphMx"&gt;Mastering Python&lt;/a&gt; and &lt;a href="http://amzn.to/2lxLQ91"&gt;Expert Python Programming, 2nd ed&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For reference works check out &lt;a href="http://amzn.to/2lxIB18"&gt;Python cookbook&lt;/a&gt; and &lt;a href="http://amzn.to/2mcgKHs"&gt;Python in a nutshell&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you learn better by video checkout &lt;a href="http://pyvideo.org/"&gt;PyVideo&lt;/a&gt;, I also found it very useful to watch PyCon talks, see &lt;a href="https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw"&gt;this PyCon 2016 playlist&lt;/a&gt; for example. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dbader.org/"&gt;Dan Bader's blog&lt;/a&gt;, his new book: &lt;a href="https://dbader.org/products/python-tricks-book/"&gt;Python tricks&lt;/a&gt; reviewed &lt;a href="http://pybit.es/pytricks-review.html"&gt;here&lt;/a&gt;. He also made a useful &lt;a href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;list of Python podcasts&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the subject of podcasts, Michael Kennedy's &lt;a href="https://talkpython.fm"&gt;Talk Python To Me&lt;/a&gt; is a must-listen for any Python developer. For headlines tune into &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes&lt;/a&gt;, a nice weekly digest of Python news.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing is important, and Python has great coverage: unittest, pytest, nose, doctest ... get started &lt;a href="http://pythontesting.net/start-here/"&gt;here&lt;/a&gt; or listen to Brian Okken's &lt;a href="http://testandcode.com"&gt;Test and Code podcast&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For an understanding of algorithms I recommend &lt;a href="http://amzn.to/2lxGLNP"&gt;Grokking algorithms&lt;/a&gt; we detailed &lt;a href="http://pybit.es/grokking_algorithms.html"&gt;here&lt;/a&gt;. Another resource is &lt;a href="http://interactivepython.org/runestone/static/pythonds/index.html"&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to learn Flask and Django, and Python web development and database programming in general, check out &lt;a href="https://realpython.com"&gt;Real Python's great courses&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://awesome-python.com/"&gt;Awesome Python&lt;/a&gt; - a curated list of awesome Python frameworks, libraries, software and resources (discussed &lt;a href="http://pybit.es/awesome_python_resources.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru"&gt;Python progression path - From apprentice to guru SO thread&lt;/a&gt; contains some useful advice as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guido's &lt;a href="http://neopythonic.blogspot.com.es/2016/04/kings-day-speech.html"&gt;King's Day Speech&lt;/a&gt; as well as &lt;a href="https://www.python.org/doc/essays/"&gt;his essays&lt;/a&gt; (I read &lt;a href="https://www.python.org/doc/essays/list2str/"&gt;one about optimization&lt;/a&gt; today, awesome!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lists from other Pythonistas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The mentioned Hitchhiker's guide has &lt;a href="http://docs.python-guide.org/en/latest/intro/learning/"&gt;a good resources list&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full Stack Python's &lt;a href="https://www.fullstackpython.com/best-python-resources.html"&gt;Best Python Resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pixelmonkey's article: &lt;a href="http://www.pixelmonkey.org/2015/06/06/pybooks"&gt;The 3 Best Python Books for Your Team&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pff ...&lt;/h2&gt;
&lt;p&gt;I know what you are saying, and I had the same feeling writing this article: there are just too many resources. Again, writing code is the best way to get better so the best advice I can give you is to pick up one of the resources, read some, start coding. Read some more, try new things you learn in your code. Repeat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read some more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;code some more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope this list is useful. Feel free to use the comments below to share other resources that made you a better Python programmer.&lt;/p&gt;
&lt;h2&gt;Update: additions after Reddit&lt;/h2&gt;
&lt;p&gt;Wow amazed at the amount of upvotes / comments &lt;a href="https://redd.it/5sjt3l"&gt;on Reddit&lt;/a&gt;, thanks for your support. I am adding some suggestions made in the commens: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Youtube channel: &lt;a href="https://www.youtube.com/user/sentdex"&gt;sentdex&lt;/a&gt;, lot of good Python learning, Django was specially mentioned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Data Science I heard good things about &lt;a href="http://amzn.to/2lVnp6j"&gt;Python Data Science Handbook&lt;/a&gt; which shares all Jupyter notebooks freely &lt;a href="https://github.com/jakevdp/PythonDataScienceHandbook"&gt;here&lt;/a&gt;. See also &lt;a href="https://redd.it/5som5b"&gt;this new thread&lt;/a&gt; with cheat sheets for Python for data science.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I replied another question about web scraping &lt;a href="https://www.reddit.com/r/learnpython/comments/5sjt3l/from_beginner_to_pro_python_books_videos_and/ddh6ski/"&gt;with some resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9"&gt;MIT intro computer science&lt;/a&gt; was labeled as very tough for a beginner. I read some of &lt;a href="http://greenteapress.com/wp/"&gt;Allen Downey's work&lt;/a&gt; sometime ago which I liked.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="python"></category><category term="resources"></category><category term="books"></category><category term="videos"></category><category term="reference"></category><category term="tricks"></category><category term="tools"></category></entry><entry><title>Code Challenge 05 - Twitter data analysis Part 2: Similar Tweeters</title><link href="https://pybit.es/codechallenge05.html" rel="alternate"></link><published>2017-02-06T00:01:00+01:00</published><updated>2017-02-06T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-06:/codechallenge05.html</id><summary type="html">&lt;p&gt;A new week, more coding! In Part 2 of our Twitter data analysis we challenge you to find out how similar two tweeters are ...&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Birds of a feather&lt;/h3&gt;
&lt;p&gt;A new week, more coding! In Part 2 of our Twitter data analysis we challenge you to find out how similar two tweeters are ...&lt;/p&gt;
&lt;h3&gt;Challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a script that receives two command line args: user1 and user2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ similar_tweeters.py bbelderbos pybites
&lt;span class="c1"&gt;# ... some index of similarity ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the last n tweets of these users. You can use the code of &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tokenize the words in the tweets, filtering out stop words, URLs, digits, punctuation, words that only occur once or are less than 3 characters (and/or other noise ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the main subjects the users tweet about. You could use &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt;, an NLP package for Topic Modeling. However feel free to take your own approach! We are dropping the helper template and external libs (requirements.txt) for this challenge, we'd love to see different approaches to this problem ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare the subjects and come up with a similarity score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stay in sync with PyBites challenges repo&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# ... no helper template for this challenge ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing our and your solutions on Friday.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="twitterapi"></category><category term="Twitter"></category><category term="NLP"></category><category term="similarity"></category><category term="Gensim"></category></entry><entry><title>Twitter digest 2017 week 05</title><link href="https://pybit.es/twitter_digest_201705.html" rel="alternate"></link><published>2017-02-04T09:27:00+01:00</published><updated>2017-02-04T09:27:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-04:/twitter_digest_201705.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;python tricks: &lt;a href="https://t.co/MTei4wkOqe" title="https://t.co/MTei4wkOqe" target="_blank"&gt;https://t.co/MTei4wkOqe&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827796656036909056" data-datetime="2017-02-04T08:31:17+00:00"&gt;February 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#97" target="_blank"&gt;#97&lt;/a&gt; Flask, Django style with Flask-Diamond &lt;a href="https://t.co/ggqrD2zPIT" title="https://t.co/ggqrD2zPIT" target="_blank"&gt;https://t.co/ggqrD2zPIT&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827441533188136960" data-datetime="2017-02-03T09:00:09+00:00"&gt;February 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kennethreitz:" target="_blank"&gt;@kennethreitz:&lt;/a&gt; Python Top 10 Articles for the Past Year (v.2017) &lt;a href="https://t.co/KWStlTrCTw" title="https://t.co/KWStlTrCTw" target="_blank"&gt;https://t.co/KWStlTrCTw&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827419783717064705" data-datetime="2017-02-03T07:33:43+00:00"&gt;February 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsycombinator:" target="_blank"&gt;@newsycombinator:&lt;/a&gt; Use vim as a python IDE &lt;a href="https://t.co/P57qWan5OA" title="https://t.co/P57qWan5OA" target="_blank"&gt;https://t.co/P57qWan5OA&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827418975147528192" data-datetime="2017-02-03T07:30:31+00:00"&gt;February 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Weekly - Issue 280 - &lt;a href="https://t.co/8MTwN2DKTV" title="https://t.co/8MTwN2DKTV" target="_blank"&gt;https://t.co/8MTwN2DKTV&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827295878050414592" data-datetime="2017-02-02T23:21:22+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Working over ssh in Python &lt;a href="https://t.co/KExmjsxVlr" title="https://t.co/KExmjsxVlr" target="_blank"&gt;https://t.co/KExmjsxVlr&lt;/a&gt; &lt;a href="https://twitter.com/search/#ssh" target="_blank"&gt;#ssh&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827285656850223110" data-datetime="2017-02-02T22:40:45+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PyConES:" target="_blank"&gt;@PyConES:&lt;/a&gt; ¬°Y la &lt;a href="https://twitter.com/search/#PyConES17" target="_blank"&gt;#PyConES17&lt;/a&gt; ser√° en C√°ceres del 22 al 24 de septiembre!

&lt;a href="https://t.co/rmOKBzqTLs" title="https://t.co/rmOKBzqTLs" target="_blank"&gt;https://t.co/rmOKBzqTLs&lt;/a&gt; &lt;a href="https://t.co/MtLefWCKPN" title="https://t.co/MtLefWCKPN" target="_blank"&gt;https://t.co/MtLefWCKPN&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827053699432333312" data-datetime="2017-02-02T07:19:02+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;impressed by the free chapter on functional programming of The Hacker's Guide to &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; by &lt;a href="https://twitter.com/@juldanjou" target="_blank"&gt;@juldanjou&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827053135201959936" data-datetime="2017-02-02T07:16:47+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@github:" target="_blank"&gt;@github:&lt;/a&gt; A new way to discover and connect GitHub repositories. &lt;a href="https://t.co/JVJCj8JzeV" title="https://t.co/JVJCj8JzeV" target="_blank"&gt;https://t.co/JVJCj8JzeV&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826802837581611011" data-datetime="2017-02-01T14:42:12+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dabeaz:" target="_blank"&gt;@dabeaz:&lt;/a&gt; Now that Anaconda is on Python 3.6, I'm thinking about going all in on f-strings.  See ya later Python 3.5. It's been fun.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826800885896474624" data-datetime="2017-02-01T14:34:27+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; The five-minute guide to setting up a &lt;a href="https://twitter.com/search/#Jupyter" target="_blank"&gt;#Jupyter&lt;/a&gt; notebook server &lt;a href="https://t.co/i1D5I7eU3h" title="https://t.co/i1D5I7eU3h" target="_blank"&gt;https://t.co/i1D5I7eU3h&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/U4hnsM7GgQ" title="https://t.co/U4hnsM7GgQ" target="_blank"&gt;https://t.co/U4hnsM7GgQ&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826800066384031744" data-datetime="2017-02-01T14:31:11+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#11" target="_blank"&gt;#11&lt;/a&gt; Django 2.0 is dropping Python 2 entirely, pipenv for profile functionality, and Pythonic home automation &lt;a href="https://t.co/ivbetn0zxD" title="https://t.co/ivbetn0zxD" target="_blank"&gt;https://t.co/ivbetn0zxD&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826716778638172163" data-datetime="2017-02-01T09:00:14+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@bbelderbos:" target="_blank"&gt;@bbelderbos:&lt;/a&gt; New article: Pybit.es - our new &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; blog &lt;a href="https://t.co/3MCzu7GTEF" title="https://t.co/3MCzu7GTEF" target="_blank"&gt;https://t.co/3MCzu7GTEF&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826494975282130949" data-datetime="2017-01-31T18:18:52+00:00"&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; .&lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; reviewed my Python Tricks book. Did they like it? Click here to find out: &lt;a href="https://t.co/CBBeZinksb" title="https://t.co/CBBeZinksb" target="_blank"&gt;https://t.co/CBBeZinksb&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826457033369071616" data-datetime="2017-01-31T15:48:06+00:00"&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why Learn Python? Here Are 8 Data-Driven Reasons &lt;a href="https://t.co/a1M0ztYp4L" title="https://t.co/a1M0ztYp4L" target="_blank"&gt;https://t.co/a1M0ztYp4L&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826354403640610816" data-datetime="2017-01-31T09:00:17+00:00"&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="Jupyter"></category><category term="Flask"></category><category term="Django"></category><category term="vim"></category><category term="PyCon"></category><category term="HackersGuide"></category><category term="f-string"></category><category term="Github"></category><category term="learnpython"></category><category term="tricks"></category></entry><entry><title>Code Challenge 04 - Twitter data analysis Part 1: Getting Data - Review</title><link href="https://pybit.es/codechallenge04_review.html" rel="alternate"></link><published>2017-02-03T17:00:00+01:00</published><updated>2017-02-03T17:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-03:/codechallenge04_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge04.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge04.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;here&lt;/a&gt; and detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;stdlib imports, pip install tweepy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we generated our keys through the Twitter API and put them in config.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define some constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEST_DIR = &amp;#39;data&amp;#39;
EXT = &amp;#39;csv&amp;#39;
NUM_TWEETS = 100
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we build a tweepy api object. First we had this in the constructor (init), but second thought we set it up as a constant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)
API = tweepy.API(auth)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we use a namedtuple to define Tweet: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Tweet = namedtuple(&amp;#39;Tweet&amp;#39;, &amp;#39;id_str created_at text&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Namedtuples are awesome for simple classes to store data without behaviour!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define the class, Python3 best practice is to explicitly inherit from object: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the constructor gets the handle and an optional max_id, latter is to get a fixed set of tweets which we used in test_usertweets.py: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def __init__(self, handle, max_id=None):
        self.handle = handle
        self.max_id = max_id
        self.output_file = &amp;#39;{}.{}&amp;#39;.format(os.path.join(DEST_DIR, self.handle), EXT)
        self._tweets = list(self._get_tweets())
        self._save_tweets()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we get the tweets with the _get_tweets() helper. It returns a generator of Tweet namedtuple objects containing only the get id_str, created_at and text attributes (you get a lot more returned from the Twitter API!): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def _get_tweets(self):
        tweets = API.user_timeline(self.handle, count=NUM_TWEETS, max_id=self.max_id)
        return (Tweet(s.id_str, s.created_at, s.text.replace(&amp;#39;\n&amp;#39;, &amp;#39;&amp;#39;)) for s in tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the helper _save_tweets saves tweets to a CSV file. We choose to do it in the constructor, but you can of course take the underscore (_) out and call it explicitly: obj.save_tweets():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def _save_tweets(self):
        with open(self.output_file, &amp;#39;w&amp;#39;) as f:
            writer = csv.writer(f)
            writer.writerow(Tweet._fields)
            writer.writerows(self._tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementing len and getitem lets you iterate over the tweets (see our &lt;a href="http://pybit.es/python-data-model.html"&gt;data model post&lt;/a&gt;) as done in the for loop under __main__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def __len__(self):
        return len(self._tweets)

    def __getitem__(self, pos):
        return self._tweets[pos]

if __name__ == &amp;quot;__main__&amp;quot;:

    for handle in (&amp;#39;pybites&amp;#39;, &amp;#39;techmoneykids&amp;#39;, &amp;#39;bbelderbos&amp;#39;):
        print(&amp;#39;--- {} ---&amp;#39;.format(handle))
        user = UserTweets(handle)
        for tw in user[:5]:
            print(tw)
        print()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;running the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO: twitter data changes and you don't want to call the API (slows tests down, unittests should be fast), need to look at mock ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we use this pre-work to load in tweets of various Twitter users and determine who are most similar using NLP techniques. See you on Monday ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="tweets"></category><category term="Twitter"></category><category term="twitterapi"></category><category term="oop"></category><category term="datamodel"></category><category term="csv"></category><category term="namedtuples"></category></entry><entry><title>Discover Python Help Options</title><link href="https://pybit.es/python-help.html" rel="alternate"></link><published>2017-02-02T21:45:00+01:00</published><updated>2017-02-02T21:45:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-02:/python-help.html</id><summary type="html">&lt;p&gt;Discover some of the numerous Python Help functions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When it comes to Python I'm pretty much self taught so it came as no surprise to me when I discovered that Python had help functions. I was blown away to say the least!&lt;/p&gt;
&lt;p&gt;There are 3 help related options I'm going to discuss: help(), dir() and pydoc.&lt;/p&gt;
&lt;h2&gt;help()&lt;/h2&gt;
&lt;p&gt;I face palmed over not finding out about help() sooner. Just like on any operating system, help exists to assist with commands. In Python you simply put whatever object you want within the help function and you'll be presented with a very "man page-esque" looking help page. For example, let's say we wanted to find out more about the &lt;em&gt;len&lt;/em&gt; function: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(len)

Help on built-in function len in module builtins:

len(obj, /)
    Return the number of items in a container.
(END)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The help page will detail the syntax for running the object as well as an explanation as to what it does. Some objects return much more detail than others based on their complexity. Try running &lt;strong&gt;help(range)&lt;/strong&gt; in IDLE to see an example of the detail help() can provide. It's pretty awesome!&lt;/p&gt;
&lt;h2&gt;dir()&lt;/h2&gt;
&lt;p&gt;It constantly baffled me as to how programmers like Bob seemed to just &lt;em&gt;know&lt;/em&gt; the attributes to use with a specific object. I may never know the answer but I'm
definitely one step closer thanks to dir().&lt;/p&gt;
&lt;p&gt;dir() is just as wonderful as help(). It allows you to query an object and return its attributes. That is to say, if you've ever wondered what to use with &lt;em&gt;len&lt;/em&gt; (eg: len.&lt;attribute/module&gt;) then use dir(len) to get a list. Check out what happens if we use dir() on &lt;em&gt;range&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(range)
[&amp;#39;__class__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__iter__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__reversed__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;start&amp;#39;, &amp;#39;step&amp;#39;, &amp;#39;stop&amp;#39;]
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now know we can use the &lt;em&gt;count&lt;/em&gt; function with range: range.count.&lt;/p&gt;
&lt;h2&gt;help() and dir() Together&lt;/h2&gt;
&lt;p&gt;The best part is that both help() and dir() compliment each other perfectly.&lt;/p&gt;
&lt;p&gt;Using the previous example of &lt;em&gt;range&lt;/em&gt; we found that we can use the &lt;em&gt;count&lt;/em&gt; function with it. The question is how?&lt;/p&gt;
&lt;p&gt;Use help() of course!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(range.count)
Help on method_descriptor:

count(...)
    rangeobject.count(value) -&amp;gt; integer -- return number of occurrences of value
(END)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How awesome is that?!&lt;/p&gt;
&lt;p&gt;Modules that aren't in stdlib respond to help() and dir() as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;NAME&lt;/span&gt;
    &lt;span class="n"&gt;tweepy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Tweepy&lt;/span&gt; &lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt;

&lt;span class="n"&gt;PACKAGE&lt;/span&gt; &lt;span class="n"&gt;CONTENTS&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt;
    &lt;span class="n"&gt;auth&lt;/span&gt;
    &lt;span class="n"&gt;binder&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt;
    &lt;span class="n"&gt;models&lt;/span&gt;
    &lt;span class="n"&gt;parsers&lt;/span&gt;
    &lt;span class="n"&gt;streaming&lt;/span&gt;
    &lt;span class="n"&gt;utils&lt;/span&gt;

&lt;span class="n"&gt;FUNCTIONS&lt;/span&gt;
    &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DATA&lt;/span&gt;
    &lt;span class="n"&gt;__license__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;API&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AppAuthHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cursor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DirectMessage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FileCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Friendship&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MemoryCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ModelFactory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OAuthHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RateLimitError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SavedSearch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SearchResults&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;StreamListener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TweepError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__author__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__cached__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__license__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__path__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__version__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;binder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cursor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;models&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parsers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;streaming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utils&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pydoc&lt;/h2&gt;
&lt;p&gt;Pydoc is different to help() and dir() in that you don't actually run it in IDLE or within a script. It's a command line tool that gets installed with Python.&lt;/p&gt;
&lt;p&gt;That said, Pydoc is actually quite similar to help(). It displays a help page (again, man page similarities!) of the Python object you want to query but does so on the command line. No need to start up IDLE.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) juliansequeira$ pydoc datetime
Help on module datetime:

NAME
    datetime - Fast implementation of the datetime type.

FILE
    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/datetime.so

MODULE DOCS
    http://docs.python.org/library/datetime
&amp;lt;snip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The text displayed is made up of the docstrings within the object which means you can create your own if you make your own module etc.&lt;/p&gt;
&lt;p&gt;In typical Python fashion though, Pydoc takes it up a notch. It actually has the ability to display documentation for your installed modules/packages using the built in Python web server!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pydoc -p 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you point your browser to localhost:8000 you'll get a (relatively) nice web page with links to your Python package documentation.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Help is everywhere! I'm almost annoyed that it took me a year to discover this stuff. Better late than never I guess!&lt;/p&gt;
&lt;p&gt;It's so much nicer being able to get the syntax and attribute help that I need from within IDLE rather than having to Google it and sort through pages of stack overflow articles.&lt;/p&gt;
&lt;p&gt;Let me know if there are any other cool help modules or functions out there. I'd love to know!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="help"></category></entry><entry><title>Send Advanced Emails with Python MIME Submodules</title><link href="https://pybit.es/python-MIME.html" rel="alternate"></link><published>2017-02-01T11:30:00+01:00</published><updated>2017-02-01T11:30:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-01:/python-MIME.html</id><summary type="html">&lt;p&gt;Learn how to send richer emails with Python and the MIME Submodules&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my earlier post on &lt;a href="http://pybit.es/python-smtplib.html"&gt;sending basic emails with Python smtplib&lt;/a&gt; I outlined the bare minimum required to send an email with Python.&lt;/p&gt;
&lt;p&gt;While functional, it does however lack more advanced features which I'll touch on in this post. We'll be using the MIME email submodules to create a richer email.&lt;/p&gt;
&lt;h2&gt;What is MIME?&lt;/h2&gt;
&lt;p&gt;For those who are unaware, MIME (Multipurpose Internet Mail Extensions) is a standard that essentially makes emails more functional. As per the &lt;a href="https://en.wikipedia.org/wiki/MIME"&gt;Wikipedia Article&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multipurpose Internet Mail Extensions (MIME) is an Internet standard that extends the format of email to support:
- Text in character sets other than ASCII
- Non-text attachments: audio, video, images, application programs etc.
- Message bodies with multiple parts
- Header information in non-ASCII character sets&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;You'll need to import &lt;em&gt;smtplib&lt;/em&gt; as expected but also the MIME submodules "MIMEMultipart" and "MIMEText":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Data Entry&lt;/h2&gt;
&lt;p&gt;Next we'll add the missing header detail to the email. I aimed to make this as Pythonic as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from_addr = &amp;#39;pybitesblog@gmail.com&amp;#39;
to_addr = [&amp;#39;bob@rocks.com&amp;#39;, &amp;#39;julian_is@awesome.com&amp;#39;]
msg = MIMEMultipart()
msg[&amp;#39;From&amp;#39;] = from_addr
msg[&amp;#39;To&amp;#39;] = &amp;quot;, &amp;quot;.join(to_addr)
msg[&amp;#39;Subject&amp;#39;] = &amp;#39;Test Automation Email&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Breaking that down line by line:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assign your from/sender email address to a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assin your recipient address or addresses to a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the MIMEMultipart function to variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign your sender email address variable to the 'From' value in MIME.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign your recipient addresses to the 'To' value in MIME. Note the .join function is used here to concatenate the email addresses with a comma.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify your Subject Line and add it to MIME.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now for the meat. Add the text for the body of your email and again add it to MIME:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;body = &amp;quot;Hello Everyone!&amp;quot;

msg.attach(MIMEText(body, &amp;#39;plain&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've added the data in the body variable to MIMEText in plain text format. You can specify HTML if you wish.&lt;/p&gt;
&lt;h2&gt;Send the Email&lt;/h2&gt;
&lt;p&gt;I'll be reusing the code from the simple email article here with a small addition. First the standard code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server = smtplib.SMTP(&amp;#39;smtp.gmail.com&amp;#39;, 587) #Specify Gmail Mail server

smtp_server.ehlo() #Send mandatory &amp;#39;hello&amp;#39; message to SMTP server

smtp_server.starttls() #Start TLS Encryption as we&amp;#39;re not using SSL.

#Login to gmail: Account | Password
smtp_server.login(&amp;#39; pybitesblog@gmail.com &amp;#39;, &amp;#39; GMAIL APPLICATION PASSWORD &amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The additional code is in the sendmail function. We now need to specify the text that we're sending. That is, we take all of the data that was added to the MIMEMultipart function (&lt;em&gt;msg&lt;/em&gt; variable) and we use it to populate the email:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;text = msg.as_string()

#Compile email: From, To, Email body
smtp_server.sendmail(from_addr, to_addr, text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, best practice, we close off the SMTP connection and in this case, print a message to indicate the email was sent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.quit()
print(&amp;#39;Email sent successfully&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using this framework you can start to send more and more detailed emails. MIME allows you to send attachments which opens all sorts of doors.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://docs.python.org/3/library/email-examples.html"&gt;Python 3 Docs on Email&lt;/a&gt; to see some other detailed examples. I like the idea of the HTML message with an alternative plain text version. Very cool!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="email"></category><category term="automation"></category><category term="MIME"></category></entry><entry><title>Python Tricks book review</title><link href="https://pybit.es/pytricks-review.html" rel="alternate"></link><published>2017-01-31T09:00:00+01:00</published><updated>2017-01-31T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-31:/pytricks-review.html</id><summary type="html">&lt;p&gt;A review of Dan Bader's &lt;a href="https://dbader.org/products/python-tricks-book/"&gt;Python tricks book&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A review of Dan Bader's &lt;a href="https://dbader.org/products/python-tricks-book/"&gt;Python tricks book&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Discover Python‚Äôs Best Practices with Simple Examples and Start Writing Beautiful &amp;amp; Pythonic Code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Take your Python to the next level&lt;/h3&gt;
&lt;p&gt;I found out about this book through Dan's Python Tricks I get via email / Twitter. The book defines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python Trick: A short Python code snippet meant as a teaching tool. A Python Trick either teaches an aspect of Python with a simple illustration, or serves as a motivating example to dig deeper and develop an intuitive understanding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I really enjoyed reading Dan's book. He explains important Python aspects with clear examples (using two twin cats to explain "is" vs "==" for example). It is not just code samples, it discusses relevant implementation details comprehensibly.&lt;/p&gt;
&lt;p&gt;Since &lt;a href="https://www.youtube.com/watch?v=wf-BqAjZb8M"&gt;this talk by Raymond Hettinger&lt;/a&gt; I am more conscious about writing Pythonic code. This book cares too. Most tricks show the "one-- and preferably only one --obvious way to do it" (import this), for example how to merge dicts, or for dict access use try/except (&lt;a href="https://docs.python.org/3/glossary.html"&gt;EAFP style&lt;/a&gt;) but prefer dict.get() as being even more precise. The beginner gets into Pythonic mode, the expert might still pick up new stuff. Another good book in this context is &lt;a href="http://amzn.to/2lxsIba"&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Few things I learned (refreshed)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Language features section: the "is" vs "==" I mentioned, dictionary internals, deep vs shallow copy. The article on 4 ways of string formatting is awesome. I like Dan‚Äôs Python String Formatting Rule of Thumb:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your format strings are user-supplied, use Template Strings to avoid security issues. Otherwise, use Literal String Interpolation if you‚Äôre on Python 3.6+, and "New Style" String Formatting if you‚Äôre not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cleaner Python section (my favorite part of the book): use your own exceptions (which we used &lt;a href="http://pybit.es/error_handling.html"&gt;here&lt;/a&gt;), ABC's (we used &lt;a href="http://pybit.es/oop-primer.html"&gt;here&lt;/a&gt;), the key func of sorted() (we used &lt;a href="http://pybit.es/codechallenge01_review.html"&gt;here&lt;/a&gt;), which is shown with both lambda and operator.getitem syntax, refactoring an ugly switch statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pythonic syntactic sugar section: * and ** (splat) function arg unpacking (very Pythonic), various (stdlib) ways to merge dicts. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Now is better than never (import this)&lt;/h3&gt;
&lt;p&gt;And more so because you can still get it for a lower early-access price, eventually the final version of the book will cost more.&lt;/p&gt;
&lt;p&gt;Keep in mind this is a work in progress. I did find the initial version of 60 pages a bit short, but recently I got an update of 25+ pages so the final version will be longer. &lt;/p&gt;
&lt;p&gt;What really matters though is that this book makes you write better Python code! The book is actually responsible for recent new good py habits I picked up, for example: using custom exceptions and ABC's (I found Dan's blog searching for abstract classes). These new learnings alone are worth the price.&lt;/p&gt;
&lt;p&gt;Thanks Dan for sharing your great work.&lt;/p&gt;</content><category term="review"></category><category term="tricks"></category><category term="tips"></category><category term="pythonic"></category><category term="oop"></category><category term="ABC"></category><category term="dicts"></category><category term="cleancode"></category></entry><entry><title>Code Challenge 04 - Twitter data analysis Part 1: Getting Data</title><link href="https://pybit.es/codechallenge04.html" rel="alternate"></link><published>2017-01-30T00:01:00+01:00</published><updated>2017-01-30T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-30:/codechallenge04.html</id><summary type="html">&lt;p&gt;A new week, a new code challenge! In this 3 part challenge you will analyze Twitter Data. This week we will automate the retrieval of data. In Part 2 we will task you with finding similar tweeters, and for Part 3 you will do a full sentiment analysis.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Write a class to retrieve tweets from the Twitter API&lt;/h3&gt;
&lt;p&gt;In this 3 part challenge you will analyze Twitter Data. This week we will automate the retrieval of data. In Part 2 we will task you with finding similar tweeters, and for Part 3 you will do a full sentiment analysis.&lt;/p&gt;
&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup virtual environment and install requirements&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;04&lt;/span&gt;
$ python3 -m venv venv
&lt;span class="c1"&gt;# = py3 (might need virtualenv for py2 env)&lt;/span&gt;

$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate 
&lt;span class="c1"&gt;# install tweepy (and its depencencies)&lt;/span&gt;
$ pip install -r requirements.txt

&lt;span class="c1"&gt;# if you want to use another package like twython, feel free to do so&lt;/span&gt;

&lt;span class="c1"&gt;# get your API keys from Twitter - https://apps.twitter.com &lt;/span&gt;
$ cp config-template.py config.py
&lt;span class="c1"&gt;# paste the keys in config.py&lt;/span&gt;

&lt;span class="c1"&gt;# choose a template&lt;/span&gt;
$ cp usertweets-help.py usertweets.py
&lt;span class="c1"&gt;# or &lt;/span&gt;
$ cp usertweets-nohelp.py usertweets.py
&lt;span class="c1"&gt;# code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Define a class called UserTweets that takes a Twitter handle / user in its constructor. it also receives an optional max_id parameter to start from a particular tweet id. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a tweepy API object using the tokens imported from config.py (again, you can use another package if you prefer).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an instance variable to hold the last 100 tweets of the user. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement len() and getitem() magic (dunder) methods to make the UserTweets object iterable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the generated data as CSV in the data subdirectory: data/some_handle.csv, columns: id_str,created_at,text&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We posted two articles this week you might find useful in this context: &lt;a href="http://pybit.es/oop-primer.html"&gt;oop primer&lt;/a&gt; and &lt;a href="http://pybit.es/python-data-model.html"&gt;Python's data model&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you decide to use Tweepy, you might want to check its &lt;a href="http://docs.tweepy.org/en/v3.5.0/api.html"&gt;API reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tests&lt;/h3&gt;
&lt;p&gt;For developers that like to work towards tests we included test_usertweets.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example output&lt;/h3&gt;
&lt;p&gt;We used a namedtuple here, this is not required. Also note the tweets can differ, yet in the unittests we test a fix set (using the optional max_id parameter in the constructor):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;usertweets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pybites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;825629570992726017&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter digest 2017 week 04 https://t.co/L3njBuBats #python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lrth&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;bbelderb&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;    &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="mi"&gt;825629570992726017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;L3njBuBats&lt;/span&gt; &lt;span class="c1"&gt;#python&lt;/span&gt;
&lt;span class="mi"&gt;825267189162733569&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Challenge&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xvcLQBbvup&lt;/span&gt; &lt;span class="c1"&gt;#python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="github"></category><category term="learning"></category><category term="blog"></category><category term="twitterapi"></category><category term="tweets"></category><category term="Twitter"></category><category term="oop"></category><category term="datamodel"></category><category term="magicmethods"></category></entry><entry><title>Twitter digest 2017 week 04</title><link href="https://pybit.es/twitter_digest_201704.html" rel="alternate"></link><published>2017-01-28T09:10:00+01:00</published><updated>2017-01-28T09:10:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-28:/twitter_digest_201704.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúUnderstanding the underscore( _ ) of Python‚Äù by &lt;a href="https://twitter.com/@mingrammer" target="_blank"&gt;@mingrammer&lt;/a&gt; &lt;a href="https://t.co/zgiSGBPd3s" title="https://t.co/zgiSGBPd3s" target="_blank"&gt;https://t.co/zgiSGBPd3s&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825246821085802496" data-datetime="2017-01-28T07:39:09+00:00"&gt;January 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;why you should (tech) blog: a. meet and learn from other developers, b. share knowledge with the wider community, c. refer back to own notes&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825098194254184448" data-datetime="2017-01-27T21:48:33+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Python Asynchronous I/O Walkthrough &lt;a href="https://t.co/6tIfGuli4t" title="https://t.co/6tIfGuli4t" target="_blank"&gt;https://t.co/6tIfGuli4t&lt;/a&gt; &lt;a href="https://twitter.com/search/#asyncio" target="_blank"&gt;#asyncio&lt;/a&gt; &lt;a href="https://twitter.com/search/#video" target="_blank"&gt;#video&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#book" target="_blank"&gt;#book&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825090537959149568" data-datetime="2017-01-27T21:18:08+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@onyxfish:" target="_blank"&gt;@onyxfish:&lt;/a&gt; pipenv is just lovely. It's going to make teaching best practices to new Python coders so much easier. &lt;a href="https://t.co/wHtWgyuv5‚Ä¶" title="https://t.co/wHtWgyuv5‚Ä¶" target="_blank"&gt;https://t.co/wHtWgyuv5‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825090382576889860" data-datetime="2017-01-27T21:17:31+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@tiferet:" target="_blank"&gt;@tiferet:&lt;/a&gt; I love &lt;a href="https://twitter.com/search/#python." target="_blank"&gt;#python.&lt;/a&gt; I just think something at it and it turns out to be legit code.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824900745656807424" data-datetime="2017-01-27T08:43:58+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RedditPython:" target="_blank"&gt;@RedditPython:&lt;/a&gt; For anyone learning Python for data science, this an amazing resource--excellent book as free Jupyter notebooks &lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824900665608507393" data-datetime="2017-01-27T08:43:39+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsycombinator:" target="_blank"&gt;@newsycombinator:&lt;/a&gt; Linus Torvalds describes a good commit message &lt;a href="https://t.co/YkPhMnAumb" title="https://t.co/YkPhMnAumb" target="_blank"&gt;https://t.co/YkPhMnAumb&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824704323548545028" data-datetime="2017-01-26T19:43:27+00:00"&gt;January 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#96" target="_blank"&gt;#96&lt;/a&gt; Exploring Awesome Python &lt;a href="https://t.co/iYz6nWnHRp" title="https://t.co/iYz6nWnHRp" target="_blank"&gt;https://t.co/iYz6nWnHRp&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824542432301715456" data-datetime="2017-01-26T09:00:09+00:00"&gt;January 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; Python Bytes Podcast - Episode 10: Python Headlines delivered directly to your earbuds &lt;a href="https://t.co/YtMghHsVTG" title="https://t.co/YtMghHsVTG" target="_blank"&gt;https://t.co/YtMghHsVTG&lt;/a&gt; via &lt;a href="https://twitter.com/@brianokke‚Ä¶" target="_blank"&gt;@brianokke‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824525211194314752" data-datetime="2017-01-26T07:51:43+00:00"&gt;January 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; The 4 Major Ways to Do String Formatting in Python (discussion) &amp;gt;&amp;gt; &lt;a href="https://t.co/hDrUHKPcTt" title="https://t.co/hDrUHKPcTt" target="_blank"&gt;https://t.co/hDrUHKPcTt&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learnpython" target="_blank"&gt;#learnpython&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824291275373481984" data-datetime="2017-01-25T16:22:09+00:00"&gt;January 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Awesome: pelican-ipynb - Pelican plugin for blogging with &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; / IPython Notebooks&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824247744361627649" data-datetime="2017-01-25T13:29:10+00:00"&gt;January 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;great course: Python Beyond The Basics - Object Oriented Programming &lt;a href="https://t.co/Fhapwpz7pZ" title="https://t.co/Fhapwpz7pZ" target="_blank"&gt;https://t.co/Fhapwpz7pZ&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823640943421259776" data-datetime="2017-01-23T21:17:58+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; VIM and Python - a match made in heaven &amp;gt;&amp;gt; &lt;a href="https://t.co/2wfQobNhwx" title="https://t.co/2wfQobNhwx" target="_blank"&gt;https://t.co/2wfQobNhwx&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#vim" target="_blank"&gt;#vim&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823593679587864576" data-datetime="2017-01-23T18:10:09+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@analyticbridge:" target="_blank"&gt;@analyticbridge:&lt;/a&gt; 12 Algorithms Every Data Scientist Should Know? 
&lt;a href="https://t.co/uwcDZygLqS" title="https://t.co/uwcDZygLqS" target="_blank"&gt;https://t.co/uwcDZygLqS&lt;/a&gt; &lt;a href="https://t.co/LKDORi9LGt" title="https://t.co/LKDORi9LGt" target="_blank"&gt;https://t.co/LKDORi9LGt&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823593277702205440" data-datetime="2017-01-23T18:08:33+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;true, this book is awesome for developers wanting to advance in their career, recommended it to a co-worker today :‚Ä¶ &lt;a href="https://t.co/9tW8m3oEYU" title="https://t.co/9tW8m3oEYU" target="_blank"&gt;https://t.co/9tW8m3oEYU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823592641115918336" data-datetime="2017-01-23T18:06:01+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;Roll your own&lt;/h2&gt;
&lt;p&gt;We created this list with &lt;a href="http://projects.bobbelderbos.com/tweetdigest/"&gt;Tweet Digest&lt;/a&gt;.&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="asyncio"></category><category term="pipenv"></category><category term="pelican"></category><category term="jupyter"></category><category term="oop"></category><category term="vim"></category><category term="algorithms"></category></entry><entry><title>Code Challenge 03 - PyBites Blog Tag Analysis - Review</title><link href="https://pybit.es/codechallenge03_review.html" rel="alternate"></link><published>2017-01-27T09:00:00+01:00</published><updated>2017-01-27T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-27:/codechallenge03_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge03.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge03.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/03/tags.py"&gt;here&lt;/a&gt; and commented below.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We use the stdlib to its fullest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define constants at the top. We use maketrans to easily extend replacing multiple characters in the future:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REPLACE_CHARS = str.maketrans(&amp;#39;-&amp;#39;, &amp;#39; &amp;#39;)
IDENTICAL = 1.0
TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used a regular expression to show that you can. A better way would be to use a PyPI package like feedparser or BeautifulSoup (see further down). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TAG_HTML = re.compile(r&amp;#39;&lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;([^&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;]+)&lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&amp;#39;)

def get_tags():
    &amp;quot;&amp;quot;&amp;quot;Find all tags (TAG_HTML) in RSS_FEED.
    Replace dash with whitespace (REPLACE_CHARS)&amp;quot;&amp;quot;&amp;quot;
    with open(RSS_FEED) as f:
        tags = TAG_HTML.findall(f.read().lower())
    return [tag.translate(REPLACE_CHARS) for tag in tags]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For everything counting related you really want to use collections.Counter and its most_common method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_top_tags(tags):
    &amp;quot;&amp;quot;&amp;quot;Get the TOP_NUMBER of most common tags&amp;quot;&amp;quot;&amp;quot;
    return Counter(tags).most_common(TOP_NUMBER)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For similarities we were going to read up on &lt;a href="http://www.nltk.org/"&gt;NLTK&lt;/a&gt; but stdlib has difflib.SequenceMatcher which makes this very easy (found &lt;a href="http://stackoverflow.com/questions/17388213/find-the-similarity-percent-between-two-strings"&gt;on Stackoverflow&lt;/a&gt;). We gained quite some performance first matching the first char between tags, but this assumes the first char is always the same. If you don't want that, take that check out. We use itertools.product instead of a double for loop. Lastly yield makes get_similarities a generator which we find more Pythonic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_similarities(tags):
    &amp;quot;&amp;quot;&amp;quot;Find set of tags pairs with similarity ratio of &amp;gt; SIMILAR&amp;quot;&amp;quot;&amp;quot;
    for pair in product(tags, tags):
        # performance enhancements 1.992s -&amp;gt; 0.144s
        if pair[0][0] != pair[1][0]:
            continue
        pair = tuple(sorted(pair))  # set needs hashable type
        similarity = SequenceMatcher(None, *pair).ratio()
        if SIMILAR &amp;lt; similarity &amp;lt; IDENTICAL:
            yield pair
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The calling code was given, printing it here for completeness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    tags = get_tags()
    top_tags = get_top_tags(tags)
    print(&amp;#39;* Top {} tags:&amp;#39;.format(TOP_NUMBER))
    for tag, count in top_tags:
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(tag, count))
    similar_tags = dict(get_similarities(tags))
    print()
    print(&amp;#39;* Similar tags:&amp;#39;)
    for singular, plural in similar_tags.items():
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(singular, plural))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tests pass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout solutions
$ python test_tags.py 
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.153s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Code challenges != Python's 'preferably only one way'&lt;/h2&gt;
&lt;p&gt;We know '&amp;gt;&amp;gt;&amp;gt; import this' says: "There should be one-- and preferably only one --obvious way to do it." and usually there is. Yet for our challenges we encourage people to be creative and not stick to the template + tests per se (we improve the code challenge format as we learn ...). &lt;/p&gt;
&lt;p&gt;For example Jeffrey parses our feed directly in &lt;a href="https://gist.github.com/jrjames83/eeda4324116dde12ea8d45c47a151ab0"&gt;his solution&lt;/a&gt; with requests and BeautifulSoup not stripping off the dash. This is great addition to our solution, using PyPI whenever you can is recommended. Also by parsing the live feed he created us a tool to run this check every now and then (thanks Jeffrey). We like to see different solutions.&lt;/p&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a fresh new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="tags"></category><category term="similarity"></category><category term="blog"></category></entry><entry><title>Send Emails with Python smtplib</title><link href="https://pybit.es/python-smtplib.html" rel="alternate"></link><published>2017-01-26T19:25:00+01:00</published><updated>2017-01-26T19:25:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-26:/python-smtplib.html</id><summary type="html">&lt;p&gt;Learn how to send emails using Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently given a &lt;a href="https://www.raspberrypi.org"&gt;Raspberry Pi&lt;/a&gt; as a gift and figured it'd make a cool host for cron jobs. I've always wanted to set up an email notification service for myself so I started playing around with &lt;em&gt;smtplib&lt;/em&gt; in Python.&lt;/p&gt;
&lt;h2&gt;Set up an Application Password with Gmail&lt;/h2&gt;
&lt;p&gt;It was surprisingly simple to send a basic email using my Gmail account. The complexity came from Google's 2-step Verification security settings. If using Gmail, you'll need to &lt;a href="https://support.google.com/accounts/answer/185833?hl=en"&gt;set up an Application Password&lt;/a&gt; for the machine you're running your Py script from.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once generated, the App Password will be your Gmail Password for this script.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Sending a Basic Email&lt;/h2&gt;
&lt;p&gt;The first thing you should try is sending the simplest of emails. Just plain text.&lt;/p&gt;
&lt;p&gt;There are a few steps, which I'll detail one by one:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Import the smtplib module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using smtplib, specify the SMTP server and port you'll be accessing. In this example I'm using Gmail's servers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SMTP server you're connecting to requires a sort of 'handshake' for the service to work properly. This is done using the .ehlo() function of smtplib.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.ehlo()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As Google doesn't use SSL, we need to kick off TLS Encryption manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.starttls()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now for the login. Keep in mind at this point, you'll use the App Password you obtained earlier instead of your usual Gmail password.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.login(&amp;#39;pybitesblog@gmail.com&amp;#39;, &amp;#39;&amp;lt;App Password&amp;gt;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we send the actual email message. The first email address is the address you're emailing from, the second is the recipient.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.sendmail(&amp;#39;pybitesblog@gmail.com&amp;#39;, &amp;#39;recipient@gmail.com&amp;#39;, &amp;#39;Subject: Happy Australia Day!\nHi Everyone! Happy Australia Day! Cheers, Julian&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Things to note in the above. The \n is mandatory. It's what separates your Subject line from the body of the email. Note: if you're running this in IDLE, when the email is sent successfully, you'll see '{}' characters appear as the return message. If part of a script, you can always add a print statement or other to show this instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, disconnect from the SMTP server when complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.quit()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we're done! Here's the/my final code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pybitesblog@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;App Password&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pybitesblog@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;recipient@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Subject: Happy Australia Day!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Hi Everyone! Happy Australia Day! Cheers, Julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Email sent successfully&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Clearly this is as basic as it gets. Moving forward you'll want the ability to send more detailed emails with some essence of formatting.&lt;/p&gt;
&lt;p&gt;To do this you'll need to import the MIME (Multipurpose Internet Mail Extensions) modules into your script.&lt;/p&gt;
&lt;p&gt;I want to expand on this current email example and will do so my next post. It also allows us to make the code a little more Pythonic!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="email"></category><category term="automation"></category></entry><entry><title>Code Challenge 03 - PyBites Blog Tag Analysis</title><link href="https://pybit.es/codechallenge03.html" rel="alternate"></link><published>2017-01-23T00:01:00+01:00</published><updated>2017-01-23T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-23:/codechallenge03.html</id><summary type="html">&lt;p&gt;Our new code challenge is up: PyBites blog tag analysis. This week you will parse our RSS feed looking for the most common tags and the ones we possibly should merge based on similarity ratio. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given our RSS feed what tags does PyBites mostly use and which tags should be merged (based on similarity)?&lt;/h3&gt;
&lt;p&gt;Example output: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python tags.py

* Top &lt;span class="m"&gt;10&lt;/span&gt; tags:
python               &lt;span class="m"&gt;10&lt;/span&gt;
learning             &lt;span class="m"&gt;7&lt;/span&gt;
tips                 &lt;span class="m"&gt;6&lt;/span&gt;
tricks               &lt;span class="m"&gt;5&lt;/span&gt;
github               &lt;span class="m"&gt;5&lt;/span&gt;
cleancode            &lt;span class="m"&gt;5&lt;/span&gt;
best practices       &lt;span class="m"&gt;5&lt;/span&gt;
pythonic             &lt;span class="m"&gt;4&lt;/span&gt;
collections          &lt;span class="m"&gt;4&lt;/span&gt;
beginners            &lt;span class="m"&gt;4&lt;/span&gt;

* Similar tags:
game                 games
challenge            challenges
generator            generators
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;03&lt;/span&gt;
$ cp tags-help.py tags.py
&lt;span class="c1"&gt;# or:&lt;/span&gt;
$ cp tags-nohelp.py tags.py
&lt;span class="c1"&gt;#¬†code&lt;/span&gt;

&lt;span class="c1"&gt;# run the unittests (optional)&lt;/span&gt;
$ python test_tags.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.155s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As we update our blog regularly we provided a recent copy of our feed in the 03 directory: rss.xml. We also provided a copy of tags.html for verification (used by unittests in test_tags.py).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both templates provide 3 constants you should use: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rest is documented in the methods docstrings. Again use tags-help.py if you need more guidance, tags-nohelp.py is for the more experienced and/or if you want more freedom. Same goes for tests: use them if you need them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Talking about freedom feel free to use our &lt;a href="http://pybit.es/feeds/all.rss.xml"&gt;live feed&lt;/a&gt; but then the tests will probably break.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hint: for word similarity feel free to use NLTK, or your favorite language processing tool. However, stdlib does provide a nice way to do this. Using this method we came to 0.87 as a threshold to for example not mark 'python' and 'pythonic' as similar. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="github"></category><category term="learning"></category><category term="blog"></category><category term="tags"></category><category term="Counter"></category><category term="similarity"></category><category term="regex"></category></entry><entry><title>Twitter digest 2017 week 03</title><link href="https://pybit.es/twitter_digest_201703.html" rel="alternate"></link><published>2017-01-21T15:26:00+01:00</published><updated>2017-01-21T15:26:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-21:/twitter_digest_201703.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jsonmez:" target="_blank"&gt;@jsonmez:&lt;/a&gt; 7 Reasons Why You Should Learn Python Right Now - &lt;a href="https://t.co/sApNURfEup" title="https://t.co/sApNURfEup" target="_blank"&gt;https://t.co/sApNURfEup&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/822564641624748032" data-datetime="2017-01-20T22:01:07+00:00"&gt;January 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@raymondh:" target="_blank"&gt;@raymondh:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Use only immutable values for function defaults.  def wrong(s=[]): ...  def better(s=None): if s is None:‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/822342521200250880" data-datetime="2017-01-20T07:18:30+00:00"&gt;January 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#95" target="_blank"&gt;#95&lt;/a&gt; Grumpy: Running Python on Go &lt;a href="https://t.co/LGQl1HJfZM" title="https://t.co/LGQl1HJfZM" target="_blank"&gt;https://t.co/LGQl1HJfZM&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/822005708522557440" data-datetime="2017-01-19T09:00:07+00:00"&gt;January 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@randal_olson:" target="_blank"&gt;@randal_olson:&lt;/a&gt; The most-used words in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; scripts. &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt;

Other &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; languages: &lt;a href="https://t.co/qIcBH444mJ" title="https://t.co/qIcBH444mJ" target="_blank"&gt;https://t.co/qIcBH444mJ&lt;/a&gt; &lt;a href="https://t.co/mZSV‚Ä¶" title="https://t.co/mZSV‚Ä¶" target="_blank"&gt;https://t.co/mZSV‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821846522308521984" data-datetime="2017-01-18T22:27:34+00:00"&gt;January 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Assert Statements in Python &lt;a href="https://t.co/Lx6l0AkanQ" title="https://t.co/Lx6l0AkanQ" target="_blank"&gt;https://t.co/Lx6l0AkanQ&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821643343679651840" data-datetime="2017-01-18T09:00:13+00:00"&gt;January 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#9" target="_blank"&gt;#9&lt;/a&gt; Walking with async coroutines, diving deep into requests, and a universe of options (for AIs) &lt;a href="https://t.co/fW9nzSSKHF" title="https://t.co/fW9nzSSKHF" target="_blank"&gt;https://t.co/fW9nzSSKHF&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821643338281615362" data-datetime="2017-01-18T09:00:11+00:00"&gt;January 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@getpy:" target="_blank"&gt;@getpy:&lt;/a&gt; Python requests package deep dive &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#requests" target="_blank"&gt;#requests&lt;/a&gt;  &lt;a href="https://t.co/tixkSU3nk0" title="https://t.co/tixkSU3nk0" target="_blank"&gt;https://t.co/tixkSU3nk0&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821415756827127808" data-datetime="2017-01-17T17:55:52+00:00"&gt;January 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@enneff:" target="_blank"&gt;@enneff:&lt;/a&gt; Good programmers aren't lazy in that they avoid work. Rather, it's that they are sensitive to unnecessary work.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821376732099969024" data-datetime="2017-01-17T15:20:48+00:00"&gt;January 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;List of Awesome Python Resources &lt;a href="https://t.co/7i4ODGGwkb" title="https://t.co/7i4ODGGwkb" target="_blank"&gt;https://t.co/7i4ODGGwkb&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821280923698106368" data-datetime="2017-01-17T09:00:05+00:00"&gt;January 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check out this cool episode: &lt;a href="https://t.co/VtXiXwY8aA" title="https://t.co/VtXiXwY8aA" target="_blank"&gt;https://t.co/VtXiXwY8aA&lt;/a&gt; - interesting episode about SQLAlchemy &lt;a href="https://t.co/CMUzapsLqG" title="https://t.co/CMUzapsLqG" target="_blank"&gt;https://t.co/CMUzapsLqG&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820577391126921218" data-datetime="2017-01-15T10:24:30+00:00"&gt;January 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kennethreitz:" target="_blank"&gt;@kennethreitz:&lt;/a&gt; Here's the beginnings of my work on Delegator: Subprocesses for Humans 2.0. Feedback welcome! &lt;a href="https://t.co/DT9c7T2FhN" title="https://t.co/DT9c7T2FhN" target="_blank"&gt;https://t.co/DT9c7T2FhN&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820547567285137409" data-datetime="2017-01-15T08:25:59+00:00"&gt;January 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@datapythonista:" target="_blank"&gt;@datapythonista:&lt;/a&gt; Europe is eager for &lt;a href="https://twitter.com/@PyData." target="_blank"&gt;@PyData.&lt;/a&gt; Next meetups in &lt;a href="https://twitter.com/@pydatalondon," target="_blank"&gt;@pydatalondon,&lt;/a&gt; &lt;a href="https://twitter.com/@pydataamsterdam," target="_blank"&gt;@pydataamsterdam,&lt;/a&gt; &lt;a href="https://twitter.com/@pydataberlin" target="_blank"&gt;@pydataberlin&lt;/a&gt; and &lt;a href="https://twitter.com/@PyDataMallorca" target="_blank"&gt;@PyDataMallorca&lt;/a&gt; are ful‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820390155232092160" data-datetime="2017-01-14T22:00:29+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonHub:" target="_blank"&gt;@PythonHub:&lt;/a&gt; What are some programs I can make that would realistically prepare me for a programming job using python? &lt;a href="https://t.co/F1nHk‚Ä¶" title="https://t.co/F1nHk‚Ä¶" target="_blank"&gt;https://t.co/F1nHk‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820353672269930498" data-datetime="2017-01-14T19:35:31+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Vlad's blog ‚Äì What every Python project should have &lt;a href="https://t.co/Yfe1rS1tHh" title="https://t.co/Yfe1rS1tHh" target="_blank"&gt;https://t.co/Yfe1rS1tHh&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820317914318389248" data-datetime="2017-01-14T17:13:26+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;cookiecutter: utility that creates projects from cookiecutters (project templates). E.g. Python package projects &lt;a href="https://t.co/EMxC7CHur0" title="https://t.co/EMxC7CHur0" target="_blank"&gt;https://t.co/EMxC7CHur0&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820313295517319169" data-datetime="2017-01-14T16:55:04+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;Roll your own&lt;/h2&gt;
&lt;p&gt;We created this list with &lt;a href="http://projects.bobbelderbos.com/tweetdigest/"&gt;Tweet Digest&lt;/a&gt;.&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="pydata"></category><category term="tips"></category><category term="grumpy"></category><category term="assert"></category><category term="async"></category><category term="requests"></category><category term="delegator"></category><category term="pyprojects"></category><category term="cookiecutter"></category><category term="resources"></category></entry><entry><title>Code Challenge 02 - Word Values Part II - A Simple Game - Review</title><link href="https://pybit.es/codechallenge02_review.html" rel="alternate"></link><published>2017-01-20T09:00:00+01:00</published><updated>2017-01-20T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-20:/codechallenge02_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge02.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge02.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/02/game.py"&gt;here&lt;/a&gt; for the complete solution.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we had the user interface like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        if not set(word) &amp;lt; set(draw):
            print(&amp;#39;One or more characters not in draw, try again&amp;#39;)
            continue
        elif not word.lower() in DICTIONARY:
            print(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
            continue
        return word
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But after learning about &lt;a href="http://pybit.es/error_handling.html"&gt;EAFP (easier to ask for forgiveness than permission)&lt;/a&gt; we thought it was more Pythonic to use exceptions. There was also a bug in the first check above (see comments, great learning!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        try:
            return _validation(word, draw)
        except ValueError as e:
            print(e)
            continue

def _validation(word, draw):
    # thanks Durmus
    for char in word.upper():
        if char in draw:
            draw.remove(char)
        else:
        raise ValueError(&amp;quot;{} is not a valid word!&amp;quot;.format(word))
    if not word.lower() in DICTIONARY:
        raise ValueError(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
    return word
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;random.sample makes it easy to get n number of random letters in one go: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def draw_letters():
    return random.sample(POUCH, NUM_LETTERS)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_possible_dict_words - the hardest part. To get all possible letter combinations from the letter draw, you need itertools.permutations, not combinations, because order does matter: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; len(list(itertools.combinations(letters, 2)))
21
&amp;gt;&amp;gt;&amp;gt; len(list(itertools.permutations(letters, 2)))
42
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also &lt;a href="http://pybit.es/itertools-examples.html"&gt;our post on itertools&lt;/a&gt;. See also Durmus' comment / solution here for an alternative using combinations ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First the helper generator to do the work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _get_permutations_draw(draw):
    for i in range(1, 8):
        yield from list(itertools.permutations(draw, i))  # &amp;gt;= 3.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates all permutation of 1, 2, 3, 4, 5, 6, and 7 letters.&lt;/p&gt;
&lt;p&gt;We store all those in permutations and then use a set operation again to get all valid dictionary words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_possible_dict_words(draw):
    permutations = [&amp;#39;&amp;#39;.join(word).lower() for word in _get_permutations_draw(draw)]
    return set(permutations) &amp;amp; set(DICTIONARY)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use the calc_word_value and max_word_value methods from &lt;a href="http://pybit.es/codechallenge01.html"&gt;challenge 01&lt;/a&gt; to calculate which word has the most value. &lt;/p&gt;
&lt;p&gt;The rest is main() calling the methods and outputting (as was provided in the template).&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;We got a request in the comments for tests to verify the work. Good idea, they are &lt;a href="https://github.com/pybites/challenges/blob/master/02/test_game.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_game.py 
......
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;6&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.056s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Its fun (addictive?) to play :)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: T, I, I, G, T, T, L
Form a valid word: tig
Word chosen: TIG (value: 4)
Optimal word possible: gilt (value: 5)
You scored: 80.0
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: O, N, V, R, A, Z, H
Form a valid word: zar
Word chosen: ZAR (value: 12)
Optimal word possible: zonar (value: 14)
You scored: 85.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: E, P, A, E, I, O, A
Form a valid word: pi
Word chosen: PI (value: 4)
Optimal word possible: apio (value: 6)
You scored: 66.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: B, R, C, O, O, E, O
Form a valid word: broc
Not a valid dictionary word, try again
Form a valid word: f
One or more characters not in draw, try again
Form a valid word: bore
Word chosen: BORE (value: 6)
Optimal word possible: boce (value: 8)
You scored: 75.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="game"></category><category term="scrabble"></category><category term="itertools"></category></entry><entry><title>Python Iteration</title><link href="https://pybit.es/python_iteration.html" rel="alternate"></link><published>2017-01-19T19:00:00+01:00</published><updated>2017-01-19T19:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-19:/python_iteration.html</id><summary type="html">&lt;p&gt;Iteration in Python is incredibly simple compared to C and other languages. It's easy... maybe a little TOO easy...&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I first started writing Python code I realised I was bringing across some bad habits and very non-Pythonic coding styles.&lt;/p&gt;
&lt;p&gt;For loops in particular took me by surprise.&lt;/p&gt;
&lt;h2&gt;For Loop in C&lt;/h2&gt;
&lt;p&gt;It's worth showing how I/we wrote for loops prior to reaching Pylightenment (ha!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;demo_list = [];

for(int i = 0; i &amp;lt; 10; i++){
    printf(demo_list[i]);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Forgive any syntax errors in the above, my C is a little rusty.
The concept however, is that we have a counter, &lt;em&gt;i&lt;/em&gt;, that will allow the loop to print out the contents of &lt;em&gt;demo_list&lt;/em&gt; (if it had contents) 10 times.&lt;/p&gt;
&lt;p&gt;I always found this tricky because you had to get your counter values right. There was always so much room to mess up by being off by one. Furthermore, you'd have to know how many items are in &lt;em&gt;demo_list&lt;/em&gt; in order to list out the entire list. Getting around this would then add further complication and possibly more lines of code.&lt;/p&gt;
&lt;h2&gt;For Loop in Python&lt;/h2&gt;
&lt;p&gt;On the other hand, Python doesn't use a counter whatsoever. It simply iterates over the entire object until finished. Here's the same code in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for item in demo_list:
    print(item)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's simple and actually logical when reading it. It's also human readable!&lt;/p&gt;
&lt;p&gt;This is precisely why I love it. I no longer need to worry about a counter. No matter how large &lt;em&gt;demo_list&lt;/em&gt; gets, I'll be able to iterate over it until the end.&lt;/p&gt;
&lt;h2&gt;Iterable Objects&lt;/h2&gt;
&lt;p&gt;I was pretty surprised to see just how many objects were iterable. I originally figured it was just lists, dicts and tuples that could be iterated over but that's not the case. You're able to iterate over all of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strings! (str)&lt;/li&gt;
&lt;li&gt;bytes&lt;/li&gt;
&lt;li&gt;tuples&lt;/li&gt;
&lt;li&gt;dicts&lt;/li&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;io.TextIOWrapper&lt;/li&gt;
&lt;li&gt;models.query.QuerySet&lt;/li&gt;
&lt;li&gt;numpy.ndarray&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list was taken from an incredibly detailed and interesting &lt;a href="https://www.youtube.com/watch?v=o5gByn3RKFI"&gt;training video&lt;/a&gt; by Luciano Ramalho.&lt;/p&gt;
&lt;h2&gt;The Iteration Protocol&lt;/h2&gt;
&lt;p&gt;This is how a for loop works internally, it catches the StopIteration for you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; name = &amp;#39;Julian&amp;#39;
&amp;gt;&amp;gt;&amp;gt; name.__iter__
&amp;lt;method-wrapper &amp;#39;__iter__&amp;#39; of str object at 0x102a85848&amp;gt;
&amp;gt;&amp;gt;&amp;gt; it = name.__iter__()
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;J&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;u&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;l&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;i&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;a&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;n&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The __iter__ method is what makes an object iterable. You can use that in your own classes, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;
        &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Challenge {}: {}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Make the object iterable&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;self.users&lt;/span&gt;:
            &lt;span class="kt"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;:
&lt;span class="kt"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;victor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;henk&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;ch01&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordvalue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ch01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Challenge&lt;/span&gt; &lt;span class="nx"&gt;01&lt;/span&gt;: &lt;span class="kt"&gt;wordvalue&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ch01&lt;/span&gt;:
    &lt;span class="kt"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;tim&lt;/span&gt;
&lt;span class="nx"&gt;bob&lt;/span&gt;
&lt;span class="nx"&gt;victor&lt;/span&gt;
&lt;span class="nx"&gt;julian&lt;/span&gt;
&lt;span class="nx"&gt;henk&lt;/span&gt;

&lt;span class="nx"&gt;users2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;maria&amp;#39;&lt;/span&gt; 
&lt;span class="nx"&gt;ch02&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordvalue part II&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;users2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ch02&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Challenge&lt;/span&gt; &lt;span class="nx"&gt;02&lt;/span&gt;: &lt;span class="kt"&gt;wordvalue&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt; &lt;span class="nx"&gt;II&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ch02&lt;/span&gt;:
    &lt;span class="kt"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;tim&lt;/span&gt;
&lt;span class="nx"&gt;bob&lt;/span&gt;
&lt;span class="nx"&gt;sam&lt;/span&gt;
&lt;span class="nx"&gt;julian&lt;/span&gt;
&lt;span class="nx"&gt;maria&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Iteration Fun - Parallel Assignment&lt;/h2&gt;
&lt;p&gt;The simplicity and flexibility of Python iteration makes it pretty satisfying and fun to use.&lt;/p&gt;
&lt;p&gt;One of my favourites is Parallel Assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awesomeness_levels = [(&amp;#39;Bob&amp;#39;, 8), (&amp;#39;Julian&amp;#39;, 11), (&amp;#39;PyBites&amp;#39;, 3)]

for name, level in awesomeness_levels:
    print(name + &amp;#39;: &amp;#39; + str(level))

Bob: 8
Julian: 11
PyBites: 3

# I turned it up to eleven!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I love that in a minimal amount of code I'm able to iterate over the entire list but also assign a variable to each item.&lt;/p&gt;
&lt;h2&gt;Iteration Fun II - One iterable providing multiple arguments&lt;/h2&gt;
&lt;p&gt;Another cool example is function argument unpacking (min 15 of the video) which allows you to do something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PyBites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} teams up with {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# unpacks pair tuple in the 2 {} format placeholders&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="n"&gt;teams&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="n"&gt;teams&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt;
&lt;span class="n"&gt;Julian&lt;/span&gt; &lt;span class="n"&gt;teams&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There's a &lt;strong&gt;lot&lt;/strong&gt; to cover when it comes to iteration and also a lot that you could be doing in a non-Pythonic way.&lt;/p&gt;
&lt;p&gt;I'd wholeheartedly recommend watching the &lt;a href="https://www.youtube.com/watch?v=o5gByn3RKFI"&gt;aforementioned video&lt;/a&gt; by Luciano Ramalho.&lt;/p&gt;
&lt;p&gt;For best practices when it comes to loops, check out the &lt;em&gt;The Little Book of Anti-Patterns&lt;/em&gt; section on &lt;a href="http://docs.quantifiedcode.com/python-code-patterns/readability/using_an_unpythonic_loop.html"&gt;unpythonic loops&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="iteration"></category><category term="resources"></category></entry><entry><title>Errors should never pass silently</title><link href="https://pybit.es/error_handling.html" rel="alternate"></link><published>2017-01-18T23:59:00+01:00</published><updated>2017-01-18T23:59:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-18:/error_handling.html</id><summary type="html">&lt;p&gt;In this article some important anti-patterns regarding error handling and how to solve them making your code more Pythonic and easier to maintain.&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Zen&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Tim&lt;/span&gt; &lt;span class="n"&gt;Peters&lt;/span&gt;

&lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Errors&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="n"&gt;silently&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Anti-Patterns&lt;/h3&gt;
&lt;p&gt;This is a great read: &lt;a href="https://docs.quantifiedcode.com/python-anti-patterns/"&gt;The Little Book of Python Anti-Patterns&lt;/a&gt;. For the more experienced Pythonistas most is well known, yet it is a good refresher and you probably still find something new.&lt;/p&gt;
&lt;p&gt;Today a bit about error handling. In our &lt;a href="http://pybit.es/py-mistakes.html"&gt;Learning from Python mistakes article&lt;/a&gt; we already mentioned not to use pass in except. It is actually the worst anti-pattern (as stated by Andreas Dewes, the author of the book, you can listen to the interview &lt;a href="https://talkpython.fm/episodes/show/18/python-anti-patterns-and-other-mistakes"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;The problem with except: pass&lt;/h3&gt;
&lt;p&gt;Why is it so bad? See &lt;a href="http://stackoverflow.com/questions/21553327/why-is-except-pass-a-bad-programming-practice"&gt;SO&lt;/a&gt; for a detailed explanation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As you correctly guessed, there are two sides to it: Catching any error by specifying no exception type after except, and simply passing it without taking any action.&lt;/p&gt;
&lt;p&gt;My explanation is ‚Äúa bit‚Äù longer‚Äîso tl;dr it breaks down to this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don‚Äôt catch any error. Always specify which exceptions you are prepared to recover from and only catch those.&lt;/li&gt;
&lt;li&gt;Try to avoid passing in except blocks. Unless explicitly desired, this is usually not a good sign.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;The worst offender though is the combination of both. This means that we are willingly catching any error although we are absolutely not prepared for it and we also don‚Äôt do anything about it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So this violates the two Zen aphorisms above. You always want to catch errors explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; try:
...     1/0
... except ZeroDivisionError:
...     print(&amp;#39;cannot divide by 0&amp;#39;)
... 
cannot divide by 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use else and finally with a try/except as shown in this toy example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a, b, c = 1, 2, 0
&amp;gt;&amp;gt;&amp;gt; try:
...     a/b
... except ZeroDivisionError:
...     print(&amp;#39;cannot divide by 0&amp;#39;)
... else:
...     print(&amp;#39;division was ok&amp;#39;)
... finally:
...     print(&amp;#39;this always runs&amp;#39;)
... 
0.5
division was ok
this always runs
&amp;gt;&amp;gt;&amp;gt; try:
...     b/c
... except ZeroDivisionError:
...     print(&amp;#39;cannot divide by 0&amp;#39;)
... else:
...     print(&amp;#39;division was ok&amp;#39;)
... finally:
...     print(&amp;#39;this always runs&amp;#39;)
... 
cannot divide by 0
this always runs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One thing to watch out for is &lt;a href="http://docs.quantifiedcode.com/python-anti-patterns/correctness/bad_except_clauses_order.html"&gt;except clause order&lt;/a&gt; if you have more than one: always go from more specific to more generic (bottom to top in the inheritance chain), for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ZeroDivisionError.__mro__
(&amp;lt;class &amp;#39;ZeroDivisionError&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;ArithmeticError&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;Exception&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;BaseException&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;object&amp;#39;&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(about &lt;a href="http://stackoverflow.com/questions/2010692/what-does-mro-do-in-python"&gt;mro&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Asking for permission instead of forgiveness&lt;/h3&gt;
&lt;p&gt;It becomes even more important because &lt;a href="http://docs.quantifiedcode.com/python-anti-patterns/readability/asking_for_permission_instead_of_forgiveness_when_working_with_files.html"&gt;the Python community uses an EAFP (easier to ask for forgiveness than permission) coding style&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have done this a lot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if os.path.exists(&amp;quot;file.txt&amp;quot;):
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But the Pythonic way to do it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;try:
    # assume the file is there
    os.unlink(&amp;quot;file.txt&amp;quot;)
except OSError:
    # if not, handle the (explicit) error
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hence, more reason to manage exceptions well!&lt;/p&gt;
&lt;h3&gt;Custom exceptions&lt;/h3&gt;
&lt;p&gt;Another great way to make your code more readable and taking exceptions to the next level is to write your own. Sounds scary? It is actually pretty easy as &lt;a href="https://dbader.org/blog/python-custom-exceptions"&gt;this great post shows&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NameTooShortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;pass&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;10&lt;/span&gt;:
        &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;NameTooShortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A bit more involved (yet still easy to follow) example from &lt;a href="https://github.com/tweepy/tweepy/blob/master/tweepy/error.py"&gt;tweepy&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TweepError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Tweepy exception&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;api_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;six&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api_code&lt;/span&gt;
        &lt;span class="nx"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which we used in our &lt;a href="https://github.com/pybites/blog_code/blob/master/twitter_bot/tweetbot.py"&gt;Twitter bot&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def post_tweet(self, status):
    try:
        self.api.update_status(status)
        logging.debug(&amp;#39;posted status {} to twitter&amp;#39;.format(status))
    except TweepError as err:
        logging.error(&amp;#39;tweepy update_status error: {}&amp;#39;.format(err))
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;Recommended reading: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt; (not only reading, printing and hanging on the wall actually!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.quantifiedcode.com/python-anti-patterns/"&gt;The Little Book of Python Anti-Patterns&lt;/a&gt; and &lt;a href="https://talkpython.fm/episodes/show/18/python-anti-patterns-and-other-mistakes"&gt;chat with the author&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Exception sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.quantifiedcode.com/python-anti-patterns/correctness/no_exception_type_specified.html"&gt;No exception type(s) specified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.quantifiedcode.com/python-anti-patterns/correctness/bad_except_clauses_order.html"&gt;Bad except clauses order&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/errors.html"&gt;Python Tutorial - Errors and Exceptions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/style/"&gt;The Hitchhiker‚Äôs Guide to Python - Code Style&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="exceptions"></category><category term="Zen of Python"></category><category term="error handling"></category><category term="cleancode"></category><category term="anti-patterns"></category></entry><entry><title>List of Awesome Python Resources</title><link href="https://pybit.es/awesome_python_resources.html" rel="alternate"></link><published>2017-01-17T00:01:00+01:00</published><updated>2017-01-17T00:01:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-17:/awesome_python_resources.html</id><summary type="html">&lt;p&gt;A great list of Python Resources that should  keep you busy for a while!&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the best feelings is when you stumble across content that is so helpful and exciting you just want to dance.&lt;/p&gt;
&lt;p&gt;Our latest discovery: &lt;a href="https://github.com/vinta/awesome-python"&gt;An incredibly well populated list of Python resources&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Awesome Python&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Awesome Python&lt;/em&gt; is a detailed list of Python frameworks, libraries, software and other resources, ranging from Cryptography and Command-line Tools to Machine Learning (Bob!) and alternative Package Repos!&lt;/p&gt;
&lt;p&gt;If you haven't by now, I suggest you Star this github repo or Fork it yourself. The repo is the backend for the website: &lt;a href="http://awesome-python.com"&gt;http://awesome-python.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;My Picks&lt;/h2&gt;
&lt;p&gt;I've only just scratched the surface of the content here but I already have a few favourites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nvbn/thefuck"&gt;&lt;strong&gt;thefuck&lt;/strong&gt;&lt;/a&gt;: Don't mind the name! This is a super handy CLI tool that will intelligently correct your previous cli command if you get it wrong. All you do is type the F bomb and it'll automatically correct your command. Check out the readme to see a demo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/a&gt;: I've been wanting to get into Python web frameworks for a while. Flask is going to be my... route (pun intended!) in. Adding this to my "to-learn" list!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/vinta/awesome-python#job-scheduler"&gt;&lt;strong&gt;Job Scheduler Options&lt;/strong&gt;&lt;/a&gt;: Cron was all I had regarding scheduling. Seeing this category on &lt;em&gt;awesome-python&lt;/em&gt; made me smile. I'm looking forward to checking each of these options out to see which one works best for me. Python everything!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Your Picks?&lt;/h2&gt;
&lt;p&gt;Just these three alone will keep me busy for a while. The GUI entries also intrigue me as I'd love to see how you can use Python to make a nice GUI.&lt;/p&gt;
&lt;p&gt;So much to learn! Check the list out and let us know what interests you the most. Feel free to share if you have any other cool tools that aren't listed on the site!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python.&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="resources"></category><category term="flask"></category><category term="cron"></category><category term="tools"></category></entry><entry><title>Code Challenge 02 - Word Values Part II - A Simple Game</title><link href="https://pybit.es/codechallenge02.html" rel="alternate"></link><published>2017-01-16T00:01:00+01:00</published><updated>2017-01-16T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-16:/codechallenge02.html</id><summary type="html">&lt;p&gt;Using what we've learned the last challenge this week we build a simple Scrabble-like game: given a random set of 7 letters build the most valuable word. Good luck!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given a random set of 7 letters build the most valuable word&lt;/h3&gt;
&lt;p&gt;Using what we've learned &lt;a href="http://pybit.es/codechallenge01.html"&gt;the last challenge&lt;/a&gt; this week we build a simple Scrabble-like game (without board):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Letters drawn: G, A, R, Y, T, E, V
Form a valid word: gary  &amp;lt;&amp;lt; user input
Word chosen: GARY (value: 8)
Optimal word possible: GARVEY (value: 13)
You scored: 61.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;
$ cp game-TEMPLATE.py game.py
&lt;span class="c1"&gt;#¬†code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;p&gt;Last time we provided unittests and a guiding template. We received feedback that this was a bit too stringent. Therefore we provide two templates this time: game-help.py and game-nohelp.py&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We load in the necessary data structures to focus on the game:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Note that DICTIONARY is a set for O(1) lookups&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DICTIONARY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LETTER_VALUES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POUCH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw 7 random letters from POUCH.&lt;/p&gt;
&lt;p&gt;As said POUCH is given and contains a distribution of Scrabble letters so that the player gets enough vowels (equally drawing A-Z makes it extremely hard because you need more vowels to make words):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;C&amp;#39;,
&amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, ...]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask the player to form a word with one or more of the 7 letters of the draw. Validate input for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1) all letters of word are in draw;
2) word is in DICTIONARY.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the word value and show it to the player.&lt;/p&gt;
&lt;p&gt;To focus on this challenge we re-use two methods from the previous challenge for this: calc_word_value and max_word_value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the optimal word (= max word value) checking all permutations of the 7 letters of the draw, cross-checking the DICTIONARY set for valid ones. This is a bit more advanced, but allows you to score the player (next).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show the player what the optimal word and its value is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give the player a score based on the previous steps, basically: player_score / optimal_score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus (not required)&lt;/h3&gt;
&lt;p&gt;The optimal solution calculation might be a bit difficult for some, that's why we stop here. But if you are feeling creative you might consider expanding this game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep scores in a shelve (file, db) and notify the player when a new record is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with hints and bonuses: hints cost x points, give a bonus of y points, for example when a 7 letter word is created (complete draw exhausted).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a simple web, mobile app or pygame.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="scrabble"></category><category term="codechallenges"></category><category term="github"></category><category term="fork"></category><category term="learning"></category><category term="game"></category><category term="itertools"></category><category term="random"></category><category term="sets"></category></entry><entry><title>Twitter digest 2017 week 02</title><link href="https://pybit.es/twitter_digest_201702.html" rel="alternate"></link><published>2017-01-14T00:05:00+01:00</published><updated>2017-01-14T00:05:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-14:/twitter_digest_201702.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jakevdp:" target="_blank"&gt;@jakevdp:&lt;/a&gt; After a week using f-strings in Python 3.6, it's hard to remember life without them. The old way just seems...clunky
&lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820036347469713408" data-datetime="2017-01-13T22:34:35+00:00"&gt;January 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@KentBeck:" target="_blank"&gt;@KentBeck:&lt;/a&gt; I'll repeat, the courage of creation is making bad beginnings &lt;a href="https://t.co/qip20A2kid" title="https://t.co/qip20A2kid" target="_blank"&gt;https://t.co/qip20A2kid&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819981740836081664" data-datetime="2017-01-13T18:57:36+00:00"&gt;January 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; Cool presentation: 10 awesome features of Python that you can't use because you refuse to upgrade to Python 3 &lt;a href="https://t.co/3z‚Ä¶" title="https://t.co/3z‚Ä¶" target="_blank"&gt;https://t.co/3z‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819441364429668352" data-datetime="2017-01-12T07:10:20+00:00"&gt;January 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#8" target="_blank"&gt;#8&lt;/a&gt; Python gets Grumpy, avoiding burnout, Postman for API testing and more &lt;a href="https://t.co/rSLt7q7g8S" title="https://t.co/rSLt7q7g8S" target="_blank"&gt;https://t.co/rSLt7q7g8S&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819106605920702464" data-datetime="2017-01-11T09:00:07+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#94" target="_blank"&gt;#94&lt;/a&gt; Guarenteed packages via Conda and Conda-Forge &lt;a href="https://t.co/6pKEQ9t89J" title="https://t.co/6pKEQ9t89J" target="_blank"&gt;https://t.co/6pKEQ9t89J&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819106595531464705" data-datetime="2017-01-11T09:00:05+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/s5rEdcKZin" title="https://t.co/s5rEdcKZin" target="_blank"&gt;https://t.co/s5rEdcKZin&lt;/a&gt; talk about &lt;a href="https://twitter.com/search/#data" target="_blank"&gt;#data&lt;/a&gt; and &lt;a href="https://twitter.com/search/#nlp," target="_blank"&gt;#nlp,&lt;/a&gt; so cool we can watch all &lt;a href="https://twitter.com/search/#pycon" target="_blank"&gt;#pycon&lt;/a&gt; videos online, such a great way to learn&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819083179629936641" data-datetime="2017-01-11T07:27:02+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I love the key on max, min, sorted, so powerful and concise. Also using it in this week's coding challenge :) &lt;a href="https://t.co/vpL1R3bSIW" title="https://t.co/vpL1R3bSIW" target="_blank"&gt;https://t.co/vpL1R3bSIW&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819082820329017346" data-datetime="2017-01-11T07:25:36+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@getpy:" target="_blank"&gt;@getpy:&lt;/a&gt; Generators &lt;a href="https://t.co/vF2lHX3D6Q" title="https://t.co/vF2lHX3D6Q" target="_blank"&gt;https://t.co/vF2lHX3D6Q&lt;/a&gt; by the author of the fluent python. &lt;a href="https://twitter.com/search/#generators" target="_blank"&gt;#generators&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818951461782646788" data-datetime="2017-01-10T22:43:38+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@_ericelliott:" target="_blank"&gt;@_ericelliott:&lt;/a&gt; The best code is no code. Where there is no code, there are no bugs. No API to learn. No awkward UI. The best refactors a‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818898348312850433" data-datetime="2017-01-10T19:12:35+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TrendingGithub:" target="_blank"&gt;@TrendingGithub:&lt;/a&gt; pybites / challenges: Repo for our weekly challenges on pybit.es ‚òÖ28 &lt;a href="https://t.co/U1pFa7kucO" title="https://t.co/U1pFa7kucO" target="_blank"&gt;https://t.co/U1pFa7kucO&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818840038729535488" data-datetime="2017-01-10T15:20:53+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Iterators &lt;a href="https://t.co/n3MXkT0Gr3" title="https://t.co/n3MXkT0Gr3" target="_blank"&gt;https://t.co/n3MXkT0Gr3&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818744285180751873" data-datetime="2017-01-10T09:00:23+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;refactor ugly switch statement in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/2Plq0XHVAu" title="https://t.co/2Plq0XHVAu" target="_blank"&gt;https://t.co/2Plq0XHVAu&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818734200035614720" data-datetime="2017-01-10T08:20:19+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Events in 2017, Need your help! &lt;a href="https://t.co/R70NVAZcBU" title="https://t.co/R70NVAZcBU" target="_blank"&gt;https://t.co/R70NVAZcBU&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://t.co/IjNPLwkmOh" title="https://t.co/IjNPLwkmOh" target="_blank"&gt;https://t.co/IjNPLwkmOh&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818539592022421505" data-datetime="2017-01-09T19:27:01+00:00"&gt;January 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@fullstackpython:" target="_blank"&gt;@fullstackpython:&lt;/a&gt; Working with APIs the Pythonic Way &lt;a href="https://t.co/TQyVxcO5yw" title="https://t.co/TQyVxcO5yw" target="_blank"&gt;https://t.co/TQyVxcO5yw&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818537299629764609" data-datetime="2017-01-09T19:17:54+00:00"&gt;January 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@gcosma1:" target="_blank"&gt;@gcosma1:&lt;/a&gt; The entire Python Data Science Handbook by &lt;a href="https://twitter.com/@jakevdp" target="_blank"&gt;@jakevdp&lt;/a&gt; is openly published as Jupyter notebook &lt;a href="https://t.co/w7RKk5IaC8" title="https://t.co/w7RKk5IaC8" target="_blank"&gt;https://t.co/w7RKk5IaC8&lt;/a&gt; &lt;a href="https://t.‚Ä¶" title="https://t.‚Ä¶" target="_blank"&gt;https://t.‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817746028560584705" data-datetime="2017-01-07T14:53:40+00:00"&gt;January 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="data science"></category><category term="challenges"></category><category term="APIs"></category><category term="conda"></category><category term="3.6"></category></entry><entry><title>Code Challenge 01 - Word Values Part I - Review</title><link href="https://pybit.es/codechallenge01_review.html" rel="alternate"></link><published>2017-01-13T12:40:00+01:00</published><updated>2017-01-13T12:40:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-13:/codechallenge01_review.html</id><summary type="html">&lt;p&gt;Wow! We have been amazed by the great response on &lt;a href="https://github.com/pybites/challenges"&gt;github&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;HN&lt;/a&gt;. It's Friday so we review the code challenge of this week. We describe our learning and a possible solution. We will also digest comments left on the &lt;a href="http://pybit.es/codechallenge01.html"&gt;Monday post&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Thanks for coding with us!&lt;/h2&gt;
&lt;p&gt;Wow! We have been amazed by the great response on &lt;a href="https://github.com/pybites/challenges"&gt;github&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;HN&lt;/a&gt;. It's so cool to see &lt;a href="https://github.com/pybites/challenges/network/members"&gt;many developers&lt;/a&gt; jump on this :) &lt;/p&gt;
&lt;p&gt;This is awesome!&lt;/p&gt;
&lt;p&gt;&lt;img alt="awesome response on github, 70 forks as of this writing" src="https://pybit.es/images/awesome-response.png"&gt;&lt;/p&gt;
&lt;p&gt;It's Friday so we review the code challenge of this week. We describe our learning, a possible solution. We will also digest comments left on the &lt;a href="http://pybit.es/codechallenge01.html"&gt;Monday post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Process and learning&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Julian&lt;/h3&gt;
&lt;p&gt;It's funny, going into this challenge I actually thought it was going to be easy! I was wrong!
The concept was simple enough and I had a decent idea as to how I was going to write the program. I hit a wall however, when I realised I had to code my answer within the framework of the unittest. &lt;/p&gt;
&lt;p&gt;As a newbie programmer, having to almost "restrict" my code to work with the unittest was quite difficult.
Furthermore, working with the external data.py file also added a little complexity. I'm definitely used to having all data and variables located in the local file I'm working on.&lt;/p&gt;
&lt;p&gt;Probably the biggest pain point was trying to work with the LETTER_SCORES dict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LETTER_SCORES = {letter: score for score, letters in scrabble_scores
                              for letter in letters.split()}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The for loop within the dict threw me off completely and I spent what felt like hours trying to make sense of it. It wasn't until Bob expanded it out into multiple lines of code that it finally made sense.&lt;/p&gt;
&lt;p&gt;On the flip side, I was pleasantly surprised with myself when I got the load_words() function working. I recalled Bob's comment on my code that I could use 'with' (context manager) to open an external file. Doing this made it much simpler.&lt;/p&gt;
&lt;p&gt;Working on the max_word_value() function was equally as satisfying as it was much more familiar coding ... but that may not be a good thing.&lt;/p&gt;
&lt;p&gt;In the end I wasn't actually able to get the program working. Not my proudest moment but definitely an eye opener as to how much further I have to go with my code. I'll hopefully have time this weekend to take another look - maybe a fresh look after a day off will highlight something I missed earlier!&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/hobojoe1848/challenges/tree/master/01"&gt;here&lt;/a&gt; if you're interested! Be gentle!&lt;/p&gt;
&lt;p&gt;Going forward with these challenges, I think we'll try and shake it up a little. Not make it "mandatory" to code the program within the unittest framework which should allow us to get a more diverse code base from the community.&lt;/p&gt;
&lt;p&gt;Overall, while difficult for me and even frustrating at times, I definitely enjoyed the challenge. It forced me to learn to read code I'd never seen before and rethink the way I write it myself.&lt;/p&gt;
&lt;h2&gt;Possible solution and Python idioms&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Bob&lt;/h3&gt;
&lt;p&gt;This was a good exercise. As Julian said we might leave out unittests next time to make it less stringent and make up other requirements like max LOC. We also will provide two template files: beginner (more hand-holding) and advanced (almost blank file). You will see it on Monday ...&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/bbelderbos/challenges/tree/solutions/01"&gt;here&lt;/a&gt;. Some comments:&lt;/p&gt;
&lt;h4&gt;load_words()&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def load_words():
    with open(DICTIONARY) as f:
        return [word.strip() for word in f.read().split()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, "with" is the way to go to open files. Initially I had return f.read().split() but then I saw the comment of &lt;a href="http://pybit.es/codechallenge01.html"&gt;sesh00&lt;/a&gt;: he used a list comprehension to make sure each word had whitespace stripped which is a good approach.&lt;/p&gt;
&lt;h4&gt;calc_word_value(word)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc_word_value(word):
    return sum(LETTER_SCORES.get(char.upper(), 0) for char in word)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dictionary. You can access values by using letter keys as LETTER_SCORES['A'] etc, but what if there is a non-valid character? There were two words with '-' in it so they would cause a KeyError. Using the dict get() method you can give it a default value of 0. Safety first: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Za&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; 
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Christophe&lt;/span&gt;
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pierre&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Christophe&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;listcomp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For another more verbose (cleaner?) way to write this see &lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scores = [LETTER_SCORES[letter] for letter in letters 
            if letter in LETTER_SCORES.keys()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I use sum() to add up all letter values. You can give it a list comprehension but also a generator which is best practice (lazy loading):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# sum with list comprehension
&amp;gt;&amp;gt;&amp;gt; sum([LETTER_SCORES.get(c.upper(), 0) for c in word])
31
# or with a generator, just drop the []
&amp;gt;&amp;gt;&amp;gt; sum(LETTER_SCORES.get(c.upper(), 0) for c in word)
31
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can totally write just a for loop and sum to a total variable. And as a beginner I encourage you to actually do this to get a feel for how an iterator works internally.&lt;/p&gt;
&lt;h4&gt;max_word_value(words)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def max_word_value(words=None):
    return max(words or load_words(), key=lambda w: calc_word_value(w))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This might be advanced to a beginner. To pass the unittests you have to account for two scenarios: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A word list is given, if not load the default dictionary, I do this in one statement with or, using default arg None for words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a criteria for max.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The max builtin calculates the max of an iterator, very convenient here. The cool thing is that it takes a key optional argument (like the sorted() builtin) which you can give a function to 'max on'. &lt;/p&gt;
&lt;p&gt;In this case I don't want to max on for example len of word, but on the word value, so we re-use calc_word_value() here. For more details on this I recommend reading &lt;a href="https://dbader.org/blog/python-min-max-and-nested-lists"&gt;this great article&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Update 16th of Oct 2018:&lt;/strong&gt; this code got outdated, we later &lt;a href="https://github.com/pybites/challenges/blob/solutions/01/wordvalue.py"&gt;updated the solution&lt;/a&gt; to not use the lambda (thanks for the reminder comment =¬∫.¬∫=) because it is redundant here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def max_word_value(words=None):
    if words is None:
            words = load_words()
        return max(words, key=calc_word_value)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And even shorter is using this one-liner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def max_word_value(words=None):
    return max(words or load_words(), key=calc_word_value)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PyBites digest of comments on Monday's challenge post&lt;/h2&gt;
&lt;p&gt;Thanks for &lt;a href="http://pybit.es/codechallenge01.html#disqus_thread"&gt;your comments&lt;/a&gt;. We are really stoked to learn about all these different approaches. Also you cannot read enough other developers' code, it's a great way to learn fast!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We already mentioned &lt;a href="https://github.com/sesh/challenges/blob/master/01/wordvalue.py"&gt;Sesh' solution&lt;/a&gt;, similar to ours, yet still some minor differences / improvements. Queston for the comments (anybody?): words=load_words() as default arg to max_word_value(), probably not a problem here, but doesn't that fall under the &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;Mutable Default Arguments gotcha&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ukaratay/challenges/blob/master/01/wordvalue.py"&gt;ukaratay solution&lt;/a&gt; is also similar, but he uses upper() on the word = 1 call instead my multiple calls for each char = better. Tiny details but they matter when you add them up and when things scale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return sum(LETTER_SCORES.get(char, 0) for char in word.upper())
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/alhart2015/challenges/blob/master/01/wordvalue.py"&gt;alhart2015 solution&lt;/a&gt; is a great addition, specially max_word_value() has a longer format, probably easier to read to people just starting out in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;check out this notebook&lt;/a&gt;, Jeffrey James shared a complete Pandas solution. The cool thing about this approach is that it calculates the score for each dictionary word and loads it into a Pandas dataframe which he uses to show us the relationship between word length and score, interesting. Well done and thanks Jeffrey!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="HN"></category><category term="github"></category><category term="learning"></category><category term="max"></category><category term="generators"></category><category term="scrabble"></category><category term="refactoring"></category></entry><entry><title>5 cool things you can do with itertools</title><link href="https://pybit.es/itertools-examples.html" rel="alternate"></link><published>2017-01-12T23:55:00+01:00</published><updated>2017-01-12T23:55:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-12:/itertools-examples.html</id><summary type="html">&lt;p&gt;Itertools is a very useful module. In this short post I show some 5 examples how you can use it. Some of this stuff might be useful in next week's challenge ...&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is itertools?&lt;/h2&gt;
&lt;p&gt;Itertools is a stdlib module that provides functions that create &lt;a href="http://stackoverflow.com/questions/9884132/what-exactly-are-pythons-iterator-iterable-and-iteration-protocols"&gt;iterators&lt;/a&gt; "inspired by constructs from APL, Haskell, and SML". See &lt;a href="https://docs.python.org/3/library/itertools.html"&gt;the docs page&lt;/a&gt;, &lt;a href="https://pymotw.com/2/itertools/"&gt;pymotw&lt;/a&gt;, as well as &lt;a href="https://github.com/vterron/EuroPython-2016/blob/master/kung-fu-itertools.ipynb"&gt;this great EuroPython preso&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;5 cool things you can do with itertools&lt;/h2&gt;
&lt;p&gt;I created &lt;a href="https://github.com/pybites/blog_code/blob/master/notebooks/itertools.ipynb"&gt;this notebook&lt;/a&gt; so you can follow along. Below a summary:&lt;/p&gt;
&lt;h3&gt;1. Use product to get all combinations between two iterators&lt;/h3&gt;
&lt;p&gt;Common game techniques: build a card deck or roll two dices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="c1"&gt;# from Fluent Python&lt;/span&gt;
&lt;span class="n"&gt;ranks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;JQKA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;suits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;S D C H&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# spades diamonds clubs hearts&lt;/span&gt;
&lt;span class="c1"&gt;# but instead of double list comprehension, using product&lt;/span&gt;
&lt;span class="n"&gt;cards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ranks&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another use case: roll 2 dices (&lt;a href="http://stackoverflow.com/questions/3099987/generating-permutations-with-repetitions-in-python"&gt;SO is your friend&lt;/a&gt;): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dice = range(2, 7)
random.choice([p for p in itertools.product(dice, repeat=2)])

# output: 
(5, 2)
(2, 5)
(2, 5)
(6, 5)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Show a progress spinner for a console app&lt;/h3&gt;
&lt;p&gt;From &lt;a href="https://github.com/vterron/EuroPython-2016/blob/master/kung-fu-itertools.ipynb"&gt;before-mentioned EuroPython preso&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;spinner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Show an animated spinner while we sleep.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;symbols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-\|/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# &amp;#39;\r&amp;#39; is carriage return: return cursor to the start of the line.&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Please wait... &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# no newline&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# newline&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;spinner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Use dropwhile to get counts of &amp;gt;= n in a Counter dict&lt;/h3&gt;
&lt;p&gt;Given a books Counter object, get me books with &amp;gt;= 2 occurences. &lt;/p&gt;
&lt;p&gt;I needed this for my &lt;a href="http://bobbelderbos.com/2016/12/code-kata/"&gt;tools of titans kata&lt;/a&gt; to see which books got recommended more than once by Tim Ferriss' podcast guests. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_multiple_mentions(books, keep=2):
    for key, count in itertools.dropwhile(lambda key_count: key_count[1] &amp;gt;= keep, books.most_common()):
        del books[key]
    return books

# filters all books with count (occurence = 1) out:
Counter({&amp;#39;4-hour-workweek-escape-live-anywhere&amp;#39;: 2,
        &amp;#39;alchemist-paulo-coelho&amp;#39;: 2,
        &amp;#39;atlas-shrugged-ayn-rand&amp;#39;: 3,
        &amp;#39;black-swan-improbable-robustness-fragility&amp;#39;: 2,
        &amp;#39;checklist-manifesto-how-things-right&amp;#39;: 2,
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. Combinations and permutations&lt;/h3&gt;
&lt;p&gt;For the difference read &lt;a href="https://betterexplained.com/articles/easy-permutations-and-combinations/"&gt;this great explanation&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Given a list of friends how many pairs can be formed?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;friends = &amp;#39;bob tim julian fred&amp;#39;.split()
# as these are &amp;quot;Combinatoric generators&amp;quot; I consume them here for example purposes using list()
list(itertools.combinations(friends, 2))

# output:
[(&amp;#39;bob&amp;#39;, &amp;#39;tim&amp;#39;),
(&amp;#39;bob&amp;#39;, &amp;#39;julian&amp;#39;),
(&amp;#39;bob&amp;#39;, &amp;#39;fred&amp;#39;),
(&amp;#39;tim&amp;#39;, &amp;#39;julian&amp;#39;),
(&amp;#39;tim&amp;#39;, &amp;#39;fred&amp;#39;),
(&amp;#39;julian&amp;#39;, &amp;#39;fred&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How many 4 letter strings can you from 7 letters? (hint: upcoming challenge)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# = 840 (7 * 6 * 5 * 4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. Groupby to count amount of keys for specific value in dict&lt;/h3&gt;
&lt;p&gt;Count the number of keys for a value, for example count the number of users (keys) that have email as pref (value) in a user_prefs dict.&lt;/p&gt;
&lt;p&gt;This example is based on the one I found at &lt;a href="https://pymotw.com/2/itertools/"&gt;pymotw&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# set up dict
users = &amp;#39;tim bob julian sue fred frank maria&amp;#39;.split()
prefs = &amp;#39;email phone IM email F2F email phone&amp;#39;.split()
user_prefs = dict(zip(users, prefs))
user_prefs

user_prefs_sorted = sorted(user_prefs.items(), key=itemgetter(1))
for pref, users in itertools.groupby(user_prefs_sorted, key=itemgetter(1)):
    print(pref, list(map(itemgetter(0), users)))

#¬†output: 
F2F [&amp;#39;fred&amp;#39;]
IM [&amp;#39;julian&amp;#39;]
email [&amp;#39;frank&amp;#39;, &amp;#39;tim&amp;#39;, &amp;#39;sue&amp;#39;]
phone [&amp;#39;bob&amp;#39;, &amp;#39;maria&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other uses?&lt;/h2&gt;
&lt;p&gt;Where do you use itertools mostly for? Share your experience in the comments below ...&lt;/p&gt;</content><category term="iterators"></category><category term="itertools"></category><category term="tricks"></category><category term="generators"></category><category term="game"></category><category term="notebooks"></category><category term="permutations"></category></entry><entry><title>Create a Simple Web Scraper with BeautifulSoup4</title><link href="https://pybit.es/simplewebscraper.html" rel="alternate"></link><published>2017-01-11T13:00:00+01:00</published><updated>2017-01-11T13:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-11:/simplewebscraper.html</id><summary type="html">&lt;p&gt;Learn to create a simple web scraper in Python using BeautifulSoup4&lt;/p&gt;</summary><content type="html">&lt;p&gt;I absolutely loved the idea of web scraping when Bob explained what it was (it sounded so spy-like and hackery!). It did however sound like something that, coding-wise, was completely out of my grasp. Once I dove in and tried to create one though I realised it was actually quite simple!&lt;/p&gt;
&lt;h2&gt;Concept&lt;/h2&gt;
&lt;p&gt;Create a web scraper that probes a site for the latest headlines.&lt;/p&gt;
&lt;p&gt;For my example, I'm going to scrape &lt;a href="http://wowhead.com"&gt;wowhead.com&lt;/a&gt;, a World of Warcraft database site, for their latest news headlines.&lt;/p&gt;
&lt;p&gt;Head to the &lt;em&gt;Wowhead&lt;/em&gt; page and you'll see their home page is just a series of news/blog posts. What we want to do is pull the title of each blog post and output it to text.&lt;/p&gt;
&lt;p&gt;(You can follow along with this or, of course, you can use your own site).&lt;/p&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Decide on the site to scrape.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;Create a venv&lt;/a&gt; to run all of this up in. I created a directory called "wowhead" for this and created the venv in that:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# pwd
wowhead
# ls
venv    wowhead_scraper.py
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;pip install bs4 requests (Install the BeautifulSoup4 (bs4) and Requests modules)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Code&lt;/h2&gt;
&lt;p&gt;The final code for this simple scraper can be found in the &lt;a href="https://github.com/pybites/blog_code"&gt;PyBites Code Repo&lt;/a&gt;, subdirectory &lt;a href="https://github.com/pybites/blog_code/tree/master/BeautifulSoup"&gt;BeautifulSoup&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I've lumped everything under the main() function. This is a really simple program and I wanted to keep it as readable as possible, thus it's not all split into different functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;After the initial code setup of importing modules and defining main, the first task is to grab a copy of the site's html file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;URL = &amp;quot;http://www.wowhead.com&amp;quot;
header_list = []

def main():
    raw_site_page = requests.get(URL)
    raw_site_page.raise_for_status()  #Confirm site was pulled. Error if not
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;get&lt;/em&gt; function of the requests module allows us to pull the HTML data from the site. We assign this data to the variable &lt;em&gt;raw_site_page&lt;/em&gt;. (This is known as the &lt;strong&gt;response&lt;/strong&gt; object).&lt;/p&gt;
&lt;p&gt;As the comment implies, the &lt;em&gt;.raise_for_status()&lt;/em&gt; function checks to see if the data was pulled successfully. If, for example, your URL is incorrect, this will error your program out and tell you about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next, Beautiful Soup fun:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;soup = bs4.BeautifulSoup(raw_site_page.text, &amp;#39;html.parser&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code takes the Response object and reads it as plain text. BS4 parses it with the html parser and creates a &lt;strong&gt;Soup Object&lt;/strong&gt; which we're assigning to the variable &lt;em&gt;soup&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now the tricky part:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html_header_list = soup.select(&amp;#39;.heading-size-1&amp;#39;)
    for headers in html_header_list:
        print(headers)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to use the &lt;em&gt;.select()&lt;/em&gt; function within BS4 to find what we want in the site HTML code. This is where you'll need to view the page source of the site (&lt;a href="http://testingfreak.com/inspect-element-in-firefox-chrome-or-ie-browsers/"&gt;or use Inspect&lt;/a&gt;!) to find something unique about the data you want to pull.&lt;/p&gt;
&lt;p&gt;You can see that I've specified the CSS Element ".heading-size-1". On the &lt;em&gt;Wowhead&lt;/em&gt; page I found that each post heading contained this element and that it was unique to them as well.&lt;/p&gt;
&lt;p&gt;We then take this selected data and create &lt;em&gt;html_header_list&lt;/em&gt; with it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've added a for loop to print the contents of the list. This is where I got caught the first time. Run the program and you'll see something similar to this (showing first line only):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 wowhead_scraper.py 
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;heading-size-1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/patch-7-1-5-survival-guide&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Patch 7.1.5 Survival Guide: Class Guides, New Legendaries, Brawler&amp;#39;s Guild, Artifact Knowledge Catch Up and More!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's happening here is that I'm not only just getting the header of the post but also the URL assigned to by the "a href" HTML tag. We don't need this data for this exercise.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We could use regex to strop the URLs out but BS4 makes it easier. We can grab just the plain text used within the CSS element using .getText():&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html_header_list = soup.select(&amp;#39;.heading-size-1&amp;#39;)
    for headers in html_header_list:
        header_list.append(headers.getText())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using .getText() we can then pull the plain text and append it to the &lt;em&gt;header_list&lt;/em&gt; list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now if we iterate over &lt;em&gt;header_list&lt;/em&gt; we see just the data we want!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for headers in header_list:
        print(headers)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 wowhead_scraper.py 
Patch 7.1.5 Survival Guide: Class Guides, New Legendaries, Brawler&amp;#39;s Guild, Artifact Knowledge Catch Up and More!
Official Patch Notes for World of Warcraft 7.1.5
Kirin Tor Quest Fix, World Quest Reset in 7.1.5, Live Developer Q&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;A Thursday
The Story of Aviana - Lore Collaboration with Nobbel87
All The Demon Hunter Class and Legendary Changes in Patch 7.1.5
Wowhead Weekly #106 and Blizzard Gear Shop Diablo Sale
$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;More examples (Bob)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/blob/master/BeautifulSoup/scrabble_distribution.py"&gt;Here&lt;/a&gt; is another example how to scrape &lt;a href="http://scrabblewizard.com/scrabble-tile-distribution/"&gt;scrabblewizard.com&lt;/a&gt; to parse the html table that has the Scrabble tile distribution and load it into a data structure (list of named tuples).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/12/code-kata/"&gt;Titans books kata&lt;/a&gt; also used BeautifulSoup to scrape the page, see code &lt;a href="https://github.com/pybites/blog_code/blob/master/BeautifulSoup/titans_books.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Areas for Expansion&lt;/h2&gt;
&lt;p&gt;Again, this is web scraping at its simplest. There are heaps of improvements and additions that can be made with these coming to mind right away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pull the URL for each header and output that alongside the title.&lt;/li&gt;
&lt;li&gt;Automate the script to run (daily?) and store the output.&lt;/li&gt;
&lt;li&gt;Have the output emailed to you along with links to each post.&lt;/li&gt;
&lt;li&gt;Store the Request object in a local file so we don't have to keep making an HTML request every time we run the program.&lt;/li&gt;
&lt;li&gt;Store post headings in an external file to allow us to only send notifications when there's a &lt;em&gt;new&lt;/em&gt; post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a pretty satisfying project for me. Web scraping has endless possibilities - you just need to figure out what you want and from where!&lt;/p&gt;
&lt;p&gt;This example is as simple as they come but hopefully now you can see just how easy it really is.&lt;/p&gt;
&lt;p&gt;Oh and if anyone tries to say, "Isn't that what the RSS feed or Subscribe button is for?", ignore them. This is &lt;em&gt;way&lt;/em&gt; more satisfying!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="beautifulsoup"></category><category term="bs4"></category><category term="webscraping"></category><category term="namedtuples"></category></entry><entry><title>Beautiful, idiomatic Python</title><link href="https://pybit.es/beautiful-python.html" rel="alternate"></link><published>2017-01-10T09:00:00+01:00</published><updated>2017-01-10T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-10:/beautiful-python.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OSGv2VnC0go"&gt;Transforming Code into Beautiful, Idiomatic Python&lt;/a&gt; is a must-watch to write more Pythonic code. In this post some highlights.&lt;/p&gt;</summary><content type="html">&lt;div class="container"&gt;
&lt;iframe src="https://www.youtube.com/embed/OSGv2VnC0go" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;The slidedeck is &lt;a href="https://speakerdeck.com/pyconslides/transforming-code-into-beautiful-idiomatic-python-by-raymond-hettinger-1"&gt;here&lt;/a&gt;.
Thanks Jeff Paine for this awesome &lt;a href="https://gist.github.com/JeffPaine/6213790"&gt;set of notes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;When you see this, do that instead&lt;/h2&gt;
&lt;p&gt;A quick digest below. Note that Python3 takes some of these features to the next level, so switching from 2 to 3 is a good idea :)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use enumerate to loop over collections and indices, use reversed(collections) to loop backwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the zip built-in to loop over two collections: zip(collection1, collection2). To make a dict from two collections: dict(zip(names, colors)). Use &lt;a href="https://docs.python.org/3.7/library/itertools.html#itertools.zip_longest"&gt;zip_longest&lt;/a&gt; if the collections are not of the same length. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the sorted key argument to customize sort order of a collection, so to sort by dict value you can use: sorted(d.items(), key=lambda a: a[1])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use iter() if you need to call a function until a sentinel value, see a good example &lt;a href="http://amir.rachum.com/blog/2013/11/10/python-tips-iterate-with-a-sentinel-value/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The for / else construct can be useful to know if a loop made it to the end (that is no break was hit).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dicts: don't mutate a dictionary when looping over it! In Python3 dictionaries have &lt;a href="https://docs.python.org/3/library/stdtypes.html#dict-views"&gt;view objects&lt;/a&gt;: "The objects returned by dict.keys(), dict.values() and dict.items() are view objects. They provide a dynamic view on the dictionary‚Äôs entries, which means that when the dictionary changes, the view reflects these changes.". For Python2 use iteritems() which returns an iterator (faster).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use collections.defaultdict to prevent initializing keys manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use ChainMap to link (concatenate) dictionaries together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyword arguments can make a function more readable, same goes for the light-weight namedtuple (collections module).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unpacking: bob, julian = 'bob julian'.split(), or a variable swap is as easy as a, b = b, a (no temp variable).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use ''.join(collection) instread of concatenating a string in a loop (more efficient).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="http://pybit.es/collections-deque.html"&gt;deque&lt;/a&gt; if you need a stack / queue ('linked list') instead of a regular list ('array'). When you do somecollection.insert(0, 'value'), it is time to change to a deque structure and use somecollection.appendleft('value').&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use decorators to factor-out administrative logic, for example @cache, @timeit, etc. (use functools.lru_cache for caching starting 3.2).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the with statement (context manager) to open and (automatically) close files. Another use case is threading locks or more generically when you need to factor-out "temporary contexts".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generator expressions are faster, you can use them (instead of list comprehensions) in sum() / max() / min() to gain performance. Hard to beat this for compactness: sum(i**2 for i in range(10))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="pythonic"></category><category term="cleancode"></category><category term="collections"></category><category term="2vs3"></category><category term="namedtuples"></category><category term="decorators"></category><category term="contextmanagers"></category></entry><entry><title>Code Challenge 01 - Word Values Part I</title><link href="https://pybit.es/codechallenge01.html" rel="alternate"></link><published>2017-01-09T09:00:00+01:00</published><updated>2017-01-09T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-09:/codechallenge01.html</id><summary type="html">&lt;p&gt;Our first weekly code challenge is to calculate the (language) dictionary word that would have the most value in Scrabble. Enjoy and let us know if you like this format.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Welcome to PyBites Code Challenges&lt;/h2&gt;
&lt;p&gt;Starting today every Monday we release a code challenge here on our blog.
On Friday we publish one or more solutions.&lt;/p&gt;
&lt;p&gt;The goal is to have us and our readers work on the solution during the week.&lt;/p&gt;
&lt;p&gt;To keep it simple we don't accept pull-requests at this time.
Just &lt;a href="https://github.com/pybites/challenges"&gt;fork our repo&lt;/a&gt; and work on your solution locally.&lt;/p&gt;
&lt;p&gt;To have the tests pass import the right module, do this when you have a local clone of the fork:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;challenge_number&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;this &lt;span class="nv"&gt;week&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
$ cp name-template name.py
&lt;span class="c1"&gt;# code ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to share your solution just share your commit link in the comments of our Friday review post. 
(Monday post = questions / Friday post = solutions + reflection).&lt;/p&gt;
&lt;p&gt;Check &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;this link&lt;/a&gt; how to keep your fork in sync with our repo.&lt;/p&gt;
&lt;p&gt;Remember, we don't strive for the 'best' solution, it's not a competition.
We do of course strive to have good Pythonic solutions so any feedback is welcome, but do respect the newby / learner.
Again, learning more + better Python is the main objective. &lt;/p&gt;
&lt;p&gt;Finally we believe fixing code challenges is a very effective way to become a better programmer.&lt;/p&gt;
&lt;h2&gt;Ready for a code challenge? Read on ...&lt;/h2&gt;
&lt;p&gt;This week you will write a script to calculate the (language) dictionary word that would have the most value in Scrabble. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read in dictionary.txt (a copy of /usr/share/dict/words on my Mac) and calculate the word that has the most value in Scrabble based on LETTER_SCORES which is imported in wordvalue-template.py.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the full code challenge &lt;a href="https://github.com/pybites/challenges/tree/master/01"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will be a two-part code challenge. Next week you will expand on this building a simple command line game. Something like giving a user a bunch of letters and let him/her create a high-value word (like Scrabble but without the board).&lt;/p&gt;
&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges"&gt;Fork our repo&lt;/a&gt; and get coding ... have fun!&lt;/p&gt;
&lt;h2&gt;Like this idea?&lt;/h2&gt;
&lt;p&gt;Any feedback or comments are welcome below or &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;on HN&lt;/a&gt;. Thanks for trying!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;Bob + Julian &lt;/p&gt;</content><category term="scrabble"></category><category term="tdd"></category><category term="codechallenges"></category><category term="github"></category><category term="learning"></category></entry><entry><title>Twitter digest 2017 week 01</title><link href="https://pybit.es/twitter_digest_201701.html" rel="alternate"></link><published>2017-01-07T09:00:00+01:00</published><updated>2017-01-07T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-07:/twitter_digest_201701.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I got Python Tricks: The Book (Work-In-Progress) from &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; on &lt;a href="https://twitter.com/@Gumroad:" target="_blank"&gt;@Gumroad:&lt;/a&gt; &lt;a href="https://t.co/U54ZyzTEa0" title="https://t.co/U54ZyzTEa0" target="_blank"&gt;https://t.co/U54ZyzTEa0&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817635169213579264" data-datetime="2017-01-07T07:33:09+00:00"&gt;January 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dataelixir:" target="_blank"&gt;@dataelixir:&lt;/a&gt; Looking for data? Follow &lt;a href="https://twitter.com/@CoolDatasets" target="_blank"&gt;@CoolDatasets&lt;/a&gt; for curated datasets that are open and machine-readable.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817477174253023237" data-datetime="2017-01-06T21:05:20+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@codeorg:" target="_blank"&gt;@codeorg:&lt;/a&gt; Learning to code at age 56 :-) &lt;a href="https://t.co/qsY8Ydu8J8" title="https://t.co/qsY8Ydu8J8" target="_blank"&gt;https://t.co/qsY8Ydu8J8&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817443042823176193" data-datetime="2017-01-06T18:49:43+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pydatait:" target="_blank"&gt;@pydatait:&lt;/a&gt; The next PyData Italy will be again hosted by the Python Italian Conference &lt;a href="https://twitter.com/@pyconit" target="_blank"&gt;@pyconit&lt;/a&gt; in Florence &lt;a href="https://t.co/EfYhVamr3j" title="https://t.co/EfYhVamr3j" target="_blank"&gt;https://t.co/EfYhVamr3j&lt;/a&gt; &lt;a href="https://twitter.com/search/#pyd‚Ä¶" target="_blank"&gt;#pyd‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817356740253675520" data-datetime="2017-01-06T13:06:47+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; &lt;a href="https://twitter.com/search/#pythontip:" target="_blank"&gt;#pythontip:&lt;/a&gt; whenever you see range(len(fancy_list)), pause to consider which problem you're solving&lt;a href="https://t.co/hw6poTSJUv" title="https://t.co/hw6poTSJUv" target="_blank"&gt;https://t.co/hw6poTSJUv&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817354773292871680" data-datetime="2017-01-06T12:58:58+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The ultimate list of &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Podcasts" target="_blank"&gt;#Podcasts&lt;/a&gt; &lt;a href="https://t.co/fqPkqS3zva" title="https://t.co/fqPkqS3zva" target="_blank"&gt;https://t.co/fqPkqS3zva&lt;/a&gt; - nice list&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817280745861484544" data-datetime="2017-01-06T08:04:48+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@NicolasDular:" target="_blank"&gt;@NicolasDular:&lt;/a&gt; "It's really important to have hobbies other than writing code." &lt;a href="https://t.co/dmsAO8t9YH" title="https://t.co/dmsAO8t9YH" target="_blank"&gt;https://t.co/dmsAO8t9YH&lt;/a&gt; great post from &lt;a href="https://twitter.com/@kennethreitz" target="_blank"&gt;@kennethreitz&lt;/a&gt; ab‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817145648680144896" data-datetime="2017-01-05T23:07:59+00:00"&gt;January 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/szO1tTdMre" title="https://t.co/szO1tTdMre" target="_blank"&gt;https://t.co/szO1tTdMre&lt;/a&gt; good explanation of iterators and iterables&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817132674112516101" data-datetime="2017-01-05T22:16:25+00:00"&gt;January 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pythonbytes:" target="_blank"&gt;@pythonbytes:&lt;/a&gt; It's &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; &lt;a href="https://twitter.com/search/#7:" target="_blank"&gt;#7:&lt;/a&gt; Python 3.6 is out, Sanic is a blazing web framework, and failing open source infrastructure? &lt;a href="https://t.co/zAxKX5INNP" title="https://t.co/zAxKX5INNP" target="_blank"&gt;https://t.co/zAxKX5INNP&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816764531594657792" data-datetime="2017-01-04T21:53:33+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#93" target="_blank"&gt;#93&lt;/a&gt; Spreading Python through the sciences with Software Carpentry &lt;a href="https://t.co/38EBc45KL9" title="https://t.co/38EBc45KL9" target="_blank"&gt;https://t.co/38EBc45KL9&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816569887313117184" data-datetime="2017-01-04T09:00:06+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsafaribooks:" target="_blank"&gt;@newsafaribooks:&lt;/a&gt; Building RESTful Python Web Services &lt;a href="https://twitter.com/search/#PacktPublishing" target="_blank"&gt;#PacktPublishing&lt;/a&gt; &lt;a href="https://t.co/eBJ1Oqxvul" title="https://t.co/eBJ1Oqxvul" target="_blank"&gt;https://t.co/eBJ1Oqxvul&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816545953268305920" data-datetime="2017-01-04T07:25:00+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; &lt;a href="https://twitter.com/search/#pythontip:" target="_blank"&gt;#pythontip:&lt;/a&gt; Whenever you find yourself considering using a lambda in &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; think about whether you should make a named f‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816539053097185280" data-datetime="2017-01-04T06:57:35+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;One of my favorite programming quotes &lt;a href="https://twitter.com/search/#cleancode" target="_blank"&gt;#cleancode&lt;/a&gt; &lt;a href="https://t.co/qzDrzKgdq5" title="https://t.co/qzDrzKgdq5" target="_blank"&gt;https://t.co/qzDrzKgdq5&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816382171619454976" data-datetime="2017-01-03T20:34:12+00:00"&gt;January 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsafaribooks:" target="_blank"&gt;@newsafaribooks:&lt;/a&gt; Data Pipelines with Python &lt;a href="https://twitter.com/search/#InfiniteSkills" target="_blank"&gt;#InfiniteSkills&lt;/a&gt; &lt;a href="https://t.co/iXKS3GMrb6" title="https://t.co/iXKS3GMrb6" target="_blank"&gt;https://t.co/iXKS3GMrb6&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816170167575134208" data-datetime="2017-01-03T06:31:46+00:00"&gt;January 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/Dko7iUWysc" title="https://t.co/Dko7iUWysc" target="_blank"&gt;https://t.co/Dko7iUWysc&lt;/a&gt; Pybites weekly newsletter! Our latest posts on one handy page. Keep Calm and Code in &lt;a href="https://twitter.com/search/#Python!" target="_blank"&gt;#Python!&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/815853681648271360" data-datetime="2017-01-02T09:34:10+00:00"&gt;January 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;p&gt;Btw, if you are interested in making a Twitter digest yourself, you can use &lt;a href="http://projects.bobbelderbos.com/tweetdigest/index.php"&gt;this tool&lt;/a&gt; (yes ... php ... nice challenge to recreate this one in Django or so #TODO).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="data"></category><category term="iterators"></category><category term="pythontips"></category></entry><entry><title>Copy and Paste with Pyperclip</title><link href="https://pybit.es/pyperclip.html" rel="alternate"></link><published>2017-01-06T12:00:00+01:00</published><updated>2017-01-06T12:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-06:/pyperclip.html</id><summary type="html">&lt;p&gt;Use the Pyperclip module to copy and paste with the clipboard!&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick and easy one for you today.&lt;/p&gt;
&lt;p&gt;While I was working through &lt;em&gt;Automate the Boring Stuff&lt;/em&gt; (review &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;here&lt;/a&gt;) I experienced a few "this is AMAZING!" moments. One of which was when I discovered the Pyperclip module.&lt;/p&gt;
&lt;h2&gt;What is Pyperclip?&lt;/h2&gt;
&lt;p&gt;Pyperclip is a module you can import that allows you to copy and paste to and from the clipboard on your computer. It does this through the use of two functions: copy() and paste()... go figure!&lt;/p&gt;
&lt;p&gt;It's simple but man did it blow my mind!&lt;/p&gt;
&lt;h2&gt;Why so Awesome?!&lt;/h2&gt;
&lt;p&gt;Well...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I was still super new to Python so the idea that I could interact with the user to that level was insane to me. It was a new way of inputting data without actually asking for traditional "type this and hit enter" input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was exactly what I was looking for at the time! I wanted to automate the pasting of lists I had copied to the clipboard for a small tool I was writing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The exercise in &lt;em&gt;Automate the Boring Stuff&lt;/em&gt; had you paste() text from the clipboard into the program (ie, read in), manipulate said text, then copy() it back to the clipboard. In a split second you could insert a '*' in front of every line in a list! This opened my mind to a whole new way of thinking.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Okay enough talk. Let's get to it. Installation first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pip install pyperclip
#pip list
pip (9.0.1)
pyperclip (1.5.27)
setuptools (28.8.0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we import it into our code and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyperclip&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pyperclip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This is copied to the clipboard.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pyperclip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;This is copied to the clipboard.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Be warned though. Pyperclip copies and pastes just like anything else. That is, it doesn't get exclusive rights to the clipboard. The text you copy to the clipboard has every chance of being overwritten by anything else that happens to copy after your command has run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above example we copied to the clipboard and then instantly pasted. In most situations you'll want to paste what the &lt;em&gt;user&lt;/em&gt; has on their clipboard then manipulate that.&lt;/p&gt;
&lt;h2&gt;Another example&lt;/h2&gt;
&lt;p&gt;The author of the tool (Al Sweigart) shows some more use cases in &lt;a href="https://automatetheboringstuff.com/chapter6/"&gt;chapter 6&lt;/a&gt; of &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff&lt;/a&gt;, for example how to add bullets to wiki markup:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The bulletPointAdder.py script will get the text from the clipboard, add a star and space to the beginning of each line, and then paste this new text to the clipboard. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course the possibilities are endless. You could for example make a script that retrieves a link from the clipboard (I mean one you copied previously), retrieve the metadata for that link scraping it, and copying an enriched string (link + metadata) back to the clipboard. You could use this for example to (semi)auto-create posts to social media. You would use pyperclip for the get/put from/to clipboard.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Pyperclip really opened my eyes to the power of Python. Direct interaction with the user is awesome. &lt;/p&gt;
&lt;p&gt;However, it is scary to think just how easy it is to write to and from the users clipboard without their knowledge. These functions (as per anything) can be called without any user knowledge whatsoever. In a fraction of a second we can paste the output of their clipboard to a file of our choosing! It's creepy to think of how easily this can be used maliciously!&lt;/p&gt;
&lt;p&gt;That's coding though I guess! &lt;a href="https://youtu.be/b23wrRfy7SM?t=12"&gt;With great power...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category></entry><entry><title>Code Challenge Pilot - code review</title><link href="https://pybit.es/challenge_pilot_codereview.html" rel="alternate"></link><published>2017-01-05T09:00:00+01:00</published><updated>2017-01-05T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-05:/challenge_pilot_codereview.html</id><summary type="html">&lt;p&gt;In this post I review the code of challenge # 1 and refactor it to make it more Pythonic.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;First of all we have to praise Julian for learning by challenge, &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;submitting his code to github&lt;/a&gt; for review, starting out as a coder this takes tremendous courage. Quick round of applause please ...&lt;/p&gt;
&lt;p&gt;The flip-side though is that he will learn super fast his way, he is on his way to become a Python ninja :)&lt;/p&gt;
&lt;p&gt;As described in &lt;a href="http://pybit.es/js_time_scraper_ch.html"&gt;the previous article&lt;/a&gt; our first challenge was to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parse a copy of the loggedin &lt;a href="https://watchandcode.com/p/practical-javascript"&gt;practical JS course page&lt;/a&gt; calculating the total course time. We focussed on the html parsing, not scraping for now (we will use BeautifulSoup in a future post for sure!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The submitted code is &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Refactoring 1.0 - making it more Pythonic&lt;/h2&gt;
&lt;p&gt;Enter the code review.&lt;/p&gt;
&lt;p&gt;Github's &lt;a href="https://github.com/pybites/blog_code/commits/master/katas/course_time"&gt;history link&lt;/a&gt; lets you browse all the commits. This is very convenient and it shows the benefit (best practice) of making git commits as small as possible. This actually made it very easy to show all refactorings in chronological order, which I will do in a bit.&lt;/p&gt;
&lt;h3&gt;Before we dive in ...&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that starting 5a34e5a, I ran the script before each commit to see if my assert would work (regression). &lt;/p&gt;
&lt;p&gt;For convenience I use this shortcut in my .vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap ,p :w&amp;lt;CR&amp;gt;:!python3.6 %&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I love this shortcut. This way I can just press comma+p and it saves the script and runs it, this saves a lot of cycles as you do this over and over (run tests -&amp;gt; refactor -&amp;gt; run tests). &lt;/p&gt;
&lt;p&gt;Ah and yes, you &lt;a href="http://pybit.es/3.6_new.html"&gt;probably want to try 3.6 by now&lt;/a&gt; ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondly below could be picky (sorry), but I just want to point out as many things as possible to get the most out of this exercise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again see the &lt;a href="https://github.com/pybites/blog_code/commits/master/katas/course_time"&gt;history link&lt;/a&gt; or clone our &lt;a href="https://github.com/pybites/blog_code"&gt;blog_code repo&lt;/a&gt; and go through it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git log --oneline --reverse 66fb7c7fe..9876f968b
$ git show &amp;lt;commit-hash&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commit by commit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pybites/blog_code/commit/1f4dc534d43ec2c8582a890a15fb54486b58af39"&gt;1f4dc53 add jul challenge script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9dcbd27ed348a5d9da0f9e68e2164fcfb7a7a6cd"&gt;9dcbd27 added html to kata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First I added the script to our &lt;a href="https://github.com/pybites/blog_code/tree/master/katas"&gt;katas&lt;/a&gt; folder of our &lt;a href="https://github.com/pybites/blog_code"&gt;blog_code repo&lt;/a&gt; and the copy+paste of the page content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/ce498d71e0316b2ecf7c4c9884fb988ba3a32c5d"&gt;ce498d7 add assert for regression&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you refactor always have your tests at hand to make sure you don't mess anything up. This was just a small script so an assert was enough, whatever you use (unittest, pytest, ...) the tests need to perform fast, because you run them often (every step).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert str(total_hours) == &amp;#39;6.841944444444445&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(not the ideal to show a time delta, &lt;strong&gt;see update&lt;/strong&gt; towards the end ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/5a34e5a7d4ff1bf2251851aabc18c736a62aeecc"&gt;5a34e5a add calling code in main&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I added the &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;Top-level script environment&lt;/a&gt; to prevent the prints to run if the module is imported: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/dad9b5537a989a1aed02a61f685ead874e12794e"&gt;dad9b55 no need to pass file around, we have a constant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The search_file() method was called with an argument called 'file', but the constant 'HTML_FILE' was already defined, so could just use that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9d682fa943bf3ab461b6f48dba50b646491b12e5"&gt;9d682fa extract time_regex into constant&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was defined in search_file, being a constant I moved it to the top of the file and used PEP8's uppercase convention:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIME_REGEX = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/57334a65de1b8a01aa852f222141f9e36e0a558c"&gt;57334a6 use open in with block to auto-close file handle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;open(HTML_FILE).read() was used without close(). Best practice for reading files is using a with block (aka &lt;a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager"&gt;contextmanager&lt;/a&gt;): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(HTML_FILE) as f:
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/1147bd08424a1c638661bc840bf6851c8d579873"&gt;1147bd0 no need for range, can just loop over duration iterator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is probably an inherited C (or other language) style:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i in range(len(durations)):
    minutes, seconds = durations[i].strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No list indexing needed, in Python you can just iterate over a sequence very easily with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for mm_ss in durations:
    minutes, seconds = mm_ss.strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/bc6ee8a93a4f622687f8811ed571da1ef30c38c7"&gt;bc6ee8a can use shortcut += for summing&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_minutes = sum_minutes + int(minutes)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be shortened to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_minutes += int(minutes)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9ff89d123165167c0fde3f0163f1e54fca2f22c3"&gt;9ff89d1 better method name for getting all timestamps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I renamed method search_file() to get_all_timestamps() to better express what it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f5db0134ec7e614e9992720fca5dea5cd15f2e12"&gt;f5db013 no need to predeclare time_list at module level&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;time_list = [] declaration at the top was redundant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f86265222406cd83da4836e4207d99d4be9e9e2c"&gt;f862652 one return value from time_calculation, so convert all to seconds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;time_calculation() returned minutes and seconds, it's best practices to have one return value from a function, so I refactored it to count seconds. Of course I had to update the prints in &lt;strong&gt;main&lt;/strong&gt;, but this commit made the design cleaner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f86265222406cd83da4836e4207d99d4be9e9e2c"&gt;752394b match method name last refactoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Renamed time_calculation() to calc_duration() which I found a bit more concise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/026b9c545250247981382d4c31b6327b11113b94"&gt;026b9c5 update comments after last refactoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deleted 'min(s)' (minutes) from comments as we went for second counting only since commit f862652.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/e4fad918f34174d58889916a85cfe6972b3db467"&gt;e4fad91 strip comments as code is pretty self explanatory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Decided to strip comments completely because the code expresses well what it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/76d1b297ede0871fe285babe6e841dc532e62eaf"&gt;76d1b29 strivariable rename&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oops on the commit message. Renamed time_list to video_timings to better express what the variable stores.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/d026a7f0c7999821e07b16a46255207e6ccd0da4"&gt;d026a7f do adding/summing on one line&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_seconds += int(minutes) * SECONDS_IN_MIN
sum_seconds += int(seconds)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;was still happening twice, so made that a one-liner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_seconds += int(minutes) * SECONDS_IN_MIN + int(seconds)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/e45ce53e3407e25a648225829f2086e8a9020011"&gt;e45ce53 extract colon seperator into constant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I see any literal values, either numeric or strings, I extract them into constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MM_SS_SEP = &amp;#39;:&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9876f968b49745b599e4bc9716802677956c8b46"&gt;9876f96 removed whitespaces to comply with pep8 (used flake8 vim plugin)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lastly I ran flake8, which we mentioned &lt;a href="http://pybit.es/pep8.html"&gt;in our PEP8 article&lt;/a&gt;, to check for style violations, in this case only some whitespaces and a blank line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Julian, very well done on the challenge man, you are making good progress.&lt;/p&gt;
&lt;p&gt;I hope this inspires you and the readers to think about making code as Pythonic and clean as possible, because the extra time upfront saves a lot of time later on.&lt;/p&gt;
&lt;p&gt;Any feedback or questions use the comments below, or if code specific: use the comment box Github has for each commit. &lt;/p&gt;
&lt;p&gt;These refactorings are suggestions, I am learning too, so any improvements are welcome ...&lt;/p&gt;
&lt;h2&gt;About Code challenges&lt;/h2&gt;
&lt;p&gt;As &lt;a href="http://pybit.es/js_time_scraper_ch.html"&gt;Julian explained&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bob and I thought it'd be interesting to do some code challenges. That is, Bob specifies the challenge and I complete it. Bob then goes through my code and makes any necessary edits/improvements to make it more Pythonic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We plan to do a code challenge here once a week. Stay tuned.&lt;/p&gt;
&lt;p&gt;If you like this subscribe below of follow us on &lt;a href="https://twitter.com/pybites"&gt;Twitter&lt;/a&gt;. Thanks for reading.&lt;/p&gt;
&lt;h2&gt;Update 4th of Feb 2018&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;6.841944444444445&lt;/code&gt; is not the best way to show a timestamp. We updated the script to:
- have the &lt;code&gt;assert&lt;/code&gt; expect &lt;em&gt;6:50:31&lt;/em&gt;,
- use &lt;code&gt;divmod&lt;/code&gt; in our &lt;code&gt;calc_duration&lt;/code&gt; (OK, we also sneaked an &lt;em&gt;f-string&lt;/em&gt;, sorry we could not resist the temptation),
- added &lt;code&gt;calc_duration_improved&lt;/code&gt; to use &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;timedelta&lt;/code&gt; to calculate the total duration of the course.&lt;/p&gt;
&lt;p&gt;See the new revision &lt;a href="https://github.com/pybites/blog_code/blob/master/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="codechallenges"></category><category term="refactoring"></category><category term="code review"></category><category term="bestpractices"></category><category term="pythonic"></category><category term="git"></category><category term="Github"></category><category term="git flow"></category><category term="vim"></category><category term="assert"></category></entry><entry><title>Code Challenge Pilot - calculate total time JS course</title><link href="https://pybit.es/js_time_scraper_ch.html" rel="alternate"></link><published>2017-01-04T20:01:00+01:00</published><updated>2017-01-04T20:01:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-04:/js_time_scraper_ch.html</id><summary type="html">&lt;p&gt;Coding Challenge to create a web scraper that calculates the total time of a Javascript Course.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bob and I thought it'd be interesting to do some code challenges. That is, Bob specifies the challenge and I complete it. Bob then goes through my code and makes any necessary edits/improvements to make it more Pythonic.&lt;/p&gt;
&lt;p&gt;This will not only improve my Python and his code review skills but should also (hopefully!) provide you with something interesting or at least entertaining, to read.&lt;/p&gt;
&lt;p&gt;Feel free to give any feedback or improvements of your own in the comments below!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Bob discovered a free, online &lt;a href="https://watchandcode.com/courses/enrolled/practical-javascript"&gt;Javascript Course&lt;/a&gt; that he felt would be useful to us. On creating an account you're faced with the below course content list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JS Course Content Listing" src="images/js_course_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;The problem is that while each module/video displays its own duration, there's no course total time listed anywhere.&lt;/p&gt;
&lt;p&gt;Enter the Challenge: Create a web scraper that parses the page and then calculates the total course time.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;My&lt;/em&gt; final code can be located &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;). Update: our code review is &lt;a href="http://pybit.es/challenge_pilot_codereview.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Limitations and Complications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The main content page is behind a login. How the heck was I supposed to automate a scraper to log into the site with my creds and then pull the page?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I manually right-clicked and selected 'Save As' (on Windows) to save the page as an html file but when I tried to parse the file with BeautifulSoup I consistently hit an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;I initially wanted to use BeautifulSoup for this but as I kept hitting the aforementioned error and was running out of time (sleep!) I decided to keep it simple, albeit a little manual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I highlighted the entire page and saved it as plain text into a file titled "content.html".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The program is to be created in the same directory as the content.html file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Key Moments and Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The program could have easily been a single, huge block of code but I decided it was best to split each 'job' into a different function. There are 2 functions in total:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Read in the HTML file and search it using my time regex
def search_file(file)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Strip out the brackets and the colon to calculate the mins and seconds
def time_calculation(durations)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Creating the time search regex. This was the real challenge for me! While I'd used regex before it was definitely a challenge to search for a time string. The complexity was in coding the regex to search for both single minutes and double digit minutes, eg: 7:43 and 10:43. (As the times are all within ()s on the page, it was easier to include the braces in the regex):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;) #Creating the regex
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Stripping away the unecessary bits so I could work with the raw numbers. I used the strip() and split() methods for this. Admittedly, I was stoked when I realised I could use them both in one line of code (it's the small wins). This was done within a for loop to iterate over the list created by the regex search:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#For loop to strip brackets/colon and assign the mins/seconds
for i in range(len(durations)):
    minutes, seconds = durations[i].strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;The program eventually worked! I was able to calculate that the course took roughly 6.8hrs to complete.&lt;/p&gt;
&lt;h2&gt;Thoughts and Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I was bummed I didn't actually get the traditional web scrape working at the time. I would like to figure out where I went wrong with that so I can use BeautifulSoup to properly scrape the content.html file. (I'd already found the css I needed to search damnit!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are 30 lines of code in this program. I believe there are lines that can be refactored to do multiple assignments and calculations on a single line. Eg: The for loop that strips the brackets and colon also adds the mins and seconds - I'm sure it can be improved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion and Next Step&lt;/h2&gt;
&lt;p&gt;As annoyed as I got at certain points, I actually enjoyed this. Problem wise it's as simple as they come but it forced me to revisit the basics of regex and string manipulation.&lt;/p&gt;
&lt;p&gt;As I write this I'm getting github commit notifications of Bob refactoring and commenting so I know he's hard at work making my code as Pythonic as possible.
Tomorrow's post will be his feedback... go easy on me brother!&lt;/p&gt;
&lt;p&gt;(Again, find &lt;em&gt;my&lt;/em&gt; code for this challenge &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;. Update: our code review is &lt;a href="http://pybit.es/challenge_pilot_codereview.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="python"></category><category term="beginners"></category><category term="code"></category></entry><entry><title>A great book that makes algorithms accessible</title><link href="https://pybit.es/grokking_algorithms.html" rel="alternate"></link><published>2017-01-03T09:00:00+01:00</published><updated>2017-01-03T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-03:/grokking_algorithms.html</id><summary type="html">&lt;p&gt;I finished reading Grokking Algorithms, it's a very accessible resource for learning algorithms / data structures, highly recommended.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://amzn.to/2nFlsPg"&gt;Grokking algorithms&lt;/a&gt; is a unique gem. I discovered it on &lt;a href="https://talkpython.fm/episodes/show/82/grokking-algorithms-in-python"&gt;episode 82 of Talk Python&lt;/a&gt;. Knowing algorithms is fundamental for programming and problem solving. This book presents the key algorithms in an accessible way using great examples and &lt;a href="https://github.com/egonSchiele/grokking_algorithms/tree/master/images"&gt;hundreds of illustrations&lt;/a&gt; with &lt;a href="https://github.com/egonSchiele/grokking_algorithms"&gt;code samples in Python&lt;/a&gt;. Specially for self-taught programmers (like myself) this approach is awesome. After reading it I noted that I more easily grasp related topics in other books and I am now more confident picking up more advanced algorithms (which will be needed when learning ML).&lt;/p&gt;
&lt;h2&gt;Visual learning&lt;/h2&gt;
&lt;p&gt;This is a great summarizing video about some basic algorithms and the way the book teaches them:&lt;/p&gt;
&lt;div class="container"&gt;
&lt;iframe src="https://www.youtube.com/embed/oo_sb4luiPo" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;The examples in the book are easy to follow. For example to explain the performance between an array (Python's list) and linked list (Python's &lt;a href="http://pybit.es/collections-deque.html"&gt;deque&lt;/a&gt;) we are taken to the movies. What if you are 5 and a 6th friend joined? Possibly you have to relocate all 6 to find new seats if you are an array. Not so with a linked list, because the new friend can just sit 'anywhere' ( = linked to). This visualization stayed with me and I much better understand why inserts on arrays are slower.&lt;/p&gt;
&lt;p&gt;And it does matter when your data set grows. &lt;a href="http://amzn.to/2lxLQ91"&gt;Expert Python&lt;/a&gt; provides a nice snippet in chapter 12 that shows the performance of array (list) vs linked list (deque):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; \
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sequence=list(range(10000))&amp;#39;&lt;/span&gt; \
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sequence.insert(0, 0); sequence.pop(0)&amp;#39;&lt;/span&gt;
&lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.12&lt;/span&gt; &lt;span class="n"&gt;usec&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; \
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from collections import deque; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="mi"&gt;10000000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.204&lt;/span&gt; &lt;span class="n"&gt;usec&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another good example is binary search. Compared to selection sort the number of steps needed to search a (sorted) list goes from 4 billion down to 32. That demonstrates an important concept of Big O, quoting the book: "algorithm times are measured in terms of growth of an algorithm." Fascinating! &lt;/p&gt;
&lt;p&gt;See Python's &lt;a href="https://wiki.python.org/moin/TimeComplexity"&gt;TimeComplexity wiki&lt;/a&gt; for performance details on all stdlib collections.&lt;/p&gt;
&lt;h2&gt;Cool use cases&lt;/h2&gt;
&lt;p&gt;Some cool stuff you can do with basic algorithms: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hashtable lookups (dict, set) are O(1) so they are ideal for building search engines. On the mentioned episode of Talk Python Michael Kennedy explained he made the search for his show using dicts because of this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recusion provides elegant solutions. The book shows an example of finding a key in boxes, the recursive solution is much shorter and cleaner. And recursion at its simplest really comes down to &lt;a href="https://github.com/egonSchiele/grokking_algorithms/blob/master/03_recursion/python/01_countdown.py"&gt;just a few lines of code&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def countdown(i):
print i
# base case
if i &amp;lt;= 0:
    return
# recursive case
else:
    countdown(i-1)

countdown(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example to do a manual os.walk it only takes this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_files_in_dir(dirname=&amp;quot;.&amp;quot;):
    for file_name in os.listdir(dirname):
        abs_path = os.path.join(dirname, file_name)
        if os.path.isdir(abs_path):
            yield from get_files_in_dir(abs_path)
        else:
            yield abs_path
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wondered how Netflix recommends those cool movies to you? They are probably using the &lt;a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm"&gt;k-nearest neighbors algorithm&lt;/a&gt; (k-nn) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Graphs: what is the shortest path on Facebook between you and Brad Pitt? Similarly what is the shortest path from NY to LA? You can use &lt;a href="https://en.wikipedia.org/wiki/Dijkstra's_algorithm"&gt;Dijkstra's algorithm&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic programming is useful when you‚Äôre trying to optimize something given a constraint. The book starts out with the 'knapsack problem': maximizing the value of a set of goods to steal, being constrained by the size of the knapsack. &lt;/p&gt;
&lt;p&gt;Then it shows a simple implementation of suggesting similar words based on misspelled words (like Google). This is a bit more complex to grasp but very powerful. This chapter, as all the others, shows a lot of practical / real life use cases.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The explanation of Big O, array vs list and hash tables (meet Maggie!) are worth the price alone, but there is much more. If you are new to algorithms or need a refresher this is un unmissable book.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="algorithms"></category><category term="data structures"></category><category term="performance"></category><category term="collections"></category></entry><entry><title>5 min guide to PEP8</title><link href="https://pybit.es/pep8.html" rel="alternate"></link><published>2017-01-02T09:00:00+01:00</published><updated>2017-01-02T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-02:/pep8.html</id><summary type="html">&lt;p&gt;Today a post on PEP8, the Style Guide for Python Code&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;One of Guido's key insights is that code is read much more often than it is written. - PEP8&lt;/p&gt;
&lt;p&gt;There should be one‚Äîand preferably only one‚Äîobvious way to do it. - The Zen of Python&lt;/p&gt;
&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand. - Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After Julian's two recent style posts on &lt;a href="http://pybit.es/indentation_tips.html"&gt;indentation&lt;/a&gt; and &lt;a href="http://pybit.es/naming_conventions.html"&gt;naming convention&lt;/a&gt; a nice follow-up is &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;, the Style Guide for Python Code. Also a comment on Twitter caught my eye stating that even book authors do not always follow PEP8!&lt;/p&gt;
&lt;h2&gt;Why bother?&lt;/h2&gt;
&lt;p&gt;I think everybody writing code in Python should become familiar with PEP8 and use its guidelines rather sooner than later.&lt;/p&gt;
&lt;p&gt;It leads to more readable code which saves brain cycles and better maintainable code (= fewer bug).&lt;/p&gt;
&lt;p&gt;Also sharing a common coding style makes it easier to collaborate with others in the Python community.&lt;/p&gt;
&lt;p&gt;Of course there can be exceptions to the rule, PEP8 states: "do not break backwards compatibility just to comply with this PEP!" - Raymond Hettinger did a great talk on this: &lt;a href="https://www.youtube.com/watch?v=wf-BqAjZb8M"&gt;Beyond PEP 8&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Summary of the guidelines&lt;/h2&gt;
&lt;p&gt;A read that is aimed for '5 min' cannot have all, so I just summarize what I think is important, read the full spec for details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use 4 spaces per indentation level. Use spaces, not tabs. See &lt;a href="http://pybit.es/indentation_tips.html"&gt;our post&lt;/a&gt; for more on this, including recommended .vimrc settings. Overall watch your &lt;a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements"&gt;use of whitespace&lt;/a&gt;: this takes practice, but becomes habit/ automatic over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limit all lines to a maximum of 79 characters. Usually I have a script.py and test_script.py open, vertically alligned (vi -O file1 file2), keeping lines short makes this very convenient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imports I) be as specific as possible with your imports: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# don&amp;#39;t do: &lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;needed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="n"&gt;mechanism&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;prevent&lt;/span&gt; &lt;span class="n"&gt;exporting&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# do:&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="c1"&gt;# or:&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="c1"&gt;#¬†then prepends each method with module name: &lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imports II) absolute imports are recommended:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mypkg.sibling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;   
&lt;span class="c1"&gt;# over&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.sibling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imports III) split imports in stdlib - third party - application/library specific. For example our &lt;a href="https://github.com/pybites/blog_code/blob/master/twitter_bot/tweetbot.py"&gt;twitter bot&lt;/a&gt; followed this convention:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#¬†stdlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# pip installed&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;feedparser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;

&lt;span class="c1"&gt;# app modules&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comments that contradict the code are worse than no comments, so keep them up2date. Use inline comments sparingly. Of course good code is mostly self-documenting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use docstrings, they are a great aid for auto-documenting your project with tools like &lt;a href="http://www.sphinx-doc.org/en/1.5.1/"&gt;Sphinx&lt;/a&gt;. Here is the &lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;recommended syntax&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;Multi-line docstrings consist of a summary line just like a one-line docstring

Followed by a blank line, followed by a more elaborate description. 
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Naming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-public methods and instance variables start with a leading underscore: _helper_method(), although not enforced by the compiler, the reader knows this is an internal method, not to be called from outside of the class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you need to use a Python keyword append an underscore: str_ = 'bob'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You probably want to avoid single-char variables all together, but if you use them never use these easily confused chars: 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use CapWords for class names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use short, all-lowercase names for modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use lowercase and underscores for method names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constants are all uppercase, in our Twitter bot example: CONSUMER_KEY, CONSUMER_SECRET, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations"&gt;Programming Recommendations&lt;/a&gt; has some great tips: use ''.join(list) instead of string concatenation which is slow, use str.startswith/endswith instead of slicing (or more generically don't re-invent the wheel), boolean checks don't need == True/False, be consistent in return statements (even if returning None, use return None, not just return).&lt;/p&gt;
&lt;p&gt;Interesting is the part on exceptions: two common mis-uses are putting too much in the try block, or catching exceptions that are too generic, so train yourself to use specific exceptions: 'except SomeError' instead of the catch-all 'except'.&lt;/p&gt;
&lt;p&gt;Another interesting best practice is checking booleans, newcomers usually check False like 'if len(somelist) == 0', the Pythonic way is to just to use the fact that non-empty values are implicitly True, so in this case you could just do: 'if not somelist'.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tools to check for compliant PEP8&lt;/h2&gt;
&lt;p&gt;You can use &lt;a href="https://pypi.python.org/pypi/pep8"&gt;pep8&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pep8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our &lt;a href="https://github.com/pybites/blog_code/blob/master/pybites_digest/digest.py"&gt;digest.py&lt;/a&gt; seemed compliant but let's make some edits to see this checker in action. I changed spaces from 4 to 2 in a method, mis-aligned a multi-line statement, and removed a whitespace before '='. Of course pep8 complains: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pep8 digest.py 
digest.py:24:3: E111 indentation is not a multiple of four
digest.py:25:3: E111 indentation is not a multiple of four
digest.py:26:3: E111 indentation is not a multiple of four
digest.py:50:18: E225 missing whitespace around operator
digest.py:54:80: E501 line too long &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;83&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;79&lt;/span&gt; characters&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another tool is &lt;a href="https://pypi.python.org/pypi/flake8"&gt;flake8&lt;/a&gt; which is "a wrapper around these tools: PyFlakes, pycodestyle and Ned Batchelder‚Äôs McCabe script". It also has a nice &lt;a href="https://github.com/nvie/vim-flake8"&gt;integration in Vim&lt;/a&gt;: it runs the checks and presents them in a split window with line numbers, pretty convenient! &lt;/p&gt;
&lt;p&gt;&lt;img alt="flake 8 inside vim" src="https://pybit.es/images/flake8_vim.png"&gt;&lt;/p&gt;
&lt;p&gt;Btw I got this split window pressing ,f which I find easier on a Mac than F7, you can create a shortcut like this in your .vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autocmd FileType python map &amp;lt;buffer&amp;gt; ,f :call Flake8()&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another linter is &lt;a href="https://www.pylint.org"&gt;pylint&lt;/a&gt; but I have not used that. What is your favorite linter? &lt;/p&gt;
&lt;p&gt;&lt;img alt="pep8 meme" src="https://pybit.es/images/pep8_meme.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Wrapping it up&lt;/h2&gt;
&lt;p&gt;Always follow the PEP 8 style guide when writing Python code.&lt;/p&gt;
&lt;p&gt;Therefor keep a copy of PEP8 at hand and review it often to ingrain its recommendations. It makes code cleaner and collaboration easier. &lt;/p&gt;
&lt;p&gt;Using a linter tool is the best way to remind/ train yourself. Just google for plugins / integration with your favorite editor.&lt;/p&gt;
&lt;p&gt;Any feedback, questions or experiences, use the comments below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 25th of Oct 2017&lt;/strong&gt;: there is actually a very nice stylized presentation of PEP8, created by Kenneth Reitz: &lt;a href="http://pep8.org/"&gt;http://pep8.org/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="pep8"></category><category term="cleancode"></category><category term="guidelines"></category><category term="coding style"></category><category term="bestpractices"></category><category term="pythonic"></category><category term="vim"></category></entry><entry><title>Python Naming Conventions</title><link href="https://pybit.es/naming_conventions.html" rel="alternate"></link><published>2017-01-01T11:14:00+01:00</published><updated>2017-01-01T11:14:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-01:/naming_conventions.html</id><summary type="html">&lt;p&gt;Naming conventions can be tricky in Py. It's good to make sure we're all on the same page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I mentioned in my &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff review&lt;/a&gt;, I was led astray with regards to naming my functions and variables. That is, the book was telling me to use camelCase rather than the approved underscore method.&lt;/p&gt;
&lt;p&gt;After writing that article I decided to do some digging and I totally feel this needs a dedicated post!&lt;/p&gt;
&lt;h2&gt;The Consensus&lt;/h2&gt;
&lt;p&gt;A lot of people are divided on this topic! Doing a quick Google search found people who believe it doesn't matter what you use and those that would fight for their chosen method.&lt;/p&gt;
&lt;p&gt;The one thing everyone agrees on however is that you need to remain consistent. If you decide to use camelCase in your code, then do so for the entirety of your project, &lt;strong&gt;don't mix&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Quick Example&lt;/h2&gt;
&lt;p&gt;After Bob informed me that camelCase &lt;em&gt;wasn't&lt;/em&gt; the way to go, I went through and renamed all of my functions and variables using the underscore method. Here's a quick snippet in case you don't know what this all looks like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;happyNewYearEveryone():
    partyTime()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Underscore Method&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;happy_new_year_everyone():
    party_time()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sticking with PEP8&lt;/h2&gt;
&lt;p&gt;I did wonder where this guidance was coming from though. How did Bob know this was exactly how it should be?&lt;/p&gt;
&lt;p&gt;That was when I discovered the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8 Style Guide&lt;/a&gt; on python.org. If you have any doubts as to how your code should be laid out, reference this baby and you'll be on your way. &lt;/p&gt;
&lt;p&gt;What does it say about naming conventions? Quite a bit actually! For the pupose of this post there, here's what it says about Function names (also applicable to Methods and Instance Variables):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Function names should be lowercase, with words separated by underscores as necessary to improve readability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you check out the page for yourself you'll see further explanations on other naming convention options within Py.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Given the existence of the PEP8 standards, I don't think we really have a choice nor do I think there's any debate about how we should be naming variables and the like.&lt;/p&gt;
&lt;p&gt;Going forward I'll definitely be using these rules when working on my code. If I don't, feel free to correct me!&lt;/p&gt;
&lt;p&gt;Imagine a world where we all code to the same rules. Mmmm.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="python"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category></entry><entry><title>3.6 new features</title><link href="https://pybit.es/3.6_new.html" rel="alternate"></link><published>2016-12-31T11:39:00+01:00</published><updated>2016-12-31T11:39:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-31:/3.6_new.html</id><summary type="html">&lt;p&gt;Finally got a chance to look into Python 3.6's new features. In this post some highlights and pointers.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python 3.6 is out for over a week now. In this post some features and pointers. &lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html"&gt;What‚Äôs New In Python 3.6&lt;/a&gt; is worth reviewing to get a full overview.&lt;/p&gt;
&lt;p&gt;Getting it installed is supersimple. I am on Mac so I just installed the pkg file from the &lt;a href="https://www.python.org/downloads/"&gt;downloads page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Some highlights&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3.6 -VV &lt;span class="c1"&gt;# verbose version info&lt;/span&gt;
Python &lt;span class="m"&gt;3&lt;/span&gt;.6.0 &lt;span class="o"&gt;(&lt;/span&gt;v3.6.0:41df79263a11, Dec &lt;span class="m"&gt;22&lt;/span&gt; &lt;span class="m"&gt;2016&lt;/span&gt;, &lt;span class="m"&gt;17&lt;/span&gt;:23:13&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;4&lt;/span&gt;.2.1 &lt;span class="o"&gt;(&lt;/span&gt;Apple Inc. build &lt;span class="m"&gt;5666&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;dot &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String formatting: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; name = &amp;#39;bob&amp;#39;
&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;Hello %s&amp;#39; % name) # not pythonic
&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;Hello {}&amp;#39;.format(name)) # better
Hello bob
&amp;gt;&amp;gt;&amp;gt; print(f&amp;#39;Hello {name}&amp;#39;) # new in 3.6
Hello bob
&amp;gt;&amp;gt;&amp;gt; a = 2
&amp;gt;&amp;gt;&amp;gt; b = 4
&amp;gt;&amp;gt;&amp;gt; print(f&amp;#39;Look I even can do math: { 5 * (a + b) }&amp;#39;)
Look I even can do math: 30
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make big numbers more readable with underscores: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 1_000_000_000_000_000
1000000000000000
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type hints:&lt;/p&gt;
&lt;p&gt;In 3.5 you could do this already for methods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sys.version
&amp;#39;3.5.1 |Anaconda 4.0.0 (x86_64)| (default, Dec  7 2015, 11:24:55) \n[GCC 4.2.1 (Apple Inc. build 5577)]&amp;#39;
&amp;gt;&amp;gt;&amp;gt; def name(name: str) -&amp;gt; str:
...     return &amp;#39;My name is {}&amp;#39;.format(name)
... 
&amp;gt;&amp;gt;&amp;gt; name(&amp;#39;bob&amp;#39;)
&amp;#39;My name is bob&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can 'document' a standalone / instance variable's 'intent' as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; price : float = 9.99 # saves comments
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;'Intent' because nothing stops you from assigning another type: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; name : str = &amp;#39;bob&amp;#39;
&amp;gt;&amp;gt;&amp;gt; name = 2
&amp;gt;&amp;gt;&amp;gt; type(name)
&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As PEP 484 states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While these annotations are available at runtime through the usual &lt;strong&gt;annotations&lt;/strong&gt; attribute, no type checking happens at runtime . Instead, the proposal assumes the existence of a separate off-line type checker which users can run over their source code voluntarily. Essentially, such a type checker acts as a very powerful linter. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asyncio:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting with Python 3.6 the asyncio module is no longer provisional and its API is considered stable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have to yet work with asyncio, will do a future post. It has some nice coverage in &lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt;. &lt;a href="https://blog.jetbrains.com/pycharm/2016/12/python-3-6-a-quick-look/"&gt;This article&lt;/a&gt; by the PyCharm Team shows a nice refactoring using the new &lt;a href="https://docs.python.org/dev/whatsnew/3.6.html#pep-525-asynchronous-generators"&gt;Asynchronous Generators feature&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New dict implementation: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The memory usage of the new dict() is between 20% and 25% smaller compared to Python 3.5. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I also heard that new dicts keep their order, but read now that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you need order you can use &lt;a href="https://docs.python.org/3.6/library/collections.html#collections.OrderedDict"&gt;collections.OrderedDict&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New secrets module: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main purpose of the new secrets module is to provide an obvious way to reliably generate cryptographically strong pseudo-random values suitable for managing secrets, such as account authentication, tokens, and similar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good to know: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the pseudo-random generators in the random module should NOT be used for security purposes. Use secrets on Python 3.6+ and os.urandom() on Python 3.5 and earlier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course random is fine for simulation, but for applications using cryptography, you want to use secrets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The pyvenv script has been deprecated in favour of python3 -m venv (new to Virtual Envs, read &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;our article&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lot of improvements: again, worth reading through &lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html"&gt;the official release doc&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2 or 3?&lt;/h2&gt;
&lt;p&gt;Unless you are bound to Python 2.x due to environment / requirements, it is a really good time to switch to 3 now. 2.x is not actively developed anymore, all new cool stuff is added to 3 as you can see from this new big release. I use 3.x whenever I can!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="3.6"></category><category term="features"></category><category term="release"></category><category term="asyncio"></category><category term="formatting"></category><category term="typing"></category><category term="dicts"></category><category term="secrets"></category><category term="generators"></category><category term="readability"></category></entry><entry><title>Don't Let Indentation Catch You Out</title><link href="https://pybit.es/indentation_tips.html" rel="alternate"></link><published>2016-12-30T19:51:00+01:00</published><updated>2016-12-30T19:51:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-30:/indentation_tips.html</id><summary type="html">&lt;p&gt;Python indentation can be a cruel mistress. Let's get it right!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every programmer knows the frustration of writing code and hitting run only to have the compiler locate an error that you swear wasn't an error. (That is, I'm hoping it's not just me right?!)&lt;/p&gt;
&lt;p&gt;One of the first things to learn with Python is the absolute &lt;strong&gt;importance of indentation&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;What is Indentation?&lt;/h2&gt;
&lt;p&gt;Okay I'll keep this quick. It's just important that I cover this for anyone new to programming.&lt;/p&gt;
&lt;p&gt;Indentation is the white space at the front of your code. In all languages you'll see some sort of indentation such as this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the space in front of the second line.&lt;/p&gt;
&lt;h2&gt;Python's Love Affair With Indentation&lt;/h2&gt;
&lt;p&gt;It took me a day or two to fully grasp how dependent Python was on indentation. It's actually part of the beauty of the language. In most other languages you'll be wrapping your code within curly braces {} which can grow tiresome.&lt;/p&gt;
&lt;p&gt;Python, however, relies on indents. In the above code, the indent in front of line 2 tells the compiler that this code "belongs" to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;Check out the difference between Javascript and Python for the same code:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;how_to_be_cool() {&lt;/span&gt;
    &lt;span class="nx"&gt;wear_aviator_sunglasses&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much simpler in Python! Anything that's indented by the same amount under the function will be considered part of the function. The general rule of thumb is to use 4 spaces.&lt;/p&gt;
&lt;h2&gt;Hanging Indents for Nested Code&lt;/h2&gt;
&lt;p&gt;Indents for your nested statements is a little more flexible but there are definitely guidelines. Let's add a simple infinite while Loop to the above code and check out the indentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The while loop is now in the first indent of 4 spaces and the sunglasses function call is indented by a further 4 spaces to indicate that it's now in the loop.&lt;/p&gt;
&lt;p&gt;If I want to add code to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function after the while loop, I simply write code one indentation margin (4 spaces) "up". Check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
    time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple!&lt;/p&gt;
&lt;h2&gt;How Indents Can Bite You in the Butt&lt;/h2&gt;
&lt;p&gt;This brings me to one of my biggest learning points with Python. &lt;strong&gt;Always Watch Your Indents!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can't stress that enough. If you're not careful, you are bound to make mistakes and waste time debugging your code. Python expects proper marginalised indents. Unless you're continuing code from the previous line onto subsequent lines, your code needs to line up. If not, Python will most likely spit the dummy.&lt;/p&gt;
&lt;p&gt;Of course, you won't always do it intentionally. While editing and fine tuning my own code I was doing so without removing previous indents and spaces. As a result I was left with unexpected spaces that caused my code to error out.&lt;/p&gt;
&lt;p&gt;Here's an example of the above code with indentation that's just &lt;em&gt;slightly&lt;/em&gt; out of whack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool:
    while True:
        wear_aviator_sunglasses()
     time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may be quite noticeable here but when you've got 200 lines of code it'll be harder to catch. Of course, the compiler should tell you where the error is but it may not jump out at you at first. It sure didn't for me!&lt;/p&gt;
&lt;h2&gt;Tabs V Spaces&lt;/h2&gt;
&lt;p&gt;I initially wrote this post assuming that tabs were mandatory in Python (as that's how I keep my code clean in other languages). &lt;a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"&gt;The official Python Style Guide&lt;/a&gt; actually says otherwise! &lt;/p&gt;
&lt;p&gt;Python.org recommends that we use only spaces and never tabs (unless it's to keep consistent with code already with tabs). Always something new to learn!&lt;/p&gt;
&lt;h2&gt;Further Reading on Indentation&lt;/h2&gt;
&lt;p&gt;There's an extensive list of different indentation scenarios on the &lt;a href="https://www.python.org/dev/peps/pep-0008/#indentation"&gt;Python Style Guide&lt;/a&gt;. I found it to be quite enlightening! I recommend checking it out posthaste!&lt;/p&gt;
&lt;h2&gt;Vim Settings to Make Your Life Easier&lt;/h2&gt;
&lt;p&gt;For the Vim lovers out there, adding the following to your &lt;em&gt;.vimrc&lt;/em&gt; file will take care of a lot of your indentation woes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These settings will make the following 3 adjustments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change your tab to be only 4 spaces long instead of the usual 8.&lt;/li&gt;
&lt;li&gt;Limit the length of your lines to be 79 characters as per &lt;a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;Python specifications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Save your files in a unix format (helpful for github sharing/interactions etc).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks to RealPython.com for this info. They've actually got a heap of other handy settings for Vim + Python in their &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;original article&lt;/a&gt;. Definitely worth checking out!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For such a simple concept, indentation can be super complex which is why even the mighty Bob was caught out leaving only 2 spaces in his blocks of code (Sorry Bob!). I no longer feel bad for getting this wrong!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;edit Bob: I shamefully admit I used 2 spaces before, now that I comply with PEP8 using 4 spaces I am so much happier, and people reading my code probably too :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indentation is what makes Python beautiful but is also something that can ruin your afternoon so do yourself a favour, get those vim settings in place to automate it and keep it in the back of your mind that a stray space somewhere could be foiling your Python master plans!&lt;/p&gt;
&lt;p&gt;Remember, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category></entry><entry><title>Automate Tweeting: how to build a Twitterbot</title><link href="https://pybit.es/automate-twitter.html" rel="alternate"></link><published>2016-12-29T01:28:00+01:00</published><updated>2016-12-29T01:28:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-29:/automate-twitter.html</id><summary type="html">&lt;p&gt;In this post I will show you how we automate part of our Twitter posting using feedparser and tweepy.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I re-used my Twitter bot script of &lt;a href="http://bobbelderbos.com/2016/06/twitter-bot/"&gt;How to create a simple Twitter bot with Python&lt;/a&gt;. The main goal was to auto-tweet each new post of our blog, but while I was at it I decided to 'watch' a couple of feeds more. Follow &lt;a href="https://twitter.com/pybites"&gt;@pybites&lt;/a&gt; to get our updates and other good Python news / content ...&lt;/p&gt;
&lt;h1&gt;Getting ready&lt;/h1&gt;
&lt;p&gt;To auto-post to Twitter you need to get a Consumer Key/Secret and Access Token (Secret) from &lt;a href="https://apps.twitter.com"&gt;https://apps.twitter.com&lt;/a&gt;, my &lt;a href="http://bobbelderbos.com/2016/06/twitter-bot/"&gt;previous post&lt;/a&gt; explains this in more detail (it's pretty easy).&lt;/p&gt;
&lt;h2&gt;Feeds&lt;/h2&gt;
&lt;p&gt;Probably the best site to follow Python news feeds is &lt;a href="http://planetpython.org/"&gt;Planet Python&lt;/a&gt;, yet for this exercise I found reposting &lt;a href="http://planetpython.org/titles_only.html"&gt;20+ new links&lt;/a&gt; a day too much (not another spam bot please!), so I decided to watch these 7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# more feeds 
http://pybit.es/feeds/all.rss.xml
https://talkpython.fm/episodes/rss
https://pythonbytes.fm/episodes/rss
https://dbader.org/rss
https://www.codementor.io/python/tutorial/feed
http://feeds.feedburner.com/PythonInsider
http://www.weeklypython.chat/feed/
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I wanted to include &lt;a href="http://www.pythonweekly.com"&gt;Python Weekly&lt;/a&gt;, but could not find an RSS feed, probably because it's an email service. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Need to say it: &lt;a href="https://talkpython.fm/"&gt;Talk Python To Me&lt;/a&gt; is awesome, a podcast every Python developer should listen to!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;Code and install instructions (if you want to re-use this) are &lt;a href="https://github.com/pybites/blog_code/tree/master/twitter_bot"&gt;on Github&lt;/a&gt;. Basically I parse the feeds file above, use &lt;a href="https://pypi.python.org/pypi/feedparser"&gt;feedparser&lt;/a&gt; to get the articles for each feed that were published less than 24 hours ago, and use &lt;a href="http://www.tweepy.org"&gt;tweepy&lt;/a&gt; to post these to Twitter. &lt;/p&gt;
&lt;p&gt;I hide config.py in .gitignore and provide a blank config.py-example under version control. This is to hide the Twitter key/token stuff. As I run this in a daily cronjob, I turned on &lt;a href="https://docs.python.org/3.6/library/logging.html"&gt;logging&lt;/a&gt; for debugging.&lt;/p&gt;
&lt;p&gt;All together pretty impressive that you can do all this in just 67 LOC, mainly because we use &lt;a href="https://pypi.python.org"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Env / dependencies&lt;/h2&gt;
&lt;p&gt;I developed this in a &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtual environment&lt;/a&gt;, so a good practice I adopted is to ship the code with &lt;a href="https://github.com/pybites/blog_code/blob/master/twitter_bot/requirements.txt"&gt;a requirements file&lt;/a&gt; which I obtained with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can get this script running simply by cloning my env:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv venv &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[1] I was going to say: use pyvenv instead of virtualenv, but &lt;a href="https://docs.python.org/dev/whatsnew/3.6.html"&gt;since 3.6&lt;/a&gt; the recommended way is &lt;a href="https://docs.python.org/dev/whatsnew/3.6.html#id7"&gt;python3 -m venv&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;Here is a filter of this morning's run where we caught our last post, a new Talk Python podcast episode and a nice new post from Dan Bader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# grep posted pybites_twitter.log 
04:55:54 root         DEBUG    posted status Learning from Python mistakes http://pybit.es/py-mistakes.html #python to twitter
04:55:57 root         DEBUG    posted status #91 Top 10 Data Science Stories of 2016 https://talkpython.fm/episodes/show/91/top-10-data-science-stories-of-2016 #python to twitter
04:56:00 root         DEBUG    posted status The Difference Between ‚Äúis‚Äù and ‚Äú==‚Äù in Python https://dbader.org/blog/difference-between-is-and-equals-in-python #python to twitter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Automating Twitter :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="auto-tweets" src="https://pybit.es/images/auto-tweets.png"&gt;&lt;/p&gt;
&lt;h2&gt;Logging all-in&lt;/h2&gt;
&lt;p&gt;Another cool thing about the &lt;a href="https://docs.python.org/3.6/library/logging.html"&gt;logging module&lt;/a&gt; is that you get the imported packages logging for free. The following entries in my log files were not added by the code I wrote, they came from tweepy and/or feedparser and/or their dependencies!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# more pybites_twitter.log |cut -d&amp;#39; &amp;#39; -f2|sort|uniq -c |sort -nr
...
     15 requests_oauthlib.oauth1_auth  
     15 oauthlib.oauth1.rfc5849
      6 requests.packages.urllib3.connectionpool
      3 tweepy.binder
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Daily cronjob on server. I needed to export the site-packages path defined in PYTHONPATH:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0 2 * * * export PYTHONPATH=/path/to/python3.5/site-packages &amp;amp;&amp;amp; cd /path/to/twitter_bot &amp;amp;&amp;amp; /path/to/python3.5 tweetbot.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO: checkout if &lt;a href="https://docs.python.org/3.6/library/sched.html"&gt;Python's sched&lt;/a&gt; is a better alternative?&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Again, &lt;a href="https://pypi.python.org"&gt;using PyPI&lt;/a&gt; you save yourself a lot of coding (= time).&lt;/p&gt;
&lt;p&gt;In just 67 LOC I could built a complete Twitterbot that will auto-post our new blog posts as well as some other good Python blogs and podcasts. We might add a few more feeds but this will do for starters.&lt;/p&gt;
&lt;p&gt;Tests?! Yeah I know ... as I am writing this I am adding some tests using (learning) &lt;a href="http://doc.pytest.org/en/latest/"&gt;pytest&lt;/a&gt; (I used unittest so far). I will blog about this framework in an upcoming post ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Any suggestion of feedback use the comments below. Thanks for reading.&lt;/p&gt;
&lt;p&gt;And to get our latest posts and other good Python content follow &lt;a href="https://twitter.com/pybites"&gt;@pybites&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="twitterapi"></category><category term="tweepy"></category><category term="feedparser"></category><category term="rss"></category><category term="logging"></category><category term="podcasts"></category><category term="virtualenv"></category><category term="pyvenv"></category><category term="venv"></category><category term="news"></category><category term="3.6"></category></entry><entry><title>Learning from Python mistakes</title><link href="https://pybit.es/py-mistakes.html" rel="alternate"></link><published>2016-12-28T09:00:00+01:00</published><updated>2016-12-28T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-28:/py-mistakes.html</id><summary type="html">&lt;p&gt;In this post I summarize some great lessons Mike Pirnat shared in his free ebook 'How to make mistakes in Python'&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are some great &lt;a href="http://www.oreilly.com/programming/free/"&gt;free Python O'Reilly ebooks&lt;/a&gt;. In this post some useful tips from Mike Pirnat's &lt;a href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp?intcmp=il-prog-free-product-lgen_python_mistakes"&gt;How to make mistakes in Python&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtualenv / pyvenv&lt;/a&gt; to isolate your environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am still doing this: using the default REPL which leads to a lot of arrow-up repeating, use IPython or Jupyter Notebooks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always return a value from your functions / methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use PyLint (I am also relatively late in this, future post, promise ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read, use, abide by &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;, the Python style guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(not Python per se) name your variables wisely. There is a whole chapter in &lt;a href="http://amzn.to/2nhxa1d"&gt;clean code&lt;/a&gt; dedicated to this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't abuse lambdas, I almost only use them for &lt;a href="https://docs.python.org/3/howto/sorting.html"&gt;sorting&lt;/a&gt;. Ditto for list comprehension, too much nesting makes it hard to read them. Same goes for decorators, too much nesting makes for complex code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid long if/elif/ blocks, wrap options into classes or dicts, use Enums, look at the &lt;a href="http://refactoring.com/catalog/replaceConditionalWithPolymorphism.html"&gt;Replace Conditional with Polymorphism pattern&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave extensive getters and setters for Java, use properties (future post).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write small methods and (decoupled) modules, I wrote about this generically &lt;a href="http://bobbelderbos.com/2016/03/building-maintainable-software/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid the global scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be specific in your imports, from time import * is asking for trouble. Use time.time() instead and you won't have name clashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Explicit is better than implicit" (import this): don't use pass in except, handle the error (log it). And be specific what exception to catch (e.g. 'except IOError' is better than just 'except' which catches everything).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't re-invent the wheel: &lt;a href="https://pypi.python.org"&gt;PyPI&lt;/a&gt; is full of great modules you can pip install.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use mutable default values for methods, it leads to weird behavior because each time you call the method you expect a new object (say list), yet you modify an existing one, use None instead. This and other common gotchas are described &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overeager Code: keep your constuctors (dunder inits) methods lean, watch out for modules doing a lot of operations when being imported. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/tests/"&gt;Test your code!&lt;/a&gt; There are great frameworks apart from unittest, checkout &lt;a href="http://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging is cheap, &lt;a href="https://docs.python.org/3.5/library/logging.html"&gt;use it!&lt;/a&gt; Config is tricky (future post ...)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's thank Mike Pirnat for sharing all these great insights in this &lt;a href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp?intcmp=il-prog-free-product-lgen_python_mistakes"&gt;freely distributed ebook&lt;/a&gt; of just 80 pages.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="bestpractices"></category><category term="pep8"></category><category term="virtualenv"></category><category term="cleancode"></category><category term="logging"></category><category term="pytest"></category><category term="ebook"></category><category term="refactoring"></category><category term="gotchas"></category></entry><entry><title>How to create a nice-looking HTML page of your Kindle book highlights (notes)</title><link href="https://pybit.es/kindle-json-to-html.html" rel="alternate"></link><published>2016-12-27T00:10:00+01:00</published><updated>2016-12-27T00:10:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-27:/kindle-json-to-html.html</id><summary type="html">&lt;p&gt;In this post I share a simple script to convert Bookcision JSON into a HTML page for your blog.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Kindle notes&lt;/h2&gt;
&lt;p&gt;I was looking at an effective way to organize my Kindle highlights. I started looking at parsing the Kindle's My Clippings.txt file. However I had not much luck with existing PyPi modules and it is a bit cumbersome to always have to manually copy it via USB cable.&lt;/p&gt;
&lt;h2&gt;Starting point: Cloud + Bookcision&lt;/h2&gt;
&lt;p&gt;Then I found a much better starting point: &lt;a href="https://kindle.amazon.com"&gt;https://kindle.amazon.com&lt;/a&gt; = cloud. OK, this only works for Kindle purchased books, but using Amazon's &lt;a href="https://www.amazon.com/gp/help/customer/display.html?nodeId=200911660"&gt;Whispersync&lt;/a&gt; really makes this convenient. Also, the Kindle site lets you filter / adjust your highlights and notes before exporting. &lt;/p&gt;
&lt;p&gt;For export I use the nice &lt;a href="http://www.norbauer.com/bookcision/"&gt;Bookcision JS bookmarklet&lt;/a&gt; which - when used in Chrome - gives you the ability to dowload the highlights JSON format.&lt;/p&gt;
&lt;h2&gt;JSON =&amp;gt; HTML&lt;/h2&gt;
&lt;p&gt;I wrote a script to convert the Bookcision JSON download into a static HTML page (for blog use, inspired by &lt;a href="https://sivers.org/book"&gt;Sivers&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/blog_code/tree/master/kindle_notes"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use json.loads(fh) to convert JSON into dict: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def load_json(json_file):
    with open(json_file) as f:
        return json.loads(f.read())
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/string.html#template-strings"&gt;Template strings&lt;/a&gt;: in &lt;a href="https://github.com/pybites/blog_code/blob/master/kindle_notes/templates.py"&gt;templates.py&lt;/a&gt; PAGE defines the whole page, I use embedded CSS to make this a standalone solution. QUOTE defines a list item (highlight). Variables are defined with $ so: $title, $author, etc. In the &lt;a href="https://github.com/pybites/blog_code/blob/master/kindle_notes/kindle_json2html.py"&gt;main script&lt;/a&gt; I can substitute these variable placeholders with a dict: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_highlights(highlights):
    for hl in highlights:
        yield QUOTE.safe_substitute({
            &amp;#39;text&amp;#39; : hl[&amp;#39;text&amp;#39;],
            &amp;#39;note&amp;#39; : &amp;#39; / note: &amp;#39; + hl[&amp;#39;note&amp;#39;] if hl[&amp;#39;note&amp;#39;] else &amp;#39;&amp;#39;,
            &amp;#39;url&amp;#39; : hl[&amp;#39;location&amp;#39;][&amp;#39;url&amp;#39;],
            &amp;#39;location&amp;#39;: hl[&amp;#39;location&amp;#39;][&amp;#39;value&amp;#39;],
        })
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the 'yield' makes get_highlights() a generator. If this is new, check out &lt;a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do"&gt;this SO thread&lt;/a&gt; about Iterables -&amp;gt; Generators -&amp;gt; Yield [1]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use list() to consume all generator's values in one go: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;highlights = get_highlights(content[&amp;#39;highlights&amp;#39;])
...
...
    &amp;#39;content&amp;#39;: &amp;#39;\n&amp;#39;.join(list(highlights)),
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can give the script one or more JSON files simply by using a slice on sys.argv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for json_file in sys.argv[1:]:
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So you can batch process JSON downloads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls *json
anything-you-want.json  arnold.json     choose-yourself.json    the-circle.json

$ python kindle_json2html.py *json
anything-you-want.html created
arnold.html created
choose-yourself.html created
the-circle.html created
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here is what an output looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="resulting html page" src="https://pybit.es/images/example-book-html.png"&gt;&lt;/p&gt;
&lt;p&gt;As the HTML contains everything you can just copy it to your blog, &lt;a href="http://bobbelderbos.com/books/ego-is-the-enemy.html"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;
&lt;p&gt;[1] Generators save memory by not materializing the values of an iterable in memory = better performance. Here we don't really need that, yet I stil find the yield syntax more elegant (it's shorter) than building and returning a local collection (list).&lt;/p&gt;</content><category term="kindle"></category><category term="Template strings"></category><category term="json"></category><category term="html"></category><category term="books"></category><category term="bookcision"></category><category term="generators"></category></entry><entry><title>A Quick Automate the Boring Stuff Review</title><link href="https://pybit.es/automate_the_boring_stuff_review.html" rel="alternate"></link><published>2016-12-26T23:00:00+01:00</published><updated>2016-12-26T23:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-26:/automate_the_boring_stuff_review.html</id><summary type="html">&lt;p&gt;A quick review of the legendary free book, Automate the Boring Stuff.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When he convinced me to learn Python, Bob (co-creator of &lt;a href="http://www.pybit.es"&gt;pybit.es&lt;/a&gt;) recommended I start by reading the book &lt;a href="https://www.automatetheboringstuff.com"&gt;&lt;em&gt;Automate the Boring Stuff&lt;/em&gt;&lt;/a&gt; by Al Sweigart, which is free to read online.&lt;/p&gt;
&lt;p&gt;I loved it!&lt;/p&gt;
&lt;h2&gt;What Makes it Different?&lt;/h2&gt;
&lt;p&gt;Automate the Boring Stuff (ATBS) is unlike most other "learn to program books". As expected it starts by showing you the basics (Expressions, Data Types, etc) but very quickly moves into more exciting concepts such as Lists, Dicts and Regular Expressions.&lt;/p&gt;
&lt;p&gt;It's also worth noting that while these sections are purely around learning the concept of the chapter, Al does throw in a heap of exercises and challenges to keep things interesting. Not once did I find myself falling asleep while reading which for me is saying something!&lt;/p&gt;
&lt;p&gt;The book really comes into its own in Chapter 8. This is where Al stops with the raw learning and starts with the projects. Each chapter onward has at least one nifty little project to make.&lt;/p&gt;
&lt;p&gt;I don't mean a run of the mill Celsius to Fahrenheit converter but Web Scrapers and scripts to automatically resize images.
Actual &lt;em&gt;useful stuff&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Thus the name, Automate the Boring Stuff!&lt;/p&gt;
&lt;h2&gt;Easy to Follow&lt;/h2&gt;
&lt;p&gt;The most important quality of an educational book is its ability to teach. ATBS would be like your favourite teacher in school - it teaches you in such a way that hours, days, weeks later, you'll recall the exact sentence or problem mentioned in the book.&lt;/p&gt;
&lt;p&gt;I keep it handy as a reference tool at all times. It's that good!&lt;/p&gt;
&lt;p&gt;Al's language is easy to relate to as well. This isn't someone talking down to you, teaching you a hardcore curriculum. This is a bloke who clearly loves his code, enjoys python and legitimately wants to teach you.&lt;/p&gt;
&lt;p&gt;It's also super handy that he uses food as his variable names! Mmmm bacon...&lt;/p&gt;
&lt;h2&gt;Favourite Part&lt;/h2&gt;
&lt;p&gt;My favourite chapter in the book was the chapter on Web Scraping. I've wanted to create my own web scraper ever since I saw Bob create one of his own. (I was blown away!).&lt;/p&gt;
&lt;p&gt;I always figured it was something that was going to be super complex and way out of my league but not so! This chapter allowed me to create my own scraper to parse a site and find out when the latest episodes of my tv shows were being aired!&lt;/p&gt;
&lt;p&gt;It's such a useful tool with unlimited possibilites when you think about it!&lt;/p&gt;
&lt;h2&gt;Not-So Favourite Part&lt;/h2&gt;
&lt;p&gt;There's one thing that's irked me about ATBS. Al's naming convention differs greatly to what I've seen in current python circles.&lt;/p&gt;
&lt;p&gt;These days, best practice in python would be to create your multi-word named variables all in lower case with an underscore separating the words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# this_is_a_variable = []
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Al, however, teaches that you should be using Camel Case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# thisIsAVariable = []
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may not seem like a big deal but it totally ruined my day when I finally had the guts to show people some of my early code and there was a concesus that camelCase wasn't really used in python!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;GO. READ. THIS. BOOK. NOW!&lt;/p&gt;
&lt;p&gt;As mentioned before, it's available for free on &lt;a href="https://www.automatetheboringstuff.com"&gt;Al's website&lt;/a&gt; but can be purchased so you can show your support.&lt;/p&gt;
&lt;p&gt;I totally recommend this to anyone learning Python as well as the old hats. The projects alone are awesome and will inspire you to create other handy tools to make your life easier - and isn't that what coding's all about?&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="review"></category><category term="books"></category><category term="learning"></category><category term="beginners"></category><category term="automation"></category></entry><entry><title>Zip and ship, make an executable zipfile of your py project</title><link href="https://pybit.es/zip-and-ship.html" rel="alternate"></link><published>2016-12-25T09:06:00+01:00</published><updated>2016-12-25T09:06:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-25:/zip-and-ship.html</id><summary type="html">&lt;p&gt;In this post I show an example how you can distribute your code as an executable zipfile, a neat trick I discovered in Chapter 6 of The Hitchhiker's Guide to Python&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;First of all, new in version 3.5 is &lt;a href="https://docs.python.org/3/library/zipapp.html"&gt;zipapp&lt;/a&gt; which makes this easier. As not everybody is on this version yet, I will show the manual way to do this.&lt;/p&gt;
&lt;p&gt;We're going to use &lt;a href="https://github.com/pybites/blog_code/tree/master/pybites_digest"&gt;the code&lt;/a&gt; of our last post: &lt;a href="http://pybit.es/blog-digest.html"&gt;Get a weekly digest from a Pelican blog&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Step by step&lt;/h2&gt;
&lt;p&gt;OK here we go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog_code&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;
&lt;span class="n"&gt;Cloning&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zip-example&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Counting&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Unpacking&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Checking&lt;/span&gt; &lt;span class="n"&gt;connectivity&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites_digest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="c1"&gt;# Note that where I say python3 and pip3 for you it might be python and pip&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;
&lt;span class="n"&gt;Collecting&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;
&lt;span class="n"&gt;Successfully&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# edit the main script to use the locally installed package (doing &amp;#39;in place&amp;#39; edit)&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/import feedparser/import packages.feedparser as feedparser/g&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="c1"&gt;# zip it up&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;my_script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deflated&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__pycache__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__pycache__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;35.&lt;/span&gt;&lt;span class="n"&gt;pyc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deflated&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DESCRIPTION&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;INSTALLER&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;METADATA&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deflated&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deflated&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;RECORD&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deflated&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;top_level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deflated&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#!/usr/bin/env python3&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_script&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;my_script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_script&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="n"&gt;ug&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;my_script&lt;/span&gt;

&lt;span class="c1"&gt;# to prove it shows the feedparser package is not installed in my main py3 installation&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Anaconda&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dec&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Apple&lt;/span&gt; &lt;span class="n"&gt;Inc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="mi"&gt;5577&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;darwin&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;feedparser&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feedparser&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# yet it works with the zipped package :)&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;my_script&lt;/span&gt; 
&lt;span class="n"&gt;Get&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;weekly&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;a&lt;/span&gt; &lt;span class="nn"&gt;Pelican&lt;/span&gt; &lt;span class="nn"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pybit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;weekly&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;

&lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;useful&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pybit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;books2016&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;posted&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;useful&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# I can put it in my $HOME/bin now as well:&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;my_script&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites_digest&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;pybites_digest&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites_digest&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pybites_digest&lt;/span&gt;
&lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ship&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;pybit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ship&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;distribute&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;neat&lt;/span&gt; &lt;span class="n"&gt;trick&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;discovered&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Hitchhiker&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s Guide to Python&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Although I would not use this for bigger projects (&lt;a href="https://blogs.gnome.org/jamesh/2012/05/21/python-zip-files/"&gt;you lose debugging abilities&lt;/a&gt;), this is still a neat way to package up and ship scripts. Consumers don't have to worry about installing dependencies / doing any pre-work.&lt;/p&gt;</content><category term="zip"></category><category term="packaging"></category><category term="distribute"></category><category term="pip"></category></entry><entry><title>Get a weekly digest from a Pelican blog</title><link href="https://pybit.es/blog-digest.html" rel="alternate"></link><published>2016-12-24T15:40:00+01:00</published><updated>2016-12-24T15:40:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-24:/blog-digest.html</id><summary type="html">&lt;p&gt;In this post a script we use to get a weekly digest of our posts.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Prep work&lt;/h2&gt;
&lt;p&gt;We built this blog in Pelican, adding this in pelicanconf.py adds an RSS feed:&lt;/p&gt;
&lt;p&gt;FEED_RSS = 'feeds/all.rss.xml'&lt;/p&gt;
&lt;p&gt;And voila, after pushing this change we have &lt;a href="http://pybit.es/feeds/all.rss.xml"&gt;our RSS feed&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Script (use PyPi!)&lt;/h2&gt;
&lt;p&gt;The script is &lt;a href="https://github.com/pybites/blog_code/tree/master/pybites_digest"&gt;on github&lt;/a&gt; in our &lt;a href="https://github.com/pybites/blog_code"&gt;new blog repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No need to re-invent the wheel, PyPI (Python Package Index) has so much good stuff, feedparser is just what we need. It can take both a remote as well as local xml file, so you don't even need requests. &lt;/p&gt;
&lt;p&gt;This single line parses the feed into a comprehensive data structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feed = feedparser.parse(xml)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which you can then easily consume: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for article in feed[&amp;#39;entries&amp;#39;]:
    # ... filtering
    yield article
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing I had to add was some timestamp conversations/calculations to go x days back (the returned feed data has a convenient &lt;a href="https://docs.python.org/3.5/library/time.html#time.struct_time"&gt;time.struct_time field&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Mail digest as txt/html in a cronjob&lt;/h2&gt;
&lt;p&gt;I left this for sendmail which accepts a mailheader, see &lt;a href="http://stackoverflow.com/questions/24010230/mailx-send-html-message"&gt;here&lt;/a&gt;. So this is my weekly cronjob:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# html email 
0 7 * * 6 cat pybites_header &amp;lt;(python3 /path/to/pybites_digest/digest.py 7 1) | sendmail -t

# text version for copy+paste into social media (no need to cat header file)
10 7 * * 6 python3 /path/to/pybites_digest/digest.py 7 | mailx -s &amp;quot;Weekly PyBites digest (txt ed)&amp;quot; &amp;lt;email&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First arg is "days back" = 7 = one week / 2nd arg = html True&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might need to do a export PYTHONPATH=/path/to/python3.x/site-packages if you installed Python3 in your $HOME on a shared hosting provider. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The '&amp;lt;()' syntax is a nice way in Unix to join in output from a subprocess.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Don't miss any post&lt;/h2&gt;
&lt;p&gt;If you want to receive these weekly digests please subscribe to our blog or join our &lt;a href="https://www.facebook.com/groups/1305028816183522/"&gt;FB group&lt;/a&gt;.&lt;/p&gt;</content><category term="pelican"></category><category term="feedparser"></category><category term="rss"></category></entry><entry><title>2016 py articles and useful books</title><link href="https://pybit.es/py-articles-books2016.html" rel="alternate"></link><published>2016-12-23T00:31:00+01:00</published><updated>2016-12-23T00:31:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-23:/py-articles-books2016.html</id><summary type="html">&lt;p&gt;Some of my Python articles I posted on my blog this year and useful books&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Posts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/07/writing-pythonic-code-pays-off/"&gt;Pythonic code pays off&lt;/a&gt;: shows a simple code example from less to more Pythonic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/06/python-tips/"&gt;Tips and tricks&lt;/a&gt;: some useful (staple) tricks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/12/code-kata/"&gt;A code kata&lt;/a&gt;: an example of scraping a web page using collections.Counter to count common book links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/06/twitter-bot/"&gt;Create a Twitter bot&lt;/a&gt;: for fun and non-profit, bots are cool :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/12/learning-flask-building-quote-app/"&gt;First Flask app&lt;/a&gt;: how I started learning Flask building upon an existing Flask project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/06/analyzing-brexit-data-with-pandas/"&gt;Brexit data analysis with Pandas&lt;/a&gt;: this post really got me into Pandas and matplotlib (data science). I detected some cool trends in the data, really enjoyed the process. The (Spanish translated) article got featured on &lt;a href="http://pybonacci.org"&gt;Pybonacci&lt;/a&gt;¬†as well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Book tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I learned a great deal from: &lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt; and &lt;a href="https://powerfulpython.com/store/powerful-python-book/"&gt;Powerful Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently I am enjoying / learning from &lt;a href="http://amzn.to/2lVphMx"&gt;Mastering Python&lt;/a&gt; and &lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker‚Äôs Guide to Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="pythonic"></category><category term="books"></category><category term="collections"></category><category term="tricks"></category><category term="tips"></category><category term="data science"></category><category term="matplotlib"></category><category term="pandas"></category></entry><entry><title>The Beauty of Python Virtualenvs</title><link href="https://pybit.es/the-beauty-of-virtualenv.html" rel="alternate"></link><published>2016-12-22T22:11:00+01:00</published><updated>2016-12-22T22:11:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-22:/the-beauty-of-virtualenv.html</id><summary type="html">&lt;p&gt;Python Virtualenvs are incredible yet sadly under utilised!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ever heard of a Python virtualenv? No? Neither had I, until I discovered them while following a video course on Python Flask.&lt;/p&gt;
&lt;p&gt;A virtualenv (AKA venv) is essentially a Virtual Machine (VM) or sandbox environment that runs an independent and untouched Python environment.
When you create and activate the venv you no longer have access to the main Python environment running on your system.&lt;/p&gt;
&lt;p&gt;The problem programmers have is that it can be hard to isolate problems in code when their primary environment is cluttered with imported modules and the like.
Best practice would be to create a venv within your project and use it to run your project.&lt;/p&gt;
&lt;h2&gt;Step by Step&lt;/h2&gt;
&lt;p&gt;Let's create a venv called "awesome-test". You'd preferably run the following commands in your project root dir:&lt;/p&gt;
&lt;h3&gt;Unix Commands&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# python3 -m venv awesome-test
# ls
awesome-test
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Windows Commands&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# python -m venv awesome-test
# dir
awesome-test
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;In Python 3, virtualenvs come installed by default. In Python 2.7 you install them with pip install virtualenv.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next step is to activate the venv.
Activating the venv puts you into a standalone Python instance that has pretty much nothing installed by default:&lt;/p&gt;
&lt;h3&gt;Unix Commands&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cd awesome-test
# ls
bin     include     lib     pyvenv.cfg
#
# source bin/activate
(awesome-test) #
(awesome-test) # echo YAY!
YAY!
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Windows Commands&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cd awesome-test
# dir
Include/    Lib/    pyvenv.cfg  Scripts/
# source Scripts/activate
(awesome-test) #
(awesome-test) # echo YAY!
YAY!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;(awesome-test)&lt;/em&gt; tag preceding your shell prompt indicates you're now in the venv.
Now list out the modules installed in this python instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# pip list
pip (9.0.1)
setuptools (28.8.0)
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you've been using Python already, you'll know that your main env would have a boat load of modules installed. It's nice to be able to run from a clean slate when desiging new code!&lt;/p&gt;
&lt;p&gt;You can now play around and install whatever the heck you want without having to worry about corrupting or screwing up your primary environment. All modules installed in this venv will remain local to the venv.&lt;/p&gt;
&lt;p&gt;When you're done using the venv you then exit (deactivate) it using the deactivate command:&lt;/p&gt;
&lt;h3&gt;Unix Command&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(awesome-test) # deactivate
# 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Windows Command&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(awesome-test) # Scripts/deactivate
#
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note: All of changes you made in the venv will NOT be lost. It's all stored safely within the venv.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The seasoned veteran out there will surely read this and call me a noob... and they'd be right! It's exactly why I'm so stoked to have discovered venvs!&lt;/p&gt;
&lt;p&gt;If you're not using virtualenvs yet, install the package and give it a whirl.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="pip"></category><category term="virtualenv"></category><category term="venv"></category></entry><entry><title>Read the stdlib: deque</title><link href="https://pybit.es/collections-deque.html" rel="alternate"></link><published>2016-12-21T00:05:00+01:00</published><updated>2016-12-21T00:05:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-21:/collections-deque.html</id><summary type="html">&lt;p&gt;Use collections.deque to rotate letters in string (or elements in list). It has a native method which performs faster too.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Deque&lt;/h2&gt;
&lt;p&gt;From the &lt;a href="https://docs.python.org/2/library/collections.html#collections.deque"&gt;stdlib docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Coincidence: I was brainstorming how to rotate letters and independently I found the solution reading about deque later in the evening (see further down).&lt;/p&gt;
&lt;h2&gt;Rotate without deque&lt;/h2&gt;
&lt;p&gt;One solution I found on Google / Stackoverflow shows a reasonable way to go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def rotate(strg,n):
...     return strg[n:] + strg[:n]
... 
&amp;gt;&amp;gt;&amp;gt; assert(rotate(&amp;#39;hello&amp;#39;, 2) == &amp;#39;llohe&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; assert(rotate(&amp;#39;hello&amp;#39;, -2) == &amp;#39;lohel&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deque 2 birds: better performance and native rotate method&lt;/h2&gt;
&lt;p&gt;But using a list is not the most efficient way - see &lt;a href="https://wiki.python.org/moin/TimeComplexity"&gt;TimeComplexity&lt;/a&gt; [1]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Internally, a list is represented as an array; the largest costs come from growing beyond the current allocation size (because everything must move), or from inserting or deleting somewhere near the beginning (because everything after that must move). If you need to add/remove at both ends, consider using a collections.deque instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That led me to the collections.deque doc quotes at the start. Not only is it more efficient - O(1) vs O(n) - it also has a method that just does the rotation I wanted, so no need to define your own. &lt;/p&gt;
&lt;p&gt;Only note that that the pos/neg are the other way around this time:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rotate the deque n steps to the right. If n is negative, rotate to the left.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; s = &amp;#39;hello&amp;#39;
&amp;gt;&amp;gt;&amp;gt; d = deque(s)
&amp;gt;&amp;gt;&amp;gt; d
deque([&amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;])
#¬†2 to left
&amp;gt;&amp;gt;&amp;gt; d.rotate(-2)
&amp;gt;&amp;gt;&amp;gt; d
deque([&amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;])
# reset
&amp;gt;&amp;gt;&amp;gt; d.rotate(2)
&amp;gt;&amp;gt;&amp;gt; d
deque([&amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;])
# 2 to right
&amp;gt;&amp;gt;&amp;gt; d.rotate(2)
&amp;gt;&amp;gt;&amp;gt; d
deque([&amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;])
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reminder to self&lt;/h2&gt;
&lt;p&gt;Read code, read (stdlib) docs, and ask silly questions. "how do I ...?" makes you a better programmer. Even if you don't need it for anything specific you will find new ways, learn new tricks and those will make you better/faster when it does count.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] Here we also see the more expensive (and commonly used/needed) lookup 'x in s' for list = O(n) vs faster set/dict = O(1), see &lt;a href="https://en.wikipedia.org/wiki/Hash_table"&gt;hash table&lt;/a&gt;&lt;/p&gt;</content><category term="collections"></category><category term="data structures"></category><category term="performance"></category><category term="stdlib"></category><category term="deque"></category></entry><entry><title>How to get PyBites up and running on your machine</title><link href="https://pybit.es/install-me.html" rel="alternate"></link><published>2016-12-20T10:40:00+01:00</published><updated>2016-12-20T10:40:00+01:00</updated><author><name>Pybites</name></author><id>tag:pybit.es,2016-12-20:/install-me.html</id><summary type="html">&lt;p&gt;This is a short post for Julian to get this Pelican blog up and running on his system.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is also a useful ref for future collaborators ...&lt;/p&gt;
&lt;p&gt;We're open source right? ;)&lt;/p&gt;
&lt;h2&gt;Pybites install guide&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# we have a src, output and theme (Flex) repo, use --recursive to get all
$ git clone --recursive https://github.com/pybites/pybites.github.io-src pybites
$ cd pybites

# set up env and install dependencies
$ virtualenv venv (might need: virtualenv -p python3 venv)
$ source venv/bin/activate
$ pip install -r requirements.txt

#¬†add some content
$ cd content
$ vi new-blog-post.md ; wq!

#¬†check changes on localhost
$ cd ..
$ make html &amp;amp;&amp;amp; make serve

# push this new content to the parent -src repo
$ git add . 
$ git commit -m &amp;quot;my new blog post&amp;quot;
$ git push

# push the static blog change to the child -io repo
# wait: this is a duplicate step, I don&amp;#39;t like duplication!
# ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we have 2 repos: -src for code, -io for generated static content, ideally we want to automate the publishing to -io, so we can just focus on the main repo (-src). &lt;/p&gt;
&lt;p&gt;Here is where &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;git hooks&lt;/a&gt; come into play. cd into .git/hooks and add below script, name it "pre-push", update your WORKING_DIR and chmod 755 it ...&lt;/p&gt;
&lt;p&gt;UPDATE: we abondonded this hook, because it led to some conflicts / unnecessary work, not worth automating this step. We push manually to -src / -io these days. &lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category><category term="github"></category><category term="pip"></category><category term="virtualenv"></category><category term="git"></category></entry><entry><title>__init__</title><link href="https://pybit.es/hello-world.html" rel="alternate"></link><published>2016-12-19T10:26:00+01:00</published><updated>2016-12-19T10:26:00+01:00</updated><author><name>Pybites</name></author><id>tag:pybit.es,2016-12-19:/hello-world.html</id><summary type="html">&lt;p&gt;Welcome to our new PyBites blog where our goal is to further develop our Python skills and share what we learn.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to our PyBites blog hosted by &lt;a href="http://www.techmoneykids.com"&gt;Julian&lt;/a&gt; and &lt;a href="http://www.bobcodes.it"&gt;Bob&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read &lt;a href="http://pybit.es/pages/about.html"&gt;here&lt;/a&gt; how we started. You can contact us &lt;a href="http://pybit.es/pages/contact.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category><category term="blog"></category><category term="pybites"></category></entry></feed>